GO
if exists (select * From sys.objects where name = 'EC_Mst_Contract_Save')
Drop Proc dbo.EC_Mst_Contract_Save
GO
if exists (select * From sys.objects where name = 'FA_Opr_IBT_VoucherUnapprove_Save')
Drop Proc dbo.FA_Opr_IBT_VoucherUnapprove_Save
GO
if exists (select * From sys.objects where name = 'EC_FA_Approval_Fill_Grid')
Drop Proc dbo.EC_FA_Approval_Fill_Grid
GO
if exists (select * From sys.objects where name = 'EC_Mst_ContractFreightDetails_GetOtherChargesForFreightRateDetails')
Drop Proc dbo.EC_Mst_ContractFreightDetails_GetOtherChargesForFreightRateDetails
GO
if exists (select * From sys.objects where name = 'EC_Opr_GC_ConsigneeUpdate_ReadValues')
Drop Proc dbo.EC_Opr_GC_ConsigneeUpdate_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Master_Branch_Rate_Parameters_Save')
Drop Proc dbo.EC_Master_Branch_Rate_Parameters_Save
GO
if exists (select * From sys.objects where name = 'EC_FA_Fill_details_In_Grid')
Drop Proc dbo.EC_FA_Fill_details_In_Grid
GO
if exists (select * From sys.objects where name = 'Multiple_Items')
Drop function dbo.Multiple_Items
GO
if exists (select * From sys.objects where name = 'EC_RPT_Incoming_Trucks_Alert_Excel')
Drop Proc dbo.EC_RPT_Incoming_Trucks_Alert_Excel
GO
if exists (select * From sys.objects where name = 'EC_RPT_StockTransferRegister_Details_Excel')
Drop Proc dbo.EC_RPT_StockTransferRegister_Details_Excel
GO
if exists (select * From sys.objects where name = 'EC_Opr_DDC_Save')
Drop Proc dbo.EC_Opr_DDC_Save
GO
if exists (select * From sys.objects where name = 'EC_Opr_OctroiUpdate_ReadValues')
Drop Proc dbo.EC_Opr_OctroiUpdate_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_ActiveSeries_FillValues')
Drop Proc dbo.EC_Opr_ActiveSeries_FillValues
GO
if exists (select * From sys.objects where name = 'EC_Mst_ContractFreightGeneral_ReadValues')
Drop Proc dbo.EC_Mst_ContractFreightGeneral_ReadValues
GO
if exists (select * From sys.objects where name = 'FA_Rpt_Day_Book')
Drop Proc dbo.FA_Rpt_Day_Book
GO
if exists (select * From sys.objects where name = 'EC_Opr_Allocation_Get_Min_Max_Number')
Drop Proc dbo.EC_Opr_Allocation_Get_Min_Max_Number
GO
if exists (select * From sys.objects where name = 'FA_RPT_Fill_Location')
Drop Proc dbo.FA_RPT_Fill_Location
GO
if exists (select * From sys.objects where name = 'EC_Opr_ALS_ReadValues')
Drop Proc dbo.EC_Opr_ALS_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_AccountigVouchers_Approval')
Drop Proc dbo.EC_Opr_AccountigVouchers_Approval
GO
if exists (select * From sys.objects where name = 'Ec_Opr_GC_Fill_Location_For_Other_Agency')
Drop Proc dbo.Ec_Opr_GC_Fill_Location_For_Other_Agency
GO
if exists (select * From sys.objects where name = 'FA_Rpt_Ledger_Book')
Drop Proc dbo.FA_Rpt_Ledger_Book
GO
if exists (select * From sys.objects where name = 'EC_Opr_Attached_GC_ReadValues')
Drop Proc dbo.EC_Opr_Attached_GC_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_GDC_Save')
Drop Proc dbo.EC_Opr_GDC_Save
GO
if exists (select * From sys.objects where name = 'EC_opr_AUS_Get_Memo_GC_Details')
Drop Proc dbo.EC_opr_AUS_Get_Memo_GC_Details
GO
if exists (select * From sys.objects where name = 'FA_Rpt_Outstanding_Ledger')
Drop Proc dbo.FA_Rpt_Outstanding_Ledger
GO
if exists (select * From sys.objects where name = 'FA_Rpt_Outstanding_Ledger_BillWise_Details')
Drop Proc dbo.FA_Rpt_Outstanding_Ledger_BillWise_Details
GO
if exists (select * From sys.objects where name = 'EF_RPT_Truck_Loading_GRD')
Drop Proc dbo.EF_RPT_Truck_Loading_GRD
GO
if exists (select * From sys.objects where name = 'FA_Rpt_Outstanding_Payables_BillWise_Details')
Drop Proc dbo.FA_Rpt_Outstanding_Payables_BillWise_Details
GO
if exists (select * From sys.objects where name = 'EF_RPT_Truck_UnLoading_GRD')
Drop Proc dbo.EF_RPT_Truck_UnLoading_GRD
GO
if exists (select * From sys.objects where name = 'FA_Rpt_Outstanding_Receivables_BillWise_Details')
Drop Proc dbo.FA_Rpt_Outstanding_Receivables_BillWise_Details
GO
if exists (select * From sys.objects where name = 'EC_FA_Credit_Memo_Save')
Drop Proc dbo.EC_FA_Credit_Memo_Save
GO
if exists (select * From sys.objects where name = 'FA_Rpt_Outstanding_Receivables_Payables')
Drop Proc dbo.FA_Rpt_Outstanding_Receivables_Payables
GO
if exists (select * From sys.objects where name = 'Ec_Opr_GetBalanceArticles')
Drop function dbo.Ec_Opr_GetBalanceArticles
GO
if exists (select * From sys.objects where name = 'EC_FA_MR_Delivery_Save')
Drop Proc dbo.EC_FA_MR_Delivery_Save
GO
if exists (select * From sys.objects where name = 'EC_RPT_Delivery_Stock_List_GRD')
Drop Proc dbo.EC_RPT_Delivery_Stock_List_GRD
GO
if exists (select * From sys.objects where name = 'EC_FA_MR_Get_Details_for_Delivery')
Drop Proc dbo.EC_FA_MR_Get_Details_for_Delivery
GO
if exists (select * From sys.objects where name = 'Ec_Opr_GC_Get_Contract_Details')
Drop Proc dbo.Ec_Opr_GC_Get_Contract_Details
GO
if exists (select * From sys.objects where name = 'EC_Master_Branch_Rate_Parameters_ReadValues')
Drop Proc dbo.EC_Master_Branch_Rate_Parameters_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_PrintingStationary_FillValues')
Drop Proc dbo.EC_Opr_PrintingStationary_FillValues
GO
if exists (select * From sys.objects where name = 'Ec_Opr_Can_Edit_Cancel')
Drop function dbo.Ec_Opr_Can_Edit_Cancel
GO
if exists (select * From sys.objects where name = 'EC_Opr_AUS_Other_Agency_FillValues')
Drop Proc dbo.EC_Opr_AUS_Other_Agency_FillValues
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_GcTransBillAccountEffects')
Drop Proc dbo.EC_FA_Opr_GcTransBillAccountEffects
GO
if exists (select * From sys.objects where name = 'EC_Opr_Cancellation')
Drop Proc dbo.EC_Opr_Cancellation
GO
if exists (select * From sys.objects where name = 'VW_MR_Delivery_Octroi_Details')
Drop view dbo.VW_MR_Delivery_Octroi_Details
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_LHPOAccountEffects')
Drop Proc dbo.EC_FA_Opr_LHPOAccountEffects
GO
if exists (select * From sys.objects where name = 'EC_Opr_GC_Stock_Transfer_ReadValues')
Drop Proc dbo.EC_Opr_GC_Stock_Transfer_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_RPT_Crossing_Stock_List_GRD')
Drop Proc dbo.EC_RPT_Crossing_Stock_List_GRD
GO
if exists (select * From sys.objects where name = 'EC_FA_MR_Booking_Save')
Drop Proc dbo.EC_FA_MR_Booking_Save
GO
if exists (select * From sys.objects where name = 'EC_RPT_Del_Branchwise_Booking_Register_GRD')
Drop Proc dbo.EC_RPT_Del_Branchwise_Booking_Register_GRD
GO
if exists (select * From sys.objects where name = 'Ec_Opr_Get_Octroi_Amount_For_GC')
Drop function dbo.Ec_Opr_Get_Octroi_Amount_For_GC
GO
if exists (select * From sys.objects where name = 'EC_Opr_GDC_ReadValues')
Drop Proc dbo.EC_Opr_GDC_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_Rectification_GC_Save')
Drop Proc dbo.EC_Opr_Rectification_GC_Save
GO
if exists (select * From sys.objects where name = 'Is_Commodity_Tax_Applicable_For_GC')
Drop function dbo.Is_Commodity_Tax_Applicable_For_GC
GO
if exists (select * From sys.objects where name = 'EC_RPT_Transshipment_Stock_Excel')
Drop Proc dbo.EC_RPT_Transshipment_Stock_Excel
GO
if exists (select * From sys.objects where name = 'EC_Opr_SeriesGeneration_FillValues')
Drop Proc dbo.EC_Opr_SeriesGeneration_FillValues
GO
if exists (select * From sys.objects where name = 'Ec_Opr_GetBalanceActualWeight')
Drop function dbo.Ec_Opr_GetBalanceActualWeight
GO
if exists (select * From sys.objects where name = 'EC_Opr_GC_Save')
Drop Proc dbo.EC_Opr_GC_Save
GO
if exists (select * From sys.objects where name = 'Ec_Opr_Get_Service_Tax_For_GC')
Drop function dbo.Ec_Opr_Get_Service_Tax_For_GC
GO
if exists (select * From sys.objects where name = 'EC_FA_MR_Get_GC_Details')
Drop Proc dbo.EC_FA_MR_Get_GC_Details
GO
if exists (select * From sys.objects where name = 'EC_Opr_GC_ReadValues')
Drop Proc dbo.EC_Opr_GC_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_LHPOCrossingAccountEffects')
Drop Proc dbo.EC_FA_Opr_LHPOCrossingAccountEffects
GO
if exists (select * From sys.objects where name = 'Ec_Opr_Is_Service_Tax_Applicable_GC')
Drop function dbo.Ec_Opr_Is_Service_Tax_Applicable_GC
GO
if exists (select * From sys.objects where name = 'EC_Master_Client_ReadValues')
Drop Proc dbo.EC_Master_Client_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_CostCentre_Save')
Drop Proc dbo.EC_FA_Mst_CostCentre_Save
GO
if exists (select * From sys.objects where name = 'EC_RPT_Paid_Freight_Details_Grid')
Drop Proc dbo.EC_RPT_Paid_Freight_Details_Grid
GO
if exists (select * From sys.objects where name = 'EC_Opr_Set_Article_Effects')
Drop Proc dbo.EC_Opr_Set_Article_Effects
GO
if exists (select * From sys.objects where name = 'EC_RPT_MR_Booking_Delivery_Report')
Drop Proc dbo.EC_RPT_MR_Booking_Delivery_Report
GO
if exists (select * From sys.objects where name = 'EC_Master_Company_Fill_Values')
Drop Proc dbo.EC_Master_Company_Fill_Values
GO
if exists (select * From sys.objects where name = 'EC_RPT_Direct_Printing_Transport_Bill_Annexure_Reach')
Drop Proc dbo.EC_RPT_Direct_Printing_Transport_Bill_Annexure_Reach
GO
if exists (select * From sys.objects where name = 'EC_Opr_Set_Article_Reverse_Effects')
Drop Proc dbo.EC_Opr_Set_Article_Reverse_Effects
GO
if exists (select * From sys.objects where name = 'EC_RPT_ShortTermBillOutstanding_Report')
Drop Proc dbo.EC_RPT_ShortTermBillOutstanding_Report
GO
if exists (select * From sys.objects where name = 'EC_Opr_LHPO_GetTerminatedLHCLedger')
Drop Proc dbo.EC_Opr_LHPO_GetTerminatedLHCLedger
GO
if exists (select * From sys.objects where name = 'EC_Opr_LHPO_Save')
Drop Proc dbo.EC_Opr_LHPO_Save
GO
if exists (select * From sys.objects where name = 'EC_RPT_Door_Delivery_Expenses')
Drop Proc dbo.EC_RPT_Door_Delivery_Expenses
GO
if exists (select * From sys.objects where name = 'Incoming_Truck_Alert_Get_Wt_And_Article')
Drop function dbo.Incoming_Truck_Alert_Get_Wt_And_Article
GO
if exists (select * From sys.objects where name = 'GetVoucherDetailsXML')
Drop function dbo.GetVoucherDetailsXML
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_LedgerRecoAndBillDetails_Save')
Drop Proc dbo.EC_FA_Mst_LedgerRecoAndBillDetails_Save
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_Ledgers_Fill')
Drop Proc dbo.EC_FA_Mst_Ledgers_Fill
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_RecoAndBillDetails_ReadValues')
Drop Proc dbo.EC_FA_Mst_RecoAndBillDetails_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_DocumentSeries_FillValues')
Drop Proc dbo.EC_Opr_DocumentSeries_FillValues
GO
if exists (select * From sys.objects where name = 'EC_RPT_Direct_Printing_Transport_Bill_Reach')
Drop Proc dbo.EC_RPT_Direct_Printing_Transport_Bill_Reach
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_Voucher_ManualSave')
Drop Proc dbo.EC_FA_Mst_Voucher_ManualSave
GO
if exists (select * From sys.objects where name = 'EC_Opr_AUS_Other_Agency_GC_Ledger_Search')
Drop Proc dbo.EC_Opr_AUS_Other_Agency_GC_Ledger_Search
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_Voucher_Save')
Drop Proc dbo.EC_FA_Mst_Voucher_Save
GO
if exists (select * From sys.objects where name = 'EC_FA_AccountigVouchers_Approval_Save')
Drop Proc dbo.EC_FA_AccountigVouchers_Approval_Save
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_Voucher_SearchBills')
Drop Proc dbo.EC_FA_Mst_Voucher_SearchBills
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_Voucher_SearchLedger')
Drop Proc dbo.EC_FA_Mst_Voucher_SearchLedger
GO
if exists (select * From sys.objects where name = 'EC_FA_Mst_VoucherBillByBill_FillOnBillChanged')
Drop Proc dbo.EC_FA_Mst_VoucherBillByBill_FillOnBillChanged
GO
if exists (select * From sys.objects where name = 'EC_Opr_Fill_details_In_Grid')
Drop Proc dbo.EC_Opr_Fill_details_In_Grid
GO
if exists (select * From sys.objects where name = 'EC_RPT_Direct_Printing_MR_Excel')
Drop Proc dbo.EC_RPT_Direct_Printing_MR_Excel
GO
if exists (select * From sys.objects where name = 'AUS_OA_Dly_Rec_And_Pay')
Drop function dbo.AUS_OA_Dly_Rec_And_Pay
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_CreditMemoAccountEffects')
Drop Proc dbo.EC_FA_Opr_CreditMemoAccountEffects
GO
if exists (select * From sys.objects where name = 'EC_RPT_Direct_Printing_Transport_Bill_Nandwana')
Drop Proc dbo.EC_RPT_Direct_Printing_Transport_Bill_Nandwana
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_MRBookingAccountEffects')
Drop Proc dbo.EC_FA_Opr_MRBookingAccountEffects
GO
if exists (select * From sys.objects where name = 'EC_Opr_FromServiceLocationLHPO_Search')
Drop Proc dbo.EC_Opr_FromServiceLocationLHPO_Search
GO
if exists (select * From sys.objects where name = 'EC_RPT_Direct_Printing_MR_Nandwana')
Drop Proc dbo.EC_RPT_Direct_Printing_MR_Nandwana
GO
if exists (select * From sys.objects where name = 'EC_RPT_Incoming_Trucks_Has_Memo_For_Me')
Drop function dbo.EC_RPT_Incoming_Trucks_Has_Memo_For_Me
GO
if exists (select * From sys.objects where name = 'EC_Opr_AUS_Other_Agency_GC_Agency_Search')
Drop Proc dbo.EC_Opr_AUS_Other_Agency_GC_Agency_Search
GO
if exists (select * From sys.objects where name = 'EC_Opr_GC_Other_Agency_Get_Ledger')
Drop Proc dbo.EC_Opr_GC_Other_Agency_Get_Ledger
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_GcAccountEffects')
Drop Proc dbo.EC_FA_Opr_GcAccountEffects
GO
if exists (select * From sys.objects where name = 'Ec_Opr_GC_Allow_To_Rectify')
Drop Proc dbo.Ec_Opr_GC_Allow_To_Rectify
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_GcDeliveryAccountEffects')
Drop Proc dbo.EC_FA_Opr_GcDeliveryAccountEffects
GO
if exists (select * From sys.objects where name = 'EC_Opr_ToServiceLocationLHPO_Search')
Drop Proc dbo.EC_Opr_ToServiceLocationLHPO_Search
GO
if exists (select * From sys.objects where name = 'EC_RPT_Reserved_GC')
Drop Proc dbo.EC_RPT_Reserved_GC
GO
if exists (select * From sys.objects where name = 'is_transport_bill_for_octroi_prepared')
Drop function dbo.is_transport_bill_for_octroi_prepared
GO
if exists (select * From sys.objects where name = 'EC_FA_Opr_LocalCartageAccountEffects')
Drop Proc dbo.EC_FA_Opr_LocalCartageAccountEffects
GO
if exists (select * From sys.objects where name = 'EC_RPT_Vehicle_Monitor')
Drop Proc dbo.EC_RPT_Vehicle_Monitor
GO
if exists (select * From sys.objects where name = 'EC_FA_MRDeliveryDetails_FillDropdown')
Drop Proc dbo.EC_FA_MRDeliveryDetails_FillDropdown
GO
if exists (select * From sys.objects where name = 'EC_FA_Transport_Bill_Fill_GCDetails_On_ClientSelection')
Drop Proc dbo.EC_FA_Transport_Bill_Fill_GCDetails_On_ClientSelection
GO
if exists (select * From sys.objects where name = 'EC_Opr_TrackNTrace_Attached_LHPO_Details')
Drop Proc dbo.EC_Opr_TrackNTrace_Attached_LHPO_Details
GO
if exists (select * From sys.objects where name = 'EC_Opr_AUS_Other_Agency_ReadValues')
Drop Proc dbo.EC_Opr_AUS_Other_Agency_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_RPT_Direct_Printing_LHPO_Reach')
Drop Proc dbo.EC_RPT_Direct_Printing_LHPO_Reach
GO
if exists (select * From sys.objects where name = 'EC_Opr_AUS_Other_Agency_Save')
Drop Proc dbo.EC_Opr_AUS_Other_Agency_Save
GO
if exists (select * From sys.objects where name = 'Multiple_Attached_Branches_For_LHPO_Printing_Reach')
Drop function dbo.Multiple_Attached_Branches_For_LHPO_Printing_Reach
GO
if exists (select * From sys.objects where name = 'Delivery_Taken_By')
Drop function dbo.Delivery_Taken_By
GO
if exists (select * From sys.objects where name = 'EC_Opr_DeliveryBranchUpdate_ReadValues')
Drop Proc dbo.EC_Opr_DeliveryBranchUpdate_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_OctroiUpdate_Save')
Drop Proc dbo.EC_Opr_OctroiUpdate_Save
GO
if exists (select * From sys.objects where name = 'EC_Opr_TrackNTrace_Billing_Details')
Drop Proc dbo.EC_Opr_TrackNTrace_Billing_Details
GO
if exists (select * From sys.objects where name = 'EC_Opr_AUS_Save')
Drop Proc dbo.EC_Opr_AUS_Save
GO
if exists (select * From sys.objects where name = 'EC_Opr_TrackNTrace_Fill_GC_No')
Drop Proc dbo.EC_Opr_TrackNTrace_Fill_GC_No
GO
if exists (select * From sys.objects where name = 'EC_Opr_TrackNTrace_Finance_Details')
Drop Proc dbo.EC_Opr_TrackNTrace_Finance_Details
GO
if exists (select * From sys.objects where name = 'EC_Opr_LHPOHireDetails_FillGrid')
Drop Proc dbo.EC_Opr_LHPOHireDetails_FillGrid
GO
if exists (select * From sys.objects where name = 'EC_RPT_BOOKING_BRANCHWISE_DAILY_COLLECTION_NANDWANA')
Drop Proc dbo.EC_RPT_BOOKING_BRANCHWISE_DAILY_COLLECTION_NANDWANA
GO
if exists (select * From sys.objects where name = 'EC_Opr_TrackNTrace_General_Details')
Drop Proc dbo.EC_Opr_TrackNTrace_General_Details
GO
if exists (select * From sys.objects where name = 'EC_Opr_TrackNTrace_LHPO_Details')
Drop Proc dbo.EC_Opr_TrackNTrace_LHPO_Details
GO
if exists (select * From sys.objects where name = 'EC_RPT_DELIVERY_BRANCHWISE_DAILY_COLLECTION_NANDWANA')
Drop Proc dbo.EC_RPT_DELIVERY_BRANCHWISE_DAILY_COLLECTION_NANDWANA
GO
if exists (select * From sys.objects where name = 'EC_Opr_DDC_ReadValues')
Drop Proc dbo.EC_Opr_DDC_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Opr_TrackNTrace_Memo_Details')
Drop Proc dbo.EC_Opr_TrackNTrace_Memo_Details
GO
if exists (select * From sys.objects where name = 'EC_RPT_EXPENSES_BRANCHWISE_DAILY_COLLECTION_NANDWANA')
Drop Proc dbo.EC_RPT_EXPENSES_BRANCHWISE_DAILY_COLLECTION_NANDWANA
GO
if exists (select * From sys.objects where name = 'EC_RPT_Direct_Printing_AUS_Excel')
Drop Proc dbo.EC_RPT_Direct_Printing_AUS_Excel
GO
if exists (select * From sys.objects where name = 'EC_FA_Transport_Bill_FillValues')
Drop Proc dbo.EC_FA_Transport_Bill_FillValues
GO
if exists (select * From sys.objects where name = 'EC_FA_Transport_Bill_ReadValues')
Drop Proc dbo.EC_FA_Transport_Bill_ReadValues
GO
if exists (select * From sys.objects where name = 'GetVoucherBillXML')
Drop function dbo.GetVoucherBillXML
GO
if exists (select * From sys.objects where name = 'EC_RPT_INCOME_BRANCHWISE_DAILY_COLLECTION_NANDWANA')
Drop Proc dbo.EC_RPT_INCOME_BRANCHWISE_DAILY_COLLECTION_NANDWANA
GO
if exists (select * From sys.objects where name = 'EC_FA_Transport_Bill_Save')
Drop Proc dbo.EC_FA_Transport_Bill_Save
GO
if exists (select * From sys.objects where name = 'EC_Opr_DeliveryBranchUpdate_Save')
Drop Proc dbo.EC_Opr_DeliveryBranchUpdate_Save
GO
if exists (select * From sys.objects where name = 'EC_RPT_Route_Load_Performance')
Drop Proc dbo.EC_RPT_Route_Load_Performance
GO
if exists (select * From sys.objects where name = 'EC_RPT_SHORT_EXCESS_SUPERVISOR')
Drop Proc dbo.EC_RPT_SHORT_EXCESS_SUPERVISOR
GO
if exists (select * From sys.objects where name = 'EC_FA_MRDeliveryDetails_ReadValues')
Drop Proc dbo.EC_FA_MRDeliveryDetails_ReadValues
GO
if exists (select * From sys.objects where name = 'EF_RPT_Vehicle_Utilization_Excel')
Drop Proc dbo.EF_RPT_Vehicle_Utilization_Excel
GO
if exists (select * From sys.objects where name = 'EC_RPT_Standard_VS_Charged_Amount')
Drop Proc dbo.EC_RPT_Standard_VS_Charged_Amount
GO
if exists (select * From sys.objects where name = 'EC_RPT_Booking_MR_Register')
Drop Proc dbo.EC_RPT_Booking_MR_Register
GO
if exists (select * From sys.objects where name = 'EC_RPT_Booking_Stock_List_GRD')
Drop Proc dbo.EC_RPT_Booking_Stock_List_GRD
GO
if exists (select * From sys.objects where name = 'EC_Opr_Menifest_ReadValues')
Drop Proc dbo.EC_Opr_Menifest_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_RPT_LHC_Loaded_To_Other_Than_Branches_Excel')
Drop Proc dbo.EC_RPT_LHC_Loaded_To_Other_Than_Branches_Excel
GO
if exists (select * From sys.objects where name = 'EC_RPT_Branchwise_Booking_Register_GRD')
Drop Proc dbo.EC_RPT_Branchwise_Booking_Register_GRD
GO
if exists (select * From sys.objects where name = 'Ec_Mst_CompanyBookingParameters_ReadValues')
Drop Proc dbo.Ec_Mst_CompanyBookingParameters_ReadValues
GO
if exists (select * From sys.objects where name = 'EC_Mst_CompanyDetails_Save')
Drop Proc dbo.EC_Mst_CompanyDetails_Save







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
      
      
      
      
-- =============================================      
-- Author:  <Lad Ashish>      
-- Create date: Oct 16 2008  5:46PM      
-- Description: <Insert Record For Contract Master>      
-- =============================================      
CREATE Proc [dbo].[EC_Mst_Contract_Save]      
(      
@Contract_ID int,      
@Division_ID int,      
@Year_Code int,      
@Contract_Branch_ID int,      
@Contract_No varchar(50),      
@Contract_Name varchar(50),      
@Contract_Date datetime,      
@Client_ID int,      
@Client_PO_No nvarchar(50),      
@Client_PO_Date datetime,      
@PO_Max_Limmit numeric(18,2),      
@Valid_From datetime,      
@Valid_UpTo datetime,      
@Promissed_Wt_Per_Month numeric(18,2),      
@Promissed_Freight_Per_Month numeric(18,2),      
@Credit_Limit numeric(18,2),      
@Credit_Period int,      
@Billing_Client_ID int,      
@Billing_Branch_ID int,  
@Billing_Hierarchy varchar(2),      
@Remarks varchar(250),      
@Freight_Unit_ID int,      
@Freight_Sub_Unit_ID int,      
@Freight_Basis_ID int,      
@Freight_Unit_Item_ID int,      
@Freight_Sub_Unit_Item_ID int,      
@CFT_Factor numeric(18,2),      
@ContractTermsXML xml,      
@FreightDetailsGridXML xml,      
@OtherChargesFreightRateDetailsXML xml,      
@AttachmentFormId int,      
@AttachmentsXML xml,      
@Created_By int,      
@Error_Code int output,      
@ERROR_DESC AS VARCHAR(4000) OUTPUT,      
@Hierarchy_Code varchar(20),      
@Menu_Item_ID int, @Main_ID int,    
@GCRiskTypeId int,  
@ConsignmentTypeId int)       
As      
       
BEGIN TRY      
BEGIN TRAN      
BEGIN      
SET NOCOUNT ON;      
set @Error_Code = 0;      
set @ERROR_DESC = '';      
 Declare @Created_On datetime      
Declare @Document_ID as int      
Set @Document_ID=0      
      
if @CFT_Factor < 0 set @CFT_Factor = 0;          
      
Declare @I_POC as int      
Declare @I_POC2 as int      
      
Set @Created_On=getdate()      
      
Declare @Count as int        
Declare @Sr_No as int        
      
declare @Contract_Freight_Rate_Details_ID as int       
 declare @FreightRateDetailsTable table        
(        
TempSrNo int identity,          
Id int ,      
FreightUnitItemID int,      
FreightSubUnitItemID int,       
SrNo int,          
FromID int,      
ToID int,          
TransitDays int,      
Rate numeric(18,2),      
KMS int       
)    declare @Id int      
declare @SrNo as int        
declare @FromID as int        
declare @ToID as int        
declare @TransitDays as int        
declare @KMS as int       
declare @Rate as numeric(18,2)      
declare @FreightUnitItemID int      
declare @FreightSubUnitItemID int   --- ===================================================================================      
-- START INSERT RECORD FOR EC_Opr_Contract_Master TABLE      
--- ===================================================================================      
      
if @Contract_ID <= 0 -- add      
 Begin      
  exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@Main_ID,      
  @Division_ID,@Menu_Item_ID,0,0,@Contract_No OUTPUT      
      
  Insert Into EC_Opr_Contract_Master      
  (Division_ID,Year_Code,Contract_Branch_ID,Contract_No,Contract_Name,Contract_Date,Client_ID,Client_PO_No,      
  Client_PO_Date,PO_Max_Limmit,Valid_From,Valid_UpTo,Promissed_Wt_Per_Month,Promissed_Freight_Per_Month,      
  Credit_Limit,Credit_Period,Billing_Client_ID,Billing_Branch_ID,Remarks,      
  Freight_Unit_ID,Freight_Sub_Unit_ID,Freight_Basis_ID,Is_Cancelled,      
  Approved_By,Created_By,Created_On,Updated_By,Updated_On,GC_risk_type_id,Consignment_Type_ID,Billing_Hierarchy)      
  Values(@Division_ID,@Year_Code,@Contract_Branch_ID,@Contract_No,@Contract_Name,@Contract_Date,@Client_ID,@Client_PO_No,      
  @Client_PO_Date,@PO_Max_Limmit,@Valid_From,@Valid_UpTo,@Promissed_Wt_Per_Month,@Promissed_Freight_Per_Month,      
  @Credit_Limit,@Credit_Period,@Billing_Client_ID,@Billing_Branch_ID,@Remarks,      
  @Freight_Unit_ID,@Freight_Sub_Unit_ID,@Freight_Basis_ID,0,      
  1,@Created_By,@Created_On,@Created_By,@Created_On,@GCRiskTypeId,@ConsignmentTypeId,@Billing_Hierarchy)      
      
  Set @Contract_ID=@@Identity      
 End      
Else -- Edit      
 Begin      
  Update EC_Opr_Contract_Master       
  Set       
  Contract_Name = @Contract_Name,      
  Contract_Date = @Contract_Date, Client_ID = @Client_ID,      
  Client_PO_No = @Client_PO_No,Client_PO_Date = @Client_PO_Date,      
  PO_Max_Limmit = @PO_Max_Limmit,Valid_From = @Valid_From,      
  Contract_Branch_ID = @Contract_Branch_ID,      
  Valid_UpTo = @Valid_UpTo,Promissed_Wt_Per_Month = @Promissed_Wt_Per_Month,      
  Promissed_Freight_Per_Month = @Promissed_Freight_Per_Month,      
  Credit_Limit = @Credit_Limit,Credit_Period = @Credit_Period,      
  Billing_Client_ID=@Billing_Client_ID,Billing_Branch_ID=@Billing_Branch_ID,      
  Remarks = @Remarks,Freight_Unit_ID = @Freight_Unit_ID,      
  Freight_Sub_Unit_ID = @Freight_Sub_Unit_ID,      
  Freight_Basis_ID = @Freight_Basis_ID,      
  Approved_By = 1,Updated_By = @Created_By,      
  Updated_On = @Created_On,    
  GC_risk_type_id=@GCRiskTypeId,  
  Consignment_Type_Id=@ConsignmentTypeId,  
  Billing_Hierarchy=@Billing_Hierarchy   
  Where Contract_ID = @Contract_ID      
      
  delete from EC_Opr_Contract_Terms where contract_id = @Contract_ID      
  delete from EC_Opr_Contract_Other_Charges_Details where contract_id = @Contract_ID      
  delete from EC_Opr_Contract_Freight_Rate_Details where contract_id = @Contract_ID      
 End--if @Contract_ID <= 0      
      
 EXEC sp_xml_preparedocument @Document_ID OUTPUT, @ContractTermsXML      
      
Insert Into EC_Opr_Contract_Terms      
(Contract_ID,Term_ID,Description)      
Select      
@Contract_ID,term_id,description      
from openxml (@Document_ID, '/newdataset/termsgrid',2)      
with(term_id int,description varchar(100))      
      
EXEC sp_xml_removedocument @Document_ID      
      
EXEC sp_xml_preparedocument @I_POC OUTPUT, @FreightDetailsGridXML        
Insert Into @FreightRateDetailsTable        
(Id,SrNo,FreightUnitItemID,FreightSubUnitItemID,FromID,ToID,TransitDays,Rate,KMS)        
(Select Id,srno,freightunititemid,freightsubunititemid,fromid,toid,transitdays,freightrate,kms      
from openxml (@I_POC, '/newdataset/table',2)      
with(srno int,fromid int,freightunititemid int,freightsubunititemid int,toid int,freightrate numeric(18,2),      
transitdays int,kms int,id int))      
EXEC sp_xml_removedocument @I_POC      
      
Select @Count=Count(*) From @FreightRateDetailsTable        
      
Set @Sr_No = 1        
While @Sr_No <= @count        
 Begin        
  Select @Id = id,@SrNo=SrNo,@FromID=FromID,@ToID=ToID,@TransitDays=TransitDays,      
  @KMS=KMS,@Rate=Rate,@FreightUnitItemID=FreightUnitItemID,      
  @FreightSubUnitItemID=FreightSubUnitItemID      
  from @FreightRateDetailsTable      
  where TempSrNo=@Sr_No        
      
  Insert Into EC_Opr_Contract_Freight_Rate_Details      
  (Contract_ID,Freight_Unit_Item_ID,Freight_Sub_Unit_Item_ID,CFT_Factor,      
  From_ID,To_ID,Freight_Rate,Transit_Days,Kms)      
  Values(@Contract_ID,@FreightUnitItemID,@FreightSubUnitItemID,@CFT_Factor,      
  @FromID,@ToID,@Rate,@TransitDays,@KMS)         
      
  Set @Contract_Freight_Rate_Details_ID=@@identity      
      
  EXEC sp_xml_preparedocument @I_POC2 OUTPUT, @OtherChargesFreightRateDetailsXML        
      
  if exists(select * from openxml (@I_POC2, '/newdataset/table',2)      
  with(srno int,bilty_charges numeric(18,2),fov_percent numeric(18,2),to_pay_charges numeric(18,2),dacc_charges numeric(18,2),local_charges numeric(18,2),hamali_per_kg numeric(18,2),      
  door_delivery_charges numeric(18,2),octroi_form_charges numeric(18,2),octroi_service_charges numeric(18,2),      
  demurrage_days int,demurrage_percent numeric(18,2),gi_charges numeric(18,2),fov_rate numeric(18,2),invoice_rate numeric(18,2),invoice_per_how_many_rs numeric(18,2),hamali_per_article numeric(18,2))where srno=@Id)      
   Begin      
    Insert Into EC_Opr_Contract_Other_Charges_Details      
    (Contract_ID,Contract_Freight_Rate_Details_ID,Bilty_Charges,FOV_Percent,To_Pay_Charges,      
    DACC_Charges,Local_Charges,Hamali_Per_Kg,Door_Delivery_Charges,Octroi_Form_Charges,Octroi_Service_Charges,      
    Demurrage_Days,Demurrage_Percent,GI_Charges,FOV_Rate,Invoice_Rate,Invoice_Per_How_Many_Rs,Hamali_Per_Article)      
    Select @Contract_ID,@Contract_Freight_Rate_Details_ID,Bilty_Charges,FOV_Percent,To_Pay_Charges,      
    DACC_Charges,Local_Charges,Hamali_Per_Kg,Door_Delivery_Charges,Octroi_Form_Charges,Octroi_Service_Charges,      
    Demurrage_Days,Demurrage_Percent,GI_Charges,FOV_Rate,Invoice_Rate,Invoice_Per_How_Many_Rs,Hamali_Per_Article     
    from openxml (@I_POC2, '/newdataset/table',2)      
    with(srno int,bilty_charges numeric(18,2),fov_percent numeric(18,2),to_pay_charges numeric(18,2),dacc_charges numeric(18,2),local_charges numeric(18,2),hamali_per_kg numeric(18,2),      
    door_delivery_charges numeric(18,2),octroi_form_charges numeric(18,2),octroi_service_charges numeric(18,2),      
    demurrage_days int,demurrage_percent numeric(18,2),gi_charges numeric(18,2),fov_rate numeric(18,2),invoice_rate numeric(18,2),
    invoice_per_how_many_rs numeric(18,2),hamali_per_article numeric(18,2))where srno=@Id      
   End      
  Else       
   Begin      
    Insert Into EC_Opr_Contract_Other_Charges_Details      
    (Contract_ID,Contract_Freight_Rate_Details_ID,Bilty_Charges,FOV_Percent,To_Pay_Charges,      
    DACC_Charges,Local_Charges,Hamali_Per_Kg,Door_Delivery_Charges,Octroi_Form_Charges,Octroi_Service_Charges,      
    Demurrage_Days,Demurrage_Percent,GI_Charges,FOV_Rate,Invoice_Rate,Invoice_per_How_Many_Rs,Hamali_per_Article)      
    Values      
    (@Contract_ID,@Contract_Freight_Rate_Details_ID,0,0,0,      
    0,0,0,0,0,0,      
    0,0,0,0,0,0,0)      
  End--if exists(select * from open      
  EXEC sp_xml_removedocument @I_POC2      
 Set @Sr_No=@Sr_No+1        
 end  --While @Sr_No <= @count    exec EC_Master_Attachment_Save @AttachmentFormId,@Contract_ID,@AttachmentsXML       
      
END      
COMMIT TRAN      
END TRY      
BEGIN CATCH      
ROLLBACK TRAN      
SELECT @ERROR_CODE=ERROR_NUMBER()      
SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +      
CAST(ERROR_MESSAGE() as VARCHAR(4000))      
END CATCH      
      
      
      
      
      
      
      
      
      
      
      
      


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 14 Dec 2008 >
-- Description:	<UnapprovedVoucher_Save>
-- =============================================                    
CREATE procedure [dbo].[FA_Opr_IBT_VoucherUnapprove_Save]
(     

@Year_Code int,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@User_Id int,
@Voucher_Id int,--UnApprovedVoucherId
@Voucher_No varchar(20),
@Voucher_Type_Id int,
@Voucher_Type_Id_Main int=0,
@Voucher_Date datetime,
@Ref_No varchar(20),
@Ledger_Id int,
@Total_Debit numeric(18,2),
@Total_Credit numeric(18,2),
@Narration varchar(200),
@FBT_Payment_Type varchar(100),
@Menu_Item_ID int,
--@Is_Manual_Entry bit,

@VoucherXML XML,
@VoucherCostCentreXML XML,
@VoucherBillByBillXML XML,

@Error_Code int output,
@ERROR_DESC AS VARCHAR(4000) OUTPUT
)                    
                    
AS          
                                                 
--BEGIN TRY                    
--BEGIN TRAN                              

SELECT @ERROR_CODE=0                    
SELECT @ERROR_DESC=''                    
                    
declare @Current_Date as datetime                    
select @Current_Date = getdate()                    
 
EXEC	[dbo].[EC_Opr_Generate_Next_No]
		@Year_Code = @Year_Code,
		@Hierarchy_Code =@Hierarchy_Code,
		@Main_ID = @Main_Id,
		@Division_ID = @Division_Id,
		@Menu_Item_ID = @Menu_Item_ID,
		@Call_For_Display = 0,
		@Next_No_For_Print = @Voucher_No OUTPUT



if(@Voucher_Id<=0)--Add
Begin                   
insert into FA_Opr_UnApproved_Voucher
(Year_Code,Division_Id,Main_Id,Hierarchy_Code,Voucher_No ,Voucher_Type_Id ,Voucher_Type_Id_Main ,Voucher_Date ,                     
Ref_No ,  Ledger_Id ,Total_Debit,Total_Credit,Narration ,                                
Created_On ,Created_By ,Updated_On  ,Updated_By ,Entry_Type,Is_cancelled,Approved_Voucher_Id,Remarks_For_UnApproval,Approved_Voucher_Id_2)                    
values                    
(                    
@Year_Code,@Division_Id,@Main_Id,@Hierarchy_Code,@Voucher_No,@Voucher_Type_Id,@Voucher_Type_Id_Main,@Voucher_Date,
@Ref_No,@Ledger_Id ,@Total_Debit,@Total_Credit, @Narration ,                                        
@Current_Date ,@User_Id ,@Current_Date ,@User_Id ,'Normal',0,0,'',0)                    
                    
                    
select @@Identity                    
Select @Voucher_Id = @@Identity                    
                    
End--if(@Voucher_Id<=0)--Add
Else 
  Begin
    Update FA_Opr_UnApproved_Voucher set
    Voucher_Date = @Voucher_Date,
    Ledger_Id = @Ledger_Id,
	Ref_No = @Ref_No,
    Total_Debit = @Total_Debit,
    Total_Credit = @Total_Credit,
    Narration = @Narration,
    Updated_On = GetDate(),
    Updated_By = @User_Id
    where Voucher_Id = @Voucher_Id
  End


Delete FA_Opr_UnApproved_Voucher_Details where Voucher_Id=@Voucher_Id
Delete FA_Opr_UnApproved_Voucher_BillWise_Details  where UnApproved_Voucher_Id=@Voucher_Id


DECLARE @idoc int                    
--***********************************************************************************************  
--***********************************Unapproved Voucher Details *********************************  
--***********************************************************************************************  
EXEC sp_xml_preparedocument @idoc OUTPUT, @VoucherXML                     
                   
insert into FA_Opr_UnApproved_Voucher_Details                    
(
Year_Code,
Division_Id,
Main_Id,
Hierarchy_Code,
Voucher_Id,
Voucher_Type_Id,                     
Voucher_Type_Id_Main ,Voucher_Date,
Bank_Name,
Cheque_No,
Cheque_Date,Ledger_Id,Debit,Credit,
Is_Branch_Ledger,Show,Approved_Voucher_Id,Approved_Voucher_Id_2,Remarks_For_UnApproval,Reason)                    
                    
SELECT 
@Year_Code,@Division_Id,@Main_Id,@Hierarchy_Code,@Voucher_Id,@Voucher_Type_Id,
@Voucher_Type_Id_Main,
@Voucher_Date,
Bank_Name,
Cheque_No,
Cheque_Date,
Ledger_Id,Debit,Credit,IsBranchLedger,1,0,0,'',''    
FROM                      
OPENXML (@idoc, '/NewDataSet/Voucher',2)                    
WITH (
	Ledger_Id int,
	Debit numeric(18,2),
	Credit numeric(18,2),
	Bank_Name varchar(100),
	Cheque_No varchar(100),
	Cheque_Date varchar(10),
    IsBranchLedger bit
--    Sr_No  Int,Ledger_Id Int, Debit numeric(18, 2), Credit numeric(18, 2),Is_Branch_Ledger bit
)                    
EXEC sp_xml_removedocument @idoc              
               
              
                  
--/************ modified on 07/03/09 .. vikas *****************                  
          
          
--*******************************************************************************************                 
--*********************************unapproved billwise***************************************  
--*******************************************************************************************  
   EXEC sp_xml_preparedocument @idoc OUTPUT, @VoucherBillByBillXML                   
                    
       insert into FA_Opr_UnApproved_Voucher_BillWise_Details                
       (                  
		   Division_Id,Main_Id,Hierarchy_Code,  
		   Ledger_Id,Bill_Date,Ref_No,               
		   Ref_Type_Id,Credit_Days,Amount,UnApproved_Voucher_Id,                  
		   UnApproved_Voucher_No,UnApproved_Voucher_Type_Id,UnApproved_Voucher_Date                  
       )                  
       SELECT @Division_Id,@Main_Id,@Hierarchy_Code,                   
     Ledger_Id,GetDate()--BillDate
     ,Ref_No,                 
     Ref_Type_Id,Credit_Days,Amount,@Voucher_Id as UnApproved_Voucher_Id,                  
     @Voucher_No as UnApproved_Voucher_No , @Voucher_Type_Id as UnApproved_Voucher_Type_Id, @Voucher_Date as UnApproved_Voucher_Date                  
       FROM                    
       OPENXML(@idoc, '/NewDataSet/BillByBill',2)                  
       WITH   (


		Ledger_Id int,
		Ref_No varchar(50),
		Ref_Type_Id int,
		Credit_Days int,
		Amount numeric(18,2)
         )  
                      
    EXEC sp_xml_removedocument @idoc                   
    
                
                 


 declare @PFA_Ledger_Id as int,@PFA_Credit numeric(18,2),@PFA_Debit numeric(18,2),@LedgerId int,@Credit numeric(18,2),@Debit numeric(18,2),
         @Sr_No int,@Count int,@CreateVoucherXML Xml

 select @PFA_Ledger_Id=dbo.Get_Ledger_Id(600,600,600)                


	if(@Voucher_Type_Id=2)
		select @PFA_Credit=Sum(Credit) From FA_Opr_UnApproved_Voucher_Details where Voucher_Id=@Voucher_Id 
	Else
		select @PFA_Debit=Sum(Debit) From FA_Opr_UnApproved_Voucher_Details where Voucher_Id=@Voucher_Id
		


---------PENDING FOR APPROVAL DR or CR Depending On Voucher Type--------
set @CreateVoucherXML = dbo.GetVoucherDetailsXML(@PFA_Ledger_Id,@PFA_Debit,@PFA_Credit,'',0,Getdate())



--------- DR or CR Depending On Voucher Type---------------------
Declare @Temp_Voucher Table(Sr_No int Identity,Ledger_Id int,Debit numeric(18,2),Credit numeric(18,2))

Insert into @Temp_Voucher(Ledger_Id,Debit,Credit)
select Ledger_Id,Debit,Credit From FA_Opr_UnApproved_Voucher_Details 
where Voucher_Id=@Voucher_Id And ((Voucher_Type_Id=3 And Credit<>0) OR (Voucher_Type_Id=2 And Debit<>0))

--select * from @Temp_Voucher

select @Count= Count(*) From @Temp_Voucher
set @Sr_No=1


While @Sr_No<=@Count
Begin
	Select @Ledger_Id=Ledger_Id,@Debit=Debit,@Credit=Credit From @Temp_Voucher where Sr_No=@Sr_No

	set @CreateVoucherXML= Cast(@CreateVoucherXML as Varchar(2000))
	+
	dbo.GetVoucherDetailsXML(@Ledger_Id,@Debit,@Credit,'',0,Getdate())

    set @Sr_No=@Sr_No+1
End

   set @CreateVoucherXML=

	'<NewDataSet>'
	+
	Cast(@CreateVoucherXML as Varchar(2000))
    +
	'</NewDataSet>'


Declare @OprVoucherId int     
set @OprVoucherId=-1

select  @OprVoucherId = Isnull(Voucher_Id,-1)  From FA_Opr_Voucher where UnApproved_Voucher_Id=@Voucher_Id

EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
		@Year_Code = @Year_Code,
		@Hierarchy_Code =@Hierarchy_Code,
		@Main_Id = @Main_Id,
		@Division_Id = @Division_Id,
		@User_Id = @User_Id,
		@Voucher_Id = @OprVoucherId,
		@Voucher_No = @Voucher_No,
		@Voucher_Type_Id = @Voucher_Type_Id,
		@Voucher_Type_Id_Main = @Voucher_Type_Id_Main,
		@Voucher_Date =@Voucher_Date,
		@Ref_No = @Ref_No,
		@Ledger_Id =@PFA_Ledger_Id,
		@Total_Debit = @Total_Debit,
		@Total_Credit = @Total_Credit,
		@Narration = @Narration,
		@FBT_Payment_Type = @FBT_Payment_Type,
		@UnApproved_Voucher_Id = @Voucher_Id,
		@VoucherXML = @CreateVoucherXML,
		@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
		@VoucherBillByBillXML = @VoucherBillByBillXML,
		@Error_Code = @Error_Code OUTPUT,
		@ERROR_DESC = @ERROR_DESC OUTPUT

                     
--COMMIT TRAN                    
--END TRY                    
--BEGIN CATCH                    
--                      
-- ROLLBACK TRAN                    
 SELECT @ERROR_CODE=ERROR_NUMBER()                    
                    
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +                    
 CAST(ERROR_MESSAGE() as VARCHAR(4000))                    
                 
IF(@Error_Code iS NULL OR @ERROR_DESC iS nULL)
BEGIN
SET @Error_Code=''
SET @ERROR_DESC=''
END

   
--END CATCH                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
    
    
    
    
    
    
















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
  
  
  
  
-- =============================================    
-- Author:  <Kanuga Vajiha>    
-- Create date:  6 May 09    
-- Description: <Proc To Fill Grid For Approval>    
-- =============================================    
  

CREATE proc [dbo].[EC_FA_Approval_Fill_Grid]  
(@ispageload bit,  
@menuitem_id varchar(5),  
@Hierarchy_code varchar(5),  
@main_id int,  
@Searched_col varchar (50),  
@Search_Text varchar (50),  
@From_Date datetime,  
@To_Date Datetime,  
@IsApproved Bit  
)  
as  
set nocount on  
  
set @Search_Text = '%' + @Search_Text + '%'  
  
declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  
  
if @menuitem_id = 106  
begin  
if @ispageload = 1  
	begin  
		insert into @Dropdown_Search values ('MR No','MR_No_For_Print')   
		insert into @Dropdown_Search values ('MR Date','MR_Date')     
		insert into @Dropdown_Search values ('Branch Name','Branch_Name')  
		insert into @Dropdown_Search values ('LR No','GC_No_For_Print')  
		insert into @Dropdown_Search values ('Total MR Amount','Total_MR_Amount')  
		insert into @Dropdown_Search values ('Consignor Name','Consignor_Name')  
		insert into @Dropdown_Search values ('Consignee_Name','Consignee_Name')  
	end  

else if @ispageload = 0  

SELECT
	Is_Approved as 'Is Approved',   
	'false' as Is_Approved_Now,    
	MR_BKG.MR_ID as 'ID',MR_BKG.MR_No_For_Print as 'MR No ' ,      
	dbo.DateOnlyDisplay(MR_BKG.MR_Date) as 'MR Date',                 
	Mr_Branch.Branch_Name as 'Branch Name',  
	GC.GC_No_For_Print as 'LR No ',  
	MR_BKG.Total_MR_Amount as 'Total MR Amount',  
	GC.Consignor_Name as 'Consignor Name',  
	GC.Consignee_Name as 'Consignee Name'  
                
 FROM FA_Opr_MR MR_BKG      
 inner join Ec_Master_Branch MR_BKG_Branch      
 on MR_BKG_Branch.Branch_ID = MR_BKG.MR_Branch_ID      
 inner join Ec_Master_Area MR_BKG_Area      
 on MR_BKG_Branch.Area_ID = MR_BKG_Area.Area_ID      
 inner join Ec_Master_Region MR_BKG_Region      
 on MR_BKG_Branch.Region_ID = MR_BKG_Region.Region_ID   
 inner join dbo.EC_Master_Branch Mr_Branch      
 ON MR_BKG.MR_Branch_ID = Mr_Branch.Branch_ID      
 inner join dbo.EC_Opr_Vtrans_Gc GC      
 ON MR_BKG.GC_ID = GC.GC_ID    
 where MR_BKG.is_cancelled = 0      
 and MR_BKG.MR_Type_ID = 1     
 and MR_BKG.Is_Approved=@IsApproved   
 and MR_BKG_Branch.Region_Id = (case @Hierarchy_code when 'RO' then @main_id else MR_BKG_Branch.Region_Id end)      
 and MR_BKG_Branch.Area_Id = (case @Hierarchy_code when 'AO' then @main_id else MR_BKG_Branch.Area_Id end)      
 and MR_BKG_Branch.Branch_Id = (case @Hierarchy_code when 'BO' then @main_id else MR_BKG_Branch.Branch_Id end)      
 and (cast(dbo.dateonly(MR_BKG.MR_Date) as datetime) between @From_Date and @to_date)  
 and (  
(MR_No_For_Print like @Search_Text and @Searched_col = 'MR_No_For_Print')  
 or (MR_Date like @Search_Text and @Searched_col = 'MR_Date')  
 or (Mr_Branch.Branch_Name like @Search_Text and @Searched_col = 'Branch_Name')  
 or (GC_No_For_Print like @Search_Text and @Searched_col = 'gc_no_for_print')  
 or (Total_MR_Amount like @Search_Text and @Searched_col = 'Total_MR_Amount')  
 or (Consignor_Name like @Search_Text and @Searched_col='Consignor_Name')  
 or (Consignee_Name like @Search_Text and @Searched_col='Consignee_Name')  
 )  
  
 end  
else if @menuitem_id = 108  
 begin  
		if @ispageload = 1  
			begin  

				insert into @Dropdown_Search values ('MR No ','MR_No_For_Print')   
				insert into @Dropdown_Search values ('MR Date','MR_Date')  
				insert into @Dropdown_Search values ('Branch Name','Branch_Name')  
				insert into @Dropdown_Search values ('LR No','GC_No_For_Print')  
				insert into @Dropdown_Search values ('Total MR Amount','Total_MR_Amount')  
				insert into @Dropdown_Search values ('Consignor Name','Consignor_Name')  
				insert into @Dropdown_Search values ('Consignee Name','Consignee_Name')  

			end  
	else if @ispageload = 0  

SELECT   
	Is_Approved as 'Is Approved',   
	'false' as Is_Approved_Now,    
	MR_DEL.MR_ID as 'ID',MR_DEL.MR_No_For_Print as 'MR No',      
	dbo.DateOnlyDisplay(MR_DEL.MR_Date) as 'MR Date',      
	Mr_Branch.Branch_Name as 'Branch Name',  
	GC.GC_No_For_Print as 'LR No',  
	MR_DEL.Total_MR_Amount as 'Total MR Amount',  
	GC.Consignor_Name as 'Consignor Name',  
	GC.Consignee_Name as 'Consignee Name'  

	FROM FA_Opr_MR MR_DEL      
	inner join Ec_Master_Branch MR_DEL_Branch      
	on MR_DEL_Branch.Branch_ID = MR_DEL.MR_Branch_ID      
	inner join Ec_Master_Area MR_DEL_Area      
	on MR_DEL_Branch.Area_ID = MR_DEL_Area.Area_ID      
	inner join Ec_Master_Region MR_DEL_Region      
	on MR_DEL_Branch.Region_ID = MR_DEL_Region.Region_ID     
	inner join dbo.EC_Master_Branch Mr_Branch      
	ON MR_DEL.MR_Branch_ID = Mr_Branch.Branch_ID      
	inner join dbo.EC_Opr_Vtrans_Gc GC      
	ON MR_DEL.GC_ID = GC.GC_ID   

where MR_DEL.is_cancelled = 0      
and MR_DEL.MR_Type_ID = 2    
and MR_DEL.Is_Approved=@IsApproved    
and MR_DEL_Branch.Region_Id = (case @Hierarchy_code when 'RO' then @main_id else MR_DEL_Branch.Region_Id end)      
and MR_DEL_Branch.Area_Id = (case @Hierarchy_code when 'AO' then @main_id else MR_DEL_Branch.Area_Id end)      
and MR_DEL_Branch.Branch_Id = (case @Hierarchy_code when 'BO' then @main_id else MR_DEL_Branch.Branch_Id end)      
and (cast(dbo.dateonly(MR_DEL.MR_Date) as datetime) between @From_Date and @to_date)   
and (  
(MR_No_For_Print like @Search_Text and @Searched_col = 'MR_No_For_Print')  
or (MR_Date like @Search_Text and @Searched_col = 'MR_Date')  
or (Mr_Branch.Branch_Name like @Search_Text and @Searched_col = 'Branch_Name')  
or (GC_No_For_Print like @Search_Text and @Searched_col = 'gc_no_for_print')  
or (Total_MR_Amount like @Search_Text and @Searched_col = 'Total_MR_Amount')  
or (Consignor_Name like @Search_Text and @Searched_col='Consignor_Name')  
or (Consignee_Name like @Search_Text and @Searched_col='Consignee_Name')  
)  
end  

else if @menuitem_id = 195  
 begin  
	if @ispageload = 1  
		begin  

			insert into @Dropdown_Search values ('Credit Memo No ','Credit_Memo_No_For_Print')   
			insert into @Dropdown_Search values ('Credit Memo Date','Credit_Memo_Date')  
			insert into @Dropdown_Search values ('Branch Name','Branch_Name')  
			insert into @Dropdown_Search values ('LR No','GC_No_For_Print')  
			insert into @Dropdown_Search values ('Total MR Amount','Total_MR_Amount')  
			insert into @Dropdown_Search values ('Consignor Name','Consignor_Name')  
			insert into @Dropdown_Search values ('Consignee Name','Consignee_Name')  

		end  
  else if @ispageload = 0  

SELECT 
   case when V.Approve_By Is Null then 'false' else 'true' end  as 'Is Approved',      
--    case when V.Approve_By Is Null then 'false' else 'true' end  as 'Is_Approved_Now',  
	'false' as Is_Approved_Now,    
	V.Voucher_ID as 'ID',  
	CreditMemo.Credit_Memo_No_For_Print as 'Credit Memo No',      
	dbo.DateOnlyDisplay(CreditMemo.Credit_Memo_Date) as 'Credit Memo Date',      
	CreditMemoBranch.Branch_Name as 'Branch Name',  
	GC.GC_No_For_Print as 'LR No',  
	CreditMemo.Total_MR_Amount as 'Total MR Amount',  
	GC.Consignor_Name as 'Consignor Name',  
	GC.Consignee_Name as 'Consignee Name',  
    V.Voucher_No as 'Voucher No',
	BillWise.Amount as 'Amount',
	dbo.DateOnlyDisplay(V.Voucher_Date) as 'Voucher Date'
	from FA_Opr_Credit_Memo CreditMemo
	inner join EC_Master_Branch CreditMemoBranch
	on CreditMemo.Credit_Memo_Branch_Id=CreditMemoBranch.Branch_id
	inner join Ec_Master_Area CreditMemoArea      
	on CreditMemoArea.Area_ID = CreditMemoBranch.Area_ID      
	inner join Ec_Master_Region CreditMemoRegion      
	on CreditMemoBranch.Region_ID = CreditMemoRegion.Region_ID
	inner join Ec_Opr_Vtrans_GC GC
	on CreditMemo.Gc_id=GC.GC_Id
	inner join FA_Master_ledger
	on FA_Master_Ledger.Ledger_Id=CreditMemo.Debit_To_ledger_Id
	inner join FA_Bill_Wise_Details BillWise
	on CreditMemo.Credit_Memo_No_For_print=BillWise.Ref_No
	Inner Join FA_Opr_Voucher V       
    On V.Voucher_Id=BillWise.Voucher_Id

	
where BillWise.Ref_Type_Id=2
and ((V.Approve_By Is Null and @IsApproved=0) or (V.Approve_By > 0 and @IsApproved=1))
and CreditMemo.is_cancelled = 0      
and CreditMemoBranch.Region_Id = (case @Hierarchy_code when 'RO' then @main_id else CreditMemoBranch.Region_Id end)      
and CreditMemoBranch.Area_Id = (case @Hierarchy_code when 'AO' then @main_id else CreditMemoBranch.Area_Id end)      
and CreditMemoBranch.Branch_Id = (case @Hierarchy_code when 'BO' then @main_id else CreditMemoBranch.Branch_Id end)      
and (cast(dbo.dateonly(CreditMemo.Credit_Memo_Date) as datetime) between @From_Date and @to_date)   
and (  
(Credit_Memo_No_For_Print like @Search_Text and @Searched_col = 'Credit_Memo_No_For_Print')  
or (Credit_Memo_Date like @Search_Text and @Searched_col = 'Credit_Memo_Date')  
or (CreditMemoBranch.Branch_Name like @Search_Text and @Searched_col = 'Branch_Name')  
or (GC_No_For_Print like @Search_Text and @Searched_col = 'gc_no_for_print')  
or (Total_MR_Amount like @Search_Text and @Searched_col = 'Total_MR_Amount')  
or (Consignor_Name like @Search_Text and @Searched_col='Consignor_Name')  
or (Consignee_Name like @Search_Text and @Searched_col='Consignee_Name')  
)  
end  
  
if @ispageload = 1  
	select  *From @Dropdown_Search  

  
  
  
  
  
  
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
      
        
        
        
-- =============================================        
-- Author:  <Lad Ashish>        
-- Create date: <15th October 2008>        
-- Description: <get Other Charges Details of Freight Rate Details For Contract Freight Details Master Form>        
-- =============================================        
        
        
        
CREATE PROCEDURE [dbo].[EC_Mst_ContractFreightDetails_GetOtherChargesForFreightRateDetails]         
(    
@Contract_ID int    
    
)    
AS        
BEGIN           
    
    
--Select * from EC_Opr_Contract_Master      
--Select * from EC_Opr_Contract_Freight_Rate_Details      
    
select Contract_ID,Contract_Freight_Rate_Details_ID as 'SrNo',Bilty_Charges,    
FOV_Percent,To_Pay_Charges,DACC_Charges,Local_Charges,Hamali_Per_Kg,    
Door_Delivery_Charges,Octroi_Form_Charges,Octroi_Service_Charges,    
Demurrage_Days,Demurrage_Percent,GI_Charges,FOV_Rate,Invoice_Rate,
Invoice_per_How_Many_Rs,Hamali_Per_Article from EC_Opr_Contract_Other_Charges_Details    
Where Contract_ID=@Contract_ID     
  
End

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE proc [dbo].[EC_Opr_GC_ConsigneeUpdate_ReadValues] 
(
	@Branch_Id int, 
	@Division_ID int,
	@BranchXML xml,
	@Year_Code int
)
as 
BEGIN 
set nocount on;

DECLARE @idoc int 
EXEC sp_xml_preparedocument @idoc OUTPUT, @BranchXML 

select gc.gc_id,
gc_no_for_print as [gc_caption no],
gc.Consignee_Name as Consignee_Name,
booking_branch.branch_name as booking_branch,  --added :ankit 30-01-09
gc.GC_No_For_print as Item_No
from ec_opr_vtrans_gc gc
inner join ec_opr_vtrans_gc_articles gc_articles
on gc.gc_id = gc_articles.gc_id
inner join ec_master_branch booking_branch  --added : ankit 30-01-09
on gc.from_branch_id = booking_branch.branch_id 
where 1=1
and gc.Year_Code IN(0, @Year_Code)
and GC.Division_ID = @Division_ID
and gc_articles.status_id = 60
and gc_articles.current_branch_id = @Branch_Id
and gc.delivery_branch_id = @Branch_Id
and gc_articles.is_cancelled = 0
and gc_articles.articles > 0
and dbo.Is_Delivery_Done(gc.gc_id) = 0
and gc.GC_No_For_print in 
(SELECT item from OPENXML (@idoc, '/parentroot/root',2) 
WITH (item varchar(20))) 

EXEC sp_xml_removedocument @idoc 
END 













----539--------------------------------------------------------------------------------






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
      
      
-- =============================================      
-- Author:  <Shiv Kumar Mishra>      
-- Create date: Oct 10 2008  6:52PM      
-- Description: <Save Branch Rate Parameter>      
-- =============================================      
CREATE Proc [dbo].[EC_Master_Branch_Rate_Parameters_Save]      
(      
@Key_ID int,      
@Branch_ID int,      
@Min_Charge_Wt numeric(18,2),      
@Bilty_Charges numeric(18,2),      
@Min_FOV numeric(18,2),      
@FOV_Percent numeric(18,2),      
@Min_Hamali numeric(18,2),      
@Hamali_Per_Kg numeric(18,2),      
@Door_Delivery_Charges numeric(18,2),      
@To_Pay_Charges numeric(18,2),      
@DACC_Charges numeric(18,2),      
@CFT_Factor int,      
@Service_Tax_Percent numeric(18,2),      
@Demurrage_Days int,      
@Demurrage_Rate_Kg_Per_Day numeric(18,2),      
@Octroi_Form_Charges numeric(18,2),      
@Octroi_Service_Charges numeric(18,2),      
@GI_Charges numeric(18,2),      
@Delivery_Commission numeric(18,2),      
@First_Notice_Days int,      
@Second_Notice_Days int,      
@Third_Notice_Days int,      
@Cash_Limit numeric(18,2),      
@Bank_Limit numeric(18,2),      
@Created_By int,      
@Bkg_Freight_Chg_Discount_Percent numeric(5,2),    
@Bkg_Hamali_Chg_Discount_Percent numeric(5,2),    
@Bkg_Fov_Chg_Discount_Percent numeric(5,2),    
@Bkg_TP_Chg_Discount_Percent numeric(5,2),    
@Bkg_DD_Chg_Discount_Percent numeric(5,2),    
@Dly_Oct_Form_Chg_Discount_Percent numeric(5,2),    
@Dly_Oct_Service_Chg_Discount_Percent numeric(5,2),    
@Dly_GI_Chg_Discount_Percent numeric(5,2),    
@Dly_Hamali_Chg_Discount_Percent numeric(5,2),    
@Dly_Demurrage_Chg_Discount_Percent numeric(5,2),    
@HamaliPerArticle numeric(18,2),  
@FOVRate numeric(18,2),  
@InvoiceRate numeric(18,2),  
@InvoicePerHowManyRs numeric(18,2),  
@MaxBiltyCharges numeric(18,2),    
@Error_Code int output,      
@ERROR_DESC AS VARCHAR(4000) OUTPUT)      
      
As      
      
BEGIN TRY      
BEGIN TRAN      
BEGIN      
SET NOCOUNT ON;      
set @Error_Code = 0;      
set @ERROR_DESC = '';      
      
if(@Key_ID <= 0) -- add      
  Begin      
    insert into EC_Master_Branch_Rate_Card_VTrans      
 (Branch_ID,Min_Charge_Wt,Min_Charge_Freight,Bilty_Charges,      
    Min_FOV,FOV_Percent,DOD_Charges,To_Pay_Charges,      
    DACC_Charges,To_Pay_DACC_Charges,Local_Charges,Min_Hamali,      
    Hamali_Per_Kg,Door_Delivery_Charges,Other_Charges,AOC_Percent,      
    Min_AOC,ODA_Charges,CFT_Factor,Octroi_Form_Charges,      
    Octroi_Service_Charges,Demurrage_Days,Demurrage_Rate_Kg_Per_Day,GI_Charges,      
    Service_Tax_Percent,First_Notice_Days,Second_Notice_Days,Third_Notice_Days,      
    Cash_Limit,Bank_Limit,Created_On,Created_By,      
    Updated_On,Updated_By,Is_Active,GC_Costing_Hamali_Charge,      
    Delivery_Commission,Bkg_Freight_Chg_Discount_Percent,    
 Bkg_Hamali_Chg_Discount_Percent,Bkg_Fov_Chg_Discount_Percent,    
 Bkg_TP_Chg_Discount_Percent,Bkg_DD_Chg_Discount_Percent,    
 Dly_Oct_Form_Chg_Discount_Percent,Dly_Oct_Service_Chg_Discount_Percent,    
 Dly_GI_Chg_Discount_Percent,Dly_Hamali_Chg_Discount_Percent,    
 Dly_Demurrage_Chg_Discount_Percent,Hamali_Per_Article,FOV_Rate,Invoice_Rate,Invoice_Per_How_Many_Rs,Max_Bilty_Charges)      
    values(@Branch_ID,@Min_Charge_Wt,0,@Bilty_Charges,      
    @Min_FOV,@FOV_Percent,0,@To_Pay_Charges,      
    @DACC_Charges,0,0,@Min_Hamali,      
    @Hamali_Per_Kg,@Door_Delivery_Charges,0,0,      
    0,0,@CFT_Factor,@Octroi_Form_Charges,      
    @Octroi_Service_Charges,@Demurrage_Days,@Demurrage_Rate_Kg_Per_Day,@GI_Charges,      
    @Service_Tax_Percent,@First_Notice_Days,@Second_Notice_Days,@Third_Notice_Days,      
    @Cash_Limit,@Bank_Limit,getdate(),@Created_By,      
    getdate(),@Created_By,1,0,      
    @Delivery_Commission,@Bkg_Freight_Chg_Discount_Percent,    
 @Bkg_Hamali_Chg_Discount_Percent,@Bkg_Fov_Chg_Discount_Percent,    
 @Bkg_TP_Chg_Discount_Percent,@Bkg_DD_Chg_Discount_Percent,    
 @Dly_Oct_Form_Chg_Discount_Percent,@Dly_Oct_Service_Chg_Discount_Percent,    
 @Dly_GI_Chg_Discount_Percent,@Dly_Hamali_Chg_Discount_Percent,    
 @Dly_Demurrage_Chg_Discount_Percent,@HamaliPerArticle,@FOVRate,@InvoiceRate,@InvoicePerHowManyRs,@MaxBiltyCharges)      
  End      
Else -- Edit      
  Begin      
    Update EC_Master_Branch_Rate_Card_VTrans       
 set Min_Charge_Wt = @Min_Charge_Wt,      
    Bilty_Charges = @Bilty_Charges,      
    Min_FOV = @Min_FOV,      
    FOV_Percent = @FOV_Percent,      
    To_Pay_Charges = @To_Pay_Charges,      
    DACC_Charges = @DACC_Charges,      
    Min_Hamali = @Min_Hamali,      
    Hamali_Per_Kg = @Hamali_Per_Kg,      
 Door_Delivery_Charges=@Door_Delivery_Charges,      
    CFT_Factor = @CFT_Factor,      
    Octroi_Form_Charges = @Octroi_Form_Charges,      
    Octroi_Service_Charges = @Octroi_Service_Charges,      
    Demurrage_Days = @Demurrage_Days,      
    Demurrage_Rate_Kg_Per_Day = @Demurrage_Rate_Kg_Per_Day,      
    GI_Charges = @GI_Charges,      
    Service_Tax_Percent = @Service_Tax_Percent,      
    First_Notice_Days = @First_Notice_Days,      
    Second_Notice_Days = @Second_Notice_Days,      
    Third_Notice_Days = @Third_Notice_Days,      
    Cash_Limit = @Cash_Limit,      
    Bank_Limit = @Bank_Limit,      
    Updated_On = getdate(),      
    Updated_By = @Created_By,      
    Delivery_Commission = @Delivery_Commission ,    
 Bkg_Freight_Chg_Discount_Percent=@Bkg_Freight_Chg_Discount_Percent,    
 Bkg_Hamali_Chg_Discount_Percent=@Bkg_Hamali_Chg_Discount_Percent,    
 Bkg_Fov_Chg_Discount_Percent=@Bkg_Fov_Chg_Discount_Percent,    
 Bkg_TP_Chg_Discount_Percent=@Bkg_TP_Chg_Discount_Percent,    
 Bkg_DD_Chg_Discount_Percent=@Bkg_DD_Chg_Discount_Percent,    
 Dly_Oct_Form_Chg_Discount_Percent=@Dly_Oct_Form_Chg_Discount_Percent,    
 Dly_Oct_Service_Chg_Discount_Percent=@Dly_Oct_Service_Chg_Discount_Percent,    
 Dly_GI_Chg_Discount_Percent=@Dly_GI_Chg_Discount_Percent,    
 Dly_Hamali_Chg_Discount_Percent=@Dly_Hamali_Chg_Discount_Percent,    
 Dly_Demurrage_Chg_Discount_Percent =@Dly_Demurrage_Chg_Discount_Percent,    
    Hamali_Per_Article=@HamaliPerArticle,  
   FOV_Rate=@FOVRate,  
   Invoice_Rate=@InvoiceRate,  
   Invoice_Per_How_Many_Rs=@InvoicePerHowManyRs,
   Max_Bilty_Charges=@MaxBiltyCharges  
    where Branch_Id = @Key_ID      
  End      
       
END      
COMMIT TRAN      
END TRY      
BEGIN CATCH      
 ROLLBACK TRAN      
 SELECT @ERROR_CODE=ERROR_NUMBER()      
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +      
 CAST(ERROR_MESSAGE() as VARCHAR(4000))      
END CATCH      
      


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO










    
-- =============================================                
-- Author:  <Sunil Bhoyar>                
-- Create date: <21 Nov 2008>                
-- Description: < Fill Common Grid Finance Master Menu Items for ECARGO >                
-- =============================================           
         
--exec [EC_Mst_Fill_details_In_Grid] 14,'dbo.EC_Master_Region.Region_Name','Ahmedabad',0,'AD',0          
CREATE PROC [dbo].[EC_FA_Fill_details_In_Grid]            
(    
@MenuItemId as int,
@MenuItemCode as int=0,   
@ColName as varchar(100),    
@SearchText as varchar(50),    
@IsPageLoad as bit ,          
@HierarchyCode as varchar(2),    
@MainId as int,    
@IdValue as int=0,    
@DivisionId int=null,    
@FromDate datetime,                  
@ToDate datetime,                  
@YearCode int    
)                
as       
           
    
declare @xml as xml    
declare @SqlQuery as nvarchar(max)    
declare @IdColName as varchar(100)    
--declare @TableName as varchar(100)    
--       
--    
select @IdColName = dbo.COM_Adm_Menu_Item.Key_Column_Name      
      from dbo.COM_Adm_Menu_Item      
where dbo.COM_Adm_Menu_Item.MenuItem_ID=@MenuItemId     
     
    
declare @GC_Caption varchar(50)  
declare @LHPO_Caption varchar(50)  
  
select @GC_Caption = GC_Caption,@LHPO_Caption = LHPO_Caption from  
dbo.EC_Master_Company_Parameters  

--if @Search_Text=''    
-- begin    
--  select @Search_Text='Ö'    
-- end    
    
    
-------------------------------------------------------------------------------------                
--****************************** Ledger Master *******************************************                
                
if @MenuItemCode=35
 begin    
            
 if @IsPageLoad=1    
  begin    
    
    
   select @xml='    
   <root>    
   <row>    
   <id>dbo.FA_Master_Ledger.Ledger_Id</id>    
   <name>Ledger Id</name>    
   </row>    
    
   <row>    
   <id>dbo.FA_Master_Ledger.Ledger_Name</id>    
   <name>Ledger Name</name>    
   </row>    
    
            <row>    
   <id>dbo.FA_Master_Ledger.Alias</id>    
   <name>Alias</name>    
   </row>    
    
   <row>    
   <id>dbo.FA_Master_Ledger_Group.Ledger_Group_Name</id>    
   <name>Ledger Group Name</name>    
   </row>    
                 
   </root>'    
    
       
    
  end    
 else--if @Is_Page_Load=1    
  begin    
    
   select @SqlQuery='SELECT dbo.FA_Master_Ledger.Ledger_Id as Col1,     
   dbo.FA_Master_Ledger.Ledger_Name as Col2,    
   dbo.FA_Master_Ledger.Alias as Col3,    
   dbo.FA_Master_Ledger_Group.Ledger_Group_Name as Col4, '''' as Col5,    
   '''' as Col6,'''' as Col7,'''' as Col8,'''' as Col9,'''' as Col10,    
   1 as Can_Edit_Cancel    
       
   FROM dbo.FA_Master_Ledger Inner Join dbo.FA_Master_Ledger_Group On dbo.FA_Master_Ledger.Ledger_Group_Id=dbo.FA_Master_Ledger_Group.Ledger_Group_Id    
   where '  + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)              
    
--Inner Join dbo.FA_Master_Ledger_Division On dbo.FA_Master_Ledger.Ledger_Id=dbo.FA_Master_Ledger_Division.Ledger_Id    
  end --if @Is_Page_Load=1    
    
end  --if @Menu_Item_Id=34    
-------------------------------------------------------------------------------------                
-------------------------------------------------------------------------------------                
--****************************** Ledger Group *******************************************                
                
if @MenuItemCode=152
 begin    
            
 if @IsPageLoad=1    
  begin    
   select @xml='    
   <root>    
   <row>    
   <id>dbo.FA_Master_Ledger_Group.Ledger_Group_Id</id>    
   <name>Ledger Group Id</name>    
   </row>    
    
   <row>    
   <id>dbo.FA_Master_Ledger_Group.Ledger_Group_Name</id>    
   <name>Ledger Group Name</name>    
   </row>    
    
            <row>    
   <id>dbo.FA_Master_Ledger_Group.Alias</id>    
   <name>Alias</name>    
   </row>    
   </root>'    
  end    
 else--if @Is_Page_Load=1    
  begin    
    
   select @SqlQuery='SELECT dbo.FA_Master_Ledger_Group.Ledger_Group_Id as Col1,     
   dbo.FA_Master_Ledger_Group.Ledger_Group_Name as Col2,    
   dbo.FA_Master_Ledger_Group.Alias as Col3,    
   '''' as Col4, '''' as Col5,    
   '''' as Col6,'''' as Col7,'''' as Col8,'''' as Col9,'''' as Col10,    
   1 as Can_Edit_Cancel    
   FROM dbo.FA_Master_Ledger_Group    
   where '  + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)              
    
  end --if @Is_Page_Load=1    
    
end  --if @Menu_Item_Id=152    
-------------------------------------------------------------------------------------                
    
    
-------------------------------------------------------------------------------------                
--****************************** Ledger Opening *******************************************                
                
if @MenuItemCode=45
 begin    
            
 if @IsPageLoad=1    
  begin    
    
    
   select @xml='    
   <root>    
   <row>    
   <id>dbo.FA_Master_Ledger.Ledger_Id</id>    
   <name>Ledger Id</name>    
   </row>    
    
   <row>    
   <id>dbo.FA_Master_Ledger.Ledger_Name</id>    
   <name>Ledger Name</name>    
   </row>    
    
            <row>    
   <id>dbo.FA_Master_Ledger.Alias</id>    
   <name>Alias</name>    
   </row>    
    
   <row>    
   <id>dbo.FA_Master_Ledger_Group.Ledger_Group_Name</id>    
   <name>Ledger Group Name</name>    
   </row>    
    
            <row>    
    <id>dbo.FA_Master_Ledger_Opening_Details.Opening_Balance</id>    
    <name>Opening Balance</name>    
   </row>    
                 
   </root>'    
    
       
    
  end    
 else--if @Is_Page_Load=1    
  begin    
    
   select @SqlQuery='SELECT FA_Master_Ledger_Group.Nature,dbo.FA_Master_Ledger.Ledger_Id as Col1,     
   dbo.FA_Master_Ledger.Ledger_Name as Col2,    
   dbo.FA_Master_Ledger.Alias as Col3,     
   dbo.FA_Master_Ledger_Group.Ledger_Group_Name as Col4,     
            case when IsNull(FA_Master_Ledger_Opening_Details.Opening_Balance,0)<0    
            then  Cast(abs(FA_Master_Ledger_Opening_Details.Opening_Balance) as varchar) + '' Dr''    
            else Cast(abs(FA_Master_Ledger_Opening_Details.Opening_Balance) as varchar) + '' Cr''    
            end as Col5,    
   '''' as Col6,'''' as Col7,'''' as Col8,'''' as Col9,'''' as Col10,    
   1 as Can_Edit_Cancel    
       
   FROM dbo.FA_Master_Ledger 
   Inner Join dbo.FA_Master_Ledger_Group 
   On dbo.FA_Master_Ledger.Ledger_Group_Id=dbo.FA_Master_Ledger_Group.Ledger_Group_Id    
   Left Outer Join dbo.FA_Master_Ledger_Opening_Details 
   On dbo.FA_Master_Ledger_Opening_Details.Ledger_Id=dbo.FA_Master_Ledger.Ledger_Id 
   and dbo.FA_Master_Ledger_Opening_Details.Division_ID =  @DivisionId  
   and dbo.FA_Master_Ledger_Opening_Details.Main_ID = @MainId 
   and dbo.FA_Master_Ledger_Opening_Details.Hierarchy_Code = @HierarchyCode
   left outer join FA_Master_Ledger_Group LedgerGroup
   on FA_Master_Ledger.Primary_Ledger_Group_Id = LedgerGroup.Ledger_Group_Id       
   Where (LedgerGroup.Nature = ''Assets'' or LedgerGroup.Nature = ''Liabilities'')
   and
	'
	+  @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39) +
   'order By Col2 desc'             

--(FA_Master_Ledger.Ledger_Group_Id In (select Ledger_Group_Id from dbo.GetChildLedgerGroupIds(24)) OR FA_Master_Ledger.Ledger_Group_Id In (select Ledger_Group_Id from dbo.GetChildLedgerGroupIds(27)))

  end --if @Is_Page_Load=1    
    
end  --if @Menu_Item_Id=34    
    
    
    
--****************************** COST CENTRE  *******************************************                
-- ADDED by Ankit champaneriya    
-- 14-10-2008    
                
if @MenuItemCode=32
 begin    
            
 if @IsPageLoad=1    
  begin    
    
    
   select @xml='    
   <root>    
   <row>    
   <id>dbo.FA_Master_Cost_Centre.Cost_Centre_ID</id>    
   <name>Cost Centre Id</name>    
   </row>    
    
   <row>    
   <id>dbo.FA_Master_Cost_Centre.Cost_Centre_Name</id>    
   <name>Cost Centre Name</name>    
   </row>    
   </root>'    
    
       
    
  end    
 else--if @Is_Page_Load=1    
  begin    
    
   select @SqlQuery='SELECT dbo.FA_Master_Cost_Centre.Cost_Centre_ID as Col1,     
   dbo.FA_Master_Cost_Centre.Cost_Centre_Name as Col2,    
   '''' as Col3,     
   '''' Col4, '''' as Col5,    
   '''' as Col6,'''' as Col7,'''' as Col8,'''' as Col9,'''' as Col10    
   ,1 as Can_Edit_Cancel    
       
   FROM dbo.FA_Master_Cost_Centre    
   where  '  + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)                
    
  end --if @Is_Page_Load=1    
    
end  --if @Menu_Item_Id=32    
    
    
-------------------------------------------------------------------------------------                
    
    
--****************************** All Vouchers *******************************************                           
                              
if @MenuItemCode=94 OR @MenuItemCode=96 OR @MenuItemCode=97 OR @MenuItemCode=98 
OR @MenuItemCode=99 OR @MenuItemCode=100
 begin      
              
 if @IsPageLoad=1      
  begin      
                  
                  
   select @xml='      
   <root>      
   <row>      
   <id>FA_Opr_Voucher.Voucher_No</id>                  
   <name>Voucher No</name>                  
   </row>     
    
   <row>                  
   <id>FA_Opr_Voucher.Voucher_No</id>                  
   <name>Voucher No</name>                  
   </row>                 
                  
   <row>                  
   <id>FA_Opr_Voucher.Voucher_Date</id>                  
   <name>Voucher Date</name>                  
   </row>                 
               
   <row>                  
   <id>FA_Master_Ledger.Ledger_Name</id>                  
   <name>Ledger Name</name>                  
   </row>                  
              
   <row>                  
   <id>FA_Opr_Voucher.Ref_No</id>                  
   <name>Ref No.</name>                  
   </row>    
    
   <row>                  
   <id>FA_Opr_Voucher.Total_Debit</id>                  
   <name>Total Debit</name>                  
   </row>    
    
   <row>                  
   <id>FA_Opr_Voucher.Total_Credit</id>                  
   <name>Total Credit</name>                  
   </row>    
    
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
   select @SqlQuery=' SELECT dbo.FA_Opr_Voucher.Voucher_Id as Col1,dbo.FA_Opr_Voucher.Voucher_No as Col2,dbo.DateOnlyDisplay(FA_Opr_Voucher.Voucher_Date) as Col3,dbo.FA_Master_Ledger.Ledger_Name  as Col4, dbo.FA_Opr_Voucher.Ref_No as Col5,     
                      dbo.FA_Opr_Voucher.Total_Debit as Col6, dbo.FA_Opr_Voucher.Total_Credit as Col7,     
                      '''' as Col8,'''' as Col9,'''' as Col10,    
       1 as Can_Edit_Cancel    
    
                      FROM     dbo.FA_Master_Ledger INNER JOIN    
                      dbo.FA_Opr_Voucher ON dbo.FA_Master_Ledger.Ledger_Id = dbo.FA_Opr_Voucher.Ledger_Id    
    
     where dbo.FA_Opr_Voucher.Division_Id=' + cast(@DivisionId as Varchar) + ' And dbo.FA_Opr_Voucher.Year_Code=' + cast(@YearCode as Varchar)+ ' And dbo.FA_Opr_Voucher.Hierarchy_Code='''+@HierarchyCode +''' And dbo.FA_Opr_Voucher.Main_Id=' + Cast(@MainId
  
 as varchar) + ' And dbo.FA_Opr_Voucher.Voucher_Type_Id='+Cast(@IdValue as Varchar) +' And '    
     + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39) + 'and is_cancelled = 0    
   and (cast(dbo.dateonly(FA_Opr_Voucher.Voucher_Date) as datetime) between @Fromdate and @Todate)
	AND Is_Manual_Entry = 1'                             
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=94    
    
    
--****************************** TDS Deduction,Advance Payment*******************************************                           
                              
if @MenuItemCode=105 OR @MenuItemCode=102
 begin      
              
 if @IsPageLoad=1      
  begin      
                  
                  
   select @xml='      
   <root>      
   <row>      
   <id>FA_Opr_Voucher.Voucher_No</id>                  
   <name>Voucher No</name>                  
   </row>    
    
   <row>                  
   <id>FA_Opr_Voucher.Voucher_No</id>                  
   <name>Voucher No</name>                  
   </row>                  
                  
   <row>                  
   <id>FA_Opr_Voucher.Voucher_Date</id>                  
   <name>Voucher Date</name>                  
   </row>                 
               
   <row>                  
   <id>FA_Opr_Voucher.Ledger_Name</id>                  
   <name>Ledger Name</name>                  
   </row>                  
              
   <row>                  
   <id>FA_Opr_Voucher.Ref_No</id>                  
   <name>Ref No.</name>          
   </row>    
    
   <row>                  
   <id>FA_Opr_Voucher.Total_Debit</id>                  
   <name>Total Debit</name>                  
   </row>    
    
   <row>                  
   <id>FA_Opr_Voucher.Total_Credit</id>                  
   <name>Total Credit</name>                  
   </row>    
    
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
   select @SqlQuery=' SELECT dbo.FA_Opr_Voucher.Voucher_Id as Col1, dbo.FA_Opr_Voucher.Voucher_No as Col2,dbo.DateOnlyDisplay(dbo.FA_Opr_Voucher.Voucher_Date) as Col3,dbo.FA_Master_Ledger.Ledger_Name  as Col4, dbo.FA_Opr_Voucher.Ref_No as Col5,     
                      dbo.FA_Opr_Voucher.Total_Debit as Col6, dbo.FA_Opr_Voucher.Total_Credit as Col7,     
                      '''' as Col8,'''' as Col9,'''' as Col10,    
       1 as Can_Edit_Cancel    
    
                      FROM     dbo.FA_Master_Ledger INNER JOIN    
                      dbo.FA_Opr_Voucher ON dbo.FA_Master_Ledger.Ledger_Id = dbo.FA_Opr_Voucher.Ledger_Id    
    
     where dbo.FA_Opr_Voucher.Division_Id=' + cast(@DivisionId as Varchar(10)) +' And dbo.FA_Opr_Voucher.Year_Code=' + cast(@YearCode as Varchar)+ ' And dbo.FA_Opr_Voucher.Hierarchy_Code='''+@HierarchyCode +''' And dbo.FA_Opr_Voucher.Main_Id=' + Cast(@MainId as varchar) + ' And dbo.FA_Opr_Voucher.Voucher_Type_Id='+Cast(@IdValue as Varchar) +   
     ' And '+ @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39) + 'and is_cancelled = 0 and Is_Manual_Entry=0
	  and (cast(dbo.dateonly(FA_Opr_Voucher.Voucher_Date) as datetime) between @Fromdate and @Todate)'                             
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=94    
    
    
--****************************** MR Booking Details *******************************************                           
                              
if @MenuItemId=106    
 begin      
              
 if @IsPageLoad=1      
  begin      
                  
   select @xml='      
   <root>     
   <row>      
   <id>FA_Opr_MR.MR_ID</id>                  
   <name>MR ID</name>                  
   </row>     
     
   <row>      
   <id>FA_Opr_MR.MR_No_For_Print</id>                  
   <name>MR No</name>                  
   </row>                  
                  
   <row>                  
   <id>FA_Opr_MR.MR_Date</id>                  
   <name>MR Date</name>                  
   </row>                 
               
   <row>                  
   <id>FA_Opr_MR.MR_Type</id>                  
   <name>MR Type</name>                  
   </row>  

   <row>                  
   <id>Mr_Branch.Branch_Name</id>                  
   <name>MR Branch</name>                  
   </row>
         
   <row>                  
   <id>GC.GC_No_For_Print</id>
   <name>' + @GC_Caption + ' No</name>
   </row>
 
   <row>                  
   <id>FA_Opr_MR.Total_MR_Amount</id>
   <name>Total MR Amount</name>
   </row>
    
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
 -- @DivisionId Added Ankit 11-02-09 7.30 pm
 select @SqlQuery=' SELECT FA_Opr_MR.MR_ID as Col1,FA_Opr_MR.MR_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(FA_Opr_MR.MR_Date) as Col3,    
 dbo.EC_Master_MR_Type.MR_Type as Col4,    
 Mr_Branch.Branch_Name as Col5,GC.GC_No_For_Print as Col6,
 FA_Opr_MR.Total_MR_Amount as Col7,    
 '''' as Col8,'''' as Col9,'''' as Col10    
,dbo.Ec_Opr_Can_Edit_Cancel(''Booking_MR'',FA_Opr_MR.MR_ID) as Can_Edit_Cancel  

 FROM FA_Opr_MR    
 inner join Ec_Master_Branch MR_BKG_Branch    
 on MR_BKG_Branch.Branch_ID = FA_Opr_MR.MR_Branch_ID    
 inner join Ec_Master_Area MR_BKG_Area    
 on MR_BKG_Branch.Area_ID = MR_BKG_Area.Area_ID    
 inner join Ec_Master_Region MR_BKG_Region    
 on MR_BKG_Branch.Region_ID = MR_BKG_Region.Region_ID    
 inner join dbo.EC_Master_MR_Type    
 ON FA_Opr_MR.MR_Type_ID = EC_Master_MR_Type.MR_Type_ID  
 inner join dbo.EC_Master_Branch Mr_Branch    
 ON FA_Opr_MR.MR_Branch_ID = Mr_Branch.Branch_ID    
 inner join dbo.EC_Opr_Vtrans_Gc GC    
 ON FA_Opr_MR.GC_ID = GC.GC_ID 

 where FA_Opr_MR.is_cancelled = 0    
 and FA_Opr_MR.Division_ID = @DivisionId
 and FA_Opr_MR.MR_Type_ID = 1    
 and MR_BKG_Branch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else MR_BKG_Branch.Region_Id end)    
 and MR_BKG_Branch.Area_Id = (case @HierarchyCode when ''AO'' then @MainId else MR_BKG_Branch.Area_Id end)    
 and MR_BKG_Branch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else MR_BKG_Branch.Branch_Id end)    
 and (cast(dbo.dateonly(FA_Opr_MR.MR_Date) as datetime) between @Fromdate and @Todate)    
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)   
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=106    
    
-------------------------------------------------------------------------------------      
--****************************** MR Delivery Details *******************************************                           
                              
if @MenuItemId=108    
 begin      
              
 if @IsPageLoad=1      
  begin      
                  
   select @xml='      
   <root>     
   <row>      
   <id>FA_Opr_MR.MR_ID</id>                  
   <name>MR ID</name>                  
   </row>     
     
   <row>      
   <id>FA_Opr_MR.MR_No_For_Print</id>                  
   <name>MR No</name>                  
   </row>                  
                  
   <row>                  
   <id>FA_Opr_MR.MR_Date</id>                  
   <name>MR Date</name>                  
   </row>                 
               
   <row>                  
   <id>FA_Opr_MR.MR_Type</id>                  
   <name>MR Type</name>                  
   </row>     

   <row>                  
   <id>Mr_Branch.Branch_Name</id>                  
   <name>MR Branch</name>                  
   </row>
         
   <row>                  
   <id>GC.GC_No_For_Print</id>
   <name>' + @GC_Caption + ' No</name>
   </row>
 
   <row>                  
   <id>FA_Opr_MR.Total_MR_Amount</id>
   <name>Total MR Amount</name>
   </row>             
              
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     --@DivisionId Added Ankit 11-02-09 7.30 pm
   select @SqlQuery='SELECT FA_Opr_MR.MR_ID as Col1,FA_Opr_MR.MR_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(FA_Opr_MR.MR_Date) as Col3,    
 dbo.EC_Master_MR_Type.MR_Type as Col4,    
 Mr_Branch.Branch_Name as Col5,GC.GC_No_For_Print as Col6,
 FA_Opr_MR.Total_MR_Amount as Col7,    
 '''' as Col8,'''' as Col9,'''' as Col10    
 ,dbo.Ec_Opr_Can_Edit_Cancel(''Dly_MR'',FA_Opr_MR.MR_ID) as Can_Edit_Cancel  
 FROM FA_Opr_MR    
 inner join Ec_Master_Branch MR_DEL_Branch    
 on MR_DEL_Branch.Branch_ID = FA_Opr_MR.MR_Branch_ID    
 inner join Ec_Master_Area MR_DEL_Area    
 on MR_DEL_Branch.Area_ID = MR_DEL_Area.Area_ID    
 inner join Ec_Master_Region MR_DEL_Region    
 on MR_DEL_Branch.Region_ID = MR_DEL_Region.Region_ID    
 inner join dbo.EC_Master_MR_Type    
 ON FA_Opr_MR.MR_Type_ID = EC_Master_MR_Type.MR_Type_ID   
 inner join dbo.EC_Master_Branch Mr_Branch    
 ON FA_Opr_MR.MR_Branch_ID = Mr_Branch.Branch_ID    
 inner join dbo.EC_Opr_Vtrans_Gc GC    
 ON FA_Opr_MR.GC_ID = GC.GC_ID 
 
 where FA_Opr_MR.is_cancelled = 0    
 and FA_Opr_MR.Division_ID = @DivisionId
 and FA_Opr_MR.MR_Type_ID = 2    
 and MR_DEL_Branch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else MR_DEL_Branch.Region_Id end)    
 and MR_DEL_Branch.Area_Id = (case @HierarchyCode when ''AO'' then @MainId else MR_DEL_Branch.Area_Id end)    
 and MR_DEL_Branch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else MR_DEL_Branch.Branch_Id end)    
 and (cast(dbo.dateonly(FA_Opr_MR.MR_Date) as datetime) between @Fromdate and @Todate)    
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)   
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=108    
-------------------------------------------------------------------------------------      
--****************************** ATH Details *******************************************                           
    
if @MenuItemId=113    
 begin    
    
 if @IsPageLoad=1    
  begin      
    
   select @xml='    
   <root>    
   <row>    
   <id>ATH_Pay.ATH_ID</id>    
   <name>ATH ID</name>    
   </row>    
     
   <row>    
   <id>ATH_Pay.ATH_Voucher_No_For_Print</id>    
   <name>ATH Voucher No</name>    
   </row>    
    
   <row>    
   <id>ATH_Pay.ATH_Date</id>    
   <name>ATH Date</name>    
   </row>    
    
   <row>    
   <id>lhpo.LHPO_No_For_Print</id>    
   <name>' + @LHPO_Caption + ' No</name>   
   </row>    
    
   <row>    
   <id>vehicle.Vehicle_No</id>    
   <name>Vehicle No</name>    
   </row>  

   <row>    
   <id>ATH_Pay.Total_Paid_Amount</id>    
   <name>Total Paid Amount</name>    
   </row>  
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     -- @DivisionId Added Ankit 11-02-09 7.30 pm
   select @SqlQuery='SELECT ATH_Pay.ATH_ID as Col1,    
 ATH_Pay.ATH_Voucher_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(ATH_Pay.ATH_Date) as Col3,    
 lhpo.LHPO_No_For_Print as Col4,    
 vehicle.Vehicle_No as Col5,ATH_Pay.Total_Paid_Amount as Col6,'''' as Col7,    
 '''' as Col8,'''' as Col9,'''' as Col10    
 ,1 as Can_Edit_Cancel
 FROM FA_Opr_ATH_Payment_Voucher ATH_Pay
 inner join EF_Master_vehicle vehicle
 on ATH_Pay.Vehicle_ID = vehicle.Vehicle_ID
 inner join Ec_opr_vtrans_lhpo lhpo
 on ATH_Pay.LHPO_ID = lhpo.LHPO_ID
 where ATH_Pay.is_cancelled = 0   
 and ATH_Pay.Division_ID = @DivisionId 
 and ATH_Pay.ATH_Main_ID = @MainId
 and ATH_Pay.ATH_Hierarchy_Code = @HierarchyCode    
 and (cast(dbo.dateonly(ATH_Pay.ATH_Date) as datetime) between @Fromdate and @Todate)    
 and @ColName like ''%'+@SearchText +'%'''    
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=113    
------------------------------------------------------------------------------------                
--****************************** BTH Details *******************************************                           
    
if @MenuItemId=114 or @MenuItemId = 202
 begin    
    
 if @IsPageLoad=1    
  begin      
    
   select @xml='    
   <root>    
   <row>    
   <id>BTH_Pay.BTH_ID</id>    
   <name>BTH ID</name>    
   </row>    
     
   <row>    
   <id>BTH_Pay.BTH_Voucher_No_For_Print</id>    
   <name>BTH Voucher No</name>    
   </row>    
    
   <row>    
   <id>BTH_Pay.BTH_Date</id>    
   <name>BTH Date</name>    
   </row>  

   <row>    
   <id>BTH_Pay.Total_Payable_Amount</id>    
   <name>Total Paid Amount</name>    
   </row> 

   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     -- @DivisionId added Ankit :11-02-09 7.30 pm
   select @SqlQuery='SELECT BTH_Pay.BTH_ID as Col1,    
 BTH_Pay.BTH_Voucher_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(BTH_Pay.BTH_Date) as Col3,
 BTH_Pay.Total_Payable_Amount as Col4,'''' as Col5,'''' as Col6,'''' as Col7,    
 '''' as Col8,'''' as Col9,'''' as Col10,    
 1 as Can_Edit_Cancel    
 FROM FA_Opr_BTH_Payment_Voucher BTH_Pay
 where BTH_Pay.is_cancelled = 0 
 and BTH_Pay.Division_ID =  @DivisionId  
 and BTH_Pay.BTH_Main_ID = @MainId 
 and BTH_Pay.BTH_Hierarchy_Code = @HierarchyCode  
 and (cast(dbo.dateonly(BTH_Pay.BTH_Date) as datetime) between @Fromdate and @Todate)    
 and @ColName like ''%'+@SearchText +'%'''    
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=114    
    
------------------------------------------------------------------------------------                
--****************************** Transport Bill *******************************************                           
    
if @MenuItemId=143    
 begin    
    
 if @IsPageLoad=1    
  begin      
    
   select @xml='    
   <root>    
   <row>    
   <id>Bill.Bill_ID</id>    
   <name>Bill ID</name>    
   </row>    
     
   <row>    
   <id>Bill.Bill_No_For_Print</id>    
   <name>Bill No</name>    
   </row>    
    
   <row>    
   <id>Bill.Bill_Date</id>    
   <name>Bill Date</name>    
   </row>    
    
   <row>    
   <id>BillType.Bill_Type</id>    
   <name>Bill Type</name>    
   </row>

   <row>    
   <id>BillType.Bill_Type</id>    
   <name>Bill For</name>    
   </row>    
    
   <row>    
   <id>Bill.Bill_Sub_Total</id>    
   <name>Bill Sub Total</name>    
   </row>    
    
   <row>    
   <id>Bill.Bill_Total_Amount</id>    
   <name>Total Bill Amount</name>    
   </row>    
     
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     -- @DivisionId Added Ankit 11-02-09 7.30 pm
   select @SqlQuery='SELECT Bill_ID as Col1,    
 Bill_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(Bill_Date) as Col3,BillType.Bill_Type as Col4,
 case when transport_bill_type_id = 1 then ''Frieght''
	  when transport_bill_type_id = 2 then ''Octroi''
	  when transport_bill_type_id = 3 then ''Both''
	  else '''' end as Col5,
 Bill_Sub_Total as Col6,    
 Bill_Total_Amount as Col7,'''' as Col8,    
 '''' as Col9,'''' as Col10,    
 1 as Can_Edit_Cancel    
 FROM FA_Opr_Bill Bill inner join FA_Master_Bill_Type BillType    
 on Bill.Bill_Type_ID=BillType.Bill_Type_ID    
 where is_cancelled = 0    
 and Bill.Division_ID = @DivisionId
 and (cast(dbo.dateonly(Bill_Date) as datetime) between @Fromdate and @Todate)    
 and Bill_Hierarchy_Code = @HierarchyCode
 and Bill_Main_ID = @MainId     
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=143    
  
------------------------------------------------------------------------------------                
--****************************** Door Delivery Voucher *******************************************                           
    
if @MenuItemId=165    
 begin    
    
 if @IsPageLoad=1    
  begin     
    
   select @xml='    
   <root>    
   <row>    
   <id>DoorDelVoucher.Door_Delivery_Voucher_Id</id>    
   <name>Door_Delivery_Voucher_Id</name>    
   </row>    
     
   <row>    
   <id>DoorDelVoucher.Door_Delivery_Voucher_No_For_Print</id>    
   <name>Door Delivery Voucher No</name>    
   </row>    
    
   <row>    
   <id>DoorDelVoucher.Door_Delivery_Voucher_Date</id>    
   <name>Voucher Date</name>    
   </row>    
    
   <row>    
   <id>DoorDelVoucher.Ref_No</id>    
   <name>Ref No</name>    
   </row>    
    
   <row>    
   <id>DoorDelVoucher.Total_Amount</id>    
   <name>Total Amount</name>    
   </row>    
     
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     
   select @SqlQuery='SELECT DoorDelVoucher.Door_Delivery_Voucher_Id as Col1,    
      DoorDelVoucher.Door_Delivery_Voucher_No_For_Print as Col2,    
      dbo.DateOnlyDisplay(DoorDelVoucher.Door_Delivery_Voucher_Date) as Col3,  
      DoorDelVoucher.Ref_No as Col4,    
      DoorDelVoucher.Total_Amount as Col5,    
      '''' as Col6,'''' as Col7,    
      '''' as Col8,'''' as Col9,'''' as Col10,    
      1 as Can_Edit_Cancel    
      FROM FA_Opr_Door_Delivery_Voucher DoorDelVoucher  
      Where is_cancelled = 0    
      and (cast(dbo.dateonly(DoorDelVoucher.Door_Delivery_Voucher_Date) as datetime) between @Fromdate and @Todate)    
      and @ColName like ''%'+@SearchText +'%'''    
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=165      
------------------------------------------------------------------------------------                
--****************************** Local Cartage Voucher  *******************************************                           
    
if @MenuItemId=166    
 begin    
    
 if @IsPageLoad=1    
  begin
    
   select @xml='    
   <root>    
   <row>    
   <id>Local.Local_Cartage_Id</id>    
   <name>Local_Cartage_Id</name>    
   </row>    
     
   <row>    
   <id>Local.Local_Cartage_No_For_Print</id>    
   <name>Local Cartage No</name>    
   </row>    
    
   <row>    
   <id>Local.Local_Cartage_Date</id>    
   <name>Local Cartage Date</name>    
   </row>    
    
   <row>    
   <id>Local.Ref_No</id>    
   <name>Ref No</name>    
   </row>    
    
   <row>    
   <id>Local.Total_Amount</id>    
   <name>Total Amount</name>    
   </row>    
     
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     
   select @SqlQuery='SELECT Local.Local_Cartage_Id as Col1,    
     Local.Local_Cartage_No_For_Print as Col2,    
     dbo.DateOnlyDisplay(Local.Local_Cartage_Date) as Col3,  
     Local.Ref_No as Col4,    
     Local.Total_Amount as Col5,    
     '''' as Col6,'''' as Col7,    
     '''' as Col8,'''' as Col9,'''' as Col10,    
     1 as Can_Edit_Cancel    
     FROM FA_Opr_Local_Cartage Local  
      Where is_cancelled = 0    
      and (cast(dbo.dateonly(Local.Local_Cartage_Date) as datetime) between @Fromdate and @Todate)    
      and @ColName like ''%'+@SearchText +'%'''
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=166     
-------------------------------------------------------------------------------------      
--****************************** Credit Memo *******************************************                           
                              
if @MenuItemId=195
 begin
              
 if @IsPageLoad=1      
  begin      
                  
   select @xml='      
   <root>     
   <row>      
   <id>CreditMemo.Credit_Memo_ID</id>                  
   <name>Credit Memo ID</name>                  
   </row>
 
   <row>      
   <id>CreditMemo.Credit_Memo_No_For_Print</id>                  
   <name>Credit Memo No</name>
   </row>
 
   <row>
   <id>CreditMemo.Credit_Memo_Date</id>
   <name>Credit Memo Date</name>
   </row>
  
   <row>
   <id>CreditMemoFor.Credit_Memo_For</id>
   <name>Credit Memo For</name>
   </row>
  
   <row>     
   <id>GC.GC_No_For_Print</id>     
   <name>' + @GC_Caption + ' No</name>    
   </row> 
   </root>'
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     
   select @SqlQuery='SELECT CreditMemo.Credit_Memo_ID as Col1,CreditMemo.Credit_Memo_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(CreditMemo.Credit_Memo_Date) as Col3,    
 CreditMemoFor.Credit_Memo_For as Col4,    
 gc.GC_No_For_Print as Col5,'''' as Col6,'''' as Col7,    
 '''' as Col8,'''' as Col9,'''' as Col10    
 ,1 as Can_Edit_Cancel    
 FROM FA_Opr_Credit_Memo CreditMemo    
 inner join Ec_Master_Branch Branch    
 on Branch.Branch_ID = CreditMemo.Credit_Memo_Branch_ID    
 inner join Ec_Master_Area Area    
 on Branch.Area_ID = Area.Area_ID    
 inner join Ec_Master_Region Region    
 on Branch.Region_ID = Region.Region_ID    
 inner join dbo.EC_Master_Credit_Memo_For CreditMemoFor
 ON CreditMemo.Credit_Memo_for_ID = CreditMemoFor.Credit_Memo_For_ID   
 inner join dbo.EC_Opr_Vtrans_Gc gc
 ON CreditMemo.gc_ID = gc.gc_ID    
 
 where CreditMemo.is_cancelled = 0    
 and Branch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else Branch.Region_Id end)    
 and Branch.Area_Id = (case @HierarchyCode when ''AO'' then @MainId else Branch.Area_Id end)    
 and Branch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else Branch.Branch_Id end)    
 and (cast(dbo.dateonly(CreditMemo.Credit_Memo_Date) as datetime) between @Fromdate and @Todate)    
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=195   
-------------------------------------------------------------------------------------      
--****************************** Credit Memo *******************************************                           
                              
if @MenuItemId=201
 begin
              
 if @IsPageLoad=1      
  begin      
                  
   select @xml='      
   <root>     
   <row>      
   <id>FA_Opr_Credit_Memo_Receipt.Credit_Memo_Receipt_ID</id>                  
   <name>Credit_Memo_Receipt_ID</name>                  
   </row>
 
   <row>      
   <id>FA_Opr_Credit_Memo_Receipt.Credit_Memo_Receipt_No_For_Print</id>                  
   <name>Credit Memo Receipt No</name>
   </row>
 
   <row>
   <id>FA_Opr_Credit_Memo_Receipt.Credit_Memo_Receipt_Date</id>
   <name>Date</name>
   </row>
  
   <row>
   <id>Ec_Master_Branch.Branch_Name</id>
   <name>Branch Name</name>
   </row>
  
   <row>     
   <id>FA_Master_Ledger.Ledger_Name</id>     
   <name>Ledger Name</name>    
   </row> 
	
	
   <row>     
   <id>FA_Opr_Credit_Memo_Receipt.Total_Receipt_Amount</id>     
   <name>Total Receipt Amount</name>    
   </row> 

   </root>'
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     
   select @SqlQuery='Select	Credit_Memo_Receipt_ID as Col1,Credit_Memo_Receipt_No_For_Print as Col2,
				    dbo.DateOnlyDisplay(Credit_Memo_Receipt_Date) as Col3,Ec_Master_Branch.Branch_Name as Col4,
					FA_Master_Ledger.Ledger_Name as Col5,Total_Receipt_Amount as Col6,			 
					'''' as Col7,'''' as Col8,'''' as Col9,'''' as Col10,1 as Can_Edit_Cancel    
	From	FA_Opr_Credit_Memo_Receipt
	Left Join FA_Master_Ledger
	On		FA_Master_Ledger.Ledger_ID=FA_Opr_Credit_Memo_Receipt.Ledger_ID	
	Left Join Ec_Master_Branch
	On Ec_Master_Branch.Branch_Id=FA_Opr_Credit_Memo_Receipt.Credit_Memo_Branch_ID
	where FA_Opr_Credit_Memo_Receipt.Is_Cancelled = 0    
	and (cast(dbo.dateonly(FA_Opr_Credit_Memo_Receipt.Credit_Memo_Receipt_Date) as datetime) between @Fromdate and @Todate)
	and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)
    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=201 


--------------------------------------------------------------------------------------    
--EXECUTE THE RESPECTIVE SQL QUERY GENERATED    
--------------------------------------------------------------------------------------    
                
if @IsPageLoad=1    
 begin    
               
  DECLARE @idoc int          
  EXEC sp_xml_preparedocument @idoc OUTPUT, @xml     
    
  (SELECT  id,name    
  from OPENXML (@idoc, '/root/row',2)          
  WITH (id varchar(100),name varchar(50)))    
    
  EXEC sp_xml_removedocument @idoc     
  --print @TableName    
 end    
else    
 begin           
   declare @params as nvarchar(4000)    
   SELECT @params = '@HierarchyCode varchar(5),@MainId int,@Fromdate datetime,@Todate datetime,@ColName varchar(100),@DivisionId int'
   EXEC sp_executesql @SqlQuery, @params,@HierarchyCode,@MainId,@Fromdate,@Todate,@ColName,@DivisionId
    
--  EXECUTE (@SqlQuery)    
 end            
--------------------------------------------------------------------------------------    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    













































GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Select dbo.[Multiple_Items] (174)    
    
CREATE FUNCTION [dbo].[Multiple_Items](@GC_ID int)    
RETURNS varchar(8000)    
AS    
BEGIN    
    
declare @Item_Name varchar(8000)    
set @Item_Name = ''       

Declare @Temp as Table (Item_Name varchar(8000))
Insert into @Temp
Select Distinct d.Item_Name
From EC_OPR_VTRANS_GC a    
INNER JOIN dbo.EC_Opr_VTrans_GC_Commodity_Details c      
ON a.GC_ID = c.GC_ID    
INNER JOIN ec_master_Item d                  
ON c.Item_ID = d.Item_ID  
Where a.GC_ID = @GC_ID  

select @Item_Name = 
case @Item_Name when '' then d.Item_Name    
else @Item_Name + ',' + d.Item_Name end  
From @Temp d

RETURN @Item_Name    
END    


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--exec [dbo].[EC_RPT_Incoming_Trucks_Alert_Excel] 0,0,14,'',0,0,'n'

CREATE proc [dbo].[EC_RPT_Incoming_Trucks_Alert_Excel]
(@Region_ID int,
@Area_ID int,
@Branch_ID int,
@TruckNo varchar(20), 
@PageIndex int,     
@PageSize int ,
@is_for_userdesk varchar(1),

@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1
)       


AS
-- Begin       
SET NOCOUNT ON;

declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Vehicle No','s,1')
		insert into @Dropdown_Search values ('Vehicle Capacity','n,3')
		insert into @Dropdown_Search values ('From','s,4')
		insert into @Dropdown_Search values ('To','s,6')
		insert into @Dropdown_Search values ('LHC Date','d,5')
		select  *From @Dropdown_Search

		return
	end  

declare @flag bit
declare @Hierarchy_Code varchar(5)
declare @Main_ID int

set @flag = 0

if @Branch_ID > 0
	begin
	set @Hierarchy_Code = 'BO'
	set @Main_ID = @Branch_ID
	end
else if @Area_ID > 0
	begin
	set @Hierarchy_Code = 'AO'
	set @Main_ID = @Area_ID
	end
else if @Region_ID > 0
	begin
	set @Hierarchy_Code = 'RO'
	set @Main_ID = @Region_ID
	end
else
	begin
	set @Hierarchy_Code = 'HO'
	set @Main_ID = 0
	set @flag = 1
	end
-------------------------------STEP 1--------------------------------------------------------------      
BEGIN 

WITH IncomingTrucksAlertDetails AS      
(      
select  ROW_NUMBER() OVER(ORDER BY lhpo.LHPO_Date) AS 'Sr No.', 
Vehicle_No as 'Truck No',Vehicle_Category as 'Vehicle Category', lhpo_no_for_print as 'LHC No',
dbo.dateonlydisplay(LHPO_Date) as 'LHC Date',
from_service_location.Service_Location_Name as 'FROM',
To_service_location.Service_Location_Name as 'TO',
[dbo].[Incoming_Truck_Alert_Get_Wt_And_Article] (lhpo.lhpo_id,1,'',0,0) as 'Loaded Articles',
[dbo].[Incoming_Truck_Alert_Get_Wt_And_Article] (lhpo.lhpo_id,2,'',0,0) as 'Loaded Weight',
Vehicle_Capacity as 'Vehicle Capacity',
[dbo].[Incoming_Truck_Alert_Get_Wt_And_Article] (lhpo.lhpo_id,1,@Hierarchy_Code,@Main_ID,1) as 'Loaded Articles For Us',
[dbo].[Incoming_Truck_Alert_Get_Wt_And_Article] (lhpo.lhpo_id,2,@Hierarchy_Code,@Main_ID,1) as 'Loaded Weight For Us'
from
ec_opr_vtrans_lhpo lhpo
inner join ef_master_vehicle vehicle
on lhpo.vehicle_id = vehicle.vehicle_id
inner join ef_master_vehicle_category vehicle_category
on vehicle.vehicle_category_id = vehicle_category.vehicle_category_id
inner join ec_master_service_location from_service_location
on lhpo.from_location_id = from_service_location.Service_Location_ID
inner join ec_master_service_location to_service_location
on lhpo.to_location_id = to_service_location.Service_Location_ID
where lhpo_type_id = 1
and lhpo.is_cancelled = 0
and 
(([dbo].[Incoming_Truck_Alert_Get_Wt_And_Article] (lhpo.lhpo_id,2,@Hierarchy_Code,@Main_ID,1) > 0 and @Hierarchy_Code <> 'HO')
or (@Hierarchy_Code = 'HO' and @flag = 1))

and dbo.EC_RPT_Incoming_Trucks_Has_Memo_For_Me (@Hierarchy_Code,@Main_ID,LHPO_ID) = 1

and 
(@criteria_id = 0
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and Vehicle_No = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and Vehicle_No like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and Vehicle_No like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and Vehicle_No like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and from_service_location.Service_Location_Name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and from_service_location.Service_Location_Name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and from_service_location.Service_Location_Name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and from_service_location.Service_Location_Name like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and To_service_location.Service_Location_Name = @Filtered_Text)
or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and To_service_location.Service_Location_Name like @Filtered_Text + '%')
or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and To_service_location.Service_Location_Name like '%' + @Filtered_Text)
or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and To_service_location.Service_Location_Name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 2 and Vehicle_Capacity = @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 2 and @datatype_id = 2 and Vehicle_Capacity >= @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 3 and @datatype_id = 2 and Vehicle_Capacity <= @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 4 and @datatype_id = 2 and Vehicle_Capacity > @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 5 and @datatype_id = 2 and Vehicle_Capacity < @Filtered_Text_int)

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 4 and LHPO_Date = @Filtered_Date)
or (@colid = 5 and @criteria_id = 2 and @datatype_id = 4 and LHPO_Date >= @Filtered_Date)
or (@colid = 5 and @criteria_id = 3 and @datatype_id = 4 and LHPO_Date <= @Filtered_Date)
or (@colid = 5 and @criteria_id = 4 and @datatype_id = 4 and LHPO_Date > @Filtered_Date)
or (@colid = 5 and @criteria_id = 5 and @datatype_id = 4 and LHPO_Date < @Filtered_Date)
)
)

--exec [dbo].[EC_RPT_Incoming_Trucks_Alert_Excel] 0,0,0,'',0,0,'n'
-------------------------------STEP 2--------------------------------------------------------------      
SELECT * into #IncomingTrucksAlert FROM IncomingTrucksAlertDetails      
-------------------------------STEP 3--------------------------------------------------------------      


if @is_for_userdesk <> 'y'
	select * From #IncomingTrucksAlert    
	 WHERE
	([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)      
	or      
	(@PageSize = 0)      
--------------------------------STEP 4-------------------------------------------------------------      
if @is_for_userdesk <> 'y'
	select 
   count (*) as [Total],     
	sum([Loaded Articles]) AS [Loaded Articles], 
	sum([Loaded Weight]) As [Loaded Weight],
	sum([Loaded Articles For Us]) As [Loaded Articles For Us],
	sum([Loaded Weight For Us]) As [Loaded Weight For Us] 
	from  #IncomingTrucksAlert     

--------------------------------STEP 5-------------------------------------------------------    
select count(*) as Total From  #IncomingTrucksAlert      
---------------------------------------------------------------------------------------------      
End













GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
  
    
-- =============================================          
-- Author:  <Kanuga Vajiha I>          
-- Create date: <Create Date,,>          
-- Description: <Description,,>          
-- EXEC [dbo].[EC_RPT_StockTransferRegister_Details_Excel] 0,0,0,0,0,0,'2009-01-30','2009-05-18',0,0    
-- =============================================          
CREATE PROCEDURE [dbo].[EC_RPT_StockTransferRegister_Details_Excel]          
@FromRegionId INT,          
@FromAreaId INT,          
@FromBranchId INT,          
@ToRegionId int,          
@ToAreaId int,          
@ToBranchId int,          
@From_Date DateTime,          
@To_Date DateTime,      
@PageIndex int,       
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1                      
          
AS          
BEGIN          
          
SET NOCOUNT ON;  
--if @FromBranchID  > 0     or @ToBranchId > 0                    
--  BEGIN                  
--  Set @FromRegionID = -1                  
--  set @FromAreaID = -1   
--  Set @ToRegionID = -1                  
--  set @ToAreaID = -1   
--                 
--  END                  
--else if  @FromAreaID > 0  or @ToAreaId > 0                       
--  BEGIN                         
--  Set @FromRegionID = -1                        
--  set @FromBranchID =  -1   
--  Set @ToRegionID = -1                        
--  set @ToBranchID =  -1                         
--  END                         
--else if @FromRegionID > 0  or @ToRegionId > 0                       
--  BEGIN                        
--  set @FromAreaID = -1                        
--  set @FromBranchID = -1   
--  set @ToAreaID = -1                        
--  set @ToBranchID = -1                    
--  END;                         
--  
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Delivery Branch','s,1')
        insert into @Dropdown_Search values ('Transfer From Branch','s,2')
        insert into @Dropdown_Search values ('Transfer To Branch','s,3')                     
        insert into @Dropdown_Search values ('Transferred  By','s,4') 
        insert into @Dropdown_Search values ('Transfer Date','d,5')                        
		insert into @Dropdown_Search values ('GC Date','d,6')
        	
		select  *From @Dropdown_Search

		return
	end;
--------------------------------------Filter-----------------------------------------     
-------------------------------STEP 1--------------------------------------------------------------            
WITH StockTransferRegister AS            
(            
select           
ROW_NUMBER() OVER(ORDER BY GC.GC_date) AS 'Sr No.',      
    
  GC.GC_no_for_print as [gc_caption No],     
  dbo.DateOnlyDisplay(GC.GC_date)As [gc_caption Date],                
  Bookingbranch.branch_name as [Bkg Branch],                 
  Delivery.Branch_name as [Dly Branch],     
  StockTransferFrom.Branch_name as [Transfer From Branch],    
  StockTransferTo.Branch_name as [Transfer To Branch],    
  dbo.DateOnlyDisplay(StockTransfer.Transaction_Date) as [Transfer Date],    
  Employee.First_name +' ' + Middle_name +' ' + Last_name as [Transferred By],    
  StockTransfer.Reason as [Reason],     
  StockTransfer.GC_Id as [GC_Id]    
    
from dbo.EC_Opr_VTrans_GC_Stock_Transfer_History StockTransfer    
inner join Ec_Master_Branch StockTransferFrom    
on StockTransferFrom.Branch_Id=StockTransfer.Old_Current_Branch_Id    
inner join Ec_Master_Branch StockTransferTo    
on  StockTransferTo.Branch_Id=StockTransfer.New_Current_Branch_Id    
inner join ec_opr_vtrans_gc GC     
on StockTransfer.GC_Id=Gc.GC_Id    
inner join EC_Master_Service_Location frm_loc      
on frm_loc.Service_Location_ID=GC.From_Location_ID      
inner join ec_master_branch Bookingbranch    
on frm_loc.branch_id=Bookingbranch.branch_id   
inner join ec_master_area FromArea         
on FromArea.area_id=StockTransferFrom.area_id       
inner join EC_Master_Service_Location to_loc      
on to_loc.Service_Location_ID=GC.To_Location_ID      
inner join ec_master_branch Delivery     
on to_loc.branch_id=Delivery.branch_id      
inner join ec_master_area ToArea         
on ToArea.area_id=StockTransferTo.area_id      
inner join Com_Adm_User AdmUser    
on StockTransfer.Created_By=AdmUser.User_Id    
inner join Ec_Master_Employee Employee    
on Employee.Emp_Id=AdmUser.Employee_Id    
    
where GC.Is_Cancelled = 0        
and (StockTransfer.Transaction_Date Between @From_date And @To_date)     
AND StockTransferFrom.Region_ID = (select case @FromRegionId when 0 then StockTransferFrom.Region_ID else @FromRegionId end)          
AND StockTransferFrom.Area_ID = (select case @FromAreaId when 0 then StockTransferFrom.Area_ID else @FromAreaId end )          
AND StockTransferFrom.branch_Id = (select case @FromBranchId when 0 then StockTransferFrom.branch_Id else @FromBranchId end )          
AND StockTransferTo.Region_ID = (select case @ToRegionId when 0 then StockTransferTo.Region_ID else @ToRegionId end)          
AND StockTransferTo.Area_ID = (select case @ToAreaId when 0 then StockTransferTo.Area_ID else @ToAreaId end )          
AND StockTransferTo.branch_Id = (select case @ToBranchId when 0 then StockTransferTo.branch_Id else @ToBranchId end ) 
and 
(@criteria_id = 0
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and Delivery.Branch_name = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and Delivery.Branch_name like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and StockTransferFrom.Branch_name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and StockTransferFrom.Branch_name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and StockTransferFrom.Branch_name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and StockTransferFrom.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and StockTransferTo.Branch_name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and StockTransferTo.Branch_name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and StockTransferTo.Branch_name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and StockTransferTo.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and Employee.First_name +' ' + Middle_name +' ' + Last_name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and Employee.First_name +' ' + Middle_name +' ' + Last_name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and Employee.First_name +' ' + Middle_name +' ' + Last_name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and Employee.First_name +' ' + Middle_name +' ' + Last_name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 4 and StockTransfer.Transaction_Date = @Filtered_Date)
or (@colid = 5 and @criteria_id = 2 and @datatype_id = 4 and StockTransfer.Transaction_Date >= @Filtered_Date)
or (@colid = 5 and @criteria_id = 3 and @datatype_id = 4 and StockTransfer.Transaction_Date <= @Filtered_Date)
or (@colid = 5 and @criteria_id = 4 and @datatype_id = 4 and StockTransfer.Transaction_Date > @Filtered_Date)
or (@colid = 5 and @criteria_id = 5 and @datatype_id = 4 and StockTransfer.Transaction_Date < @Filtered_Date)

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 4 and GC.GC_date = @Filtered_Date)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 4 and GC.GC_date >= @Filtered_Date)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 4 and GC.GC_date <= @Filtered_Date)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 4 and GC.GC_date > @Filtered_Date)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 4 and GC.GC_date < @Filtered_Date)
)                    
)    
------------------------------Step 2--------------------------------------------------------------------    
SELECT * into #StockTransferDetails FROM StockTransferRegister      
     
-------------------------------------------------Step 3------------------------------------------------     
select * From #StockTransferDetails      
 WHERE       
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)      
or      
(@PageSize = 0)      
    
--------------------------------------------Step 4----------------------------------------------------------    
Select count (distinct GC_Id)        
From #StockTransferDetails     
    
-------------------------------------------------Step 5-------------------------------------------------    
select count(*) From #StockTransferDetails      
end       
                              
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
  
  
  
-- =============================================  
-- Author:  <shiv kumar mishra>  
-- Create date: Nov 10 2008  6:27PM  
-- Description: <save Door Delivery Sheet>  
-- =============================================  
  
CREATE Proc [dbo].[EC_Opr_DDC_Save]  
(@Division_ID int,  
@Year_Code int,  
@Hierarchy_Code varchar(5),  
@Menu_Item_ID int,  
@DDC_Branch_ID int,  
@DDC_ID int,  
@DDC_Date datetime,  
@PDS_ID int,  
@Remarks varchar(250),  
@Created_By int,  
@DDCDetailsXML xml,  
@Print_Doc_ID int = 0 output,   
@Error_Code int output,  
@ERROR_DESC AS VARCHAR(4000) OUTPUT)  
  
As  
  
set @Error_Code = 0;  
set @ERROR_DESC = '';  
set @Print_Doc_ID = 0;      
  
if @DDC_ID <= 0   
 begin  
  declare @Can_Add bit  
    
  exec dbo.Ec_Opr_Can_Add @DDCDetailsXML,'newdataset','ddcgrid_details',@Can_Add output  
  if @Can_Add = 0 return;  
 end  
  
if @DDC_ID > 0 and dbo.Ec_Opr_Can_Edit_Cancel ('DDC',@DDC_ID) = 0  
 begin  
  set @Error_Code = 1012;  
  set @ERROR_DESC = '';    
  return;    
 end  
  
if @DDC_ID > 0  
 begin  
  DECLARE @DDCDetails1 int  
  EXEC sp_xml_preparedocument @DDCDetails1 OUTPUT,@DDCDetailsXML     
  
  declare @Temp_Article  
  table (Sr_No int identity,New_Article_ID int,Del_Articles int,AUS_Article_ID int)  
  
  insert into @Temp_Article  
  select a.Article_Id,a.Delivered_Articles,a.AUS_Article_ID  
  from EC_Opr_VTrans_Door_Delivery_Confirmation_Details a  
  inner join  
  (select article_id,actual_status_id from openxml (@DDCDetails1,'/newdataset/ddcgrid_details',2)  
  with(article_id int,actual_status_id int)) as b  
  on a.article_id = b.article_id  
  where DDC_ID = @DDC_ID  
  and a.delivery_status_id in (300)  
  and b.actual_status_id in (200,250)  
  
  declare @del_articles int  
  declare @AUS_Article_ID int  
  declare @Can_Edit_Cancel int  
  set @Can_Edit_Cancel = 1  
  
  declare @sr_no int  
  declare @tot_row_count int  
  
  set @sr_no = 1  
  select @tot_row_count = count(*) from @Temp_Article  
  
  while @Sr_No <= @tot_row_count  
   begin  
    set @del_articles = 0  
    set @AUS_Article_ID = 0  
  
    select @del_articles = Del_Articles,  @AUS_Article_ID = AUS_Article_ID  
    from @Temp_Article where sr_no = @Sr_No  
  
    select @Can_Edit_Cancel = 0 from ec_opr_vtrans_gc_articles  
    where 1=1  
    and Articles < @del_articles  
    and Article_ID = @AUS_Article_ID  
  
    if @Can_Edit_Cancel = 0  
     begin  
      EXEC sp_xml_removedocument @DDCDetails1  
      set @Error_Code = 1012;  
      set @ERROR_DESC = '';  
      return;  
     end  
   set @Sr_No = @Sr_No + 1  
   end  
  EXEC sp_xml_removedocument @DDCDetails1  
 end  
  
BEGIN TRY  
BEGIN TRAN  
BEGIN  
SET NOCOUNT ON;  
  
 DECLARE @DDCDetails int  
EXEC sp_xml_preparedocument @DDCDetails OUTPUT,@DDCDetailsXML     declare @DDC_No int   
declare @DDC_No_For_Print varchar(20) declare @Total_No_Of_GC int  
declare @Total_DDC_Articles int  
declare @Total_DDC_Actual_Wt numeric(18,2)  
  
set @Total_No_Of_GC =0;   
set @Total_DDC_Articles =0;  
set @Total_DDC_Actual_Wt =0;  
  
  
select  
@Total_No_Of_GC = count(*),  
@Total_DDC_Articles = sum(Delivery_Articles),  
@Total_DDC_Actual_Wt = sum(Delivery_Actual_Wt)  
from openxml (@DDCDetails,'/newdataset/ddcgrid_details',2)  
with(delivery_articles int,delivery_actual_wt numeric(18,2),att bit)  
where att = 1  
  
 -----------Insert into Master table ----------------------  
  
if (@DDC_ID <= 0)   -- add  
 Begin      --DDC_Type_ID 2 means Door Delivery  
  exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@DDC_Branch_ID,  
  @Division_ID,@Menu_Item_ID,0,@DDC_No output,@DDC_No_For_Print OUTPUT  
  
  insert into EC_Opr_VTrans_Door_Delivery_Confirmation  
  (Division_ID,Year_Code,DDC_Branch_ID,DDC_No,  
  DDC_No_For_Print,DDC_Date,DDC_Type_ID,PDS_ID,  
  Total_No_Of_GC,Total_DDC_Articles,Total_DDC_Actual_Wt,  
  Godown_Supervisor_ID,Remarks,Is_Cancelled,  
  Created_By,Created_On,Updated_By,Updated_On)  
  values  
  (@Division_ID,@Year_Code,@DDC_Branch_ID,@DDC_No,  
  @DDC_No_For_Print,@DDC_Date,2,@PDS_ID,   
  isnull(@Total_No_Of_GC,0),isnull(@Total_DDC_Articles,0), isnull(@Total_DDC_Actual_Wt,0),  
  0,@Remarks,0,  
  @Created_By,getdate(),@Created_By,getdate())  
  
  set @DDC_ID = @@identity  
         set @Print_Doc_ID = @@identity        
  
  update EC_Opr_VTrans_Pre_Delivery_Sheet set   
   DDC_ID = @DDC_ID  
  where   PDS_ID = @PDS_ID  
  
 End  
Else -- Edit  
 Begin  
  exec EC_Opr_Set_Article_Reverse_Effects 'DDC',@DDC_ID  
  
  update a set  
  a.articles = a.Articles - Delivery_Articles,  
  a.Article_Actual_Weight = a.Article_Actual_Weight - Delivery_Actual_Wt  
  from ec_opr_vtrans_gc_articles a  
  inner join EC_Opr_VTrans_Pre_Delivery_Sheet_Details b  
  on a.article_id = b.Previous_Article_ID  
  where pds_id = @PDS_ID  
  and DDC_ID = 0  
  
  update a set  
  a.articles = a.Articles + Delivery_Articles,  
  a.Article_Actual_Weight = a.Article_Actual_Weight + Delivery_Actual_Wt  
  from ec_opr_vtrans_gc_articles a  
  inner join EC_Opr_VTrans_Pre_Delivery_Sheet_Details b  
  on a.article_id = b.article_id  
  where pds_id = @PDS_ID  
  and DDC_ID = 0  
  
  Update EC_Opr_VTrans_Door_Delivery_Confirmation set   
  DDC_Date = @DDC_Date,  
  PDS_ID = @PDS_ID,  
  Total_No_Of_GC = isnull(@Total_No_Of_GC,0),  
  Total_DDC_Articles = isnull(@Total_DDC_Articles,0),  
  Total_DDC_Actual_Wt = isnull(@Total_DDC_Actual_Wt,0),  
  Remarks = @Remarks,  
  Updated_By = @Created_By,  
  Updated_On = getdate()  
  where DDC_Id = @DDC_ID  
        set @Print_Doc_ID = @DDC_ID  
  
  delete from EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
  where DDC_ID = @DDC_ID  
  
  update EC_Opr_VTrans_Pre_Delivery_Sheet_Details set DDC_ID = 0  
  where PDS_ID = @PDS_ID  
 End  
  -----------Insert into Details table ----------------------  
  insert into EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
   (Year_Code,DDC_ID,PDS_ID,  
   GC_ID,Article_ID,LHPO_ID,Vehicle_ID,Memo_ID,Balance_Articles,  
   Balance_Actual_Wt,Delivered_Articles,Delivered_Actual_Wt,  
   Received_Condition_ID,Damaged_Articles,Damaged_Value,  
   Delivery_Date,Delivery_Time,Delivery_Status_ID,  
   Reason_ID,Delivery_Taken_By,Delivery_Mode_ID,  
   Delivery_Mode_Description,Is_POD_Received,POD_Hierarchy_Code,POD_Received_ID,  
   Previous_Article_ID,Previous_Status_ID,Previous_Document_ID,  
   Previous_Document_No_For_Print,Previous_Document_Date,Found_ID,  
   AUS_Article_ID,AUS_ID,AUS_No_For_Print,AUS_Date,AUS_Time,  
   Cne_Copy_Status_ID,Delivery_Against_ID,Delivery_To_ID,Contact_No)  
 Select @Year_Code,@DDC_ID,@PDS_ID,  
   GC_ID,Article_Id,0,0,0,Balance_Articles,  
   Balance_Actual_Wt,Delivery_Articles,Delivery_Actual_Wt,  
   0,0,0,  
   Delivery_Date,Delivery_Time,Actual_Status_Id,  
   UnDelivered_Reason_Id,Delivery_Taken_By,Delivery_Mode_ID,  
   Delivery_Mode_Description,0,'',0,  
   Previous_Article_ID,Previous_Status_ID,Previous_Document_ID,  
   Previous_Document_No_For_Print,cast(Previous_Document_Date as datetime),  
   0, AUS_Article_ID,AUS_ID,AUS_No_For_Print,cast(AUS_Date1 as datetime),AUS_Time,  
   Cne_Copy_Status_ID,Delivery_Against_ID,Delivery_To_ID,Contact_No 
 from openxml (@DDCDetails,'/newdataset/ddcgrid_details',2)  
   with(gc_id int,article_id int,balance_articles int,  
   balance_actual_wt numeric(18,2),delivery_articles int,delivery_actual_wt numeric(18,2),  
   delivery_date varchar(10),delivery_time varchar(5),actual_status_id int,  
   undelivered_reason_id int,delivery_taken_by varchar(25),delivery_mode_id int,delivery_mode_description varchar(50),  
   previous_article_id int,previous_status_id int,previous_document_id int,  
   previous_document_no_for_print nvarchar(40),previous_document_date varchar(10),
    aus_article_id int,aus_id int,aus_no_for_print nvarchar(20),aus_date1 varchar(10),
   aus_time varchar(5), cne_copy_status_id int,delivery_against_id int,delivery_to_id int,contact_no varchar(25))
  EXEC sp_xml_removedocument @DDCDetails   
  
update EC_Opr_VTrans_Pre_Delivery_Sheet_Details set   
   DDC_ID = @DDC_ID  
where PDS_ID = @PDS_ID and  
  article_id in (select previous_article_id   
        from EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
        where DDC_ID = @DDC_ID   
        and Delivery_Status_ID in (200,250))  
  
exec EC_Opr_Set_Article_Effects @DDC_Branch_ID,'DDC',@DDC_ID,0  
  
exec EC_Opr_Set_Article_Reverse_Effects 'PDS',@PDS_ID,0  
  
update EC_Opr_VTrans_GC_Articles set  
status_id = 200  
where article_id in  
(select article_id from EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
where ddc_id = @ddc_id and Delivery_Status_ID in (200,250))  
  
update EC_Opr_VTrans_GC_Articles set  
status_id = 300,  
articles = 0,  
article_actual_weight = 0  
where article_id in  
(select article_id from EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
where ddc_id = @ddc_id and Delivery_Status_ID = 300)  
  
  
exec EC_Opr_Delivery_Insert_Into_PODTracking @DDC_ID,@DDC_Date,@DDC_Branch_ID,1,82  
  
---================Gc Delivery Account Effects===============  
EXEC [dbo].[EC_FA_Opr_GcDeliveryAccountEffects]  
  @DDC_ID = @DDC_ID  
---=========================================================  
  
  
END  
COMMIT TRAN  
END TRY  
BEGIN CATCH  
 ROLLBACK TRAN  
 SELECT @ERROR_CODE=ERROR_NUMBER()  
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
 CAST(ERROR_MESSAGE() as VARCHAR(4000))  
END CATCH  
  
  
  
  
  
  
  
  
  
  
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





  
  
  
-- =============================================  
-- Author:  <Kanuga Vajiha>  
-- Create date:  19 dec 09  
-- Description: <Proc To Readvalues Octroi Update>  
-- =============================================  
  
CREATE proc [dbo].[EC_Opr_OctroiUpdate_ReadValues]    
(  
@YearCode int,  
@OctroiUpdateId int,    
@Division_ID int,   
@GetGCXML xml,  
@Gcs_Octroi_Already_updated varchar(1000) output  
)    
as    
BEGIN

DECLARE @idoc int    
EXEC sp_xml_preparedocument @idoc OUTPUT, @GetGCXML    

declare @gc_maxlength int
select @gc_maxlength = GC_No_Length from ec_master_Company_gc_parameter

declare @temp table(gc_no varchar(20))
insert into @temp 
select 
case charindex('-',item) when 0 then dbo.Get_No_To_Print(item,@gc_maxlength) else item end
from OPENXML(@idoc,'/parentroot/root',2)
WITH (item varchar(20))


IF(@OctroiUpdateId <= 0)  ---For ADD    
 begin    
  
  set @Gcs_Octroi_Already_updated = ''  
  select @Gcs_Octroi_Already_updated =   
  case @Gcs_Octroi_Already_updated when '' then GC_No_For_Print   
  else @Gcs_Octroi_Already_updated + ',' + GC_No_For_Print end  
  from EC_Opr_Vtrans_GC  
  where GC_No_For_print in (select gc_no from @temp) 
  and Is_Octroi_Updated = 1  
  and EC_Opr_Vtrans_GC.Year_Code = case EC_Opr_Vtrans_GC.Is_Opening_Gc when 1 then 0 else @YearCode end

  select GC.GC_ID,    
  GC.GC_No_For_Print,dbo.dateonlydisplay(GC_Date) as Booking_Date,        
  BookingBranch.Branch_Name as Booking_Branch,    
  DeliveryBranch.Branch_Name as Delivery_Branch,  
  '' as Octroi_Form_Type ,  
  0  as Octroi_Form_Type_Id ,  
  '' as Octroi_paid_By,  
  0  as Octroi_Paid_By_Id,  
  '' as Oct_Receipt_No,  
  '' as Oct_Amount,  
  '' as Oct_Remark,  
  Is_Octroi_Updated,  
  'true' as Can_Edit,1 as Is_Delivery_MR_Or_Credit_Memo_Prepared,
  GC_No_For_Print as Item_No
  From EC_Opr_Vtrans_GC GC  
  inner join EC_Opr_Vtrans_GC_Articles GC_Articles  
  on GC.gc_id = GC_Articles.gc_id  
  inner join EC_Master_Branch BookingBranch   
  on GC.From_Branch_ID=BookingBranch.Branch_ID   
  inner join Ec_Master_Branch DeliveryBranch  
  on GC.Delivery_Branch_ID=DeliveryBranch.Branch_ID  
  inner join ec_master_service_location To_service_location  
  on GC.To_Location_ID=To_service_location.Service_Location_ID  
  left outer join Ec_Master_Octroi_Form_Type  
  on GC.Octroi_Form_Type_Id=Ec_Master_Octroi_Form_Type.Octroi_Form_Type_Id  
  left outer join Ec_Master_Octroi_Paid_By  
  on GC.Octroi_Paid_By_Id=Ec_Master_Octroi_Paid_By.Octroi_Paid_By_Id   
  where 1=1  
  and GC.is_cancelled = 0  
  and GC.Division_ID = @Division_ID  
  and GC_Articles.is_cancelled = 0  
  and GC_Articles.Articles > 0  
  and GC_Articles.status_id = dbo.Get_Status_ID_For_Octroi_Update(GC_Articles.gc_id)  
  and To_service_location.Is_Octroi = 1  
--  and Is_Octroi_Updated = 0   
  and dbo.Is_Delivery_Done(GC.gc_id) = 0  
  and GC.Year_Code = case GC.Is_Opening_Gc when 1 then 0 else @YearCode end

  and GC.GC_No_For_print in (select gc_no from @temp) 
  
 end   
Else  
 Begin  
  select  GC.GC_ID,    
  GC.GC_No_For_Print,dbo.dateonlydisplay(GC_Date) as Booking_Date,        
  BookingBranch.Branch_Name as Booking_Branch,    
  DeliveryBranch.Branch_Name as Delivery_Branch,  
  OctUpdateDetails.Octroi_Form_Type_Id,     
  Ec_Master_Octroi_Form_Type.Octroi_Form_Type,  
  OctUpdateDetails.Octroi_Paid_By_Id,  
  Ec_Master_Octroi_Paid_By.Octroi_Paid_By,  
  OctUpdateDetails.Oct_Receipt_No,  
  OctUpdateDetails.Oct_Amount,  
  upper(OctUpdateDetails.Oct_Remark) as Oct_Remark,  
  Is_Octroi_Updated,  
  Is_Oct_Recovered_From_Consignee as Can_Edit,
  case when (dbo.is_transport_bill_for_octroi_prepared(GC.gc_id) = 1 or Credit_Memo_Octroi_ID > 0 or Delivery_MR_ID > 0) then 0 else 1 end as Is_Delivery_MR_Or_Credit_Memo_Prepared,
  GC_No_For_Print as Item_No
  From EC_Opr_Octroi_Update_Details OctUpdateDetails  
  inner join EC_Opr_Vtrans_GC GC  
  on GC.GC_ID=OctUpdateDetails.GC_ID  
  inner join EC_Opr_Octori_Update  
  on EC_Opr_Octori_Update.Octroi_Update_ID=OctUpdateDetails.Octroi_Update_Id  
  inner join EC_Master_Branch BookingBranch   
  on GC.From_Branch_ID=BookingBranch.Branch_ID   
  inner join Ec_Master_Branch DeliveryBranch  
  on GC.Delivery_Branch_ID=DeliveryBranch.Branch_ID  
  inner join Ec_Master_Octroi_Form_Type  
  on OctUpdateDetails.Octroi_Form_Type_Id=Ec_Master_Octroi_Form_Type.Octroi_Form_Type_Id  
  inner join Ec_Master_Octroi_Paid_By  
  on OctUpdateDetails.Octroi_Paid_By_Id=Ec_Master_Octroi_Paid_By.Octroi_Paid_By_Id   
  where OctUpdateDetails.Octroi_Update_Id=@OctroiUpdateId  
  
 --***************************************Octroi Update Master *******************************  
  Select Octroi_update_No,Octroi_Update_No_For_Print,Octroi_Update_Date,  
  Bill_No,Bill_Date,dbo.EC_Opr_Octori_Update.Ledger_Id,  
  FA_Master_Ledger.Ledger_Name as 'Ledger_Name',Total_GC,Total_Amount,Remark,Chq_No,Chq_Date,Bank_Name
  ,Total_Octroi_Amount,Total_Other_Charge_Amount 
  from dbo.EC_Opr_Octori_Update inner join  
  Fa_Master_Ledger on  
  dbo.EC_Opr_Octori_Update.Ledger_Id=Fa_Master_Ledger.Ledger_Id  
  where Octroi_Update_Id=@OctroiUpdateId  
 End  

EXEC sp_xml_removedocument @idoc    

END






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




          
-- =============================================          
-- Author:  <Lad Ashish>          
-- Create date: <22th October 2008>          
-- Description: <Fill  Values For Active Series Operation Form>          
-- =============================================          
          
CREATE PROCEDURE [dbo].[EC_Opr_ActiveSeries_FillValues]           
AS          
BEGIN             
          
--Select Document_Id,Document_Name from EC_Master_Document      
declare @IsMemoSeriesRequired bit
declare @IsLHPOSeriesRequired bit
declare @IsHOBSeriesRequired bit
declare @IsTransBillSeriesRequired bit

set @IsMemoSeriesRequired = 0
set @IsLHPOSeriesRequired = 0
set @IsHOBSeriesRequired=0 
set @IsTransBillSeriesRequired=0 

select @IsMemoSeriesRequired = Is_Memo_Series_Required ,
@IsLHPOSeriesRequired = Is_LHPO_Series_Required,
@IsHOBSeriesRequired=Is_HOB_Series_Req ,
@IsTransBillSeriesRequired = Is_Transport_Bill_Series_Required from  
EC_Master_Company_Parameters   

declare @Document_Master table (Document_Id int,Document_Name varchar(100))

insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (1,2,3,6,8)

if @IsMemoSeriesRequired = 1
insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (4)

if @IsLHPOSeriesRequired = 1
insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (5)

if @IsTransBillSeriesRequired = 1  
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (7)  

if @IsHOBSeriesRequired=1
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (15)   

select * From @Document_Master

select Document_Series_Allocation_ID,Start_No,End_No,Balance from EC_Opr_Document_Allocation
Where Document_Series_Allocation_ID=-1

End          
          
          





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
          
          
-- =============================================          
-- Author:  <Lad Ashish>          
-- Create date: <14th October 2008>          
-- Description: <Fill Dropdown Values For Contract Freight Details Master Form>          
-- =============================================          
          
CREATE PROCEDURE [dbo].[EC_Mst_ContractFreightGeneral_ReadValues]           
(      
@Contract_ID int      
)      
AS          
BEGIN    
    
Select Branch.Branch_Name,Cont.Contract_Branch_ID,Cont.Contract_No,Cont.Contract_Name,    
  Cont.Contract_Date,Cont.Client_ID,Client.Client_Name,Cont.Client_PO_No,    
  Cont.Client_PO_Date,Cont.PO_Max_Limmit,Cont.Valid_From,Cont.Valid_UpTo,    
  Cont.Promissed_Wt_Per_Month,Cont.Promissed_Freight_Per_Month,    
  Cont.Credit_Limit,Cont.Credit_Period,    
  Cont.Billing_Client_ID,BillingClient.Client_Name as Billing_Client_Name,    
  Cont.Billing_Branch_ID,
  Cont.Billing_Hierarchy,    
  Cont.Remarks,Cont.GC_risk_type_id ,Cont.Consignment_Type_ID   
from EC_Opr_Contract_Master Cont    
  Inner Join EC_Master_Branch Branch    
On  Cont.Contract_Branch_ID=Branch.Branch_ID    
  Inner Join EC_Master_Client_VTrans Client    
On  Client.Client_ID=Cont.Client_ID    
  left outer Join EC_Master_Branch BillingBranch    
On  Cont.Billing_Branch_ID=BillingBranch.Branch_ID    
  left outer Join EC_Master_Client_VTrans BillingClient    
On  Cont.Billing_Client_ID=BillingClient.Client_ID    
    
Where Cont.Contract_ID=@Contract_ID    
      
End          
          
    
          
          
    





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================  
-- Author:  <Parikshit Chawda>  
-- Create date: <21-10-2008>  
-- Description: <Finance Day Book Report>  
-- =============================================  

--EXEC FA_Rpt_Day_Book 0,'HO',0,1,'04-01-2007','03-31-2010'
--EXEC FA_Rpt_Day_Book 1,'0',0,1,'1 APR 2008','30 APR 2008'
--EXEC FA_Rpt_Day_Book 0,'BO',4,1,'1 APR 2009','31 MAR 2010','<newdataset/>'


CREATE Proc [dbo].[FA_Rpt_Day_Book]  
@IsConsolidated bit,
@HierarchyCode varchar(5),  
@MainId int,
@DivisionId int,
@StartDate datetime,
@EndDate datetime,
@VoucherType_Xml as xml

AS  

set @StartDate = cast(dbo.dateonlydisplay(@StartDate) as datetime)
set @EndDate = cast(dbo.dateonlydisplay(@EndDate) as datetime)

DECLARE @TB_DAY_BOOK AS TABLE
(
	Voucher_ID		INT,
	Voucher_Type_Id	INT,
	Voucher_Name	VARCHAR(50),
	Voucher_Date	DATETIME,
	Particulars		VARCHAR(50),
	Voucher_No		varchar(20),
	Debit			VARCHAR(50),
	Credit			VARCHAR(50)

)


if @IsConsolidated=1
	Begin

INSERT INTO @TB_DAY_BOOK
		SELECT DISTINCT dbo.FA_Opr_Voucher.Voucher_Id, 
		dbo.FA_Master_Voucher_Type.Voucher_Type_Id, 
		dbo.FA_Master_Voucher_Type.Voucher_Name, 
		dbo.DateOnlyDisplay(dbo.FA_Opr_Voucher.Voucher_Date) as Voucher_Date, 
		Case When dbo.FA_Opr_Voucher.Is_Cancelled=0 then

		(SELECT Top 1 A.Ledger_Name
		FROM dbo.FA_Master_Ledger A INNER JOIN dbo.FA_Opr_Voucher_Details B 
		ON A.Ledger_Id=B.Ledger_Id
		where B.Voucher_Id=dbo.FA_Opr_Voucher_Details.Voucher_Id
		order by B.Details_ID)

		Else 
		'<I><Font color="red"><B>(Cancelled)<B></Font><I>' 

		End as Particulars,

		dbo.FA_Opr_Voucher.Voucher_No, 

		Case When dbo.FA_Opr_Voucher.Is_Cancelled=0 then

		(SELECT Top 1 case when B.Debit=0 
		Then '' else cast(B.Debit as varchar(50)) end
		FROM  dbo.FA_Master_Ledger A INNER JOIN dbo.FA_Opr_Voucher_Details B
		ON A.Ledger_ID = B.Ledger_Id
		where dbo.FA_Opr_Voucher_Details.Voucher_Id=B.Voucher_Id
		order by B.Details_ID)

		Else 
		'' 

		End as Debit,

		Case When dbo.FA_Opr_Voucher.Is_Cancelled=0 then

		(SELECT Top 1 case when B.Credit=0 
		Then '' else cast(B.Credit as varchar(50)) end
		FROM  dbo.FA_Master_Ledger A INNER JOIN dbo.FA_Opr_Voucher_Details B
		ON A.Ledger_ID = B.Ledger_Id
		where dbo.FA_Opr_Voucher_Details.Voucher_Id=B.Voucher_Id
		order by B.Details_ID)

		Else 
		'' 

		End as Credit

		FROM dbo.FA_Opr_Voucher INNER JOIN
		dbo.FA_Opr_Voucher_Details ON dbo.FA_Opr_Voucher.Voucher_Id = dbo.FA_Opr_Voucher_Details.Voucher_Id 
		INNER JOIN
		dbo.FA_Master_Ledger ON 
		dbo.FA_Opr_Voucher_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
		dbo.FA_Master_Voucher_Type ON dbo.FA_Opr_Voucher.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id

		LEFT OUTER JOIN EC_Master_Branch C
		On FA_Opr_Voucher_Details.Main_Id=C.Branch_Id
		and FA_Opr_Voucher_Details.Hierarchy_Code='BO'
		LEFT OUTER JOIN EC_Master_Area D
		On FA_Opr_Voucher_Details.Main_Id=D.Area_Id
		and FA_Opr_Voucher_Details.Hierarchy_Code='AO'


		where dbo.FA_Opr_Voucher_Details.Division_Id=@DivisionId
		and (@MainId = (case @HierarchyCode When 'AO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
		and (@MainId = (case @HierarchyCode When 'RO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))
		and (dbo.FA_Opr_Voucher_Details.Voucher_Date BETWEEN @StartDate AND @EndDate)
		
-->=@StartDate
--		and dbo.FA_Opr_Voucher_Details.Voucher_Date<=@EndDate

	End--if @IsConsolidated=1
Else
	Begin

INSERT INTO @TB_DAY_BOOK
		SELECT DISTINCT dbo.FA_Opr_Voucher.Voucher_Id, 
		dbo.FA_Master_Voucher_Type.Voucher_Type_Id, 
		dbo.FA_Master_Voucher_Type.Voucher_Name, 
		dbo.DateOnlyDisplay(dbo.FA_Opr_Voucher.Voucher_Date) as Voucher_Date, 
		Case When dbo.FA_Opr_Voucher.Is_Cancelled=0 then

		(SELECT Top 1 A.Ledger_Name
		FROM dbo.FA_Master_Ledger A INNER JOIN dbo.FA_Opr_Voucher_Details B 
		ON A.Ledger_Id=B.Ledger_Id
		where B.Voucher_Id=dbo.FA_Opr_Voucher_Details.Voucher_Id
		order by B.Details_ID)

		Else 
		'<I><Font color="red"><B>(Cancelled)<B></Font><I>' 

		End as Particulars,

		dbo.FA_Opr_Voucher.Voucher_No, 

		Case When dbo.FA_Opr_Voucher.Is_Cancelled=0 then

		(SELECT Top 1 case when B.Debit=0 
		Then '' else cast(B.Debit as varchar(50)) end
		FROM  dbo.FA_Master_Ledger A INNER JOIN dbo.FA_Opr_Voucher_Details B
		ON A.Ledger_ID = B.Ledger_Id
		where dbo.FA_Opr_Voucher_Details.Voucher_Id=B.Voucher_Id
		order by B.Details_ID)

		Else 
		'' 

		End as Debit,

		Case When dbo.FA_Opr_Voucher.Is_Cancelled=0 then

		(SELECT Top 1 case when B.Credit=0 
		Then '' else cast(B.Credit as varchar(50)) end
		FROM  dbo.FA_Master_Ledger A INNER JOIN dbo.FA_Opr_Voucher_Details B
		ON A.Ledger_ID = B.Ledger_Id
		where dbo.FA_Opr_Voucher_Details.Voucher_Id=B.Voucher_Id
		order by B.Details_ID)

		Else 
		'' 

		End as Credit

		FROM dbo.FA_Opr_Voucher INNER JOIN
		dbo.FA_Opr_Voucher_Details ON dbo.FA_Opr_Voucher.Voucher_Id = dbo.FA_Opr_Voucher_Details.Voucher_Id 
		INNER JOIN
		dbo.FA_Master_Ledger ON 
		dbo.FA_Opr_Voucher_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
		dbo.FA_Master_Voucher_Type ON dbo.FA_Opr_Voucher.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id
		where dbo.FA_Opr_Voucher_Details.Hierarchy_Code=@HierarchyCode
		and dbo.FA_Opr_Voucher_Details.Main_Id=@MainId
		and (dbo.FA_Opr_Voucher_Details.Voucher_Date BETWEEN @StartDate AND @EndDate)
		and dbo.FA_Opr_Voucher_Details.Division_Id=@DivisionId
		

	End--if @IsConsolidated=1



Declare @idoc int 
 EXEC sp_xml_preparedocument @idoc OUTPUT,@VoucherType_Xml

IF ((SELECT count(*) FROM OPENXML(@idoc,'/newdataset/voucher_type',2) WITH (vouchertype_id int)) <= 0)
BEGIN 
	SELECT	Voucher_ID,Voucher_Type_Id,Voucher_Name,dbo.DateOnlyDisplay(Voucher_Date) as Voucher_Date,Particulars,
			Voucher_No,Debit,Credit,Voucher_Date as Voucher_Date1
	FROM	@TB_DAY_BOOK ORDER BY Voucher_Date1

END
ELSE
BEGIN
	SELECT	Voucher_ID,Voucher_Type_Id,Voucher_Name,dbo.DateOnlyDisplay(Voucher_Date) as Voucher_Date,Particulars,
			Voucher_No,Debit,Credit,Voucher_Date as Voucher_Date1
	FROM	@TB_DAY_BOOK 
	WHERE Voucher_Type_Id IN (SELECT vouchertype_id  
	FROM OPENXML(@idoc,'/newdataset/voucher_type',2)  
	WITH (vouchertype_id int)) 
    ORDER BY Voucher_Date1 
END
 EXEC sp_xml_removedocument @idoc 

-->=@StartDate
--		and dbo.FA_Opr_Voucher_Details.Voucher_Date<=@EndDate








----1165--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE proc [dbo].[EC_Opr_Allocation_Get_Min_Max_Number]
(
@ID int,
@Va_ID int = 0,
@CallFrom int,
@Parent_Start_No int output,
@Parent_End_No int output,
@Child_Min_Start_No int output,
@Child_Max_End_No int output
)
as
set nocount on

set @Parent_Start_No = 0
set @Parent_End_No = 0
set @Child_Min_Start_No = 0
set @Child_Max_End_No = 0

if @CallFrom = 1 -- series generateion
	begin
		select @Child_Min_Start_No = min (Start_No),@Child_Max_End_No = max(End_No) from
		EC_Opr_Document_Series_Printing where Series_Generation_ID = @ID
	end
else if @CallFrom = 2 -- series printing
	begin
		declare @Series_Generation_ID int
		set @Series_Generation_ID = 0
		select @Series_Generation_ID = Series_Generation_ID from
		EC_Opr_Document_Series_Printing where Series_Printing_ID = @ID

		select @Parent_Start_No = Start_No,@Parent_End_No = End_No from
		EC_Opr_Document_Series_Generation where Series_Generation_ID = @Series_Generation_ID

		select @Child_Min_Start_No = min (Start_No),@Child_Max_End_No = max(End_No) from
		EC_Opr_Document_Allocation where Series_Printing_ID = @ID
	end
else if @CallFrom = 3 -- document allocation
	begin
		declare @Document_ID int
		declare @Series_Printing_ID int
		set @Series_Printing_ID = 0

		select @Series_Printing_ID = Series_Printing_ID ,@Document_ID = Document_ID
		from EC_Opr_Document_Allocation where Document_Series_Allocation_ID = @ID

		select @Parent_Start_No = Start_No,@Parent_End_No = End_No from
		dbo.EC_Opr_Document_Series_Printing where Series_Printing_ID = @Series_Printing_ID

		if @Document_ID in (1,2) -- gc , iba gc
			begin
				declare @VA_Document_Series_Allocation_ID int
				set @VA_Document_Series_Allocation_ID = 0
				select @VA_Document_Series_Allocation_ID = Document_Series_Allocation_ID
				from EC_Opr_Document_Allocation where Parent_Document_Series_Allocation_ID = @ID
				and va_id = @va_id

				select @Child_Min_Start_No = min (GC_No),@Child_Max_End_No = max(GC_No) from
				ec_opr_vtrans_gc where Document_Series_Allocation_ID = @ID
			end
		else if @Document_ID in (3)-- MR booking
			begin
				select @Child_Min_Start_No = min (MR_No),@Child_Max_End_No = max(MR_No) from
				FA_Opr_MR where Document_Series_Allocation_ID = @ID
			end
		else if @Document_ID in (4)-- MEMO
			begin
				select @Child_Min_Start_No = min (Memo_No),@Child_Max_End_No = max(Memo_No) from
				EC_Opr_VTrans_memo where Document_Series_Allocation_ID = @ID
			end
		else if @Document_ID in (5)-- LHPO
			begin
				select @Child_Min_Start_No = min (LHPO_No),@Child_Max_End_No = max(LHPO_No) from
				EC_Opr_VTrans_LHPO where Document_Series_Allocation_ID = @ID
			end
		else if @Document_ID in (6)-- Petrol Slip
			begin
				select @Child_Min_Start_No = min (Petrol_Slip_No),@Child_Max_End_No = max(Petrol_Slip_No) from
				FA_Opr_ATH_Voucher_Petrol_Slip_Details where Document_Series_Allocation_ID = @ID
			end
		else if @Document_ID in (7)-- trasport Bill
			begin
				select @Child_Min_Start_No = min (bill_no),@Child_Max_End_No = max(bill_no) from
				fa_opr_bill where Document_Series_Allocation_ID = @ID
			end
		else if @Document_ID in (8)-- credit memo
			begin
				select @Child_Min_Start_No = min (Credit_Memo_No),@Child_Max_End_No = max(Credit_Memo_No) from
				FA_Opr_Credit_Memo where Document_Series_Allocation_ID = @ID
			end
	end






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,AMOL>
-- Create date: <Create Date,,21 JAN 2009>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[FA_RPT_Fill_Location] 
(
@HierarchyCode VARCHAR(2),
@LoginHierarchy VARCHAR(2),
@Main_Id INT
)	
AS
BEGIN
	SET NOCOUNT ON;

IF (@LoginHierarchy = 'RO' AND @HierarchyCode = 'RO')
	BEGIN
	SELECT Region_Id as Location_Id,Region_Name as Location_Name FROM EC_Master_region WHERE Region_Id =(Select Case  @Main_Id when 0 then Region_Id else @Main_Id end) AND is_active =1
	order by Location_Name
	END
	ELSE IF (@LoginHierarchy = 'RO' AND @HierarchyCode = 'AO')
	BEGIN
	SELECT Area_Id as Location_Id,Area_Name  as Location_Name FROM EC_Master_Area WHERE Region_Id = (Select Case  @Main_Id when 0 then Region_Id else @Main_Id end) AND is_active =1 
	order by Location_Name
	END
	ELSE IF (@LoginHierarchy = 'RO' AND @HierarchyCode = 'BO')
	BEGIN
	SELECT Branch_Id as Location_Id,Branch_Name  as Location_Name FROM EC_Master_branch WHERE Region_Id = (Select Case  @Main_Id when 0 then Region_Id else @Main_Id end) AND is_active =1 
	order by Location_Name
	END


IF (@LoginHierarchy = 'AO' AND @HierarchyCode = 'AO')
	BEGIN
	SELECT Area_Id as Location_Id,Area_Name  as Location_Name FROM EC_Master_Area WHERE Area_Id = (Select Case  @Main_Id when 0 then Area_Id else @Main_Id end) AND is_active =1 
	order by Location_Name
	END
	ELSE IF (@LoginHierarchy = 'AO' AND @HierarchyCode = 'BO')
	BEGIN
	SELECT Branch_Id as Location_Id,Branch_Name  as Location_Name FROM EC_Master_branch WHERE Area_Id = (Select Case  @Main_Id when 0 then Area_Id else @Main_Id end) AND is_active =1 
	order by Location_Name
	END

	
IF (@LoginHierarchy = 'BO' AND @HierarchyCode = 'BO')
	BEGIN
	SELECT Branch_Id as Location_Id,Branch_Name  as Location_Name FROM EC_Master_branch WHERE Branch_Id = (Select Case  @Main_Id when 0 then Branch_Id else @Main_Id end) AND is_active =1 
	order by Location_Name
	END

IF (@LoginHierarchy = 'HO' OR @LoginHierarchy = 'AD')
BEGIN

	IF @HierarchyCode = 'RO'
	SELECT Region_Id as Location_Id,Region_Name as Location_Name FROM EC_Master_region WHERE is_active =1  	
	order by Location_Name

	IF @HierarchyCode = 'AO'
	SELECT Area_Id as Location_Id,Area_Name as Location_Name FROM EC_Master_Area WHERE is_active =1 
	order by Location_Name

	IF @HierarchyCode = 'BO'
	SELECT Branch_Id as Location_Id,Branch_Name as Location_Name FROM EC_Master_branch WHERE is_active =1
	order by Location_Name
END


END


----1168--------------------------------------------------------------------------------






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









  
-- Author: <Shiv kumar mishra>  
-- Create date: jan  11 2008  5:13PM  
-- Description: <ALS Readvalues>  
-- =============================================  
  
CREATE proc [dbo].[EC_Opr_ALS_ReadValues]  
(  
 @Branch_Id int,
 @ALS_Id int,
 @IsAccTransferReq bit,  
 @GetGCXML xml,  
 @ALS_Date datetime
)  
as  
BEGIN  
  
declare @Status_ID int; set @Status_ID = 0;  
  
IF @IsAccTransferReq = 0   
begin  
 set @Status_ID = 0; 
end  
else  
begin  
 set @Status_ID = 5;  
end    
  
DECLARE @idoc int  
EXEC sp_xml_preparedocument @idoc OUTPUT, @GetGCXML  

declare @gc_maxlength int
select @gc_maxlength = GC_No_Length from ec_master_Company_gc_parameter

declare @temp table(gc_no varchar(20))
insert into @temp 
select 
case charindex('-',item) when 0 then dbo.Get_No_To_Print(item,@gc_maxlength) else item end
from OPENXML(@idoc,'/parentroot/root',2)
WITH (item varchar(20))

  
IF(@ALS_Id <= 0)  ---For ADD  
 begin  
  
  select 'false' as Att,Article.GC_ID,  
    Article.Article_Id,GC_No_For_Print,GC_Date,  
    Branch_Name as Booking_Branch_Name,  
    Service_Location_Name as Delivery_Location_Name,  
    Payment_Type,Booking_Type,Delivery_Type,  
    '' as Packing_Type,
    GC.Total_Articles as Booking_Articles,  
    GC.Total_Actual_Weight as Booking_Actual_Wt,  
    Articles as Balance_Articles,  
    Article_Actual_Weight as Balance_Actual_Wt,  
    Articles as Loaded_Articles,  
    Article_Actual_Weight as Loaded_Weight,  
    Article.Article_ID as Previous_Article_ID,  
    Article.Status_ID as Previous_Status_ID,  
    Article.Document_ID as Previous_Document_ID,  
    Article.Document_No_For_Print as Previous_Document_No_For_Print,  
    Article.Document_Date as Previous_Document_Date,  
    GC_No_For_Print as Item_No  
  
  From EC_Opr_Vtrans_GC_Articles Article  
    inner join EC_Opr_Vtrans_GC GC   
    on Article.GC_ID=GC.GC_ID  
    inner join EC_Master_Branch Branch   
    on GC.From_Branch_ID = Branch.Branch_Id  
    inner join EC_Master_Payment_Type Pay   
    on GC.Payment_Type_Id = Pay.Payment_Type_Id  
    inner join EC_Master_Booking_Type Booktype   
    on GC.Booking_Type_Id = Booktype.Booking_Type_Id  
    inner join EC_Master_Delivery_Type Deltype   
    on GC.Delivery_Type_Id = Deltype.Delivery_Type_Id  
    inner join EC_Master_Service_Location SerLoc   
    on GC.To_Location_ID = SerLoc.Service_Location_ID  
  
  where cast(dbo.DateOnly(Document_Date)as Datetime) <= cast(dbo.DateOnly(@ALS_Date)as Datetime)  
    and Article.Current_Branch_Id=@Branch_Id  
    and GC.Is_Cancelled=0 
	and Article.Is_Cancelled=0
    and (Article.Status_ID = @Status_ID or Article.Status_ID = 60)  
    and GC.Delivery_Branch_Id <>  @Branch_Id 
	and GC.Is_Agency_Booking = case Article.Status_ID when 60 then GC.Is_Agency_Booking else 0 end
    and Article.Articles > 0
	AND GC_No_For_print in (select gc_no from @temp)

--    AND GC.GC_No in  
--       (SELECT  item from OPENXML (@idoc, '/parentroot/root',2)  
--    WITH (item varchar(20)))  
  
 end  
  
ELSE      ---For EDIT  
 begin  
  
  select 'true' as Att,  
    ALSDet.GC_ID,ALSDet.Article_Id,  
    GC_No_For_Print,GC_Date,  
    Branch_Name as Booking_Branch_Name,  
    Service_Location_Name as Delivery_Location_Name,  
    Payment_Type,Booking_Type,Delivery_Type,  
    '' as Packing_Type,  
    GC.Total_Articles as Booking_Articles,  
    GC.Total_Actual_Weight as Booking_Actual_Wt,  
    dbo.Ec_Opr_GetBalanceArticles(@Branch_Id,ALSDet.GC_ID,ALSDet.Loaded_Articles,article.status_id) as Balance_Articles,  
    dbo.Ec_Opr_GetBalanceActualWeight(@Branch_Id,ALSDet.GC_ID,ALSDet.Loaded_Actual_Wt,article.status_id) as Balance_Actual_Wt,  
    ALSDet.Loaded_Articles as Loaded_Articles,  
    ALSDet.Loaded_Actual_Wt as Loaded_Weight,  
    ALSDet.Previous_Article_ID as Previous_Article_ID,  
    ALSDet.Previous_Status_ID as Previous_Status_ID,  
    ALSDet.Previous_Document_ID as Previous_Document_ID,  
    ALSDet.Previous_Document_No_For_Print as Previous_Document_No_For_Print,  
    ALSDet.Previous_Document_Date as Previous_Document_Date,  
    GC_No_For_Print as Item_No  
  
  From EC_Opr_VTrans_ALS_Details ALSDet   
    inner join EC_Opr_VTrans_ALS ALS
    on ALS.ALS_ID=ALSDet.ALS_ID  
    inner join EC_Opr_Vtrans_GC GC  
    on ALSDet.GC_ID=GC.GC_ID  
    inner join EC_Opr_Vtrans_GC_Articles Article  
    on Article.article_ID=ALSDet.article_ID  
    inner join EC_Master_Branch Branch   
    on GC.From_Branch_ID = Branch.Branch_Id  
    inner join EC_Master_Payment_Type Pay   
    on GC.Payment_Type_Id = Pay.Payment_Type_Id  
    inner join EC_Master_Booking_Type Booktype   
    on GC.Booking_Type_Id = Booktype.Booking_Type_Id  
    inner join EC_Master_Delivery_Type Deltype   
    on GC.Delivery_Type_Id = Deltype.Delivery_Type_Id  
    inner join EC_Master_Service_Location SerLoc   
    on GC.To_Location_ID = SerLoc.Service_Location_ID  
  
  where ALSDet.ALS_ID = @ALS_Id  
--    and ALS_Branch_Id = @Branch_Id  
    and cast(dbo.DateOnly(ALSDet.Previous_Document_Date)as Datetime) <= cast(dbo.DateOnly(@ALS_Date)as Datetime)  
  
  -------------Master Details --------------------  
  
  select ALS_No_For_Print,ALS_Date,Vehicle_Category_ID,
	Emp_ID,(First_Name+' '+Middle_Name+' '+Last_Name) as Emp_Name,
	Vehicle_ID,Total_Loaded_Articles,Total_Loaded_Weight,  
    Total_No_Of_GC,Remarks  
  From dbo.EC_Opr_VTrans_ALS ALS  inner join EC_Master_Employee emp
  on ALS.Loading_Supervisor_ID = emp.Emp_ID
  where ALS_Id = @ALS_Id  
--    and ALS_Branch_Id = @Branch_Id  
    and Is_Cancelled = 0  
    and cast(dbo.DateOnly(ALS.ALS_Date)as Datetime) <= cast(dbo.DateOnly(@ALS_Date)as Datetime)  

 End  
  
  EXEC sp_xml_removedocument @idoc  

END  
  
  
  
  
  
















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
      
      
-- =============================================      
-- Author:  <Kanuga Vajiha>      
-- Create date:  6 May 09      
-- Description: <Proc To Fill Document Type For Approval>      
-- =============================================      
CREATE proc [dbo].[EC_Opr_AccountigVouchers_Approval]      
as      
BEGIN TRY      
BEGIN TRAN      
BEGIN      
      
select Document_Name,MenuItem_ID       
from EC_Printing    
where is_active = 1      
and MenuItem_ID in(106,108,195)    
order by Serial_No      
      
END      
COMMIT TRAN      
END TRY      
BEGIN CATCH      
 ROLLBACK TRAN      
END CATCH

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




  
  
    
      
        
 -- =============================================              
 -- Author:  <Dinesh>              
 -- Create date: <16-10-2008>              
 -- Description: <To Fill  Location Values>              
 -- =============================================              
 CREATE PROCEDURE [dbo].[EC_Opr_GC_Fill_Location_For_Other_Agency]    
   (                         
  @Is_Branch bit =1 ,    
  @SearchFor varchar(100)='',
  @Branch_Id int =0,
  @Agenct_Id int =0
 )
 AS
 BEGIN

   SELECT upper(Service_Location_Name) AS Name ,Service_Location_ID AS ID
   FROM EC_Master_Service_Location INNER JOIN  EC_Master_Branch      
    ON EC_Master_Branch.Branch_Id = EC_Master_Service_Location.Branch_ID 
	and EC_Master_Branch.Branch_Id =  @Agenct_Id
   where EC_Master_Service_Location.is_active = 1
    and  EC_Master_Service_Location.Service_Location_Name like  @SearchFor + '%'    
   order by  Name
end    





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================  
-- Author:  <Parikshit>  
-- Create date: <04-November-2008>  
-- Description: <Ledger Outstanding Report>  
-- =============================================    

--EXEC FA_Rpt_Ledger_Book 0,'HO',0,1,'04-01-2009','03-31-2010',0

CREATE PROC [dbo].[FA_Rpt_Ledger_Book]  
(      
@IsConsolidated bit,
@HierarchyCode varchar(5),  
@MainId int,
@DivisionId int,
@StartDate datetime,
@EndDate datetime,
@LedgerGroupId int 
)      
as      
    


if @IsConsolidated=1
	Begin


		select A.Ledger_Id,
		A.Ledger_name as 'Ledger Name',
		isnull(sum(A.Opening_Balance),0) as 'OpeningBalance',
		isnull(sum(A.Opening_Balance + A.Current_Balance),0) as 'ClosingBalance',
		A.Ledger_Group_Name as 'Ledger Group Name',
		case when isnull(sum(A.Opening_Balance),0)>0 then cast(isnull(sum(A.Opening_Balance),0) as varchar(50)) + ' Cr'
		when isnull(sum(A.Opening_Balance),0)<0 then cast(abs(isnull(sum(A.Opening_Balance),0)) as varchar(50)) + ' Dr'
		end as 'Opening Balance',
		case when isnull(sum(A.Opening_Balance + A.Current_Balance),0)>0 then cast(isnull(sum(A.Opening_Balance+A.Current_Balance),0) as varchar(50)) + ' Cr'
		when isnull(sum(A.Opening_Balance + A.Current_Balance),0)<0 then cast(abs(isnull(sum(A.Opening_Balance+A.Current_Balance),0)) as varchar(50)) + ' Dr'
		end as 'Closing Balance'
		from
		(		--** Opening Balance
		SELECT dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name, 
		FA_Master_Ledger_Group.Ledger_Group_Name,
		case when 
		FA_Master_Ledger_Group.Nature 
		in ('Expenses','Income') then 0 else
		isnull(SUM(dbo.FA_Opr_Voucher_Details.Credit)-SUM(dbo.FA_Opr_Voucher_Details.Debit),0)
		End as Opening_Balance,
		0 AS Current_Balance
		FROM FA_Master_Ledger_Group INNER JOIN
		dbo.FA_Master_Ledger ON dbo.FA_Master_Ledger.Ledger_Group_Id = FA_Master_Ledger_Group.Ledger_Group_Id INNER JOIN
		dbo.FA_Opr_Voucher_Details ON dbo.FA_Master_Ledger.Ledger_Id = dbo.FA_Opr_Voucher_Details.Ledger_ID
		Left outer join dbo.FA_Opr_Voucher on dbo.FA_Opr_Voucher.Voucher_Id=dbo.FA_Opr_Voucher_Details.Voucher_Id

		LEFT OUTER JOIN EC_Master_Branch C
		On FA_Opr_Voucher_Details.Main_Id=C.Branch_Id
		and FA_Opr_Voucher_Details.Hierarchy_Code='BO'
		LEFT OUTER JOIN EC_Master_Area D
		On FA_Opr_Voucher_Details.Main_Id=D.Area_Id
		and FA_Opr_Voucher_Details.Hierarchy_Code='AO'

		WHERE dbo.FA_Opr_Voucher.Is_Cancelled = 0 and dbo.FA_Opr_Voucher.Voucher_Id=0
		AND dbo.FA_Opr_Voucher_Details.Voucher_Date < @StartDate 

		and (@MainId = (case @HierarchyCode When 'AO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
		and (@MainId = (case @HierarchyCode When 'RO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

		AND dbo.FA_Opr_Voucher_Details.Division_Id = @DivisionId
		and @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)

		GROUP BY dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name, 
		FA_Master_Ledger_Group.Ledger_Group_Name,FA_Master_Ledger_Group.Nature

		UNION ALL

		-- Current Transactions
		SELECT    dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name, 
		FA_Master_Ledger_Group.Ledger_Group_Name,
		0 AS Opening_Balance,
		isnull(SUM(dbo.FA_Opr_Voucher_Details.Credit)-SUM(dbo.FA_Opr_Voucher_Details.Debit),0)
		as Current_Balance
		FROM      dbo.FA_Opr_Voucher_Details INNER JOIN
		dbo.FA_Master_Ledger ON dbo.FA_Opr_Voucher_Details.Ledger_ID = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
		FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = FA_Master_Ledger_Group.Ledger_Group_Id
		Left outer join dbo.FA_Opr_Voucher on dbo.FA_Opr_Voucher.Voucher_Id=dbo.FA_Opr_Voucher_Details.Voucher_Id

		LEFT OUTER JOIN EC_Master_Branch C
		On FA_Opr_Voucher_Details.Main_Id=C.Branch_Id
		and FA_Opr_Voucher_Details.Hierarchy_Code='BO'
		LEFT OUTER JOIN EC_Master_Area D
		On FA_Opr_Voucher_Details.Main_Id=D.Area_Id
		and FA_Opr_Voucher_Details.Hierarchy_Code='AO'

		WHERE dbo.FA_Opr_Voucher.Is_Cancelled = 0 
		AND dbo.FA_Opr_Voucher_Details.Voucher_Date >= @StartDate 
		AND dbo.FA_Opr_Voucher_Details.Voucher_Date <= @EndDate 

		and (@MainId = (case @HierarchyCode When 'AO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
		and (@MainId = (case @HierarchyCode When 'RO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
		 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

		AND dbo.FA_Opr_Voucher_Details.Division_Id = @DivisionId
		AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)


		GROUP BY dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name,
		FA_Master_Ledger_Group.Ledger_Group_Name
		)
		as A
		Group by A.Ledger_id,A.Ledger_Name,A.Ledger_Group_Name
		Order By A.Ledger_Name





	End--if @IsConsolidated=1
Else--Else if @IsConsolidated=1
	Begin

		select A.Ledger_Id,
		A.Ledger_name as 'Ledger Name',
		isnull(sum(A.Opening_Balance),0) as 'OpeningBalance',
		isnull(sum(A.Opening_Balance + A.Current_Balance),0) as 'ClosingBalance',
		A.Ledger_Group_Name as 'Ledger Group Name',

		case when isnull(sum(A.Opening_Balance),0)>0 then cast(isnull(sum(A.Opening_Balance),0) as varchar(50)) + ' Cr'
		when isnull(sum(A.Opening_Balance),0)<0 then cast(abs(isnull(sum(A.Opening_Balance),0)) as varchar(50)) + ' Dr'
		end as 'Opening Balance',


		case when isnull(sum(A.Opening_Balance + A.Current_Balance),0)>0 then cast(isnull(sum(A.Opening_Balance+A.Current_Balance),0) as varchar(50)) + ' Cr'
		when isnull(sum(A.Opening_Balance + A.Current_Balance),0)<0 then cast(abs(isnull(sum(A.Opening_Balance+A.Current_Balance),0)) as varchar(50)) + ' Dr'
		end as 'Closing Balance'

		from
		(		--** Opening Balance
		SELECT dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name, 
		FA_Master_Ledger_Group.Ledger_Group_Name,
		case when 
		FA_Master_Ledger_Group.Nature 
		in ('Expenses','Income') then 0 else
		isnull(SUM(dbo.FA_Opr_Voucher_Details.Credit)-SUM(dbo.FA_Opr_Voucher_Details.Debit),0)
		End as Opening_Balance,
		0 AS Current_Balance
		FROM FA_Master_Ledger_Group INNER JOIN
		dbo.FA_Master_Ledger ON dbo.FA_Master_Ledger.Ledger_Group_Id = FA_Master_Ledger_Group.Ledger_Group_Id INNER JOIN
		dbo.FA_Opr_Voucher_Details ON dbo.FA_Master_Ledger.Ledger_Id = dbo.FA_Opr_Voucher_Details.Ledger_ID
		Left outer join dbo.FA_Opr_Voucher on dbo.FA_Opr_Voucher.Voucher_Id=dbo.FA_Opr_Voucher_Details.Voucher_Id
		WHERE dbo.FA_Opr_Voucher.Is_Cancelled = 0 and dbo.FA_Opr_Voucher.Voucher_Id=0
		AND dbo.FA_Opr_Voucher_Details.Voucher_Date < @StartDate 
		AND dbo.FA_Opr_Voucher_Details.Hierarchy_Code = @HierarchyCode
		AND dbo.FA_Opr_Voucher_Details.Main_Id = @MainId
		AND dbo.FA_Opr_Voucher_Details.Division_Id = @DivisionId
		AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)

		GROUP BY dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name, 
		FA_Master_Ledger_Group.Ledger_Group_Name,FA_Master_Ledger_Group.Nature

		UNION ALL

		-- Current Transactions
		SELECT    dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name, 
		FA_Master_Ledger_Group.Ledger_Group_Name,
		0 AS Opening_Balance,
		isnull(SUM(dbo.FA_Opr_Voucher_Details.Credit)-SUM(dbo.FA_Opr_Voucher_Details.Debit),0)
		as Current_Balance
		FROM      dbo.FA_Opr_Voucher_Details INNER JOIN
		dbo.FA_Master_Ledger ON dbo.FA_Opr_Voucher_Details.Ledger_ID = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
		FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = FA_Master_Ledger_Group.Ledger_Group_Id
		Left outer join dbo.FA_Opr_Voucher on dbo.FA_Opr_Voucher.Voucher_Id=dbo.FA_Opr_Voucher_Details.Voucher_Id
		WHERE dbo.FA_Opr_Voucher.Is_Cancelled = 0 
		AND dbo.FA_Opr_Voucher_Details.Voucher_Date >= @StartDate 
		AND dbo.FA_Opr_Voucher_Details.Voucher_Date <= @EndDate 
		AND dbo.FA_Opr_Voucher_Details.Hierarchy_Code = @HierarchyCode
		AND dbo.FA_Opr_Voucher_Details.Main_Id = @MainId
		AND dbo.FA_Opr_Voucher_Details.Division_Id = @DivisionId
		AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)

		GROUP BY dbo.FA_Master_Ledger.Ledger_Id, dbo.FA_Master_Ledger.Ledger_Name,
		FA_Master_Ledger_Group.Ledger_Group_Name
		)
		as A
		Group by A.Ledger_id,A.Ledger_Name,A.Ledger_Group_Name
		Order By A.Ledger_Name

	End	--if @IsConsolidated=1









----1171--------------------------------------------------------------------------------







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






	-- =============================================      
		-- Author:  <Dinesh Mahajan>      
		-- Create date: <22 / 10 /2008>      
		-- Description: <Read GC Values >      
	-- =============================================      

	CREATE PROCEDURE [dbo].[EC_Opr_Attached_GC_ReadValues]         
		@Attached_GC_No_For_Print varchar(10) = '',  
		@Year_Code int = 0,  
		@Branch_Id int =0  ,
		@Is_Attached bit = 0,
		@Is_Rebook bit = 0,
		@Is_Copy bit = 0,
		@division_id int = 0,
		@Document_Id int = 0
	AS      
	BEGIN      

		declare @GC_ID int,@GC_Status_Id_At_Current_Branch int,@GC_Articles_At_Current_Branch int

		declare @Previous_Article_ID int  ,@Previous_Status_ID int ,@Previous_Document_ID int 
		declare @Previous_Document_No_For_Print varchar(50),@Previous_Document_Date datetime  

		set @GC_ID = 0;set @GC_Status_Id_At_Current_Branch = 0;set @GC_Articles_At_Current_Branch = 0
		set @Previous_Article_ID = 0;set @Previous_Status_ID = 0;set @Previous_Document_ID = 0
		set @Previous_Document_No_For_Print = '';set @Previous_Document_Date = getdate()

		if @Is_Attached = 1 or @Is_Copy = 1
		begin
			select @GC_ID = GC.GC_ID ,
				@GC_Status_Id_At_Current_Branch = GC_Articles.Status_Id ,
				@GC_Articles_At_Current_Branch = GC_Articles.Articles,

				@Previous_Article_ID = GC_Articles.Article_ID ,
				@Previous_Status_ID = GC_Articles.Status_ID ,
				@Previous_Document_ID = GC_Articles.Document_ID ,
				@Previous_Document_No_For_Print = GC_Articles.Document_No_For_Print ,
				@Previous_Document_Date = GC_Articles.Document_Date	
			from EC_Opr_VTrans_GC GC inner join EC_Opr_VTrans_GC_Articles GC_Articles on
				GC.GC_Id = GC_Articles.GC_Id 
				and GC_Articles.Status_Id = 0
				and GC.total_Articles = GC_Articles.Actual_Articles
				and GC_Articles.Current_Branch_ID = @Branch_Id
			where GC.GC_No_For_Print = @Attached_GC_No_For_Print  
				and GC.Year_Code = @Year_Code  
				and GC.From_Branch_ID = @Branch_Id   
				and GC.Total_Articles > 0
				and GC.Is_Agency_Booking = 0  
				and GC.Is_Cancelled = 0  
				--		and GC.Is_Attached = 0  
				and GC.Document_Id = @Document_Id
		end
		else
		begin
			select @GC_ID = GC.GC_ID ,
				@GC_Status_Id_At_Current_Branch = GC_Articles.Status_Id ,
				@GC_Articles_At_Current_Branch = GC_Articles.Articles , 	

				@Previous_Article_ID = GC_Articles.Article_ID ,
				@Previous_Status_ID = GC_Articles.Status_ID ,
				@Previous_Document_ID = GC_Articles.Document_ID ,
				@Previous_Document_No_For_Print = GC_Articles.Document_No_For_Print ,
				@Previous_Document_Date = GC_Articles.Document_Date	
			from EC_Opr_VTrans_GC GC inner join EC_Opr_VTrans_GC_Articles GC_Articles on
				GC.GC_Id = GC_Articles.GC_Id 
				and GC_Articles.Status_Id in (60)
				and GC_Articles.Articles = GC_Articles.Actual_Articles
				and GC_Articles.Current_Branch_ID = @Branch_Id
			where GC.GC_No_For_Print = @Attached_GC_No_For_Print  
				and GC.Year_Code = @Year_Code  
				--and GC.From_Branch_ID = @Branch_Id   
				and GC.Total_Articles > 0
				and GC.Is_Agency_Booking = 0  
				and GC.Is_Cancelled = 0  
				and GC.Status_Id <> 500
				and GC_Articles.Status_ID in (60) -- 0 for booking only for testing...			and GC_Articles.Articles = GC_Articles.Actual_Articles
				and GC_Articles.Articles = GC.Total_Articles
				--	and GC.Is_Attached = 0  
		end

		select GC.* ,GC.Attached_GC_Id Attached_GC_Id,  
			Attached_GC.GC_No_For_Print Attached_GC_No_For_Print,  

			isnull(upper(From_loc.Service_Location_Name),'') as From_Location_Name,    
			isnull(upper(To_loc.Service_Location_Name),'') as To_Location_Name,    
			isnull(upper(EC_Master_Branch.Branch_Name),'') as Delivery_Branch_name, 
			isnull(upper(Booking_Branch.Branch_Name),'') as Booking_Branch_Name, 
			isnull(upper(Arrived_From_Branch.Branch_Name),'') as Arrived_From_Branch_Name, 

			isnull(upper(Loading_Supervisor.First_Name),'') + ' ' + isnull(upper(Loading_Supervisor.Middle_Name),'')  + ' ' + isnull(upper(Loading_Supervisor.Last_Name),'') as Loading_Supervisor_Name , 
			isnull(upper(Marketing_Executive.First_Name),'') + ' ' + isnull(upper(Marketing_Executive.Middle_Name),'')  + ' ' + isnull(upper(Marketing_Executive.Last_Name),'') as Marketing_Executive_Name , 

			isnull(EC_Master_Client_VTrans.Client_ID,0) as Contractual_Client_Id , 
			isnull(upper(EC_Master_Client_VTrans.Client_Name),'') as Contractual_Client_Name , 

			isnull(upper(Billing_Client.Client_Name),'') as Billing_Client_Name , 
			isnull(upper(Billing_Branch.Branch_Name),'') as billing_Branch_Name , 
			isnull(upper(Agency.Branch_Name),'') as Agency_Name,
			isnull(GC.Agency_Ledger_Id,0) as Agency_Id,
			isnull(upper(Agency_Ledger.Ledger_Name),'') as Agency_Ledger_Name,
			isnull(GC.Agency_Ledger_ID,0) as Agency_Ledger_ID,

			isnull(EC_Master_Branch.Is_Octroi,0) Is_Octroi , 
			isnull(To_loc.Is_To_Pay_Booking,0) Is_To_Pay_Booking ,
			@GC_Status_Id_At_Current_Branch as GC_Status_Id_At_Current_Branch ,
			@GC_Articles_At_Current_Branch as GC_Articles_At_Current_Branch ,
			GC.Total_Articles as Actual_GC_Articles , 

			@Previous_Article_ID as Previous_Article_ID_1 ,
			@Previous_Status_ID  as Previous_Status_ID_1 ,
			@Previous_Document_ID as Previous_Document_ID_1  ,
			@Previous_Document_No_For_Print as Previous_Document_No_For_Print_1  ,
			@Previous_Document_Date as Previous_Document_Date_1 ,

			Container_Type,isnull(GC.Delivery_Way_Type_ID,1) as DeliveryWayTypeID,
			isnull(upper(Return_To_Yard.Service_Location_Name),'') as Return_To_Yard_Name
		from EC_Opr_VTrans_GC GC inner join EC_Opr_VTrans_GC_Articles GC_Articles on
			GC.GC_Id = GC_Articles.GC_Id 
			and GC_Articles.Status_Id = 0
			and GC.total_Articles = GC_Articles.Actual_Articles

			--	and GC_Articles.Current_Branch_ID = @Branch_Id
			left join EC_Opr_VTrans_GC Attached_GC on 
			GC.Attached_GC_Id = Attached_GC.GC_Id

			left join ec_master_service_location From_loc on    
			GC.From_Location_ID = From_loc.Service_Location_ID    

			left join ec_master_service_location To_loc on    
			GC.To_Location_ID = To_loc.Service_Location_ID    

			left join ec_master_Branch on    
			ec_master_Branch.branch_id = GC.Delivery_Branch_Id    

			left join ec_master_Branch Booking_Branch on  
			Booking_Branch.branch_id = GC.Booking_Branch_Id

			left join ec_master_Branch Arrived_From_Branch on  
			Arrived_From_Branch.branch_id = GC.Arrived_From_Branch_Id

			left join ec_master_Employee Loading_Supervisor on    
			GC.Loading_Supervisor_ID = Loading_Supervisor.Emp_ID    

			left join ec_master_Employee Marketing_Executive on    
			GC.Marketing_Executive_ID = Marketing_Executive.Emp_ID    

			left join EC_Opr_Contract_Master on    
			GC.Contract_ID = EC_Opr_Contract_Master.Contract_ID    

			left join EC_Master_Client_VTrans on    
			EC_Opr_Contract_Master.Client_ID = EC_Master_Client_VTrans.Client_ID    

			left join EC_Master_Client_VTrans Billing_Client on    
			GC.Billing_Client_ID = Billing_Client.Client_ID    

			left join EC_Master_Branch Billing_Branch on    
			GC.Billing_Branch_Id = Billing_Branch.Branch_Id    

			left join ec_master_service_location Return_To_Yard on  
			GC.Return_To_Yard_Id = Return_To_Yard.Service_Location_ID  

			left join EC_Master_Container_Type on  
			GC.Container_Type_Id = EC_Master_Container_Type.Container_Type_ID

			left join EC_Master_Branch Agency on  
			GC.Agency_Ledger_Id = Agency.Agency_Ledger_ID  

			left join FA_Master_Ledger Agency_Ledger on  
			GC.Agency_Ledger_Id = Agency_Ledger.Ledger_Id  

		where GC.GC_ID = @GC_ID     

		select 0 as sr_no,GC_Commodity_Details.Commodity_ID,    
			GC_Commodity_Details.Item_ID,    
			GC_Commodity_Details.Packing_ID,    
			Articles,Weight,Width,Length,Height ,    
			isnull(Commodity_Name,'') as Commodity_Name ,
			isnull(Packing_Type,'') as Packing_Type,
			isnull(Item_Name ,'') as Item_Name ,  
			isnull(Remark,'') as Remark,GC_ID,GC_Commodity_ID
		from EC_Opr_VTrans_GC_Commodity_Details GC_Commodity_Details  
			left join ec_Master_Item on     
			GC_Commodity_Details.Item_ID = ec_Master_Item.Item_Id      
			left join ec_Master_Commodity on     
			GC_Commodity_Details.Commodity_ID = ec_Master_Commodity.Commodity_ID    
			left join ec_Master_Packing on     
			GC_Commodity_Details.Packing_ID = ec_Master_Packing.Packing_ID    
		where GC_ID = @GC_ID    

		select 0 as sr_no,Invoice_No,Invoice_Amount,BE_BL_No,
			GC_ID ,GC_Invoice_ID,isnull(upper(Chalan_No),'') as Chalan_No
		from EC_Opr_VTrans_GC_Invoice_Details    
		where GC_ID = @GC_ID    

		select 'true' as checked,0 as sr_no,  
			GC_Other_Charges_ID,GC_ID,  
			GC_Other_Charges.GC_Other_Charge_Head_ID,  
			GC_Other_Charge_Head,Description,  
			isnull(Amount,0) as Amount , GC_Other_Charges_ID
		from EC_Opr_VTrans_GC_Other_Charges GC_Other_Charges inner join EC_Master_GC_Other_Charge_Head on   
			GC_Other_Charges.GC_Other_Charge_Head_ID = EC_Master_GC_Other_Charge_Head.GC_Other_Charge_Head_ID    
		where GC_ID = @GC_ID 

		union  

		select 'false' as checked,0 as sr_no,  
			0 GC_Other_Charges_ID,0 GC_ID,  
			EC_Master_GC_Other_Charge_Head.GC_Other_Charge_Head_ID,  
			GC_Other_Charge_Head,''  Description,  
			0 Amount, 0 GC_Other_Charges_ID
		from EC_Master_GC_Other_Charge_Head    
		where GC_Other_Charge_Head_ID not in (  
				select GC_Other_Charge_Head_ID   
				from  EC_Opr_VTrans_GC_Other_Charges    
				where  GC_ID=@GC_ID)   
			and is_Active=1  
		order by GC_Other_Charge_Head  

--		select 0 as sr_no,GC_Billing_Details.* ,
--			isnull(upper(Billing_Client.Client_Name),'') as Billing_Client_Name ,
--			isnull(upper(Billing_Branch.Branch_Name),'') as billing_Branch_Name ,
--			Billing_Client.Credit_Limit as Credit_Limit , 
--			cast(0.00 as float) as Closing_Balance ,
--			Ledger_Id ,GC_Billing_Id,Billing_Hierarchy
--		from EC_Opr_Vtrans_GC_Billing_Details GC_Billing_Details
--
--			left join EC_Master_Client_VTrans Billing_Client on  
--			GC_Billing_Details.Billing_Client_ID = Billing_Client.Client_ID  
--
--			left join EC_Master_Branch Billing_Branch on  
--			GC_Billing_Details.Billing_Branch_Id = Billing_Branch.Branch_Id  
--		where GC_ID = @GC_ID

		select 0 as sr_no,GC_Billing_Details.* ,Hierarchy.Hierarchy_Name as 'Hierarchy_Name',
			isnull(upper(Billing_Client.Client_Name),'') as Billing_Client_Name,
			Billing_Client.Credit_Limit as Credit_Limit, 
			cast(0.00 as float) as Closing_Balance,Billing_Client.Ledger_Id,
			GC_Billing_Id,
			 Case GC_Billing_Details.Billing_Hierarchy 
				When 'AO' then Area.Area_Name
				When 'BO' then Billing_Branch.Branch_Name 
			    When 'RO' then Region.Region_Name
				When 'HO' then ''
			  End as billing_Branch_Name

		from EC_Opr_Vtrans_GC_Billing_Details GC_Billing_Details
			left join EC_Master_Client_VTrans Billing_Client on  
			GC_Billing_Details.Billing_Client_ID = Billing_Client.Client_ID  
			Left Join Ec_Master_Hierarchy Hierarchy      
			On Hierarchy.Hierarchy_Code=GC_Billing_Details.Billing_Hierarchy

			left join EC_Master_Branch Billing_Branch on  
			GC_Billing_Details.Billing_Branch_Id = Billing_Branch.Branch_Id 
			left join EC_Master_Area Area on  
			GC_Billing_Details.Billing_Branch_Id = Area.Area_Id  
			left join EC_Master_Region Region on  
			GC_Billing_Details.Billing_Branch_Id = Region.Region_Id  
 
		where GC_ID=@GC_ID

		SELECT MR_Bank_Details.Year_Code,MR_Bank_Details.Division_ID,MR_Details_ID ,
			MR_Bank_Details.MR_ID,Cheque_Bank_Name,Cheque_Branch_Name ,
			MR_Bank_Details.Cheque_No,MR_Bank_Details.Cheque_Amount ,
			Ledger_Name as Bank_Ledger_Name,Bank_Ledger_ID ,
			convert(varchar(20),MR_Bank_Details.Cheque_Date,106) as Cheque_Date
		FROM FA_Opr_MR_Bank_Details MR_Bank_Details INNER JOIN FA_Opr_MR  on  
			FA_Opr_MR.MR_ID = MR_Bank_Details.MR_ID INNER JOIN EC_Opr_Vtrans_GC GC  on  
			FA_Opr_MR.GC_ID = GC.GC_ID INNER JOIN FA_Master_Ledger ON 
			MR_Bank_Details.Bank_Ledger_ID = FA_Master_Ledger.Ledger_Id
		WHERE FA_Opr_MR.GC_ID = @GC_ID
			and GC.Payment_Type_Id = 2 -- paid
	END      
















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
  
  
  
  
  
  
  
-- =============================================  
-- Author: <shiv kumar mishra>  
-- Create date: Nov  7 2008  6:31PM  
-- Description: <Save Godown Delivery sheet>  
-- =============================================  
  
CREATE Proc [dbo].[EC_Opr_GDC_Save]  
(@Division_ID int,  
@Year_Code int,  
@Hierarchy_Code varchar(5),  
@Menu_Item_ID int,  
@DDC_Branch_ID int,  
@DDC_ID int,  
@DDC_Date datetime,  
@Godown_Supervisor_ID int,  
@Remarks varchar(250),  
@Created_By int,  
@GDCDetailsXML xml,  
@Print_Doc_ID int = 0 output,   
@Error_Code int output,  
@ERROR_DESC AS VARCHAR(4000) OUTPUT)  
  
As  
  
set @Error_Code = 0;  
set @ERROR_DESC = '';  
set @Print_Doc_ID = 0;      
  
if @DDC_ID <= 0   
 begin  
  declare @Can_Add bit  
    
  exec dbo.Ec_Opr_Can_Add @GDCDetailsXML,'newdataset','gdcgrid_details',@Can_Add output  
  if @Can_Add = 0 return;  
 end  
  
if @DDC_ID > 0 and dbo.Ec_Opr_Can_Edit_Cancel ('GDC',@DDC_ID) = 0  
 begin  
  set @Error_Code = 1012;  
  set @ERROR_DESC = '';    
  return;    
 end  
  
BEGIN TRY  
BEGIN TRAN  
BEGIN  
SET NOCOUNT ON;  
 declare @DDC_No int   
declare @DDC_No_For_Print varchar(20)  
declare @Total_No_Of_GC int  
declare @Total_DDC_Articles int  
declare @Total_DDC_Actual_Wt numeric(18,2)  
  
set @Total_No_Of_GC =0;   
set @Total_DDC_Articles =0;  
set @Total_DDC_Actual_Wt =0;  
 DECLARE @GDCDetails int  
EXEC sp_xml_preparedocument @GDCDetails OUTPUT,@GDCDetailsXML     
  
 select @Total_No_Of_GC = count(*),  
   @Total_DDC_Articles = sum(Delivery_Articles),  
   @Total_DDC_Actual_Wt = sum(Delivery_Actual_Wt)  
 from openxml (@GDCDetails,'/newdataset/gdcgrid_details',2)  
   with(delivery_articles int,delivery_actual_wt numeric(18,2),  
   octroi_updated bit)  
 where octroi_updated = 1  
  
 -----------Insert into Master table ----------------------  
  
  
if (@DDC_ID <= 0)   -- add  
  Begin  
  
 exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@DDC_Branch_ID,  
 @Division_ID,@Menu_Item_ID,0,@DDC_No output,@DDC_No_For_Print OUTPUT  
   
    insert into EC_Opr_VTrans_Door_Delivery_Confirmation  
 (  
  Division_ID,  
  Year_Code,  
  DDC_Branch_ID,  
  DDC_No,  
  DDC_No_For_Print,  
  DDC_Date,  
  DDC_Type_ID,  
  PDS_ID,  
  Total_No_Of_GC,  
  Total_DDC_Articles,  
  Total_DDC_Actual_Wt,  
  Godown_Supervisor_ID,  
  Remarks,  
  Is_Cancelled,  
  Created_By,  
  Created_On,  
  Updated_By,  
  Updated_On  
 )  
    values  
 (  
  @Division_ID,  
  @Year_Code,  
  @DDC_Branch_ID,  
  @DDC_No,  
  @DDC_No_For_Print,  
  @DDC_Date,  
  1,  
  0,  
  @Total_No_Of_GC,  
  @Total_DDC_Articles,  
  @Total_DDC_Actual_Wt,  
  @Godown_Supervisor_ID,  
  @Remarks,  
  0,  
  @Created_By,  
  getdate(),  
  @Created_By,  
  getdate()  
 )  
  
 set @DDC_ID = @@identity  
    set @Print_Doc_ID = @@identity        
  
  End  
Else -- Edit  
  Begin  
  
 exec EC_Opr_Set_Article_Reverse_Effects 'GDC',@DDC_ID  
  
    Update EC_Opr_VTrans_Door_Delivery_Confirmation set  
 DDC_Date = @DDC_Date,  
    Total_No_Of_GC = @Total_No_Of_GC,  
    Total_DDC_Articles = @Total_DDC_Articles,  
    Total_DDC_Actual_Wt = @Total_DDC_Actual_Wt,  
    Godown_Supervisor_ID = @Godown_Supervisor_ID,  
    Remarks = @Remarks,  
    Updated_By = @Created_By,  
    Updated_On = getdate()  
  
    where DDC_ID = @DDC_ID  
    set @Print_Doc_ID = @DDC_ID  
  
 delete from EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
 where DDC_ID = @DDC_ID  
  
  End  
  -----------Insert into Details table ----------------------  
  insert into EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
   (Year_Code,DDC_ID,PDS_ID,  
   GC_ID,Article_ID,LHPO_ID,Vehicle_ID,Memo_ID,Balance_Articles,  
   Balance_Actual_Wt,Delivered_Articles,Delivered_Actual_Wt,  
   Received_Condition_ID,Damaged_Articles,Damaged_Value,Delivery_Date,  
   Delivery_Time,Delivery_Status_ID,Reason_ID,Delivery_Taken_By,  
   Delivery_Mode_ID,Delivery_Mode_Description,Is_POD_Received,  
   POD_Hierarchy_Code,POD_Received_ID,  
   Previous_Article_ID,Previous_Status_ID,Previous_Document_ID,  
   Previous_Document_No_For_Print,Previous_Document_Date,  
   Found_ID,AUS_Article_ID,AUS_ID,AUS_No_For_Print,AUS_Date,AUS_Time,  
   Cne_Copy_Status_ID,Delivery_Against_ID,  
   Delivery_To_ID,Contact_No)  
 Select @Year_Code,@DDC_ID,0,  
   GC_ID,Article_Id,0,0,0,Balance_Articles,  
   Balance_Actual_Wt,Delivery_Articles,Delivery_Actual_Wt,  
   0,0,0,getdate(),  
   Delivery_Time,200,0,Delivery_Taken_By,  
   Delivery_Mode_ID,Delivery_Mode_Description,0,  
   '',0,  
   Previous_Article_ID,Previous_Status_ID,Previous_Document_ID,  
   Previous_Document_No_For_Print,cast(Previous_Document_Date as datetime),  
   0,Previous_Article_ID,Previous_Document_ID,Previous_Document_No_For_Print,cast(AUS_date1 as datetime),AUS_Time,  
   Cne_Copy_Status_ID,Delivery_Against_ID,  
   Delivery_To_ID,Contact_No 
 from openxml (@GDCDetails,'/newdataset/gdcgrid_details',2)  
   with(gc_id int,article_id int,balance_articles int,  
   balance_actual_wt numeric(18,2),delivery_articles int,delivery_actual_wt numeric(18,2),  
   delivery_time varchar(5),delivery_taken_by varchar(25),delivery_mode_id int,delivery_mode_description varchar(50),  
   previous_article_id int,previous_status_id int,previous_document_id int,  
   previous_document_no_for_print nvarchar(40),previous_document_date varchar(10), 
   aus_date1 varchar(10),aus_time varchar(5),cne_copy_status_id int, 
    delivery_against_id int,delivery_to_id int,octroi_updated bit,contact_no varchar(25) )
 where octroi_updated = 1
  EXEC sp_xml_removedocument @GDCDetails   
  
exec EC_Opr_Set_Article_Effects @DDC_Branch_ID,'GDC',@DDC_ID,0  
  
  
exec EC_Opr_Delivery_Insert_Into_PODTracking @DDC_ID,@DDC_Date,@DDC_Branch_ID,1,80  
  
  
  
---================Gc Delivery Account Effects===============  
EXEC [dbo].[EC_FA_Opr_GcDeliveryAccountEffects]  
  @DDC_ID = @DDC_ID  
---=========================================================  
  
  
END  
COMMIT TRAN  
END TRY  
BEGIN CATCH  
 ROLLBACK TRAN  
 SELECT @ERROR_CODE=ERROR_NUMBER()  
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
 CAST(ERROR_MESSAGE() as VARCHAR(4000))  
END CATCH  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:<Dinesh>
-- alter date: <31-10-2008>
-- Description: <To Get LHPO (Memo & Gc ) Details >
-- =============================================

-- EC_opr_AUS_Get_Memo_GC_Details 0,1,303,0,0,0,0,0,0,0,0,0,0,0,0,0,32

CREATE proc [dbo].[EC_opr_AUS_Get_Memo_GC_Details]
(
@AUS_ID int = 0,
@AUS_Branch_ID int=0,
@LHPO_ID int =0,
@LHPO_Date varchar(20) output, 
@Schedule_Arrival_Delivery_Date varchar(20) output, 
@Schedule_Arrival_Delivery_Time varchar(20) output , 
@Total_Booking_Articles int output,
@Total_Booking_Articles_Wt int output,
@Total_Loaded_Articles int output,
@Total_Loaded_Articles_Wt int output,
@Total_Received_Articles int output,
@Total_Received_Articles_Wt int output,
@Total_Damage_Leakage_Articles int output,
@Total_Damage_Leakage_Value int output,
@Delivery_Commision numeric(18,2) =0 output,
@To_Pay_Collection numeric(18,2) =0 output,

@Delivery_Receivable numeric(18,2) =0 output,
@UpCountry_Receivable numeric(18,2) =0 output,
@Service_Charges_Payable numeric(18,2) =0 output,
@UpCountry_Crssing_Cost_Payable numeric(18,2) =0 output,

@TAS_ID int,
@menuitem_id int,
@LHPOFromLocation varchar(20) output,
@LHPOToLocation varchar(20) output,
@BTHamount numeric(18,2)=0 output
)
as
set nocount on

set @Total_Booking_Articles = 0
set @Total_Booking_Articles_Wt = 0
set @Total_Loaded_Articles = 0
set @Total_Loaded_Articles_Wt = 0
set @Total_Received_Articles = 0
set @Total_Received_Articles_Wt = 0
set @Total_Damage_Leakage_Articles = 0
set @Total_Damage_Leakage_Value = 0
set @Delivery_Commision = 0
set @To_Pay_Collection = 0

set @LHPO_Date = dbo.DateOnlyDisplay(getdate())
set @Schedule_Arrival_Delivery_Date = dbo.DateOnlyDisplay(getdate())
set @Schedule_Arrival_Delivery_Time = CONVERT(CHAR(8),getdate(),8) 

declare @Is_TAS_Required bit
declare @Standard_Freight_Rate_Per numeric(18,2)

select @Is_TAS_Required = Is_TAS_Required,
@Standard_Freight_Rate_Per = isnull(Standard_Freight_Rate_Per,1) from EC_Master_Company_Parameters

select @LHPO_Date = dbo.DateOnlyDisplay(LHPO_Date),
@LHPOFromLocation=ServiceLocationFrom.Service_Location_Name,
@LHPOToLocation=ServiceLocationTo.Service_Location_Name,
@BTHAmount=Balance_Payble_Amount 
from EC_Opr_VTrans_LHPO LHPO
inner join EC_Master_Service_Location ServiceLocationFrom
on ServiceLocationFrom.Service_Location_Id=LHPO.From_Location_Id
inner join EC_Master_Service_Location ServiceLocationTo
on ServiceLocationTo.Service_Location_Id=LHPO.To_Location_Id
where LHPO_ID = @LHPO_ID

-----------------------------------------------------------------------------------------------------------
exec Ec_opr_vtrans_AUS_TAS_Get_GC_Details @AUS_Branch_ID,@menuitem_id,@LHPO_ID,@TAS_ID
-----------------------------------------------------------------------------------------------------------

Exec Ec_opr_vtrans_AUS_TAS_Get_Schedule_Arrival_Datetime 
@LHPO_ID,@Schedule_Arrival_Delivery_Date output,@Schedule_Arrival_Delivery_Time output
-----------------------------------------------------------------------------------------------------------

declare @GC_To_Be_Unloaded_By_Me table
(sr_no int identity,GC_ID int,Loaded_Articles int,Loaded_Actual_Wt numeric(18,2),
payment_type_id int,dly_branch_id int,Is_Aus_and_DLY_Branch_Same bit)

if (@menuitem_id = 158) or (@menuitem_id = 72 and @Is_TAS_Required = 0)
	begin
		insert into @GC_To_Be_Unloaded_By_Me
		select Memo_Details.gc_id,
		Memo_Details.Loaded_Articles,Memo_Details.Loaded_Actual_Wt,payment_type_id,
		EC_Opr_VTrans_GC.delivery_branch_id,  
		case when EC_Opr_VTrans_GC.delivery_branch_id = @aus_branch_id then 1 else 0 end  
		from EC_Opr_VTrans_LHPO_GC_Details GC_Details
		inner join EC_opr_Vtrans_LHPO LHPO
		on GC_Details.LHPO_ID = LHPO.LHPO_ID
		inner join EC_Opr_VTrans_Memo Memo
		on GC_Details.Memo_ID = Memo.Memo_ID
		inner join EC_Opr_VTrans_Memo_Details Memo_Details
		on Memo.Memo_ID = Memo_Details.Memo_ID
		and GC_Details.gc_id = Memo_Details.gc_id
		inner join EC_Opr_VTrans_GC_Articles on
		EC_Opr_VTrans_GC_Articles.article_id = GC_Details.article_id
		inner join EC_Opr_VTrans_GC on
		EC_Opr_VTrans_GC.GC_id = GC_Details.GC_id
		where 1=1
		and Memo.Is_Cancelled = 0
		and EC_Opr_VTrans_GC_Articles.Articles>0 
		and Memo.To_Branch_Id = @AUS_Branch_ID
		and Memo_Details.Actual_Unloading_Sheet_ID = 0
		and EC_Opr_VTrans_GC_Articles.status_id = 40
		and LHPO.Main_LHPO_ID = @LHPO_ID
	end
else if (@menuitem_id = 72 and @Is_TAS_Required = 1)
	begin
		insert into @GC_To_Be_Unloaded_By_Me
		select Memo_Details.gc_id,
		Memo_Details.Loaded_Articles,Memo_Details.Loaded_Actual_Wt,payment_type_id,
		EC_Opr_VTrans_GC.delivery_branch_id,  
		case when EC_Opr_VTrans_GC.delivery_branch_id = @aus_branch_id then 1 else 0 end  
		from EC_Opr_VTrans_TAS_Details GC_Details
		inner join EC_Opr_VTrans_Memo Memo
		on GC_Details.Memo_ID = Memo.Memo_ID
		inner join EC_Opr_VTrans_Memo_Details Memo_Details
		on Memo.Memo_ID = Memo_Details.Memo_ID
		and GC_Details.gc_id = Memo_Details.gc_id
		inner join EC_Opr_VTrans_GC_Articles on
		EC_Opr_VTrans_GC_Articles.article_id = GC_Details.article_id
		inner join EC_Opr_VTrans_GC on
		EC_Opr_VTrans_GC.GC_id = GC_Details.GC_id
		where 1=1
		and Memo.Is_Cancelled = 0
		and EC_Opr_VTrans_GC_Articles.Articles>0 
		and Memo.To_Branch_Id = @AUS_Branch_ID
		and Memo_Details.TAS_ID = @TAS_ID
		and EC_Opr_VTrans_GC_Articles.status_id = 50
		and GC_Details.TAS_ID = @TAS_ID
	end

-----------------------------------------------------------------------------------------------------------

select
@Total_Loaded_Articles= isnull(sum(Loaded_Articles),0) ,
@Total_Loaded_Articles_Wt =isnull(sum(Loaded_Actual_Wt),0),
@Total_Received_articles= isnull(sum(Loaded_Articles),0) ,
@Total_Received_Articles_Wt =isnull(sum(Loaded_Actual_Wt),0),
@Total_Damage_Leakage_Articles= 0 ,
@Total_Damage_Leakage_Value = 0
from
@GC_To_Be_Unloaded_By_Me

-----------------------------------------------------------------------------------------------------------

declare @gc_receivable_and_payable table
(gc_id int,payment_type_id int,dly_branch_id int,Is_Aus_and_DLY_Branch_Same bit,
Crossing_Cost numeric(18,2))

declare @gc_id int
declare @is_unloaded bit
declare @dly_Branch_ID int
declare @Crossing_Cost numeric(18,2)
declare @GC_Actual_Weight numeric(18,2)
declare @sr_no int
declare @count int

select @count = count(*) from @GC_To_Be_Unloaded_By_Me
set @sr_no = 1

while @sr_no <= @count
	begin
		set @GC_Actual_Weight = 0
		set @gc_id = 0
		set @is_unloaded = 0
		set @dly_Branch_ID = 0
		set @Crossing_Cost = 0

		select @gc_id = gc_id,@dly_Branch_ID = dly_Branch_ID from @GC_To_Be_Unloaded_By_Me where sr_no = @sr_no
		select @GC_Actual_Weight = total_actual_weight from ec_opr_vtrans_gc
		where gc_id = @gc_id

		select @Crossing_Cost = (Total * @GC_Actual_Weight)/@Standard_Freight_Rate_Per from EC_Master_Vtrans_Standard_Crossing_Rate
		where From_Branch_Id = @AUS_Branch_ID and To_Branch_Id = @dly_Branch_ID

		select @is_unloaded = 1 from EC_Opr_VTrans_Actual_Unloading_Sheet AUS
		inner join EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUSD
		on AUS.Actual_Unloading_Sheet_ID = AUSD.Actual_Unloading_Sheet_ID
		where AUSD.gc_id = @gc_id
		and AUS.Un_Loading_Branch_ID = @AUS_Branch_ID
		and AUS.Is_Cancelled = 0

		select @is_unloaded = 1 from @gc_receivable_and_payable
		where gc_id = @gc_id

		if @is_unloaded = 0
			insert into @gc_receivable_and_payable
			select gc_id,payment_type_id,dly_branch_id,Is_Aus_and_DLY_Branch_Same,
			@Crossing_Cost
			from @GC_To_Be_Unloaded_By_Me where sr_no = @sr_no

		set @sr_no = @sr_no + 1
	end

-----------------------------------------------------------------------------------------------------------

select
@Total_Booking_Articles = isnull(sum(Total_Articles),0) ,
@Total_Booking_Articles_Wt =isnull(sum(Total_Actual_Weight),0)
from ec_opr_vtrans_gc gc
inner join @gc_receivable_and_payable dis_gc_id
on gc.gc_id = dis_gc_id.gc_id
-----------------------------------------------------------------------------------------------------------

select @Delivery_Receivable = isnull(sum(Total_GC_Amount-Advance_Amount),0)
from @gc_receivable_and_payable RAP
inner join Ec_Opr_Vtrans_GC GC
on RAP.GC_ID = GC.GC_ID
where GC.Payment_Type_ID = 1
and Is_Aus_and_DLY_Branch_Same = 1
-----------------------------------------------------------------------------------------------------------

select @UpCountry_Receivable = isnull(sum(Total_GC_Amount-Advance_Amount),0)
from @gc_receivable_and_payable RAP
inner join Ec_Opr_Vtrans_GC GC
on RAP.GC_ID = GC.GC_ID
where GC.Payment_Type_ID = 1
and Is_Aus_and_DLY_Branch_Same = 0

-----------------------------------------------------------------------------------------------------------

declare @dly_comm table
(gc_id int,gc_actual_weight int,gc_charged_weight int,Delivery_Commission_per_kg numeric(18,2),Delivery_Commission numeric(18,2))

insert into @dly_comm
select GC.GC_ID,GC.Total_Actual_Weight,GC.Charged_Weight,Delivery_Commission,0
from Ec_opr_Vtrans_GC GC
inner join EC_Master_Branch_Rate_Card_VTrans Rate_Card
on Rate_Card.branch_id = GC.delivery_branch_id
inner join @gc_receivable_and_payable unloading_gc
on GC.gc_id = unloading_gc.gc_id
where Is_Aus_and_DLY_Branch_Same = 1

update @dly_comm set Delivery_Commission = isnull((gc_actual_weight * Delivery_Commission_per_kg)/@Standard_Freight_Rate_Per,0)

select @Service_Charges_Payable = isnull(sum(Delivery_Commission),0) from @dly_comm
-----------------------------------------------------------------------------------------------------------

select @UpCountry_Crssing_Cost_Payable = isnull(sum(Crossing_Cost),0)
from @gc_receivable_and_payable
where Is_Aus_and_DLY_Branch_Same = 0


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================    
-- Author:  <Parikshit>    
-- Create date: <10-November-2008>    
-- Description: <Ledger Outstanding Report>    
-- =============================================      
  
  
--EXEC FA_Rpt_Outstanding_Ledger 0,'HO',0,1,'03-31-2008',24,0  
  
CREATE PROC [dbo].[FA_Rpt_Outstanding_Ledger]    
(        
@IsConsolidated bit,  
@HierarchyCode varchar(5),    
@MainId int,  
@DivisionId int,  
@EndDate datetime,  
@LedgerGroupId int,  
@OnAccount numeric(18,2) OUTPUT   
)        
as        
      
set @OnAccount = 0
  
if @IsConsolidated=1  
 Begin  
  
  SELECT dbo.FA_Master_Ledger.Ledger_Id,   
    
  Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'  
  Then 'True' else '' End as HO,   
  Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'  
  then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
  Else '' End as Region,  
  Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'  
  then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
  Else '' End as Area,  
  Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'  
  then (select Branch_name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
  Else  
  '' End as Branch,  
  dbo.FA_Master_Ledger.Ledger_Name as 'Ledger Name',    
  dbo.FA_Master_Ledger_Group.Ledger_Group_Name 'Ledger Group Name',   
  case when isnull(Sum(dbo.FA_Bill_Wise_Details.Amount),0)>0 then cast(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0) as varchar(50)) + ' Cr'  
  when isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)<0 then cast(abs(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)) as varchar(50)) + ' Dr'  
  end as 'Pending Amount',  
        Sum(dbo.FA_Bill_Wise_Details.Amount) as Pending_Amount  
  
  FROM dbo.FA_Bill_Wise_Details INNER JOIN  
  dbo.FA_Master_Ledger ON dbo.FA_Bill_Wise_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN  
  dbo.FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = dbo.FA_Master_Ledger_Group.Ledger_Group_Id  
   
  LEFT OUTER JOIN EC_Master_Branch C  
  On dbo.FA_Bill_Wise_Details.Main_Id=C.Branch_Id  
  and dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'  
  LEFT OUTER JOIN EC_Master_Area D  
  On dbo.FA_Bill_Wise_Details.Main_Id=D.Area_Id  
  and dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'  
  
  Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
  
  and (@MainId = (case @HierarchyCode When 'AO' then dbo.FA_Bill_Wise_Details.Main_Id else @MainId End)  
   or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))  
  and (@MainId = (case @HierarchyCode When 'RO' then dbo.FA_Bill_Wise_Details.Main_Id else @MainId End)  
   or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)  
   or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))  
  
  AND FA_Bill_Wise_Details.Division_Id = @DivisionId  
  AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=1  
  AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)  
    
  
  Group By dbo.FA_Master_Ledger.Ledger_Id,   
  dbo.FA_Bill_Wise_Details.Hierarchy_Code, dbo.FA_Bill_Wise_Details.Main_Id,   
  dbo.FA_Master_Ledger.Ledger_Name,  
  dbo.FA_Master_Ledger_Group.Ledger_Group_Name  
  Having Sum(dbo.FA_Bill_Wise_Details.Amount) <> 0 
  Order by dbo.FA_Master_Ledger.Ledger_Name  
  
---------------------------------------------------------------------------------------------  
--SET "ON ACCOUNT AMOUNT" AS OUTPUT PARAMETER  
---------------------------------------------------------------------------------------------  
  
  SELECT @OnAccount=Isnull(Sum(dbo.FA_Opr_Voucher_Details.Credit)- Sum(dbo.FA_Opr_Voucher_Details.Debit),0)  
  FROM dbo.FA_Opr_Voucher INNER JOIN  
  dbo.FA_Opr_Voucher_Details ON dbo.FA_Opr_Voucher.Voucher_Id = dbo.FA_Opr_Voucher_Details.Voucher_Id INNER JOIN  
  dbo.FA_Master_Ledger ON dbo.FA_Opr_Voucher_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id  
  LEFT OUTER JOIN EC_Master_Branch C  
  On FA_Opr_Voucher_Details.Main_Id=C.Branch_Id  
  and FA_Opr_Voucher_Details.Hierarchy_Code='BO'  
  LEFT OUTER JOIN EC_Master_Area D  
  On FA_Opr_Voucher_Details.Main_Id=D.Area_Id  
  and FA_Opr_Voucher_Details.Hierarchy_Code='AO'  
  
  Where dbo.FA_Opr_Voucher.Is_Cancelled=0  
  AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=1
  and dbo.FA_Opr_Voucher_Details.Voucher_Date<=@EndDate  
  and dbo.FA_Master_Ledger.Ledger_Group_Id in  
  (select Ledger_Group_Id from dbo.GetChildLedgerGroupIds(@LedgerGroupId))    
  and FA_Opr_Voucher_Details.Division_Id=@DivisionId  
  and (@MainId = (case @HierarchyCode When 'AO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)  
   or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))  
  and (@MainId = (case @HierarchyCode When 'RO' then FA_Opr_Voucher_Details.Main_Id else @MainId End)  
   or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)  
   or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))  
  
---------------------------------------------------------------------------------------------  
  
  
 End--if @IsConsolidated=1  
Else--Else if @IsConsolidated=1  
 Begin  
  
  SELECT dbo.FA_Master_Ledger.Ledger_Id,   
    
  Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'  
  Then 'True' else '' End as HO,   
  Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'  
  then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
  Else '' End as Region,  
  Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'  
  then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
  Else '' End as Area,  
  Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'  
  then (select Branch_name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
  Else  
  '' End as Branch,  
  dbo.FA_Master_Ledger.Ledger_Name as 'Ledger Name',   
  dbo.FA_Master_Ledger_Group.Ledger_Group_Name 'Ledger Group Name',   
  case when isnull(Sum(dbo.FA_Bill_Wise_Details.Amount),0)>0 then cast(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0) as varchar(50)) + ' Cr'  
  when isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)<0 then cast(abs(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)) as varchar(50)) + ' Dr'  
  end as 'Pending Amount',  
        Sum(dbo.FA_Bill_Wise_Details.Amount) as Pending_Amount  
  FROM dbo.FA_Bill_Wise_Details INNER JOIN  
  dbo.FA_Master_Ledger ON dbo.FA_Bill_Wise_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN  
  dbo.FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = dbo.FA_Master_Ledger_Group.Ledger_Group_Id  
   
  Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
  AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode  
  AND FA_Bill_Wise_Details.Main_Id = @MainId  
  AND FA_Bill_Wise_Details.Division_Id = @DivisionId  
  AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=1  
  AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)  
    
  
  Group By dbo.FA_Master_Ledger.Ledger_Id,   
  dbo.FA_Bill_Wise_Details.Hierarchy_Code, dbo.FA_Bill_Wise_Details.Main_Id,   
  dbo.FA_Master_Ledger.Ledger_Name,  
  dbo.FA_Master_Ledger_Group.Ledger_Group_Name  
  Having Sum(dbo.FA_Bill_Wise_Details.Amount) <> 0 
  Order By dbo.FA_Master_Ledger.Ledger_Name  
  
  
---------------------------------------------------------------------------------------------  
--SET "ON ACCOUNT AMOUNT" AS OUTPUT PARAMETER  
---------------------------------------------------------------------------------------------  
  
  SELECT @OnAccount=Isnull(Sum(dbo.FA_Opr_Voucher_Details.Credit)- Sum(dbo.FA_Opr_Voucher_Details.Debit),0)  
  FROM dbo.FA_Opr_Voucher INNER JOIN  
  dbo.FA_Opr_Voucher_Details ON dbo.FA_Opr_Voucher.Voucher_Id = dbo.FA_Opr_Voucher_Details.Voucher_Id INNER JOIN  
  dbo.FA_Master_Ledger ON dbo.FA_Opr_Voucher_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id  
  Where dbo.FA_Opr_Voucher.Is_Cancelled=0  
  AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=0
  and dbo.FA_Opr_Voucher_Details.Voucher_Date<=@EndDate  
  and dbo.FA_Master_Ledger.Ledger_Group_Id in  
  (select Ledger_Group_Id from dbo.GetChildLedgerGroupIds(@LedgerGroupId))    
  and dbo.FA_Opr_Voucher_Details.Hierarchy_Code=@HierarchyCode  
  and dbo.FA_Opr_Voucher_Details.Main_Id=@MainId  
  and dbo.FA_Opr_Voucher_Details.Division_Id=@DivisionId  
  
---------------------------------------------------------------------------------------------  
  
  
 End --if @IsConsolidated=1  
  
  
  
  
  
Print @OnAccount  
  
  
  
  
  
  



----1174--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- =============================================  
-- Author:  <Parikshit>  
-- Create date: <11-November-2008>  
-- Description: <Ledger Outstanding Report Billwise Details>  
-- =============================================    

--EXEC FA_Rpt_Outstanding_Ledger_BillWise_Details 0,'HO',0,1,'03-31-2008',24,0,0

CREATE PROC [dbo].[FA_Rpt_Outstanding_Ledger_BillWise_Details]  
(      
@IsConsolidated bit,
@HierarchyCode varchar(5),  
@MainId int,
@DivisionId int,
@EndDate datetime,
@LedgerGroupId int,
@LedgerId int,
@IsCondensed bit
)      
as      
    

Declare @TempTable Table
(
	Sr_No int IDENTITY,
	Ledger_Id int,
	HO varchar(10),
	Region varchar(100),
	Area varchar(100),
	Branch varchar(100),
	Ledger_Name varchar(100),
	Bill_Date Datetime,
	Ref_No varchar(50),
	Opening_Amount numeric(18,2),
	Pending_Amount numeric(18,2),
	Due_Date datetime,
	OverDueDays int
)


Declare @BillDetails Table
(
	Ledger_Id int,
	HO varchar(10),
	Region varchar(100),
	Area varchar(100),
	Branch varchar(100),
	Ledger_Name varchar(100),
	Bill_Date varchar(50),
	Ref_No varchar(50),
	Ref_Type varchar(25),
	Voucher_Date varchar(50),
	Voucher_Type varchar(100),
	Voucher_No varchar(50),
	Amount numeric(18,2),
	Opening_Amount numeric(18,2),
	Pending_Amount numeric(18,2),
	Due_Date varchar(50),
	OverDueDays int
)


declare @Ledger_Id as int
declare @HO as varchar(10)
declare @Region as varchar(100)
declare @Area as varchar(100)
declare @Branch as varchar(100)
declare @Ledger_Name as varchar(100)
declare @Bill_Date as Datetime
declare @Ref_No as varchar(50)
declare @Opening_Amount as numeric(18,2)
declare @Pending_Amount as numeric(18,2)
declare @Due_Date as datetime
declare @OverDueDays as int

declare @Count as int
declare @Sr_No as int

if @IsConsolidated=1
	Begin
		
		If @IsCondensed=1
			Begin

				Select Ledger_Id,HO,Region,Area,Branch,
				Ledger_Name,dbo.GetAppDate(Bill_Date) as Bill_Date,Ref_No,Opening_Amount,
				Pending_Amount,dbo.GetAppDate(Due_Date) as Due_Date,
				DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
				(
				select dbo.FA_Bill_Wise_Details.Ledger_Id,
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				FA_Master_Ledger.Ledger_Name,
				(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
				Ref_No,
				(select Top 1 A.Amount from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
				Isnull(Sum(Amount),0) as Pending_Amount,

				(select Top 1 (A.Bill_Date +A.Credit_Days) from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

				from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
				ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

				LEFT OUTER JOIN EC_Master_Branch C
				On FA_Bill_Wise_Details.Main_Id=C.Branch_Id
				and FA_Bill_Wise_Details.Hierarchy_Code='BO'
				LEFT OUTER JOIN EC_Master_Area D
				On FA_Bill_Wise_Details.Main_Id=D.Area_Id
				and FA_Bill_Wise_Details.Hierarchy_Code='AO'


				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
				and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
				and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

				AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

				AND FA_Bill_Wise_Details.Division_Id = @DivisionId
				AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)			
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)			
			

				Group By FA_Bill_Wise_Details.Hierarchy_Code,
				FA_Bill_Wise_Details.Main_Id,
				FA_Bill_Wise_Details.Division_Id,
				FA_Bill_Wise_Details.Ledger_Id,
				FA_Master_Ledger.Ledger_Name,
				FA_Bill_Wise_Details.Ref_No
				) as Main
				where Main.Pending_Amount <> 0
				order by Main.Ledger_Name,Main.Bill_Date

			End--If @IsCondensed=1
		Else--Else If @IsCondensed=1
			Begin
				
				Insert into @TempTable
				(	Ledger_Id,HO,Region,Area,Branch,Ledger_Name,Bill_Date,
					Ref_No,Opening_Amount,Pending_Amount,Due_Date,OverDueDays
				)
				(
					Select *,DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
					(
					select dbo.FA_Bill_Wise_Details.Ledger_Id,
					Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
					Then 'True' else '' End as HO, 
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
					then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Region,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
					then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Area,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
					then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else
					'' End as Branch,
					FA_Master_Ledger.Ledger_Name,
					(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
					Ref_No,
					(select Top 1 A.Amount from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
					Isnull(Sum(Amount),0) as Pending_Amount,

					(select Top 1 (A.Bill_Date+A.Credit_Days) from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

					from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
					ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

					LEFT OUTER JOIN EC_Master_Branch C
					On FA_Bill_Wise_Details.Main_Id=C.Branch_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='BO'
					LEFT OUTER JOIN EC_Master_Area D
					On FA_Bill_Wise_Details.Main_Id=D.Area_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='AO'


					Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 

					and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
					and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

					AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

					AND FA_Bill_Wise_Details.Division_Id = @DivisionId
					AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)
					AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)		

					Group By FA_Bill_Wise_Details.Hierarchy_Code,
					FA_Bill_Wise_Details.Main_Id,
					FA_Bill_Wise_Details.Division_Id,
					FA_Bill_Wise_Details.Ledger_Id,
					FA_Master_Ledger.Ledger_Name,
					FA_Bill_Wise_Details.Ref_No
					) as Main
					where Main.Pending_Amount <> 0					
				)
				
				order by Main.Ledger_Name,Main.Bill_Date
				

				
				select @Count=count(*) from @TempTable

				set @Sr_No=1


				while @Sr_No<=@Count
				Begin

				
					select @Ledger_Id=Ledger_Id,@HO=HO,@Region=Region,
					@Area=Area,@Branch=Branch,@Ledger_Name=Ledger_Name,
					@Bill_Date=Bill_Date,@Ref_No=Ref_No,
					@Opening_Amount=Opening_Amount,@Pending_Amount=Pending_Amount,
					@Due_Date=Due_Date,@OverDueDays=OverDueDays
					from @TempTable
					where Sr_No=@Sr_No


					Insert Into @BillDetails
					(Ledger_Id,HO,Region,Area,Branch,Ledger_Name,
					Bill_Date,Ref_No,Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount,Opening_Amount,Pending_Amount,
					Due_Date,OverDueDays)
					Values
					(@Ledger_Id,@HO,@Region,@Area,@Branch,@Ledger_Name,
					dbo.GetAppDate(@Bill_Date),@Ref_No,NULL,NULL,NULL,
					NULL,NULL,@Opening_Amount,@Pending_Amount,
					dbo.GetAppDate(@Due_Date),@OverDueDays)
	

					Insert Into @BillDetails
					(Bill_Date,Due_Date,Pending_Amount,Opening_Amount,Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount)
					(		
					SELECT '1/1/1900','1/1/1900',0,0,dbo.FA_Mst_Ref_Type.Ref_Type,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Bill_Date)
					Else dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Voucher_Date)
					End as Voucher_Date,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then 'Opening Balance'
					Else dbo.FA_Master_Voucher_Type.Voucher_Name
					End as Voucher_Type,
 
					dbo.FA_Bill_Wise_Details.Voucher_No, 
					dbo.FA_Bill_Wise_Details.Amount
					FROM dbo.FA_Bill_Wise_Details LEFT OUTER JOIN
					dbo.FA_Master_Voucher_Type ON dbo.FA_Bill_Wise_Details.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id INNER JOIN
					dbo.FA_Mst_Ref_Type ON dbo.FA_Bill_Wise_Details.Ref_Type_Id = dbo.FA_Mst_Ref_Type.Ref_Type_Id

					LEFT OUTER JOIN EC_Master_Branch C
					On FA_Bill_Wise_Details.Main_Id=C.Branch_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='BO'
					LEFT OUTER JOIN EC_Master_Area D
					On FA_Bill_Wise_Details.Main_Id=D.Area_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='AO'



					Where dbo.FA_Bill_Wise_Details.Ledger_Id=@Ledger_Id
					AND dbo.FA_Bill_Wise_Details.Ref_No=@Ref_No
					AND FA_Bill_Wise_Details.Voucher_Date <= @EndDate 

					and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
					and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

					AND FA_Bill_Wise_Details.Division_Id = @DivisionId					
					)
					
					select @Sr_No=@Sr_No+1

				End--while @Sr_No<=@Count


				Select * from @BillDetails
			
			End--If @IsCondensed=1 



	End--if @IsConsolidated=1

Else--Else if @IsConsolidated=1
	Begin
		
		If @IsCondensed=1
			Begin

				Select Ledger_Id,HO,Region,Area,Branch,
				Ledger_Name,dbo.GetAppDate(Bill_Date) as Bill_Date,Ref_No,Opening_Amount,
				Pending_Amount,dbo.GetAppDate(Due_Date) as Due_Date,
				DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
				(
				select dbo.FA_Bill_Wise_Details.Ledger_Id,
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				FA_Master_Ledger.Ledger_Name,
				(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
				Ref_No,
				(select Top 1 A.Amount from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
				Isnull(Sum(Amount),0) as Pending_Amount,

				(select Top 1 (A.Bill_Date +A.Credit_Days) from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

				from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
				ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
				AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
				AND FA_Bill_Wise_Details.Main_Id = @MainId
				AND FA_Bill_Wise_Details.Division_Id = @DivisionId

				AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

				AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)		

				Group By FA_Bill_Wise_Details.Hierarchy_Code,
				FA_Bill_Wise_Details.Main_Id,
				FA_Bill_Wise_Details.Division_Id,
				FA_Bill_Wise_Details.Ledger_Id,
				FA_Master_Ledger.Ledger_Name,
				FA_Bill_Wise_Details.Ref_No
				) as Main
				where Main.Pending_Amount <> 0
				order by Main.Ledger_Name,Main.Bill_Date

			End--If @IsCondensed=1
		Else--Else If @IsCondensed=1
			Begin
				
				Insert into @TempTable
				(	Ledger_Id,HO,Region,Area,Branch,Ledger_Name,Bill_Date,
					Ref_No,Opening_Amount,Pending_Amount,Due_Date,OverDueDays
				)
				(
					Select *,DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
					(
					select dbo.FA_Bill_Wise_Details.Ledger_Id,
					Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
					Then 'True' else '' End as HO, 
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
					then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Region,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
					then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Area,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
					then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else
					'' End as Branch,
					FA_Master_Ledger.Ledger_Name,
					(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
					Ref_No,
					(select Top 1 A.Amount from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
					Isnull(Sum(Amount),0) as Pending_Amount,

					(select Top 1 (A.Bill_Date+A.Credit_Days) from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

					from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
					ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

					Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
					AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
					AND FA_Bill_Wise_Details.Main_Id = @MainId

					AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

					AND FA_Bill_Wise_Details.Division_Id = @DivisionId
					AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)
					AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)
		

					Group By FA_Bill_Wise_Details.Hierarchy_Code,
					FA_Bill_Wise_Details.Main_Id,
					FA_Bill_Wise_Details.Division_Id,
					FA_Bill_Wise_Details.Ledger_Id,
					FA_Master_Ledger.Ledger_Name,
					FA_Bill_Wise_Details.Ref_No
					) as Main
					where Main.Pending_Amount <> 0					
				)
				order by Main.Ledger_Name,Main.Bill_Date
				

				
				select @Count=count(*) from @TempTable

				set @Sr_No=1

				while @Sr_No<=@Count
				Begin

				
					select @Ledger_Id=Ledger_Id,@HO=HO,@Region=Region,
					@Area=Area,@Branch=Branch,@Ledger_Name=Ledger_Name,
					@Bill_Date=Bill_Date,@Ref_No=Ref_No,
					@Opening_Amount=Opening_Amount,@Pending_Amount=Pending_Amount,
					@Due_Date=Due_Date,@OverDueDays=OverDueDays
					from @TempTable
					where Sr_No=@Sr_No


					Insert Into @BillDetails
					(Ledger_Id,HO,Region,Area,Branch,Ledger_Name,
					Bill_Date,Ref_No,Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount,Opening_Amount,Pending_Amount,
					Due_Date,OverDueDays)
					Values
					(@Ledger_Id,@HO,@Region,@Area,@Branch,@Ledger_Name,
					dbo.GetAppDate(@Bill_Date),@Ref_No,NULL,NULL,NULL,
					NULL,NULL,@Opening_Amount,@Pending_Amount,
					dbo.GetAppDate(@Due_Date),@OverDueDays)
	

					Insert Into @BillDetails
					(Bill_Date,Due_Date,Pending_Amount,Opening_Amount,Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount)
					(		
					SELECT '1/1/1900','1/1/1900',0,0,dbo.FA_Mst_Ref_Type.Ref_Type,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Bill_Date)
					Else dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Voucher_Date)
					End as Voucher_Date,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then 'Opening Balance'
					Else dbo.FA_Master_Voucher_Type.Voucher_Name
					End as Voucher_Type,
 
					dbo.FA_Bill_Wise_Details.Voucher_No, 
					dbo.FA_Bill_Wise_Details.Amount
					FROM dbo.FA_Bill_Wise_Details LEFT OUTER JOIN
					dbo.FA_Master_Voucher_Type ON dbo.FA_Bill_Wise_Details.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id INNER JOIN
					dbo.FA_Mst_Ref_Type ON dbo.FA_Bill_Wise_Details.Ref_Type_Id = dbo.FA_Mst_Ref_Type.Ref_Type_Id
					Where dbo.FA_Bill_Wise_Details.Ledger_Id=@Ledger_Id
					AND dbo.FA_Bill_Wise_Details.Ref_No=@Ref_No
					AND FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
					AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
					AND FA_Bill_Wise_Details.Main_Id = @MainId
					AND FA_Bill_Wise_Details.Division_Id = @DivisionId					
					)
					
					select @Sr_No=@Sr_No+1

				End--while @Sr_No<=@Count


				Select * from @BillDetails

			End--If @IsCondensed=1

	End	--if @IsConsolidated=1















----1175--------------------------------------------------------------------------------








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
  
   
-- =============================================      
-- Author:  <Krutarth>      
-- Create date: <Create Date,,>      
-- Description: <Description,,>      
-- EXEC [dbo].[EF_RPT_Truck_Loading_GRD] 0,0,0,0,0,0,'2008-05-15','2009-02-15',1,0,0,0  
-- =============================================      
CREATE PROCEDURE [dbo].[EF_RPT_Truck_Loading_GRD]      
@Region_ID INT,      
@Area_ID INT,      
@Branch_ID INT,      
@Un_loading_Region_id int,      
@Un_loading_Area_id int,      
@Un_loading_Branch_id int,      
@From_Date DateTime,      
@To_Date DateTime,      
@Vehcle_Type int,      
@Division_Id int,  
@PageIndex int,   
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1            
      
AS      
BEGIN      
      
SET NOCOUNT ON; 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Vehicle No','s,1')
        insert into @Dropdown_Search values ('Loading From AO','s,2')
        insert into @Dropdown_Search values ('Loading From Branch/Hub','s,3')
        insert into @Dropdown_Search values ('LHC Last Branch','s,4')
        insert into @Dropdown_Search values ('LHC Destination AO','s,5')
        insert into @Dropdown_Search values ('AUS No','s,5') 
        insert into @Dropdown_Search values ('Manual TUR No','n,6')                        
		insert into @Dropdown_Search values ('LHC Date','d,7')
        	
		select  *From @Dropdown_Search

		return
	end;
--------------------------------------Filter-----------------------------------------       
WITH TruckLoading AS  
(  
 Select ROW_NUMBER() OVER(ORDER BY a.[lhpo_caption No]) AS 'Sr No.',* from   
(     
select distinct     
--ROW_NUMBER() OVER(ORDER BY A.lhpo_no_for_print) AS 'Sr No.',  
  E.Area_Name as [Loading From AO],    
  D.Branch_name as [Loading From Branch/Hub],    
  A.lhpo_no_for_print as [lhpo_caption No],      
  (dbo.dateonlydisplay(A.lhpo_date)+'  '+convert(varchar(25),A.Vehicle_departure_time,108)) as [lhpo_caption Date],      
  (B.Vehicle_No) + '   '+      
  (case when B.Vehicle_type_id=1 then '(Truck)'      
  when B.Vehicle_type_id=2 then '(Tempo)'      
  when B.Vehicle_type_id=3 then '(Matador)'      
  when B.Vehicle_type_id=5 then '(Axle)'      
  when B.Vehicle_type_id=6 then '(cbxcvbxcvb44)'      
  ELSE ''       
  end) as [Truck No & Type],    
    
  G.branch_name as  [lhpo_caption Last Branch],      
  H.area_name [lhpo_caption Destination A0],      
  (select count(memo_id) from EC_Opr_VTrans_LHPO_Memo_Details where lhpo_id=A.lhpo_id) [No of Memos],      
  (select count(gc_id) from EC_Opr_VTrans_LHPO_GC_Details where lhpo_id=A.lhpo_id) [No of gc_caption's],     
     
  ISNULL(Cast(round(A.Total_Actual_Weight,0) as float),0) as [Actual Weight],      
  ISNULL(Cast(round(A.Total_Truck_Hire_Payable,0)as float),0) as [Sub Freight],      
  (case when I.lhpo_type_id =1 then ISNULL(cast(round(A.Truck_hire_Charge,0)as float),0) else 0 end) as [Truck Hire Charge],      
  (case when I.lhpo_type_id =1 then ISNULL(cast(round(A.Total_Advance_To_Be_Paid,0)as float),0) else 0 end) as [Advance],      
  pay_br.Branch_Name as [BTH Payable at],      
  (dbo.dateonlydisplay(J.Actual_unloading_sheet_date)+' '+convert(varchar(25),J.Vehicle_Arrival_Time,108)) as [Last Destination Arrival Date & Time],      
  (dbo.dateonlydisplay(J.Vehicle_Arrival_Date)+' '+convert(varchar(25),J.Truck_Unloaded_Time,108)) as [Last Destination Unloaded Date & Time],      
  dbo.timespan((A.lhpo_date+' '+A.Vehicle_departure_time), (J.Vehicle_Arrival_Date+''+J.Truck_Unloaded_time)) as [Turn-Round time],      
  ISNULL(J.Actual_unloading_sheet_no_for_print,'') as [AUS No],      
    
  ISNULL(cast(round(B.Vehicle_Capacity,0)as float),0) As [Truck Capacity],      
  A.Manual_Ref_No as [Manual lhpo_caption No],    
  J.Manual_TUR_No  as [Manual TUR No],      
  isnull(K.short,0) as [Short/Excess]      
  --(Total_Short_Articles+Total_Excess_Articles) as [Short/Excess]     
     
from dbo.EC_Opr_VTrans_LHPO A      
inner join EF_Master_Vehicle B      
on B.Vehicle_ID=A.Vehicle_ID      
inner join dbo.EF_Master_Vehicle_Type C      
on C.Vehicle_Type_ID=B.Vehicle_Type_ID      
inner join ec_master_branch D      
on D.branch_id=A.LHPO_Branch_Id      
inner join EC_Opr_VTrans_LHPO_GC_Details L      
on L.lhpo_id=A.lhpo_id      
inner join ec_opr_vtrans_gc M      
on M.gc_id=L.gc_id      
inner join ec_master_area E      
on E.area_id=D.area_id      
inner join dbo.EC_Master_Service_Location F      
on F.Service_Location_ID=A.To_Location_ID      
inner join EC_Master_LHPO_Type I      
on I.LHPO_Type_ID=A.LHPO_Type_ID      
inner join ec_master_branch pay_br      
on pay_br.branch_id=A.Balance_Payable_Main_ID      
left outer join ec_master_branch G      
on G.branch_id=F.branch_id      
left outer join ec_master_area H      
on H.area_id=G.area_id      
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet J    
on J.lhpo_id=A.lhpo_id      
left outer join dbo.EC_opr_Short_Excess_view K      
on A.lhpo_id=K.lhpo_id      
      
where A.Is_Cancelled = 0  --and  A.lhpo_no_for_print='ahrak-09-00015'  
and (A.lhpo_date Between @From_date And @To_date)    
AND D.Region_ID = (select case @Region_ID when 0 then D.Region_ID else @Region_ID end)      
AND D.Area_ID = (select case @Area_ID when 0 then D.Area_ID else @Area_ID end )      
AND D.branch_Id = (select case @Branch_ID when 0 then D.branch_Id else @Branch_ID end )      
and G.Region_ID = (select case @Un_loading_Region_id when 0 then G.Region_ID else @Un_loading_Region_id end)      
AND G.Area_ID = (select case @Un_loading_Area_id when 0 then G.Area_ID else @Un_loading_Area_id end )      
AND G.branch_Id = (select case @Un_loading_Branch_id when 0 then G.branch_Id else @Un_loading_Branch_id end )      
and B.Vehicle_type_id = (select case @Vehcle_Type when 0 then B.Vehicle_type_id else @Vehcle_Type end)      
and M.Division_ID = (select case @Division_Id when 0 then M.Division_ID else @Division_Id end) 
and 
(@criteria_id = 0

or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and B.Vehicle_No = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and B.Vehicle_No like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and B.Vehicle_No like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and B.Vehicle_No like '%' + @Filtered_Text + '%')

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and E.Area_Name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and E.Area_Name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and E.Area_Name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and E.Area_Name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and D.Branch_name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and D.Branch_name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and D.Branch_name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and D.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and G.branch_name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and G.branch_name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and G.branch_name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and G.branch_name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and H.area_name = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and H.area_name like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and H.area_name like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and H.area_name like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print = @Filtered_Text)
or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print like @Filtered_Text + '%')
or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print like '%' + @Filtered_Text)
or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print like '%' + @Filtered_Text + '%')

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 2 and J.Manual_TUR_No = @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 2 and J.Manual_TUR_No >= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 2 and J.Manual_TUR_No <= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 2 and J.Manual_TUR_No > @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 2 and J.Manual_TUR_No < @Filtered_Text_int)

or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and A.lhpo_date = @Filtered_Date)
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and A.lhpo_date >= @Filtered_Date)
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and A.lhpo_date <= @Filtered_Date)
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and A.lhpo_date > @Filtered_Date)
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and A.lhpo_date < @Filtered_Date) 
 )                                       
)a
) 
  
SELECT * into #TrkLd FROM TruckLoading  
  
select * From #TrkLd  
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
  
Select   
   
 sum([Actual Weight]) as [Actual Weight],  
 sum([No of Memos]) as [No of Memos],  
 sum([No of gc_caption's]) as [No of gc_caption's],  
 sum([Truck Hire Charge]) as [Truck Hire Charge],  
 sum([Advance]) as [Advance],  
 sum([Truck Capacity]) as [Truck Capacity],  
 sum([Sub Freight] )as [Sub Freight]  
From #TrkLd  
  
select count(*) From #TrkLd  
end   
  
  
  
----955--------------------------------------------------------------------------------  
  
  
  
----527--------------------------------------------------------------------------------  
  
  



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
-- =============================================    
-- Author:  <Parikshit>    
-- Create date: <18-November-2008>    
-- Description: <Ledger Outstanding Report Billwise Details for Payables>    
-- =============================================      
  
--EXEC FA_Rpt_Outstanding_Payables_BillWise_Details 1,'HO',0,1,'03-31-2008',0,0  
  
CREATE PROC [dbo].[FA_Rpt_Outstanding_Payables_BillWise_Details]    
(        
@IsConsolidated bit,  
@HierarchyCode varchar(5),    
@MainId int,  
@DivisionId int,  
@EndDate datetime,  
@LedgerGroupId int,  
@LedgerId int,  
@IsCondensed bit  
)        
as        
      
  
Declare @TempTable Table  
(  
 Sr_No int IDENTITY,  
 Ledger_Id int,  
 HO varchar(10),  
 Region varchar(100),  
 Area varchar(100),  
 Branch varchar(100),  
 Ledger_Name varchar(100),  
 Bill_Date Datetime,  
 Ref_No varchar(50),  
 Opening_Amount numeric(18,2),  
 Pending_Amount numeric(18,2),  
 Due_Date datetime,  
 OverDueDays int  
)  
  
  
Declare @BillDetails Table  
(  
 Ledger_Id int,  
 HO varchar(10),  
 Region varchar(100),  
 Area varchar(100),  
 Branch varchar(100),  
 Ledger_Name varchar(100),  
 Bill_Date varchar(50),  
 Ref_No varchar(50),  
 Ref_Type varchar(25),  
 Voucher_Date varchar(50),  
 Voucher_Type varchar(100),  
 Voucher_No varchar(50),  
 Amount numeric(18,2),  
 Opening_Amount numeric(18,2),  
 Pending_Amount numeric(18,2),  
 Due_Date varchar(50),  
 OverDueDays int  
)  
  
  
declare @Ledger_Id as int  
declare @HO as varchar(10)  
declare @Region as varchar(100)  
declare @Area as varchar(100)  
declare @Branch as varchar(100)  
declare @Ledger_Name as varchar(100)  
declare @Bill_Date as Datetime  
declare @Ref_No as varchar(50)  
declare @Opening_Amount as numeric(18,2)  
declare @Pending_Amount as numeric(18,2)  
declare @Due_Date as datetime  
declare @OverDueDays as int  
  
declare @Count as int  
declare @Sr_No as int  
  
if @IsConsolidated=1  
 Begin  
    
  If @IsCondensed=1  
   Begin  
  
    Select Ledger_Id,HO,Region,Area,Branch,  
    Ledger_Name,dbo.GetAppDate(Bill_Date) as Bill_Date,Ref_No,Opening_Amount,  
    Pending_Amount,dbo.GetAppDate(Due_Date) as Due_Date,  
    case when DateDiff(d,Main.Due_date,@EndDate) < 0
	then 0 Else DateDiff(d,Main.Due_date,@EndDate) end as OverDueDays  from   
    (  
    select dbo.FA_Bill_Wise_Details.Ledger_Id,  
    Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'  
    Then 'True' else '' End as HO,   
    Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'  
    then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
    Else '' End as Region,  
    Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'  
    then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
    Else '' End as Area,  
    Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'  
    then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
    Else  
    '' End as Branch,  
    FA_Master_Ledger.Ledger_Name,  
    (select Top 1 A.Bill_Date from FA_Bill_Wise_Details A  
    where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
    and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
    and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
    and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
    and A.Voucher_Date<=@EndDate  
    and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,  
    Ref_No,  
    (select Top 1 A.Amount from FA_Bill_Wise_Details A  
    where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
    and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
    and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
    and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
    and A.Voucher_Date<=@EndDate  
    and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,  
    Isnull(Sum(Amount),0) as Pending_Amount,  
  
    (select Top 1 (A.Bill_Date +A.Credit_Days) from FA_Bill_Wise_Details A  
    where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
    and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
    and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
    and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
    and A.Voucher_Date<=@EndDate  
    and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date  
  
    from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger  
    ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id  
  
    LEFT OUTER JOIN EC_Master_Branch C  
    On FA_Bill_Wise_Details.Main_Id=C.Branch_Id  
    and FA_Bill_Wise_Details.Hierarchy_Code='BO'  
    LEFT OUTER JOIN EC_Master_Area D  
    On FA_Bill_Wise_Details.Main_Id=D.Area_Id  
    and FA_Bill_Wise_Details.Hierarchy_Code='AO'  
  
  
    Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
    and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)  
     or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))  
    and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)  
     or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)  
     or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))  
  
    AND FA_Master_Ledger.Maintain_Bill_By_Bill=1  
  
    AND FA_Bill_Wise_Details.Division_Id = @DivisionId  
    AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)     
    AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)     
     
  
    Group By FA_Bill_Wise_Details.Hierarchy_Code,  
    FA_Bill_Wise_Details.Main_Id,  
    FA_Bill_Wise_Details.Division_Id,  
    FA_Bill_Wise_Details.Ledger_Id,  
    FA_Master_Ledger.Ledger_Name,  
    FA_Bill_Wise_Details.Ref_No  
    ) as Main  
  
    Where Pending_Amount>0  
  
    order by Main.Ledger_Name,Main.Bill_Date  
  
   End--If @IsCondensed=1  
  Else--Else If @IsCondensed=1  
   Begin  
      
    Insert into @TempTable  
    ( Ledger_Id,HO,Region,Area,Branch,Ledger_Name,Bill_Date,  
     Ref_No,Opening_Amount,Pending_Amount,Due_Date,OverDueDays  
    )  
    (  
     Select *,  case when DateDiff(d,Main.Due_date,@EndDate) < 0
	then 0 Else DateDiff(d,Main.Due_date,@EndDate) end as OverDueDays from   
     (  
     select dbo.FA_Bill_Wise_Details.Ledger_Id,  
     Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'  
     Then 'True' else '' End as HO,   
     Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'  
     then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
     Else '' End as Region,  
     Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'  
     then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
     Else '' End as Area,  
     Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'  
     then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
     Else  
     '' End as Branch,  
     FA_Master_Ledger.Ledger_Name,  
     (select Top 1 A.Bill_Date from FA_Bill_Wise_Details A  
     where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
     and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
     and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
     and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
     and A.Voucher_Date<=@EndDate  
     and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,  
     Ref_No,  
     (select Top 1 A.Amount from FA_Bill_Wise_Details A  
     where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
     and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
     and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
     and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
     and A.Voucher_Date<=@EndDate  
     and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,  
     Isnull(Sum(Amount),0) as Pending_Amount,  
  
     (select Top 1 (A.Bill_Date+A.Credit_Days) from FA_Bill_Wise_Details A  
     where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
     and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
     and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
     and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
     and A.Voucher_Date<=@EndDate  
     and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date  
  
     from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger  
     ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id  
  
     LEFT OUTER JOIN EC_Master_Branch C  
     On FA_Bill_Wise_Details.Main_Id=C.Branch_Id  
     and FA_Bill_Wise_Details.Hierarchy_Code='BO'  
     LEFT OUTER JOIN EC_Master_Area D  
     On FA_Bill_Wise_Details.Main_Id=D.Area_Id  
     and FA_Bill_Wise_Details.Hierarchy_Code='AO'  
  
  
     Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
  
     and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)  
      or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))  
     and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)  
      or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)  
      or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))  
  
     AND FA_Master_Ledger.Maintain_Bill_By_Bill=1  
  
     AND FA_Bill_Wise_Details.Division_Id = @DivisionId  
     AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)  
     AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)    
  
     Group By FA_Bill_Wise_Details.Hierarchy_Code,  
     FA_Bill_Wise_Details.Main_Id,  
     FA_Bill_Wise_Details.Division_Id,  
     FA_Bill_Wise_Details.Ledger_Id,  
     FA_Master_Ledger.Ledger_Name,  
     FA_Bill_Wise_Details.Ref_No  
     ) as Main       
  
     Where Pending_Amount>0  
  
    )  
   
      
  
      
    select @Count=count(*) from @TempTable  
  
    set @Sr_No=1  
  
  
    while @Sr_No<=@Count  
    Begin  
  
      
     select @Ledger_Id=Ledger_Id,@HO=HO,@Region=Region,  
     @Area=Area,@Branch=Branch,@Ledger_Name=Ledger_Name,  
     @Bill_Date=Bill_Date,@Ref_No=Ref_No,  
     @Opening_Amount=Opening_Amount,@Pending_Amount=Pending_Amount,  
     @Due_Date=Due_Date,@OverDueDays=OverDueDays
     from @TempTable  
     where Sr_No=@Sr_No  
  
  
     Insert Into @BillDetails  
     (Ledger_Id,HO,Region,Area,Branch,Ledger_Name,  
     Bill_Date,Ref_No,Ref_Type,Voucher_Date,Voucher_Type,  
     Voucher_No,Amount,Opening_Amount,Pending_Amount,  
     Due_Date,OverDueDays)  
     Values  
     (@Ledger_Id,@HO,@Region,@Area,@Branch,@Ledger_Name,  
     dbo.GetAppDate(@Bill_Date),@Ref_No,NULL,NULL,NULL,  
     NULL,NULL,@Opening_Amount,@Pending_Amount,  
     dbo.GetAppDate(@Due_Date),@OverDueDays)  
   
  
     Insert Into @BillDetails  
     (Ref_Type,Voucher_Date,Voucher_Type,  
     Voucher_No,Amount)  
     (    
     SELECT dbo.FA_Mst_Ref_Type.Ref_Type,  
  
     case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL  
     Then dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Bill_Date)  
     Else dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Voucher_Date)  
     End as Voucher_Date,  
  
     case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL  
     Then 'Opening Balance'  
     Else dbo.FA_Master_Voucher_Type.Voucher_Name  
     End as Voucher_Type,  
   
     dbo.FA_Bill_Wise_Details.Voucher_No,   
     dbo.FA_Bill_Wise_Details.Amount  
     FROM dbo.FA_Bill_Wise_Details LEFT OUTER JOIN  
     dbo.FA_Master_Voucher_Type ON dbo.FA_Bill_Wise_Details.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id INNER JOIN  
     dbo.FA_Mst_Ref_Type ON dbo.FA_Bill_Wise_Details.Ref_Type_Id = dbo.FA_Mst_Ref_Type.Ref_Type_Id  
  
     LEFT OUTER JOIN EC_Master_Branch C  
     On FA_Bill_Wise_Details.Main_Id=C.Branch_Id  
     and FA_Bill_Wise_Details.Hierarchy_Code='BO'  
     LEFT OUTER JOIN EC_Master_Area D  
     On FA_Bill_Wise_Details.Main_Id=D.Area_Id  
     and FA_Bill_Wise_Details.Hierarchy_Code='AO'  
  
  
  
     Where dbo.FA_Bill_Wise_Details.Ledger_Id=@Ledger_Id  
     AND dbo.FA_Bill_Wise_Details.Ref_No=@Ref_No  
     AND FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
  
     and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)  
      or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))  
     and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)  
      or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)  
      or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))  
  
     AND FA_Bill_Wise_Details.Division_Id = @DivisionId       
     )  
       
     select @Sr_No=@Sr_No+1  
  
    End--while @Sr_No<=@Count  
  
  
    Select * from @BillDetails  
     
   End--If @IsCondensed=1   
  
  
  
 End--if @IsConsolidated=1  
  
Else--Else if @IsConsolidated=1  
 Begin  
    
  If @IsCondensed=1  
   Begin  
  
    Select Ledger_Id,HO,Region,Area,Branch,  
    Ledger_Name,dbo.GetAppDate(Bill_Date) as Bill_Date,Ref_No,Opening_Amount,  
    Pending_Amount,dbo.GetAppDate(Due_Date) as Due_Date,
	case when DateDiff(d,Main.Due_date,@EndDate) < 0
	then 0 Else DateDiff(d,Main.Due_date,@EndDate) end as OverDueDays  from   
    (  
    select dbo.FA_Bill_Wise_Details.Ledger_Id,  
    Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'  
    Then 'True' else '' End as HO,   
    Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'  
    then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
    Else '' End as Region,  
    Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'  
    then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
    Else '' End as Area,  
    Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'  
    then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
    Else  
    '' End as Branch,  
    FA_Master_Ledger.Ledger_Name,  
    (select Top 1 A.Bill_Date from FA_Bill_Wise_Details A  
    where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
    and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
    and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
    and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
    and A.Voucher_Date<=@EndDate  
    and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,  
    Ref_No,  
    (select Top 1 A.Amount from FA_Bill_Wise_Details A  
    where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
    and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
    and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
    and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
    and A.Voucher_Date<=@EndDate  
    and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,  
    Isnull(Sum(Amount),0) as Pending_Amount,  
  
    (select Top 1 (A.Bill_Date +A.Credit_Days) from FA_Bill_Wise_Details A  
    where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
    and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
    and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
    and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
    and A.Voucher_Date<=@EndDate  
    and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date  
  
    from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger  
    ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id  
  
    Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
    AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode  
    AND FA_Bill_Wise_Details.Main_Id = @MainId  
    AND FA_Bill_Wise_Details.Division_Id = @DivisionId  
  
    AND FA_Master_Ledger.Maintain_Bill_By_Bill=1  
  
    AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)  
    AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)    
  
    Group By FA_Bill_Wise_Details.Hierarchy_Code,  
    FA_Bill_Wise_Details.Main_Id,  
    FA_Bill_Wise_Details.Division_Id,  
    FA_Bill_Wise_Details.Ledger_Id,  
    FA_Master_Ledger.Ledger_Name,  
    FA_Bill_Wise_Details.Ref_No  
    ) as Main  
    Where Pending_Amount>0  
    order by Main.Ledger_Name,Main.Bill_Date  
  
   End--If @IsCondensed=1  
  Else--Else If @IsCondensed=1  
   Begin  
      
    Insert into @TempTable  
    ( Ledger_Id,HO,Region,Area,Branch,Ledger_Name,Bill_Date,  
     Ref_No,Opening_Amount,Pending_Amount,Due_Date,OverDueDays  
    )  
    (  
     Select *,case when DateDiff(d,Main.Due_date,@EndDate) < 0
	then 0 Else DateDiff(d,Main.Due_date,@EndDate) end as OverDueDays  from   
     (  
     select dbo.FA_Bill_Wise_Details.Ledger_Id,  
     Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'  
     Then 'True' else '' End as HO,   
     Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'  
     then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
     Else '' End as Region,  
     Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'  
     then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
     Else '' End as Area,  
     Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'  
     then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)  
     Else  
     '' End as Branch,  
     FA_Master_Ledger.Ledger_Name,  
     (select Top 1 A.Bill_Date from FA_Bill_Wise_Details A  
     where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
     and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
     and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
     and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
     and A.Voucher_Date<=@EndDate  
     and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,  
     Ref_No,  
     (select Top 1 A.Amount from FA_Bill_Wise_Details A  
     where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
     and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
     and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
     and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
     and A.Voucher_Date<=@EndDate  
     and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,  
     Isnull(Sum(Amount),0) as Pending_Amount,  
  
     (select Top 1 (A.Bill_Date+A.Credit_Days) from FA_Bill_Wise_Details A  
     where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id  
     and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code  
     and A.Main_Id=FA_Bill_Wise_Details.Main_Id  
     and A.Division_Id=FA_Bill_Wise_Details.Division_Id  
     and A.Voucher_Date<=@EndDate  
     and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date  
  
     from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger  
     ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id  
  
     Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
     AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode  
     AND FA_Bill_Wise_Details.Main_Id = @MainId  
  
     AND FA_Master_Ledger.Maintain_Bill_By_Bill=1  
  
     AND FA_Bill_Wise_Details.Division_Id = @DivisionId  
     AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)  
     AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)  
    
  
     Group By FA_Bill_Wise_Details.Hierarchy_Code,  
     FA_Bill_Wise_Details.Main_Id,  
     FA_Bill_Wise_Details.Division_Id,  
     FA_Bill_Wise_Details.Ledger_Id,  
     FA_Master_Ledger.Ledger_Name,  
     FA_Bill_Wise_Details.Ref_No  
     ) as Main       
     Where Pending_Amount>0  
    )  
   
      
  
      
    select @Count=count(*) from @TempTable  
  
    set @Sr_No=1  
  
    while @Sr_No<=@Count  
    Begin  
  
      
     select @Ledger_Id=Ledger_Id,@HO=HO,@Region=Region,  
     @Area=Area,@Branch=Branch,@Ledger_Name=Ledger_Name,  
     @Bill_Date=Bill_Date,@Ref_No=Ref_No,  
     @Opening_Amount=Opening_Amount,@Pending_Amount=Pending_Amount,  
     @Due_Date=Due_Date,@OverDueDays=OverDueDays	
     from @TempTable  
     where Sr_No=@Sr_No  
  
  
     Insert Into @BillDetails  
     (Ledger_Id,HO,Region,Area,Branch,Ledger_Name,  
     Bill_Date,Ref_No,Ref_Type,Voucher_Date,Voucher_Type,  
     Voucher_No,Amount,Opening_Amount,Pending_Amount,  
     Due_Date,OverDueDays)  
     Values  
     (@Ledger_Id,@HO,@Region,@Area,@Branch,@Ledger_Name,  
     dbo.GetAppDate(@Bill_Date),@Ref_No,NULL,NULL,NULL,  
     NULL,NULL,@Opening_Amount,@Pending_Amount,  
     dbo.GetAppDate(@Due_Date),@OverDueDays)  
   
  
     Insert Into @BillDetails  
     (Ref_Type,Voucher_Date,Voucher_Type,  
     Voucher_No,Amount)  
     (    
     SELECT dbo.FA_Mst_Ref_Type.Ref_Type,  
  
     case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL  
     Then dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Bill_Date)  
     Else dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Voucher_Date)  
     End as Voucher_Date,  
  
     case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL  
     Then 'Opening Balance'  
     Else dbo.FA_Master_Voucher_Type.Voucher_Name  
     End as Voucher_Type,  
   
     dbo.FA_Bill_Wise_Details.Voucher_No,   
     dbo.FA_Bill_Wise_Details.Amount  
     FROM dbo.FA_Bill_Wise_Details LEFT OUTER JOIN  
     dbo.FA_Master_Voucher_Type ON dbo.FA_Bill_Wise_Details.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id INNER JOIN  
     dbo.FA_Mst_Ref_Type ON dbo.FA_Bill_Wise_Details.Ref_Type_Id = dbo.FA_Mst_Ref_Type.Ref_Type_Id  
     Where dbo.FA_Bill_Wise_Details.Ledger_Id=@Ledger_Id  
     AND dbo.FA_Bill_Wise_Details.Ref_No=@Ref_No  
     AND FA_Bill_Wise_Details.Voucher_Date <= @EndDate   
     AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode  
     AND FA_Bill_Wise_Details.Main_Id = @MainId  
     AND FA_Bill_Wise_Details.Division_Id = @DivisionId       
     )  
       
     select @Sr_No=@Sr_No+1  
  
    End--while @Sr_No<=@Count  
  
  
    Select * from @BillDetails  
  
   End--If @IsCondensed=1  
  
 End --if @IsConsolidated=1  
  
  
  
  
  
  
  
  
  
  
  
  
  

----1176--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>    
-- EXEC [dbo].[EF_RPT_Truck_UnLoading_GRD] 0,0,0,'2009-04-01','2009-05-25',0,0,0,0,0,0,1000    
-- =============================================    
CREATE PROCEDURE [dbo].[EF_RPT_Truck_UnLoading_GRD]    
@Region_ID INT,    
@Area_ID INT,    
@Branch_ID INT,    
@From_Date DateTime,    
@To_Date DateTime,    
@Un_loading_Region_id int,    
@Un_loading_Area_id int,    
@Un_loading_Branch_id INT,    
@Vehcle_Type int,    
@Division_Id int,  
@PageIndex int,   
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1            
    
AS    
BEGIN    
    
SET NOCOUNT ON; 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Vehicle No','s,1')
        insert into @Dropdown_Search values ('UnLoading From AO','s,2')
        insert into @Dropdown_Search values ('UnLoading From Branch/Hub','s,3')
        insert into @Dropdown_Search values ('Loading AO','s,4')
        insert into @Dropdown_Search values ('Loading Branch/Hub','s,5')
        insert into @Dropdown_Search values ('AUS No','s,6') 
        insert into @Dropdown_Search values ('Actual Weight','n,7')                        
        insert into @Dropdown_Search values ('Manual TUR No','n,8')                        
		insert into @Dropdown_Search values ('LHC Date','d,9')
        	
		select  *From @Dropdown_Search

		return
	end;
--------------------------------------Filter-----------------------------------------     
WITH TruckUnLoading AS  
( Select ROW_NUMBER() OVER(ORDER BY a.[lhpo_caption No]) AS 'Sr No.', * from   
(    
select distinct  
  
  H.Area_Name as [UnLoading From AO],  
  G.Branch_name as [UnLoading From Branch/Hub],  
  A.lhpo_no_for_print as [lhpo_caption No],    
  (dbo.dateonlydisplay(A.lhpo_date)+'  '+convert(varchar(25),A.Vehicle_departure_time,108)) as [lhpo_caption Date],    
  (B.Vehicle_No) + '   '+    
  (case when B.Vehicle_type_id=1 then '(Truck)'    
  when B.Vehicle_type_id=2 then '(Tempo)'    
  when B.Vehicle_type_id=3 then '(Matador)'    
  when B.Vehicle_type_id=5 then '(Axle)'    
  when B.Vehicle_type_id=6 then '(cbxcvbxcvb44)'    
  ELSE ''     
  end) as [Truck No & Type],D.branch_name as  [Loading Branch/Hub],    
  E.area_name [Loading A0],    
  (select count(memo_id) from EC_Opr_VTrans_LHPO_Memo_Details where lhpo_id=A.lhpo_id) [No of Memos],    
  (select count(gc_id) from EC_Opr_VTrans_LHPO_GC_Details where lhpo_id=A.lhpo_id) [No of gc_caption's],    
  
  ISNULL(cast(round(A.Total_Actual_Weight,0) as float),0) as [Actual Weight],    
  ISNULL(cast(round(A.Total_Truck_Hire_Payable,0)as float),0) as [Sub Freight],    
  (case when I.lhpo_type_id =1 then ISNULL(cast(round(A.Truck_hire_Charge,0)as float),0) else 0 end) as [Truck Hire Charge],    
  (case when I.lhpo_type_id =1 then ISNULL(cast(round(A.Total_Advance_To_Be_Paid,0)as float),0) else 0 end) as [Advance],    
  pay_br.Branch_Name as [BTH Payable at],    
  (dbo.dateonlydisplay(J.Actual_unloading_sheet_date)+' '+convert(varchar(25),J.Vehicle_Arrival_Time,108)) as [Last Destination Arrival Date & Time],    
  (dbo.dateonlydisplay(J.Vehicle_Arrival_Date)+' '+convert(varchar(25),J.Truck_Unloaded_Time,108)) as [Last Destination Unloaded Date & Time],    
  dbo.timespan((A.lhpo_date+' '+A.Vehicle_departure_time),(J.Vehicle_Arrival_Date+''+J.Truck_Unloaded_time)) as [Turn-Round time],    
  ISNULL(J.Actual_unloading_sheet_no_for_print,'') as [AUS No],    
  B.Vehicle_Capacity As [Truck Capacity],    
  A.Manual_Ref_No as [Manual lhpo_caption No],J.Manual_TUR_No  as [Manual TUR No],    
  isnull(K.short,0) as [Short/Excess]    
  --(Total_Short_Articles+Total_Excess_Articles) as [Short/Excess]    
  
  
from dbo.EC_Opr_VTrans_LHPO A    
inner join EF_Master_Vehicle B    
on B.Vehicle_ID=A.Vehicle_ID    
inner join dbo.EF_Master_Vehicle_Type C    
on C.Vehicle_Type_ID=B.Vehicle_Type_ID    
inner join ec_master_branch D    
on D.branch_id=A.LHPO_Branch_Id    
inner join EC_Opr_VTrans_LHPO_GC_Details L    
on L.lhpo_id=A.lhpo_id    
inner join ec_opr_vtrans_gc M    
on M.gc_id=L.gc_id    
inner join ec_master_area E    
on E.area_id=D.area_id    
inner join dbo.EC_Master_Service_Location F    
on F.Service_Location_ID=A.To_Location_ID    
inner join EC_Master_LHPO_Type I    
on I.LHPO_Type_ID=A.LHPO_Type_ID    
inner join ec_master_branch pay_br    
on pay_br.branch_id=A.Balance_Payable_Main_ID    
left outer join ec_master_branch G    
on G.branch_id=F.branch_id    
left outer join ec_master_area H    
on H.area_id=G.area_id    
    
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet J    
on J.lhpo_id=A.lhpo_id    
left outer join dbo.EC_opr_Short_Excess_view K    
on A.lhpo_id=K.lhpo_id    
    
where  A.lhpo_date>=@From_date and A.lhpo_date<=@To_date     
and A.Is_Cancelled = 0      
AND G.Region_ID =     
   (select case @Region_ID when 0     
     then G.Region_ID     
     else @Region_ID    
     end)    
   AND G.Area_ID =     
   (select case @Area_ID when 0     
     then G.Area_ID    
     else @Area_ID    
     end )    
   AND G.branch_Id  =     
   (select case @Branch_ID when 0    
     then G.branch_Id    
     else @Branch_ID    
     end )    
and  D.Region_ID =     
   (select case @Un_loading_Region_id when 0     
     then D.Region_ID     
     else @Un_loading_Region_id    
     end)    
   AND D.Area_ID =     
   (select case @Un_loading_Area_id when 0     
     then D.Area_ID    
     else @Un_loading_Area_id    
     end )    
AND D.branch_Id  =     
   (select case @Un_loading_Branch_id when 0    
     then D.branch_Id    
     else @Un_loading_Branch_id    
     end )    
and B.Vehicle_type_id=(select case @Vehcle_Type when 0    
             then B.Vehicle_type_id    
             else @Vehcle_Type end)    
    
and M.Division_ID=(select case @Division_Id when 0    
            then M.Division_ID    
         else @Division_Id    
            end)
and 
(@criteria_id = 0

or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and B.Vehicle_No = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and B.Vehicle_No like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and B.Vehicle_No like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and B.Vehicle_No like '%' + @Filtered_Text + '%')

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and H.Area_Name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and H.Area_Name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and H.Area_Name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and H.Area_Name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and G.Branch_name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and G.Branch_name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and G.Branch_name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and G.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and E.area_name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and E.area_name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and E.area_name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and E.area_name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and D.branch_name = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and D.branch_name like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and D.branch_name like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and D.branch_name like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print = @Filtered_Text)
or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print like @Filtered_Text + '%')
or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print like '%' + @Filtered_Text)
or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and J.Actual_unloading_sheet_no_for_print like '%' + @Filtered_Text + '%')

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 2 and J.Manual_TUR_No = @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 2 and J.Manual_TUR_No >= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 2 and J.Manual_TUR_No <= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 2 and J.Manual_TUR_No > @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 2 and J.Manual_TUR_No < @Filtered_Text_int)

or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and A.lhpo_date = @Filtered_Date)
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and A.lhpo_date >= @Filtered_Date)
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and A.lhpo_date <= @Filtered_Date)
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and A.lhpo_date > @Filtered_Date)
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and A.lhpo_date < @Filtered_Date) 
 )                                           
  )a  
)  
  
  
SELECT * into #TrkUnLd FROM TruckUnLoading  
  
select * From #TrkUnLd  
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
  
Select   
   
 sum([Actual Weight]) as [Actual Weight],  
 sum([No of Memos]) as [No of Memos],  
 sum([No of gc_caption's]) as [No of gc_caption's],  
 sum([Truck Hire Charge]) as [Truck Hire Charge],  
 sum([Advance]) as [Advance],  
 sum([Truck Capacity]) as [Truck Capacity],  
 sum([Sub Freight] )as [Sub Freight]  
From #TrkUnLd  
  
select count(*) From #TrkUnLd  
end    
    
     
    
    
    
  
  
  
----956--------------------------------------------------------------------------------  
  
  
  
----528--------------------------------------------------------------------------------  
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================  
-- Author:  <Parikshit>  
-- Create date: <18-November-2008>  
-- Description: <Ledger Outstanding Report Billwise Details for Receivables>  
-- =============================================    

--EXEC FA_Rpt_Outstanding_Receivables_BillWise_Details 1,'HO',0,1,'03-31-2008',0,0

CREATE PROC [dbo].[FA_Rpt_Outstanding_Receivables_BillWise_Details]  
(      
@IsConsolidated bit,
@HierarchyCode varchar(5),  
@MainId int,
@DivisionId int,
@EndDate datetime,
@LedgerGroupId int,
@LedgerId int,
@IsCondensed bit
)      
as      
    

Declare @TempTable Table
(
	Sr_No int IDENTITY,
	Ledger_Id int,
	HO varchar(10),
	Region varchar(100),
	Area varchar(100),
	Branch varchar(100),
	Ledger_Name varchar(100),
	Bill_Date Datetime,
	Ref_No varchar(50),
	Opening_Amount numeric(18,2),
	Pending_Amount numeric(18,2),
	Due_Date datetime,
	OverDueDays int
)


Declare @BillDetails Table
(
	Ledger_Id int,
	HO varchar(10),
	Region varchar(100),
	Area varchar(100),
	Branch varchar(100),
	Ledger_Name varchar(100),
	Bill_Date varchar(50),
	Ref_No varchar(50),
	Ref_Type varchar(25),
	Voucher_Date varchar(50),
	Voucher_Type varchar(100),
	Voucher_No varchar(50),
	Amount numeric(18,2),
	Opening_Amount numeric(18,2),
	Pending_Amount numeric(18,2),
	Due_Date varchar(50),
	OverDueDays int
)


declare @Ledger_Id as int
declare @HO as varchar(10)
declare @Region as varchar(100)
declare @Area as varchar(100)
declare @Branch as varchar(100)
declare @Ledger_Name as varchar(100)
declare @Bill_Date as Datetime
declare @Ref_No as varchar(50)
declare @Opening_Amount as numeric(18,2)
declare @Pending_Amount as numeric(18,2)
declare @Due_Date as datetime
declare @OverDueDays as int

declare @Count as int
declare @Sr_No as int

if @IsConsolidated=1
	Begin
		
		If @IsCondensed=1
			Begin

				Select Ledger_Id,HO,Region,Area,Branch,
				Ledger_Name,dbo.GetAppDate(Bill_Date) as Bill_Date,Ref_No,Opening_Amount,
				Pending_Amount,dbo.GetAppDate(Due_Date) as Due_Date,
				DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
				(
				select dbo.FA_Bill_Wise_Details.Ledger_Id,
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				FA_Master_Ledger.Ledger_Name,
				(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
				Ref_No,
				(select Top 1 A.Amount from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
				Isnull(Sum(Amount),0) as Pending_Amount,

				(select Top 1 (A.Bill_Date +A.Credit_Days) from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

				from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
				ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

				LEFT OUTER JOIN EC_Master_Branch C
				On FA_Bill_Wise_Details.Main_Id=C.Branch_Id
				and FA_Bill_Wise_Details.Hierarchy_Code='BO'
				LEFT OUTER JOIN EC_Master_Area D
				On FA_Bill_Wise_Details.Main_Id=D.Area_Id
				and FA_Bill_Wise_Details.Hierarchy_Code='AO'


				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
				and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
				and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

				AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

				AND FA_Bill_Wise_Details.Division_Id = @DivisionId
				AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)			
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)			
			

				Group By FA_Bill_Wise_Details.Hierarchy_Code,
				FA_Bill_Wise_Details.Main_Id,
				FA_Bill_Wise_Details.Division_Id,
				FA_Bill_Wise_Details.Ledger_Id,
				FA_Master_Ledger.Ledger_Name,
				FA_Bill_Wise_Details.Ref_No
				) as Main

				Where Pending_Amount<0

				order by Main.Ledger_Name,Main.Bill_Date

			End--If @IsCondensed=1
		Else--Else If @IsCondensed=1
			Begin
				
				Insert into @TempTable
				(	Ledger_Id,HO,Region,Area,Branch,Ledger_Name,Bill_Date,
					Ref_No,Opening_Amount,Pending_Amount,Due_Date,OverDueDays
				)
				(
					Select *,DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
					(
					select dbo.FA_Bill_Wise_Details.Ledger_Id,
					Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
					Then 'True' else '' End as HO, 
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
					then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Region,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
					then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Area,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
					then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else
					'' End as Branch,
					FA_Master_Ledger.Ledger_Name,
					(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
					Ref_No,
					(select Top 1 A.Amount from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
					Isnull(Sum(Amount),0) as Pending_Amount,

					(select Top 1 (A.Bill_Date+A.Credit_Days) from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

					from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
					ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

					LEFT OUTER JOIN EC_Master_Branch C
					On FA_Bill_Wise_Details.Main_Id=C.Branch_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='BO'
					LEFT OUTER JOIN EC_Master_Area D
					On FA_Bill_Wise_Details.Main_Id=D.Area_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='AO'


					Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 

					and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
					and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

					AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

					AND FA_Bill_Wise_Details.Division_Id = @DivisionId
					AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)
					AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)		

					Group By FA_Bill_Wise_Details.Hierarchy_Code,
					FA_Bill_Wise_Details.Main_Id,
					FA_Bill_Wise_Details.Division_Id,
					FA_Bill_Wise_Details.Ledger_Id,
					FA_Master_Ledger.Ledger_Name,
					FA_Bill_Wise_Details.Ref_No
					) as Main					

					Where Pending_Amount<0

				)
	
				

				
				select @Count=count(*) from @TempTable

				set @Sr_No=1


				while @Sr_No<=@Count
				Begin

				
					select @Ledger_Id=Ledger_Id,@HO=HO,@Region=Region,
					@Area=Area,@Branch=Branch,@Ledger_Name=Ledger_Name,
					@Bill_Date=Bill_Date,@Ref_No=Ref_No,
					@Opening_Amount=Opening_Amount,@Pending_Amount=Pending_Amount,
					@Due_Date=Due_Date,@OverDueDays=OverDueDays
					from @TempTable
					where Sr_No=@Sr_No


					Insert Into @BillDetails
					(Ledger_Id,HO,Region,Area,Branch,Ledger_Name,
					Bill_Date,Ref_No,Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount,Opening_Amount,Pending_Amount,
					Due_Date,OverDueDays)
					Values
					(@Ledger_Id,@HO,@Region,@Area,@Branch,@Ledger_Name,
					dbo.GetAppDate(@Bill_Date),@Ref_No,NULL,NULL,NULL,
					NULL,NULL,@Opening_Amount,@Pending_Amount,
					dbo.GetAppDate(@Due_Date),@OverDueDays)
	

					Insert Into @BillDetails
					(Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount)
					(		
					SELECT dbo.FA_Mst_Ref_Type.Ref_Type,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Bill_Date)
					Else dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Voucher_Date)
					End as Voucher_Date,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then 'Opening Balance'
					Else dbo.FA_Master_Voucher_Type.Voucher_Name
					End as Voucher_Type,
 
					dbo.FA_Bill_Wise_Details.Voucher_No, 
					dbo.FA_Bill_Wise_Details.Amount
					FROM dbo.FA_Bill_Wise_Details LEFT OUTER JOIN
					dbo.FA_Master_Voucher_Type ON dbo.FA_Bill_Wise_Details.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id INNER JOIN
					dbo.FA_Mst_Ref_Type ON dbo.FA_Bill_Wise_Details.Ref_Type_Id = dbo.FA_Mst_Ref_Type.Ref_Type_Id

					LEFT OUTER JOIN EC_Master_Branch C
					On FA_Bill_Wise_Details.Main_Id=C.Branch_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='BO'
					LEFT OUTER JOIN EC_Master_Area D
					On FA_Bill_Wise_Details.Main_Id=D.Area_Id
					and FA_Bill_Wise_Details.Hierarchy_Code='AO'



					Where dbo.FA_Bill_Wise_Details.Ledger_Id=@Ledger_Id
					AND dbo.FA_Bill_Wise_Details.Ref_No=@Ref_No
					AND FA_Bill_Wise_Details.Voucher_Date <= @EndDate 

					and (@MainId = (case @HierarchyCode When 'AO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
					and (@MainId = (case @HierarchyCode When 'RO' then FA_Bill_Wise_Details.Main_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
					 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

					AND FA_Bill_Wise_Details.Division_Id = @DivisionId					
					)
					
					select @Sr_No=@Sr_No+1

				End--while @Sr_No<=@Count


				Select * from @BillDetails
			
			End--If @IsCondensed=1 



	End--if @IsConsolidated=1

Else--Else if @IsConsolidated=1
	Begin
		
		If @IsCondensed=1
			Begin

				Select Ledger_Id,HO,Region,Area,Branch,
				Ledger_Name,dbo.GetAppDate(Bill_Date) as Bill_Date,Ref_No,Opening_Amount,
				Pending_Amount,dbo.GetAppDate(Due_Date) as Due_Date,
				DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
				(
				select dbo.FA_Bill_Wise_Details.Ledger_Id,
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				FA_Master_Ledger.Ledger_Name,
				(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
				Ref_No,
				(select Top 1 A.Amount from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
				Isnull(Sum(Amount),0) as Pending_Amount,

				(select Top 1 (A.Bill_Date +A.Credit_Days) from FA_Bill_Wise_Details A
				where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
				and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
				and A.Main_Id=FA_Bill_Wise_Details.Main_Id
				and A.Division_Id=FA_Bill_Wise_Details.Division_Id
				and A.Voucher_Date<=@EndDate
				and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

				from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
				ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
				AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
				AND FA_Bill_Wise_Details.Main_Id = @MainId
				AND FA_Bill_Wise_Details.Division_Id = @DivisionId

				AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

				AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)		

				Group By FA_Bill_Wise_Details.Hierarchy_Code,
				FA_Bill_Wise_Details.Main_Id,
				FA_Bill_Wise_Details.Division_Id,
				FA_Bill_Wise_Details.Ledger_Id,
				FA_Master_Ledger.Ledger_Name,
				FA_Bill_Wise_Details.Ref_No
				) as Main
				Where Pending_Amount<0
				order by Main.Ledger_Name,Main.Bill_Date

			End--If @IsCondensed=1
		Else--Else If @IsCondensed=1
			Begin
				
				Insert into @TempTable
				(	Ledger_Id,HO,Region,Area,Branch,Ledger_Name,Bill_Date,
					Ref_No,Opening_Amount,Pending_Amount,Due_Date,OverDueDays
				)
				(
					Select *,DateDiff(d,Main.Due_date,@EndDate) as OverDueDays from 
					(
					select dbo.FA_Bill_Wise_Details.Ledger_Id,
					Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
					Then 'True' else '' End as HO, 
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
					then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Region,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
					then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else '' End as Area,
					Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
					then (select Branch_Name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
					Else
					'' End as Branch,
					FA_Master_Ledger.Ledger_Name,
					(select Top 1 A.Bill_Date from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Bill_Date,
					Ref_No,
					(select Top 1 A.Amount from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Opening_Amount,
					Isnull(Sum(Amount),0) as Pending_Amount,

					(select Top 1 (A.Bill_Date+A.Credit_Days) from FA_Bill_Wise_Details A
					where A.Ledger_Id=FA_Bill_Wise_Details.Ledger_Id
					and A.Hierarchy_Code=FA_Bill_Wise_Details.Hierarchy_Code
					and A.Main_Id=FA_Bill_Wise_Details.Main_Id
					and A.Division_Id=FA_Bill_Wise_Details.Division_Id
					and A.Voucher_Date<=@EndDate
					and A.Ref_No=FA_Bill_Wise_Details.Ref_No order By Details_ID) as Due_Date

					from FA_Bill_Wise_Details INNER JOIN FA_Master_Ledger
					ON FA_Bill_Wise_Details.Ledger_Id=FA_Master_Ledger.Ledger_Id

					Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
					AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
					AND FA_Bill_Wise_Details.Main_Id = @MainId

					AND FA_Master_Ledger.Maintain_Bill_By_Bill=1

					AND FA_Bill_Wise_Details.Division_Id = @DivisionId
					AND @LedgerId=(select case When @LedgerId=0 then @LedgerId Else dbo.FA_Bill_Wise_Details.Ledger_Id End)
					AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)
		

					Group By FA_Bill_Wise_Details.Hierarchy_Code,
					FA_Bill_Wise_Details.Main_Id,
					FA_Bill_Wise_Details.Division_Id,
					FA_Bill_Wise_Details.Ledger_Id,
					FA_Master_Ledger.Ledger_Name,
					FA_Bill_Wise_Details.Ref_No
					) as Main					
					Where Pending_Amount<0
				)
	
				

				
				select @Count=count(*) from @TempTable

				set @Sr_No=1

				while @Sr_No<=@Count
				Begin

				
					select @Ledger_Id=Ledger_Id,@HO=HO,@Region=Region,
					@Area=Area,@Branch=Branch,@Ledger_Name=Ledger_Name,
					@Bill_Date=Bill_Date,@Ref_No=Ref_No,
					@Opening_Amount=Opening_Amount,@Pending_Amount=Pending_Amount,
					@Due_Date=Due_Date,@OverDueDays=OverDueDays
					from @TempTable
					where Sr_No=@Sr_No


					Insert Into @BillDetails
					(Ledger_Id,HO,Region,Area,Branch,Ledger_Name,
					Bill_Date,Ref_No,Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount,Opening_Amount,Pending_Amount,
					Due_Date,OverDueDays)
					Values
					(@Ledger_Id,@HO,@Region,@Area,@Branch,@Ledger_Name,
					dbo.GetAppDate(@Bill_Date),@Ref_No,NULL,NULL,NULL,
					NULL,NULL,@Opening_Amount,@Pending_Amount,
					dbo.GetAppDate(@Due_Date),@OverDueDays)
	

					Insert Into @BillDetails
					(Ref_Type,Voucher_Date,Voucher_Type,
					Voucher_No,Amount)
					(		
					SELECT dbo.FA_Mst_Ref_Type.Ref_Type,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Bill_Date)
					Else dbo.GetAppDate(dbo.FA_Bill_Wise_Details.Voucher_Date)
					End as Voucher_Date,

					case when dbo.FA_Master_Voucher_Type.Voucher_Name is NULL
					Then 'Opening Balance'
					Else dbo.FA_Master_Voucher_Type.Voucher_Name
					End as Voucher_Type,
 
					dbo.FA_Bill_Wise_Details.Voucher_No, 
					dbo.FA_Bill_Wise_Details.Amount
					FROM dbo.FA_Bill_Wise_Details LEFT OUTER JOIN
					dbo.FA_Master_Voucher_Type ON dbo.FA_Bill_Wise_Details.Voucher_Type_Id = dbo.FA_Master_Voucher_Type.Voucher_Type_Id INNER JOIN
					dbo.FA_Mst_Ref_Type ON dbo.FA_Bill_Wise_Details.Ref_Type_Id = dbo.FA_Mst_Ref_Type.Ref_Type_Id
					Where dbo.FA_Bill_Wise_Details.Ledger_Id=@Ledger_Id
					AND dbo.FA_Bill_Wise_Details.Ref_No=@Ref_No
					AND FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
					AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
					AND FA_Bill_Wise_Details.Main_Id = @MainId
					AND FA_Bill_Wise_Details.Division_Id = @DivisionId					
					)
					
					select @Sr_No=@Sr_No+1

				End--while @Sr_No<=@Count


				Select * from @BillDetails

			End--If @IsCondensed=1

	End	--if @IsConsolidated=1














----1177--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =============================================
-- Author:		<shiv mishra>
-- Create date: feb  7 2009  4:17PM
-- Description:	<save credit memo>
-- =============================================

CREATE Proc [dbo].[EC_FA_Credit_Memo_Save]
(
@Year_Code int,
@Division_ID int,
@Document_Series_Allocation_ID int,
@CreditMemo_For_ID int,
@CreditMemo_ID int,
@CreditMemo_No int,
@CreditMemo_No_For_Print varchar(20),
@CreditMemo_Date datetime,
@CreditMemo_Branch_ID int,
@GC_ID int,
@GC_Sub_Total numeric(18,2),
@Octroi_Form_Charges numeric(18,2),
@Octroi_Service_Charges numeric(18,2),
@GI_Charges numeric(18,2),
@Detention_Charges numeric(18,2),
@Hamali_Charges numeric(18,2),
@Local_Charges numeric(18,2),
@Demurage_Days int,
@Demurage_Charges numeric(18,2),
@Additional_Charges numeric(18,2),
@Additional_Charges_Remarks varchar(200),
@Discount_Amount numeric(18,2),
@Tax_Abatement numeric(18,2),
@Amount_Taxable numeric(18,2),
@Service_Tax_Percent numeric(18,2),
@Service_Tax_Amount numeric(18,2),
@Service_Tax_Payable_By int,
@Rebooked_Charges numeric(18,2),
@Octroi_Amount numeric(18,2),
@Octroi_Receipt_No nvarchar(50),
@Octroi_Receipt_Date datetime,
@Octroi_Form_Type_ID int,
@Octroi_Paid_By_ID int,
@Total_MR_Amount numeric(18,2),
@Std_Octroi_Form_Charges numeric(18,2),
@Std_Octroi_Service_Charges numeric(18,2),
@Std_GI_Charges numeric(18,2),
@Std_Detention_Charges numeric(18,2),
@Std_Hamali_Charges numeric(18,2),
@Std_Local_Charges numeric(18,2),
@Std_Demurage_Charges numeric(18,2),
@Debit_To_Ledger_ID int,
@Debit_To_Branch_ID int,
@Created_By int,
@Is_Credit_For_Consignee bit = 1,
@Discount_Amount_Remarks varchar(100),
@DeliveryCommission numeric(18,2),
@Error_Code int output,
@ERROR_DESC AS VARCHAR(4000) OUTPUT,@Print_Doc_Id int OUTPUT)
As
set @Error_Code = 0;
set @ERROR_DESC = '';
DECLARE @Can_Add_Edit int
set @Can_Add_Edit = 1if(@CreditMemo_ID<=0)beginSELECT @Can_Add_Edit = 0 FROM EC_Opr_VTrans_GC WHEREgc_id = @gc_id and is_cancelled = 1  --(Delivery_MR_ID > 0 or endif(@CreditMemo_ID > 0)beginSELECT @Can_Add_Edit = 0 FROM EC_Opr_VTrans_GC WHEREgc_id = @gc_id and is_cancelled = 1end

IF @Can_Add_Edit = 0
	BEGIN
	set @Error_Code = 1012;
	return;
END

BEGIN TRY
BEGIN TRAN
BEGIN
SET NOCOUNT ON;

if(@CreditMemo_For_ID = 1)
begin
	set @Octroi_Form_Charges = 0
	set @Octroi_Service_Charges = 0
	set @Octroi_Amount = 0
	set @Octroi_Receipt_No = ''
	set @Octroi_Form_Type_ID = 0
	set @Octroi_Paid_By_ID = 0
	set @Std_Octroi_Form_Charges = 0
	set @Std_Octroi_Service_Charges = 0
end
else if(@CreditMemo_For_ID = 2)
begin
	set @GC_Sub_Total = 0
	set @GI_Charges = 0
	set @Detention_Charges = 0
	set @Hamali_Charges = 0
	set @Local_Charges = 0
	set @Demurage_Days = 0
	set @Demurage_Charges = 0
	set @Additional_Charges = 0
	set @Additional_Charges_Remarks =''
	set @Discount_Amount = 0
	set @Std_GI_Charges = 0
	set @Std_Detention_Charges = 0
	set @Std_Hamali_Charges = 0
	set @Std_Local_Charges = 0
	set @Std_Demurage_Charges = 0

end

if (@CreditMemo_ID <= 0) -- add
  Begin

	set @CreditMemo_No = cast (@CreditMemo_No_For_Print as int)

	declare @GC_No_Length int
	select @GC_No_Length = GC_No_Length from EC_Master_Company_GC_Parameter

    insert into FA_Opr_Credit_Memo(
    Year_Code,Division_ID,Document_Series_Allocation_ID,
    Credit_Memo_for_ID,Credit_Memo_No,Credit_Memo_No_For_Print,
    Credit_Memo_Date,Credit_Memo_Branch_ID,GC_ID,
    GC_Sub_Total,Octroi_Form_Charges,Octroi_Service_Charges,
    GI_Charges,Detention_Charges,Hamali_Charges,
    Local_Charges,Demurage_Days,Demurage_Charges,
    Additional_Charges,Additional_Charges_Remarks,Discount_Amount,
	Discount_Amount_Remarks,Tax_Abatement,Amount_Taxable,
    Service_Tax_Percent,Service_Tax_Amount,Service_Tax_Payable_By,
    Rebooked_Charges,Octroi_Amount,Octroi_Receipt_No,
    Octroi_Receipt_Date,Octroi_Form_Type_ID,Octroi_Paid_By_ID,
    Total_MR_Amount,Std_Octroi_Form_Charges,Std_Octroi_Service_Charges,
    Std_GI_Charges,Std_Detention_Charges,Std_Hamali_Charges,
    Std_Local_Charges,Std_Demurage_Charges,Debit_To_Ledger_ID,
    Debit_To_Branch_ID,Is_Cancelled,Voucher_ID,
    Created_By, Created_On,Updated_By,Updated_On,Is_Credit_For_Consignee,Dly_Commision)
    values(
    @Year_Code,@Division_ID,@Document_Series_Allocation_ID,
    @CreditMemo_For_ID,@CreditMemo_No,dbo.get_no_to_print(@CreditMemo_No,@GC_No_Length),
    @CreditMemo_Date,@CreditMemo_Branch_ID,@GC_ID,
    @GC_Sub_Total,@Octroi_Form_Charges,@Octroi_Service_Charges,
    @GI_Charges,@Detention_Charges,@Hamali_Charges,
    @Local_Charges,@Demurage_Days,@Demurage_Charges,
    @Additional_Charges,@Additional_Charges_Remarks,@Discount_Amount,
	@Discount_Amount_Remarks,@Tax_Abatement,@Amount_Taxable,
    @Service_Tax_Percent,@Service_Tax_Amount,@Service_Tax_Payable_By,
    @Rebooked_Charges,@Octroi_Amount,@Octroi_Receipt_No,
    @Octroi_Receipt_Date,@Octroi_Form_Type_ID,@Octroi_Paid_By_ID,
    @Total_MR_Amount,@Std_Octroi_Form_Charges,@Std_Octroi_Service_Charges,
    @Std_GI_Charges,@Std_Detention_Charges,@Std_Hamali_Charges,
    @Std_Local_Charges,@Std_Demurage_Charges,@Debit_To_Ledger_ID,
    @Debit_To_Branch_ID,0,0,
	@Created_By,getdate(),@Created_By,getdate(),@Is_Credit_For_Consignee,@DeliveryCommission)

	SET @CreditMemo_ID = @@identity

IF((SELECT Credit_Memo_Freight_ID FROM EC_Opr_VTrans_GC WHERE gc_id = @GC_ID) <= 0 and @CreditMemo_For_ID = 1) -- 1 = Credit Memo For Freight
BEGIN
	Update EC_Opr_VTrans_GC
	set Credit_Memo_Freight_ID = @CreditMemo_ID
	where gc_id = @GC_ID
		and Credit_Memo_Freight_ID = 0
END
ELSE IF((SELECT Credit_Memo_Octroi_ID FROM EC_Opr_VTrans_GC WHERE gc_id = @GC_ID) <= 0 and @CreditMemo_For_ID = 2)  -- 2 = Credit Memo For Octroi
BEGIN
	Update EC_Opr_VTrans_GC
	set Credit_Memo_Octroi_ID = @CreditMemo_ID
	where gc_id = @GC_ID
		and Credit_Memo_Octroi_ID = 0
END
ELSE IF(@CreditMemo_For_ID = 3)  -- 3 = Credit Memo For Both (Freight nad Octroi)
BEGIN
	Update EC_Opr_VTrans_GC
	set Credit_Memo_Freight_ID = @CreditMemo_ID,
		Credit_Memo_Octroi_ID = @CreditMemo_ID
	where gc_id = @GC_ID
		and Credit_Memo_Freight_ID = 0
		and Credit_Memo_Octroi_ID = 0
END

update EC_Opr_Document_Allocation set
	next_no = @CreditMemo_No + 1,
	Balance = Balance - 1
	where Document_Series_Allocation_ID = @Document_Series_Allocation_ID

 End
Else -- Edit
  Begin
    Update FA_Opr_Credit_Memo set
    Credit_Memo_Date = @CreditMemo_Date,
    GC_Sub_Total = @GC_Sub_Total,
    Octroi_Form_Charges = @Octroi_Form_Charges,
    Octroi_Service_Charges = @Octroi_Service_Charges,
    GI_Charges = @GI_Charges,
    Detention_Charges = @Detention_Charges,
    Hamali_Charges = @Hamali_Charges,
    Local_Charges = @Local_Charges,
    Demurage_Days = @Demurage_Days,
    Demurage_Charges = @Demurage_Charges,
    Additional_Charges = @Additional_Charges,
    Additional_Charges_Remarks = @Additional_Charges_Remarks,
    Discount_Amount = @Discount_Amount,
	Discount_Amount_Remarks = @Discount_Amount_Remarks,
    Tax_Abatement = @Tax_Abatement,
    Amount_Taxable = @Amount_Taxable,
    Service_Tax_Percent = @Service_Tax_Percent,
    Service_Tax_Amount = @Service_Tax_Amount,
    Service_Tax_Payable_By = @Service_Tax_Payable_By,
	Rebooked_Charges = @Rebooked_Charges,
    Octroi_Amount = @Octroi_Amount,
    Octroi_Receipt_No = @Octroi_Receipt_No,
    Octroi_Receipt_Date = @Octroi_Receipt_Date,
    Octroi_Form_Type_ID = @Octroi_Form_Type_ID,
    Octroi_Paid_By_ID = @Octroi_Paid_By_ID,
    Total_MR_Amount = @Total_MR_Amount,
    Std_Detention_Charges = @Std_Detention_Charges,
    Std_Local_Charges = @Std_Local_Charges,
    Debit_To_Ledger_ID = @Debit_To_Ledger_ID,
    Debit_To_Branch_ID = @Debit_To_Branch_ID,
    Updated_By = @Created_By,
    Updated_On = getdate(),
	Is_Credit_For_Consignee = @Is_Credit_For_Consignee,
	Dly_Commision = @DeliveryCommission
    where Credit_Memo_ID = @CreditMemo_ID
  End

SET @Print_Doc_Id=@CreditMemo_ID

---================MR Delivery AccountEffects===============
EXEC	[dbo].[EC_FA_Opr_CreditMemoAccountEffects]
		@Year_Code = @Year_Code,
		@Hierarchy_Code ='BO',
		@Main_Id = @CreditMemo_Branch_ID,
		@Division_Id = @Division_Id,
		@Credit_Memo_ID = @CreditMemo_ID,
		@User_Id = @Created_By
---=========================================================

END
COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
END CATCH










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================  
-- Author:  <Parikshit>  
-- Create date: <18-November-2008>  
-- Description: <Ledger Outstanding Report>  
-- =============================================    

--EXEC FA_Rpt_Outstanding_Receivables_Payables 0,'HO',0,1,'03-31-2010',27,0

CREATE PROC [dbo].[FA_Rpt_Outstanding_Receivables_Payables]  
(      
@IsConsolidated bit,
@HierarchyCode varchar(5),  
@MainId int,
@DivisionId int,
@EndDate datetime,
@LedgerGroupId int,
@IsReceivables bit

)      
as      
    


if @IsConsolidated=1
	Begin

		if @IsReceivables=1
			Begin

				SELECT dbo.FA_Master_Ledger.Ledger_Id, 
				
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				dbo.FA_Master_Ledger.Ledger_Name as 'Ledger Name',  
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name 'Ledger Group Name', 
				case when isnull(Sum(dbo.FA_Bill_Wise_Details.Amount),0)>0 then cast(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0) as varchar(50)) + ' Cr'
				when isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)<0 then cast(abs(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)) as varchar(50)) + ' Dr'
				end as 'Pending Amount',
				Sum(dbo.FA_Bill_Wise_Details.Amount) as Pending_Amount

				FROM dbo.FA_Bill_Wise_Details INNER JOIN
				dbo.FA_Master_Ledger ON dbo.FA_Bill_Wise_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
				dbo.FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = dbo.FA_Master_Ledger_Group.Ledger_Group_Id
			
				LEFT OUTER JOIN EC_Master_Branch C
				On dbo.FA_Bill_Wise_Details.Main_Id=C.Branch_Id
				and dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				LEFT OUTER JOIN EC_Master_Area D
				On dbo.FA_Bill_Wise_Details.Main_Id=D.Area_Id
				and dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'

				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 

				and (@MainId = (case @HierarchyCode When 'AO' then dbo.FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
				and (@MainId = (case @HierarchyCode When 'RO' then dbo.FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

				AND FA_Bill_Wise_Details.Division_Id = @DivisionId
				AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=1
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)
				

				Group By dbo.FA_Master_Ledger.Ledger_Id, 
				dbo.FA_Bill_Wise_Details.Hierarchy_Code, dbo.FA_Bill_Wise_Details.Main_Id, 
				dbo.FA_Master_Ledger.Ledger_Name,
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name

				Having sum(dbo.FA_Bill_Wise_Details.Amount)<0		

				Order by dbo.FA_Master_Ledger.Ledger_Name

			End--if @IsReceivables=1
		Else--Else if @IsReceivables=1
			Begin

				SELECT dbo.FA_Master_Ledger.Ledger_Id, 
				
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				dbo.FA_Master_Ledger.Ledger_Name as 'Ledger Name',  
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name 'Ledger Group Name', 
				case when isnull(Sum(dbo.FA_Bill_Wise_Details.Amount),0)>0 then cast(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0) as varchar(50)) + ' Cr'
				when isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)<0 then cast(abs(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)) as varchar(50)) + ' Dr'
				end as 'Pending Amount',
				Sum(dbo.FA_Bill_Wise_Details.Amount) as Pending_Amount

				FROM dbo.FA_Bill_Wise_Details INNER JOIN
				dbo.FA_Master_Ledger ON dbo.FA_Bill_Wise_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
				dbo.FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = dbo.FA_Master_Ledger_Group.Ledger_Group_Id
			
				LEFT OUTER JOIN EC_Master_Branch C
				On dbo.FA_Bill_Wise_Details.Main_Id=C.Branch_Id
				and dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				LEFT OUTER JOIN EC_Master_Area D
				On dbo.FA_Bill_Wise_Details.Main_Id=D.Area_Id
				and dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'

				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 

				and (@MainId = (case @HierarchyCode When 'AO' then dbo.FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'AO' then C.Area_Id else @MainId End))
				and (@MainId = (case @HierarchyCode When 'RO' then dbo.FA_Bill_Wise_Details.Main_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then C.Region_Id else @MainId End)
				 or @MainId = (case @HierarchyCode When 'RO' then D.Region_Id else @MainId End))

				AND FA_Bill_Wise_Details.Division_Id = @DivisionId
				AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=1
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)
				

				Group By dbo.FA_Master_Ledger.Ledger_Id, 
				dbo.FA_Bill_Wise_Details.Hierarchy_Code, dbo.FA_Bill_Wise_Details.Main_Id, 
				dbo.FA_Master_Ledger.Ledger_Name,
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name

				Having sum(dbo.FA_Bill_Wise_Details.Amount)>0		

				Order by dbo.FA_Master_Ledger.Ledger_Name

			End--if @IsReceivables=1

	End--if @IsConsolidated=1
Else--Else if @IsConsolidated=1
	Begin

		If @IsReceivables=1
			Begin

				SELECT dbo.FA_Master_Ledger.Ledger_Id, 
				
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				dbo.FA_Master_Ledger.Ledger_Name as 'Ledger Name', 
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name 'Ledger Group Name', 
				case when isnull(Sum(dbo.FA_Bill_Wise_Details.Amount),0)>0 then cast(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0) as varchar(50)) + ' Cr'
				when isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)<0 then cast(abs(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)) as varchar(50)) + ' Dr'
				end as 'Pending Amount',
				Sum(dbo.FA_Bill_Wise_Details.Amount) as Pending_Amount
				FROM dbo.FA_Bill_Wise_Details INNER JOIN
				dbo.FA_Master_Ledger ON dbo.FA_Bill_Wise_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
				dbo.FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = dbo.FA_Master_Ledger_Group.Ledger_Group_Id
			
				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
				AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
				AND FA_Bill_Wise_Details.Main_Id = @MainId
				AND FA_Bill_Wise_Details.Division_Id = @DivisionId
				AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=1
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)
				

				Group By dbo.FA_Master_Ledger.Ledger_Id, 
				dbo.FA_Bill_Wise_Details.Hierarchy_Code, dbo.FA_Bill_Wise_Details.Main_Id, 
				dbo.FA_Master_Ledger.Ledger_Name,
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name

				having Sum(dbo.FA_Bill_Wise_Details.Amount)<0

				Order By dbo.FA_Master_Ledger.Ledger_Name

			End--If @IsReceivables=1
		Else--Else If @IsReceivables=1
			Begin

				SELECT dbo.FA_Master_Ledger.Ledger_Id, 
				
				Case when dbo.FA_Bill_Wise_Details.Hierarchy_Code='HO'
				Then 'True' else '' End as HO, 
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='RO'
				then (select Region_Name from EC_Master_Region where Region_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Region,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='AO'
				then (select Area_Name from EC_Master_Area where Area_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else '' End as Area,
				Case When dbo.FA_Bill_Wise_Details.Hierarchy_Code='BO'
				then (select Branch_name from EC_Master_Branch where Branch_Id=dbo.FA_Bill_Wise_Details.Main_Id)
				Else
				'' End as Branch,
				dbo.FA_Master_Ledger.Ledger_Name as 'Ledger Name', 
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name 'Ledger Group Name', 
				case when isnull(Sum(dbo.FA_Bill_Wise_Details.Amount),0)>0 then cast(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0) as varchar(50)) + ' Cr'
				when isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)<0 then cast(abs(isnull(sum(dbo.FA_Bill_Wise_Details.Amount),0)) as varchar(50)) + ' Dr'
				end as 'Pending Amount',
				Sum(dbo.FA_Bill_Wise_Details.Amount) as Pending_Amount
				FROM dbo.FA_Bill_Wise_Details INNER JOIN
				dbo.FA_Master_Ledger ON dbo.FA_Bill_Wise_Details.Ledger_Id = dbo.FA_Master_Ledger.Ledger_Id INNER JOIN
				dbo.FA_Master_Ledger_Group ON dbo.FA_Master_Ledger.Ledger_Group_Id = dbo.FA_Master_Ledger_Group.Ledger_Group_Id
			
				Where FA_Bill_Wise_Details.Voucher_Date <= @EndDate 
				AND FA_Bill_Wise_Details.Hierarchy_Code = @HierarchyCode
				AND FA_Bill_Wise_Details.Main_Id = @MainId
				AND FA_Bill_Wise_Details.Division_Id = @DivisionId
				AND dbo.FA_Master_Ledger.Maintain_Bill_By_Bill=1
				AND @LedgerGroupId=(select case When @LedgerGroupId=0 then @LedgerGroupId Else dbo.FA_Master_Ledger.Ledger_Group_Id End)
				

				Group By dbo.FA_Master_Ledger.Ledger_Id, 
				dbo.FA_Bill_Wise_Details.Hierarchy_Code, dbo.FA_Bill_Wise_Details.Main_Id, 
				dbo.FA_Master_Ledger.Ledger_Name,
				dbo.FA_Master_Ledger_Group.Ledger_Group_Name

				having Sum(dbo.FA_Bill_Wise_Details.Amount)>0

				Order By dbo.FA_Master_Ledger.Ledger_Name

			End--If @IsReceivables=1

	End	--if @IsConsolidated=1



----1178--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









-- =============================================
-- Author:		<Pankaj thapliyal>
-- Create date: <25-oct-2008>
-- Description:	<>
-- =============================================

CREATE Function [dbo].[Ec_Opr_GetBalanceArticles]  
(
@Login_Branch_ID int,
@GC_ID int,
@Loaded_Articles int,
@Status_Id int
)  
  
RETURNS int
AS  
 
BEGIN  

Declare @Balance_Artciles as int
set @Balance_Artciles = 0

if @Status_Id = 20
	select @Balance_Artciles = sum (Articles) from ec_opr_vtrans_gc_articles
	where Status_ID in (0,5,60) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID
else if @Status_Id = 30
	select @Balance_Artciles = sum (Articles) from ec_opr_vtrans_gc_articles
	where Status_ID in (0,5,20,60) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID
else if @Status_Id = 9999  --For Other Agency
	select @Balance_Artciles = sum (Articles) from ec_opr_vtrans_gc_articles
	where Status_ID in (9999) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID
else if @Status_Id = 150
	select @Balance_Artciles = sum (Articles) from ec_opr_vtrans_gc_articles
	where Status_ID in (60) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID

set @Balance_Artciles = @Balance_Artciles + @Loaded_Articles
RETURN @Balance_Artciles
END















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
    
    
    
    
    
    
-- =============================================    
-- Author:  <Amol>    
-- Create date: Dec  3 2008  4:17PM    
-- Description: <>    
-- =============================================    
    
CREATE Proc [dbo].[EC_FA_MR_Delivery_Save]    
(    
@Year_Code int,    
@Division_ID int,    
@Document_Series_Allocation_ID int,    
@MR_Type_ID int,    
@MR_ID int,    
@MR_No int,    
@MR_No_For_Print varchar(20),    
@MR_Date datetime,    
@MR_Branch_ID int,    
@GC_ID int,    
@GC_Sub_Total numeric(18,2),    
@Octroi_Form_Charges numeric(18,2),    
@Octroi_Service_Charges numeric(18,2),    
@GI_Charges numeric(18,2),    
@Detention_Charges numeric(18,2),    
@Hamali_Charges numeric(18,2),    
@Local_Charges numeric(18,2),    
@Demurage_Days int,    
@Demurage_Charges numeric(18,2),    
@Additional_Charges numeric(18,2),    
@Additional_Charges_Remarks varchar(200),    
@Discount_Amount numeric(18,2),    
@Tax_Abatement numeric(18,2),    
@Amount_Taxable numeric(18,2),    
@Service_Tax_Percent numeric(18,2),    
@Service_Tax_Amount numeric(18,2),    
@Service_Tax_Payable_By int,    
@Rebooked_Charges numeric(18,2),    
@Octroi_Amount numeric(18,2),    
@Octroi_Receipt_No nvarchar(50),    
@Octroi_Receipt_Date datetime,    
@Octroi_Form_Type_ID int,    
@Octroi_Paid_By_ID int,    
@Total_MR_Amount numeric(18,2),    
@Std_Octroi_Form_Charges numeric(18,2),    
@Std_Octroi_Service_Charges numeric(18,2),    
@Std_GI_Charges numeric(18,2),    
@Std_Detention_Charges numeric(18,2),    
@Std_Hamali_Charges numeric(18,2),    
@Std_Local_Charges numeric(18,2),    
@Std_Demurage_Charges numeric(18,2),    
@Cash_Amount numeric(18,2),    
@Cash_Ledger_ID int,    
@Cheque_Amount numeric(18,2),    
@MRChequeDetailsXML xml,    
@DeliveryCommission numeric(18,2),    
@Created_By int,    
@Discount_Amount_Remarks varchar(100),    
--@Voucher_ID int,    
@Error_Code int output,    
@ERROR_DESC AS VARCHAR(4000) OUTPUT,    
@Print_Doc_Id int OUTPUT,    
@Debit_To_Ledger_ID int,    
@ReceivedBy int,    
@billing_branch_id int,  
@ThroughMR varchar(100),  
@DeliveredToId int,  
@DeliveryAgainstId int)    
    
As    
    set @Error_Code = 0;    
set @ERROR_DESC = ''; set @Print_Doc_Id = 0     
DECLARE @Can_Add_Edit int    
set @Can_Add_Edit = 1  if(@MR_ID<=0)   
begin   
SELECT @Can_Add_Edit = 0 FROM EC_Opr_VTrans_GC   
WHERE gc_id = @gc_id and is_cancelled = 1  --(Delivery_MR_ID > 0 or  end  if(@MR_ID > 0) begin SELECT @Can_Add_Edit = 0 FROM EC_Opr_VTrans_GC WHERE gc_id = @gc_id and is_cancelled = 1   
end    
  
IF @Can_Add_Edit = 0    
 BEGIN    
 set @Error_Code = 1012;    
 return;    
END    
    
    
BEGIN TRY    
BEGIN TRAN    
BEGIN    
SET NOCOUNT ON;    
    
  IF @Cash_Amount <= 0  SET @Cash_Amount = 0  IF @Cheque_Amount <= 0  SET @Cheque_Amount = 0    
     
if @MR_ID <= 0 -- add    
  Begin    
    
 set @MR_No = cast (@MR_No_For_Print as int)    
    
 declare @GC_No_Length int    
 select @GC_No_Length = GC_No_Length from EC_Master_Company_GC_Parameter    
    
    insert into FA_Opr_MR(    
    Year_Code,    
    Division_ID,    
    Document_Series_Allocation_ID,    
    MR_Type_ID,    
    MR_No,    
    MR_No_For_Print,    
    MR_Date,    
    MR_Branch_ID,    
    GC_ID,    
    GC_Sub_Total,    
    Octroi_Form_Charges,    
    Octroi_Service_Charges,    
    GI_Charges,    
    Detention_Charges,    
    Hamali_Charges,    
    Local_Charges,    
    Demurage_Days,    
    Demurage_Charges,    
    Additional_Charges,    
    Additional_Charges_Remarks,    
    Discount_Amount,    
  Discount_Amount_Remarks,    
    Tax_Abatement,    
    Amount_Taxable,    
    Service_Tax_Percent,    
    Service_Tax_Amount,    
    Service_Tax_Payable_By,    
    Rebooked_Charges,    
    Octroi_Amount,    
    Octroi_Receipt_No,    
    Octroi_Receipt_Date,    
    Octroi_Form_Type_ID,    
    Octroi_Paid_By_ID,    
    Total_MR_Amount,    
    Std_Octroi_Form_Charges,    
    Std_Octroi_Service_Charges,    
    Std_GI_Charges,    
    Std_Detention_Charges,    
    Std_Hamali_Charges,    
    Std_Local_Charges,    
    Std_Demurage_Charges,   
    Cash_Amount,    
    Cash_Ledger_ID,    
    Cheque_Amount,    
    Is_Cancelled,    
    Voucher_ID,    
    Created_By,    
    Created_On,    
    Updated_By,    
    Updated_On,    
 Dly_Commision,    
    Recd_By,    
    Debit_To_Ledger_Id,    
    billing_branch_id,  
    Through_Mr,  
    Delivered_To_ID,  
    Delivery_Against_ID  
       
)    
    values(    
    @Year_Code,    
    @Division_ID,    
    @Document_Series_Allocation_ID,    
    @MR_Type_ID,    
    @MR_No,      dbo.get_no_to_print(@MR_No,@GC_No_Length),    
    @MR_Date,    
    @MR_Branch_ID,    
    @GC_ID,    
    @GC_Sub_Total,    
    @Octroi_Form_Charges,    
    @Octroi_Service_Charges,    
    @GI_Charges,    
    @Detention_Charges,    
    @Hamali_Charges,    
    @Local_Charges,    
    @Demurage_Days,    
    @Demurage_Charges,    
    @Additional_Charges,    
    @Additional_Charges_Remarks,    
    @Discount_Amount,    
  @Discount_Amount_Remarks,    
    @Tax_Abatement,    
    @Amount_Taxable,    
    @Service_Tax_Percent,    
    @Service_Tax_Amount,    
    @Service_Tax_Payable_By,    
    @Rebooked_Charges,    
    @Octroi_Amount,    
    @Octroi_Receipt_No,    
    @Octroi_Receipt_Date,    
    @Octroi_Form_Type_ID,    
    @Octroi_Paid_By_ID,    
    @Total_MR_Amount,    
    @Std_Octroi_Form_Charges,    
    @Std_Octroi_Service_Charges,    
    @Std_GI_Charges,    
    @Std_Detention_Charges,    
    @Std_Hamali_Charges,    
    @Std_Local_Charges,    
    @Std_Demurage_Charges,    
    @Cash_Amount,    
    @Cash_Ledger_ID,    
    @Cheque_Amount,    
    0,    
    0,--@Voucher_ID,    
    @Created_By,    
    getdate(),    
    @Created_By,    
    getdate(),    
 @DeliveryCommission,    
    @ReceivedBy,    
    @Debit_To_Ledger_ID,    
    @billing_branch_id,  
    @ThroughMR,  
    @DeliveredToId,  
    @DeliveryAgainstId     
     
 )    
    
SELECT @MR_ID = @@identity    
    
 update EC_Opr_Document_Allocation set    
 next_no = @MR_No + 1,    
 Balance = Balance - 1    
 where Document_Series_Allocation_ID = @Document_Series_Allocation_ID    
    
    
 IF((SELECT Delivery_MR_ID FROM EC_Opr_VTrans_GC WHERE gc_id = @GC_ID) <= 0)    
 BEGIN    
  Update EC_Opr_VTrans_GC    
  set Delivery_MR_ID = @MR_ID    
  where gc_id = @GC_ID    
   and Delivery_MR_ID = 0    
 END    
    
  End    
Else -- Edit    
  Begin    
    Update FA_Opr_MR set    
--    Year_Code = @Year_Code,    
--    Division_ID = @Division_ID,    
    MR_Date = @MR_Date,    
--    MR_Branch_ID = @MR_Branch_ID,    
    GC_Sub_Total = @GC_Sub_Total,    
    Octroi_Form_Charges = @Octroi_Form_Charges,    
    Octroi_Service_Charges = @Octroi_Service_Charges,    
    GI_Charges = @GI_Charges,    
    Detention_Charges = @Detention_Charges,    
    Hamali_Charges = @Hamali_Charges,    
    Local_Charges = @Local_Charges,    
    Demurage_Days = @Demurage_Days,    
    Demurage_Charges = @Demurage_Charges,    
    Additional_Charges = @Additional_Charges,    
    Additional_Charges_Remarks = @Additional_Charges_Remarks,    
    Discount_Amount = @Discount_Amount,    
 Discount_Amount_Remarks = @Discount_Amount_Remarks,    
    Tax_Abatement = @Tax_Abatement,    
    Amount_Taxable = @Amount_Taxable,    
    Service_Tax_Percent = @Service_Tax_Percent,    
    Service_Tax_Amount = @Service_Tax_Amount,    
    Service_Tax_Payable_By = @Service_Tax_Payable_By,    
    Octroi_Amount = @Octroi_Amount,    
    Octroi_Receipt_No = @Octroi_Receipt_No,    
    Octroi_Receipt_Date = @Octroi_Receipt_Date,    
    Octroi_Form_Type_ID = @Octroi_Form_Type_ID,    
    Octroi_Paid_By_ID = @Octroi_Paid_By_ID,    
    Total_MR_Amount = @Total_MR_Amount,    
    Std_Detention_Charges = @Std_Detention_Charges,    
    Std_Local_Charges = @Std_Local_Charges,    
    Cash_Amount = @Cash_Amount,    
    Cash_Ledger_ID = @Cash_Ledger_ID,    
    Cheque_Amount = @Cheque_Amount,    
    Updated_By = @Created_By,    
    Updated_On = getdate(),    
 Dly_Commision = @DeliveryCommission,    
    Recd_By=@ReceivedBy,    
    Debit_To_Ledger_Id=@Debit_To_Ledger_ID,    
    billing_branch_id=@billing_branch_id,    
 Through_MR=@ThroughMR,  
    Delivered_To_ID=@DeliveredToId,  
    Delivery_Against_ID=@DeliveryAgainstId     
    where MR_ID = @MR_ID    
  End    
    
 SET @Print_Doc_Id=@MR_ID    
 exec EC_FA_MR_Cheque_Details_Save @Year_Code,@Division_ID,@MR_ID,@MRChequeDetailsXML    
    
---================MR Delivery AccountEffects===============    
EXEC [dbo].[EC_FA_Opr_MRDeliveryAccountEffects]    
  @Year_Code = @Year_Code,    
  @Hierarchy_Code ='BO',    
  @Main_Id = @MR_Branch_ID,    
  @Division_Id = @Division_Id,    
  @MR_Id = @MR_Id,    
  @User_Id = @Created_By    
---=========================================================    
    
    
END    
COMMIT TRAN    
END TRY    
BEGIN CATCH    
 ROLLBACK TRAN    
 SELECT @ERROR_CODE=ERROR_NUMBER()    
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +    
 CAST(ERROR_MESSAGE() as VARCHAR(4000))    
END CATCH    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




  
           
              
-- =============================================                
-- Author:  <Piyush Kumar>                
-- Create date: <03-Jan-2009>                
-- Description: <Description>                
-- EXEC [dbo].[EC_RPT_Delivery_Stock_List_GRD]  0,0,0,'2009-02-18' ,0 ,0,1000          
  -- =============================================                
CREATE proc [dbo].[EC_RPT_Delivery_Stock_List_GRD]                 
                 
@Region_id as int,                  
@Area_id as int,                  
@Branch_id as int,                  
@As_on_Date as datetime,                    
@Division_ID as int,  
@PageIndex int,     
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1                  
                
As                  
begin             
                  
set nocount on 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		
		insert into @Dropdown_Search values ('Delivery Branch','s,2')
		insert into @Dropdown_Search values ('Consignee Name','s,3')
		insert into @Dropdown_Search values ('Consignor Name','s,4')
        insert into @Dropdown_Search values ('Pay Mode','s,4')
		insert into @Dropdown_Search values ('Total GC Amount','n,6')
		insert into @Dropdown_Search values ('GC Date','d,7')
		select  *From @Dropdown_Search

		return
	end  
--------------------------------------Filter-----------------------------------------            
if @Branch_ID  > 0                   
  BEGIN                  
  Set @Region_ID = -1                  
  set @Area_ID = -1                  
  END                   
else if  @Area_ID > 0                   
  BEGIN                   
  Set @Region_ID = -1                  
  set @Branch_ID =  -1                  
  END                   
else if @Region_ID > 0                   
  BEGIN                  
  set @Area_ID = -1                  
  set @Branch_ID = -1                  
  END;               
            
-------------------------------STEP 1--------------------------------------------------------------    
WITH Delivery_Stock_List AS    
(    
select distinct  
ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',   
 dbo.DateOnlyDisplay(A.GC_date) As [gc_caption Date],   
 a.GC_no_for_print as [gc_caption No],                
               
 branch.branch_name as [Bkg Branch],             
 Delivery .Branch_name as [Dly Branch],             
 a.Consignee_Name as [Cnee Name] ,             
 a.Consignor_Name as [Cnr Name],             
 Payment.Payment_Type as [Pay Mode],            
            
 ISNULL(Cast(round(a.Charged_Weight, 0) as float),0) as [Charged Weight],            
 ISNULL(Cast(round(a.Total_Actual_Weight, 0) as float),0) as [Actual Weight],            
 ISNULL(Cast(round(b.Articles, 0) as float),0) as [Articles],              
 ISNULL(Cast(round(a.Freight_Amt, 0) as float),0) as [Basic Freight] ,              
 ISNULL(Cast(round(a.Total_GC_Amount, 0) as float),0) as [Total Freight],            
 ISNULL(Cast(round(a.Total_Invoice_Value, 0) as float),0) as [Invoice Value]          
            
-- c.status  as [Current Status],            
-- b.Document_no_for_print as [Current Document No],            
-- dbo.DateOnlyDisplay(b.Document_Date) as [Current Document Date],            
-- d.Branch_Name as [Current Branch Name]            
              
From EC_Opr_VTrans_GC a              
inner join dbo.EC_Opr_Vtrans_GC_Articles b            
ON a.GC_ID=b.GC_ID            
            
inner join ec_master_payment_type Payment            
on Payment.payment_type_id=A.payment_type_id            
INNER JOIN dbo.Ec_Master_Status c             
ON b.Status_Id=c.Status_ID            
inner join ec_master_branch d            
on b.current_branch_id=d.branch_id            
              
inner join ec_master_branch branch                
on branch.branch_id=a.from_branch_id                
inner join ec_master_area Area                
on Area.area_id=branch.area_id                
inner join ec_master_region Region                
on Region.region_id=Area.region_id              
             
inner join ec_master_branch Delivery                
on Delivery.branch_id=A.Delivery_branch_id            
              
where a.is_cancelled=0  and a.status_id <> 80 --and  a.gc_no_for_print='03205311'       
and Is_Agency_Booking=0            
and b.is_cancelled=0             
--and b.status_id=60   
and b.articles >0             
and b.status_id<200            
and Delivery.branch_id=b.current_branch_id            
            
and(Delivery.Branch_ID = @Branch_ID              
 OR Delivery.Region_ID = (Select case @Region_ID when 0 then Delivery.Region_ID else  @Region_ID end)                
 OR Delivery.Area_ID =  @Area_ID)           
                
and (B.Document_Date <= @As_on_Date)             
and A.Division_ID=(select case @Division_ID when 0 then A.Division_ID else @Division_ID end) 
and 
(@criteria_id = 0

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Delivery.Branch_name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Delivery.Branch_name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and A.Consignee_Name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and A.Consignee_Name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and A.Consignor_Name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and A.Consignor_Name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and Payment.Payment_Type  = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and Payment.Payment_Type  like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and Payment.Payment_Type  like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and Payment.Payment_Type  like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 2 and a.Total_GC_Amount = @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 2 and a.Total_GC_Amount >= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 2 and a.Total_GC_Amount <= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 2 and a.Total_GC_Amount > @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 2 and a.Total_GC_Amount < @Filtered_Text_int)

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and A.GC_date = @Filtered_Date)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and A.GC_date >= @Filtered_Date)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and A.GC_date <= @Filtered_Date)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and A.GC_date > @Filtered_Date)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and A.GC_date < @Filtered_Date)
)                 
)  
  
-----------------------------STEP 2--------------------------------------------------------------    
SELECT * into #DeliveryStock FROM Delivery_Stock_List    
-----------------------------STEP 3--------------------------------------------------------------    
    
select * From #DeliveryStock    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
--------------------------------STEP 4-------------------------------------------------------------    
select    
count( [gc_caption No]) as [Total_GC],  
sum([Charged Weight]) as Total_Charged_Wt,    
sum([Actual Weight]) as Total_Actual_Wt,    
sum([Articles]) as Total_Articles,    
sum([Basic Freight]) as Total_Basic_Freight,    
sum([Total Freight]) as Total_Freight,    
sum([Invoice Value]) as Total_Invoice_Value  
from #DeliveryStock    
    
--------------------------------STEP 5-------------------------------------------------------  
select count(*) From #DeliveryStock    
---------------------------------------------------------------------------------------------                  
End  
  
  
  
  
  





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
  
  
  
CREATE PROCEDURE [dbo].[EC_FA_MR_Get_Details_for_Delivery]  
(  
@Branch_ID int,  
@GC_ID int,  
@MR_ID int,  
@Document_ID int  
)  
AS  
SET NOCOUNT ON;  
BEGIN  
  
DECLARE @Service_Tax_Percent NUMERIC(18,2),@Date DATETIME  
   
IF @MR_ID <= 0  
 BEGIN  
  
  SELECT @Date = GETDATE()  
  
  EXEC [dbo].[Ec_Get_Service_Tax_Percent]  
    @date = @Date,  
    @Service_Tax_Percent = @Service_Tax_Percent OUTPUT  
  
  SELECT distinct Rate.Branch_ID,Min_Charge_Wt,Rate.Local_Charges,  
  Min_Hamali,Rate.Hamali_Per_Kg,Rate.Other_Charges,  
  (case when Contract_ID > 0 then GC.Std_Octroi_Form_Charges else Rate.Octroi_Form_Charges end)as Octroi_Form_Charges,  
  (case when Contract_ID > 0 then GC.Std_Octroi_Service_Charges else Rate.Octroi_Service_Charges end)as Octroi_Service_Charges,  
  cast((case when Contract_ID > 0 then GC.Std_Demurrage_Days else Rate.Demurrage_Days end)as int)as Demurrage_Days,  
  (case when Contract_ID > 0 then GC.Std_Demurrage_Rate else Rate.Demurrage_Rate_Kg_Per_Day end)as Demurrage_Rate_Kg_Per_Day,  
  (case when Contract_ID > 0 then GC.Std_GI_Charges else Rate.GI_Charges end)as GI_Charges,  
  GC.Service_Tax_Percent,GC_Costing_Hamali_Charge,Is_Octroi,  
  (select top 1 document_date as AUS_Date from EC_Opr_VTrans_GC_articles  
  where 1=1  
  and gc_id = @GC_ID  
  and current_branch_id = @Branch_ID  
  and status_id = 60  
  and is_cancelled = 0  
  order by article_id desc) as AUS_Date  
  ,(select top 1 document_date as Del_Date from EC_Opr_VTrans_GC_articles  
  where gc_id = @GC_ID  
  and current_branch_id = @Branch_ID  
  and status_id = 200  
  and is_cancelled = 0  
  order by article_id desc) as Del_Date,  
  Dly_Oct_Form_Chg_Discount_Percent,Dly_Oct_Service_Chg_Discount_Percent,Dly_GI_Chg_Discount_Percent  
  ,Dly_Hamali_Chg_Discount_Percent,Dly_Demurrage_Chg_Discount_Percent  
  FROM dbo.EC_Master_Branch_Rate_Card_VTrans Rate  
  inner join EC_Master_Branch Branch  
  ON Rate.Branch_ID = Branch.Branch_ID  
  inner join EC_Opr_Vtrans_Gc GC  
  ON Rate.Branch_ID = GC.Delivery_Branch_Id  
  
  WHERE Rate.Branch_ID = @Branch_ID and GC_ID = @GC_ID  
 END  
ELSE  
 BEGIN  
  
  if(@Document_ID = 3)  
   begin  
  
   SELECT @Date = MR_Date FROM dbo.FA_Opr_MR WHERE MR_ID = @MR_ID    
  
   EXEC [dbo].[Ec_Get_Service_Tax_Percent]  
     @date = @Date,  
     @Service_Tax_Percent = @Service_Tax_Percent OUTPUT  
  
    SELECT @GC_ID = GC_ID FROM  FA_Opr_MR WHERE MR_ID = @MR_ID  
  
    SELECT distinct MR.MR_No_For_Print,MR.MR_Date  
    ,MR.MR_Branch_ID,MR.GC_ID,MR.GC_Sub_Total,MR.Octroi_Form_Charges,MR.Octroi_Service_Charges  
    ,MR.GI_Charges,MR.Detention_Charges,MR.Hamali_Charges,MR.Local_Charges,MR.Demurage_Days  
    ,MR.Demurage_Charges,MR.Additional_Charges,MR.Additional_Charges_Remarks  
    ,MR.Discount_Amount,MR.Tax_Abatement,MR.Amount_Taxable,GC.Service_Tax_Percent  
    ,MR.Service_Tax_Amount,MR.Rebooked_Charges,MR.Octroi_Amount,MR.Octroi_Form_Type_ID  
    ,MR.Octroi_Paid_By_ID,MR.Total_MR_Amount,MR.Std_Detention_Charges,MR.Discount_Amount_Remarks  
    ,MR.Std_Local_Charges,MR.Cash_Amount,MR.Cash_Ledger_ID,MR.Cheque_Amount,Rate.Other_Charges,GC.Sub_Total,  
  
    GC.GC_ID,GC.GC_No_for_Print as GC_No,dbo.DateOnlyDisplay(GC.GC_Date) as GC_Date,Del_Branch.Branch_Name as Delivery_Branch  
    ,Bkg_Branch.Branch_Name as Booking_Branch,Consignor_Name,Consignee_Name,Btype.Booking_Type  
    ,Ptype.Payment_Type,Total_GC_Amount,GC.Service_Tax_Amount as Service_Tax,Del_Branch.Is_Octroi,  
    (case GC.Tax_Payable_By   
    when 1 then 'Consignor'  
    when 2 then 'Consignee'  
    when 3 then 'Transporter' end) Tax_Payable_By,  
    MR.Std_Octroi_Form_Charges,MR.Std_Octroi_Service_Charges,MR.Std_GI_Charges,MR.Std_Hamali_Charges,  
    MR.Std_Demurage_Charges, 
    Debit_To_Ledger_ID as Ledger_Id,Ledger_Name,
    MR.billing_branch_id as Branch_Id,DebiBranch.Branch_Name,
     Recd_by,     
    Rate.Dly_Oct_Form_Chg_Discount_Percent,Rate.Dly_Oct_Service_Chg_Discount_Percent,Rate.Dly_GI_Chg_Discount_Percent  
    ,Rate.Dly_Hamali_Chg_Discount_Percent,Rate.Dly_Demurrage_Chg_Discount_Percent,--GC.Delivery_MR_ID,  
    (case when GC.Delivery_MR_ID <> @MR_ID then 0 else 1 end)  as Is_MR_FirstTime,  
    (select top 1 document_date as Del_Date from EC_Opr_VTrans_GC_articles  
    where gc_id = @GC_ID  
    and current_branch_id = @Branch_ID  
    and status_id = 200  
    and is_cancelled = 0  
    order by article_id desc) as Del_Date,isnull(MR.Dly_Commision,0) as Dly_Commision  
  
    FROM [dbo].[FA_Opr_MR] MR  
    INNER JOIN EC_Opr_VTrans_GC GC   
    ON MR.GC_ID = GC.GC_Id  
    INNER JOIN ec_master_branch Bkg_Branch  
    ON GC.From_Branch_ID = Bkg_Branch.Branch_Id  
    INNER JOIN ec_master_branch Del_Branch  
    ON GC.Delivery_Branch_Id = Del_Branch.Branch_Id  
    INNER JOIN EC_Master_Booking_Type Btype  
    ON GC.Booking_Type_Id = Btype.Booking_Type_Id  
    INNER JOIN EC_Master_Payment_Type Ptype  
    ON GC.Payment_Type_Id = Ptype.Payment_Type_Id  
    INNER JOIN EC_Master_Branch_Rate_Card_VTrans Rate  
    ON GC.Delivery_Branch_Id = Rate.Branch_ID 
    Left outer JOIN FA_Master_Ledger ledger  
    ON  MR.Debit_To_Ledger_ID = ledger.Ledger_Id 
     left outer JOIN EC_Master_Branch DebiBranch  
    ON  MR.billing_branch_id = DebiBranch.Branch_ID    
  
    WHERE MR.MR_ID = @MR_ID  
   end  
  else if(@Document_ID = 8)  
   begin  
    SELECT @GC_ID = GC_ID FROM  FA_Opr_Credit_Memo WHERE Credit_Memo_ID = @MR_ID  
  
  
    SELECT @Date = Credit_Memo_Date FROM dbo.FA_Opr_Credit_Memo WHERE Credit_Memo_ID = @MR_ID    
  
    EXEC [dbo].[Ec_Get_Service_Tax_Percent]  
      @date = @Date,  
      @Service_Tax_Percent = @Service_Tax_Percent OUTPUT  
  
    SELECT distinct CreditMemo.Credit_Memo_No as MR_No,  
     CreditMemo.Credit_Memo_No_For_Print as MR_No_For_Print,  
     CreditMemo.Credit_Memo_Date as MR_Date,  
     GC.GC_No_for_Print as GC_No,dbo.DateOnlyDisplay(GC.GC_Date) as GC_Date,  
     Bkg_Branch.Branch_Name as Booking_Branch,  
     Del_Branch.Branch_Name as Delivery_Branch,  
     Consignor_Name,Consignee_Name,Btype.Booking_Type,Ptype.Payment_Type,  
     GC.Sub_Total,GC.Service_Tax_Amount as Service_Tax,  
     (case GC.Tax_Payable_By   
     when 1 then 'Consignor'  
     when 2 then 'Consignee'  
     when 3 then 'Transporter' end) Tax_Payable_By,  
     CreditMemo.Total_MR_Amount,Credit_Memo_for_ID,  
     Debit_To_Ledger_ID as Ledger_Id,Ledger_Name,  
     Debit_To_Branch_ID as Branch_Id,DebiBranch.Branch_Name,  
     CreditMemo.Octroi_Form_Charges,CreditMemo.Octroi_Service_Charges,  
     CreditMemo.GI_Charges,  
     CreditMemo.Detention_Charges,CreditMemo.Hamali_Charges,  
     CreditMemo.Local_Charges,CreditMemo.Demurage_Charges,  
     CreditMemo.Additional_Charges,CreditMemo.Discount_Amount,  
     CreditMemo.Discount_Amount_Remarks,  
     CreditMemo.Tax_Abatement,CreditMemo.Amount_Taxable,  
     CreditMemo.Service_Tax_Amount,GC.Service_Tax_Percent,  
     CreditMemo.Additional_Charges_Remarks,CreditMemo.Demurage_Days,      
     CreditMemo.Rebooked_Charges,CreditMemo.Octroi_Amount,  
     CreditMemo.Octroi_Form_Type_ID,CreditMemo.Octroi_Paid_By_ID,  
     CreditMemo.Std_Detention_Charges,  
     CreditMemo.Std_Local_Charges,  
     Rate.Other_Charges,CreditMemo.GC_Sub_Total,           
     Total_GC_Amount,Del_Branch.Is_Octroi,  
     Is_Credit_For_Consignee,  
     CreditMemo.Std_Octroi_Form_Charges,CreditMemo.Std_Octroi_Service_Charges,  
     CreditMemo.Std_GI_Charges,CreditMemo.Std_Hamali_Charges,  
     CreditMemo.Std_Demurage_Charges,  
     Rate.Dly_Oct_Form_Chg_Discount_Percent,  
     Rate.Dly_Oct_Service_Chg_Discount_Percent,Rate.Dly_GI_Chg_Discount_Percent,  
     Rate.Dly_Hamali_Chg_Discount_Percent,Rate.Dly_Demurrage_Chg_Discount_Percent,  
     GC.Credit_Memo_Freight_ID,GC.Credit_Memo_Octroi_ID,  
     (case when GC.Credit_Memo_Freight_ID <> @MR_ID then 0 else 1 end)  as Is_MR_FirstTime,  
     (case when GC.Credit_Memo_Freight_ID <> @MR_ID then 0 else 1 end)  as Is_CreditMemo_Octroi_FirstTime,  
     (select top 1 document_date as Del_Date from EC_Opr_VTrans_GC_articles  
      where gc_id = @GC_ID  
      and current_branch_id = @Branch_ID  
      and status_id = 200  
      and is_cancelled = 0  
      order by article_id desc) as Del_Date,isnull(CreditMemo.Dly_Commision,0) as Dly_Commision  
  
    FROM FA_Opr_Credit_Memo CreditMemo  
     INNER JOIN EC_Opr_VTrans_GC GC   
    ON  CreditMemo.GC_ID = GC.GC_Id  
     INNER JOIN ec_master_branch Bkg_Branch  
    ON  GC.From_Branch_ID = Bkg_Branch.Branch_Id  
     INNER JOIN ec_master_branch Del_Branch  
    ON  GC.Delivery_Branch_Id = Del_Branch.Branch_Id  
     INNER JOIN EC_Master_Booking_Type Btype  
    ON  GC.Booking_Type_Id = Btype.Booking_Type_Id  
     INNER JOIN EC_Master_Payment_Type Ptype  
    ON  GC.Payment_Type_Id = Ptype.Payment_Type_Id  
     INNER JOIN EC_Master_Branch_Rate_Card_VTrans Rate  
    ON  GC.Delivery_Branch_Id = Rate.Branch_ID  
    Left outer JOIN FA_Master_Ledger ledger  
    ON  CreditMemo.Debit_To_Ledger_ID = ledger.Ledger_Id 
     left outer JOIN EC_Master_Branch DebiBranch  
    ON  CreditMemo.Debit_To_Branch_ID = DebiBranch.Branch_ID    
  
    WHERE CreditMemo.Credit_Memo_ID = @MR_ID  
   end  
  
 END  
  
  
SELECT  GC.Payment_Type_Id,GC.Booking_Type_Id  
,cast((GC.Charged_Weight/(select Standard_Freight_Rate_Per   
       from dbo.EC_Master_Company_Parameters))   
       as numeric(18,2)) as Charged_Weight   
,dbo.Is_Commodity_Tax_Applicable_For_GC(GC.gc_id) as Is_Service_Tax_Applicable,  
Oct_Form_Type,OctType.Oct_Type as Oct_Type,  
dbo.DateOnlyDisplay(isnull(oct_details.Bill_Date,getdate())) as Oct_Bill_Date,  
isnull(oct_details.Oct_Receipt_No,'') as Oct_Receipt_No,  
isnull(oct_details.Oct_Amount,0) as Oct_Amount,  
Sub_Total,Advance_Amount,Total_GC_Amount,GC.Oct_Type_Id,  
(CASE WHEN GC.Is_Consignee_Regular_Client = 1  
THEN isnull(CR.Is_Service_Tax_Applicable,0)  
ELSE CVT.Is_Service_Tax_Applicable END) as Is_Consignee_Service_Tax_Applicable,  
isnull(OFT.Octroi_Form_Type_ID,0) as Octroi_Form_Type_ID,OFT.Octroi_Form_Type  
,isnull(OPB.Octroi_Paid_By_ID,0) as Octroi_Paid_By_ID,OPB.Octroi_Paid_By  
,isnull(OPB.To_Be_Added_In_MR,0) as To_Be_Added_In_MR  
,isnull(GC.Is_Oct_Recovered_From_Consignee,0) as Is_Oct_Recovered_From_Consignee,  
GC.Service_Tax_On_Advance  
FROM EC_Opr_VTrans_GC GC   
LEFT OUTER JOIN EC_Master_Client_Regular CR  
ON GC.Consignee_Client_ID = CR.Client_ID  
LEFT OUTER JOIN EC_Master_Client_VTrans CVT  
ON GC.Consignee_Client_ID = CVT.Client_ID  
left JOIN VW_MR_Delivery_Octroi_Details oct_details  
on gc.gc_id = oct_details.gc_id  
LEFT OUTER JOIN EC_Master_Octroi_Type OctType  
ON gc.Oct_Type_Id = OctType.Oct_Type_Id  
LEFT OUTER JOIN Ec_Master_Octroi_Form_Type OFT  
ON isnull(oct_details.Octroi_Form_Type_ID,0) = OFT.Octroi_Form_Type_ID  
LEFT OUTER JOIN EC_Master_Octroi_Paid_By OPB  
ON isnull(oct_details.Octroi_Paid_By_ID,0) = OPB.Octroi_Paid_By_ID  
WHERE GC.GC_ID = @GC_ID   
END  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



    
 -- =============================================   
 -- Author:  <Dinesh>   
 -- Create date: <18-11-2008>   
 -- Description: <To Get Contracts  Charges Details  >   
 -- ============================================= 
     
     
 CREATE proc [dbo].[EC_Opr_GC_Get_Contract_Details]
  @Contract_Id int =0
 AS
  
 BEGIN
  
 SET NOCOUNT ON;

	select
		EC_Opr_Contract_Master.*,
		------------------------------------------------
		EC_Master_Branch.Branch_Name as Billing_Branch_Name,
		EC_Master_Client_VTrans.Client_Name as Billing_Client_Name,  
		freight_Unit,freight_Basis,Freight_Sub_Unit,
		------------------------------------------------
		EC_Master_Contract_Range.From_Unit as From_Range,
		EC_Master_Contract_Range.To_Unit as To_Range, 
		------------------------------------------------
		EC_Opr_Contract_Freight_Rate_Details.*,
		------------------------------------------------
		EC_Opr_Contract_Other_Charges_Details.*
	from
		EC_Opr_Contract_Master left join EC_Master_Branch on
		EC_Opr_Contract_Master.Billing_Branch_ID = EC_Master_Branch.Branch_ID

		inner join  EC_Master_Client_VTrans on
		EC_Master_Client_VTrans.Client_ID = EC_Opr_Contract_Master.Billing_Client_ID

		inner join EC_Master_Contract_Freight_Unit on 
		EC_Master_Contract_Freight_Unit.freight_Unit_id = EC_Opr_Contract_Master.freight_Unit_id 

		inner join EC_Master_Contract_Freight_Basis on
		EC_Master_Contract_Freight_Basis.freight_Basis_id = EC_Opr_Contract_Master.freight_Basis_id

		inner join EC_Master_Contract_Freight_Sub_Unit on
		EC_Master_Contract_Freight_Sub_Unit.Freight_Sub_Unit_ID = EC_Opr_Contract_Master.Freight_Sub_Unit_ID

		inner join EC_Opr_Contract_Freight_Rate_Details on
		EC_Opr_Contract_Freight_Rate_Details.Contract_id = EC_Opr_Contract_Master.Contract_id 

		left join EC_Master_Contract_Range on
		EC_Opr_Contract_Freight_Rate_Details.Freight_Unit_Item_ID = EC_Master_Contract_Range.Range_ID

		inner join EC_Opr_Contract_Other_Charges_Details on
		EC_Opr_Contract_Other_Charges_Details.Contract_id = EC_Opr_Contract_Master.Contract_id 
		and EC_Opr_Contract_Freight_Rate_Details.Contract_Freight_Rate_Details_ID = EC_Opr_Contract_Other_Charges_Details.Contract_Freight_Rate_Details_ID 
	where
		EC_Opr_Contract_Master.Contract_ID = @Contract_ID
 
 end 










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
      
      
      
      
-- =============================================      
-- Author:  <Shiv Kumar Mishra>      
-- Create date: Oct 10 2008  6:52PM      
-- Description: <Read Values  Branch Rate Parameter>      
-- =============================================      
      
CREATE Proc [dbo].[EC_Master_Branch_Rate_Parameters_ReadValues]      
@Branch_ID int      
      
As      
      
select EC_Master_Branch_Rate_Card_VTrans.Branch_Id,Branch_Name,      
   Min_Charge_Wt,Bilty_Charges,Min_FOV,FOV_Percent,      
   To_Pay_Charges,DACC_Charges,Min_Hamali,Hamali_Per_Kg,      
   Door_Delivery_Charges,CFT_Factor,Octroi_Form_Charges,Octroi_Service_Charges,      
   Demurrage_Days,Demurrage_Rate_Kg_Per_Day,GI_Charges,Service_Tax_Percent,      
   First_Notice_Days,Second_Notice_Days,Third_Notice_Days,      
   Cash_Limit,Bank_Limit,Delivery_Commission,Bkg_Freight_Chg_Discount_Percent,    
   Bkg_Hamali_Chg_Discount_Percent,Bkg_Fov_Chg_Discount_Percent,    
   Bkg_TP_Chg_Discount_Percent,Bkg_DD_Chg_Discount_Percent,    
   Dly_Oct_Form_Chg_Discount_Percent,Dly_Oct_Service_Chg_Discount_Percent,    
   Dly_GI_Chg_Discount_Percent,Dly_Hamali_Chg_Discount_Percent,    
   Dly_Demurrage_Chg_Discount_Percent,Hamali_Per_Article,FOV_Rate,  
   Invoice_Rate,Invoice_Per_How_Many_Rs,Max_Bilty_Charges      
from EC_Master_Branch_Rate_Card_VTrans inner join EC_Master_Branch      
on  EC_Master_Branch_Rate_Card_VTrans.Branch_ID=EC_Master_Branch.Branch_ID      
where EC_Master_Branch_Rate_Card_VTrans.Branch_ID = @Branch_ID      
      


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



        
-- =============================================        
-- Author:  <Lad Ashish>        
-- Create date: <21th October 2008>        
-- Description: <Fill  Values For Printing Stationary Operation Form>        
-- =============================================        
        
CREATE PROCEDURE [dbo].[EC_Opr_PrintingStationary_FillValues]         
AS        
BEGIN           
        
--Select Document_Id,Document_Name from EC_Master_Document    
declare @IsMemoSeriesRequired bit
declare @IsLHPOSeriesRequired bit
declare @IsHOBSeriesRequired bit
declare @IsTransBillSeriesRequired bit

set @IsMemoSeriesRequired = 0
set @IsLHPOSeriesRequired = 0
set @IsHOBSeriesRequired=0 
set @IsTransBillSeriesRequired=0 

select @IsMemoSeriesRequired = Is_Memo_Series_Required ,
@IsLHPOSeriesRequired = Is_LHPO_Series_Required,
@IsHOBSeriesRequired = Is_HOB_Series_Req ,
@IsTransBillSeriesRequired = Is_Transport_Bill_Series_Required from 
EC_Master_Company_Parameters

declare @Document_Master table (Document_Id int,Document_Name varchar(100))

insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (1,2,3,6,8)

if @IsMemoSeriesRequired = 1
insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (4)

if @IsLHPOSeriesRequired = 1
insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (5)

if @IsTransBillSeriesRequired = 1  
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (7)  

if @IsHOBSeriesRequired=1
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (15)   


select * From @Document_Master

select Series_Generation_ID,Start_No,End_No,Balance from EC_Opr_Document_Series_Generation  
Where Series_Generation_ID=-1  
   
End        
        
        
        




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:  <Pankaj thapliyal>
-- Create date: <20-oct-2008>
-- Description: <checks wheter a particular document can be edited or not document or not>
-- =============================================

--select dbo.Ec_Opr_Can_Edit_Cancel ('AUS_OA',47)

CREATE Function [dbo].[Ec_Opr_Can_Edit_Cancel]
(
@Document_Type varchar(20),
@Document_ID int
)

RETURNS bit
AS  

BEGIN  

declare @Temp_Article
table (Sr_No int identity, GC_ID int,New_Article_ID int,Found_ID int,Articles int)

if @Document_Type = 'GC'
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,0,0
	from ec_opr_vtrans_gc_articles
	where GC_ID = @Document_ID and status_id in(0,9999) 
	end
else if @Document_Type = 'AT'
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,0,0
	from EC_Opr_VTrans_Pickup_Sheet_Details
	where Pickup_Sheet_Id = @Document_ID
	end
else if @Document_Type = 'ALS'
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,0,0
	from EC_Opr_VTrans_ALS_Details
	where ALS_ID = @Document_ID
	end
else if @Document_Type = 'MEMO'
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,0,0
	from EC_Opr_VTrans_Memo_Details
	where Memo_ID = @Document_ID
	end
else if @Document_Type = 'LHPO'
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,0,0
	from EC_Opr_VTrans_LHPO_GC_Details
	where LHPO_ID = @Document_ID
	end
else if @Document_Type = 'TAS'
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,0,0
	from EC_Opr_VTrans_TAS_Details
	where TAS_ID = @Document_ID
	end
else if @Document_Type in ('AUS','AUS_OA')
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,Found_ID,Received_Articles
	from EC_Opr_VTrans_Actual_Unloading_Sheet_Details
	where Actual_Unloading_Sheet_ID = @Document_ID
	end
--else if @Document_Type = 'AUS_OA'
-- begin
--  insert into @Temp_Article
--  select GC_ID,Article_Id,Found_ID,Loaded_Articles
--  from EC_Opr_VTrans_Actual_Unloading_Sheet_Details
--  where Actual_Unloading_Sheet_ID = @Document_ID
-- end

else if @Document_Type = 'PDS'
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,0,0
	from EC_Opr_VTrans_Pre_Delivery_Sheet_Details
	where PDS_ID = @Document_ID
	end
else if @Document_Type in ('GDC','DDC','DD')
	begin
	insert into @Temp_Article
	select GC_ID,Article_Id,Found_ID,0
	from EC_Opr_VTrans_Door_Delivery_Confirmation_Details
	where DDC_ID = @Document_ID
	end

Declare @Can_Edit_Cancel as bit
declare @GC_ID int
declare @New_Article_ID int
declare @Found_ID int
declare @Received_Articles int
declare @Sr_No int
declare @Total_Count int
declare @Is_dly_Mr_Req_Before_Godown_Dly bit
declare @gc_dly_type_id int

set @Can_Edit_Cancel = 1
set @GC_ID = 0
set @New_Article_ID = 0
set @Found_ID = 0
set @Received_Articles = 0
set @Sr_No = 1
set @Total_Count = 0
set @Is_dly_Mr_Req_Before_Godown_Dly = 0
set @gc_dly_type_id = 0

select @Is_dly_Mr_Req_Before_Godown_Dly = Is_dly_Mr_Req_Before_Godown_Dly
from ec_master_company_parameters

select @Total_Count = count(*) from @Temp_Article

while @Sr_No <= @Total_Count
	begin
		select @GC_ID = GC_ID,@New_Article_ID = New_Article_ID,@Found_ID = Found_ID,
		@Received_Articles = Articles from @Temp_Article
		where Sr_No = @Sr_no

		select @gc_dly_type_id = delivery_type_id from EC_Opr_VTrans_GC
		where gc_id = @gc_id

		if @Document_Type in ('AUS','AUS_OA')
			select @Can_Edit_Cancel = 0 from ec_opr_vtrans_gc_articles
			where Article_ID = @New_Article_ID
			and (Articles < @Received_Articles or Document_ID <> @Document_ID)
		else if @Document_Type <> 'GC'   
			select @Can_Edit_Cancel = 0 from ec_opr_vtrans_gc_articles
			where Article_ID = @New_Article_ID
			and status_id not in (300)
			and Articles <> Actual_Articles

		if @Document_Type in ('GDC','DDC','DD')
			begin  
				if @Document_Type in ('DDC')  
					begin
						select @Can_Edit_Cancel = 0 from ec_opr_vtrans_gc_articles
						where gc_id = @gc_id and Article_ID > @New_Article_ID
					end
				else if @Document_Type in ('GDC') and @Is_dly_Mr_Req_Before_Godown_Dly = 0
					begin
						select @Can_Edit_Cancel = 0 from EC_Opr_VTrans_GC  
						where gc_id = @gc_id and (Delivery_MR_ID > 0 or Credit_Memo_Freight_ID > 0 or Credit_Memo_Octroi_ID > 0)
					end

				select @Can_Edit_Cancel = 0 from EC_Opr_VTrans_POD_Cover_Generation a
				inner join EC_Opr_VTrans_POD_Cover_Generation_Details b
				on a.Cover_ID = b.Cover_ID
				where b.GC_ID = @gc_id and a.is_cancelled = 0

				select @Can_Edit_Cancel = 0 from EC_Opr_VTrans_POD_Cover_Received a
				inner join EC_Opr_VTrans_POD_Cover_Received_Details b
				on a.Cover_Received_ID = b.Cover_Received_ID
				where b.GC_ID = @gc_id and a.is_cancelled = 0
			end--if @Document_Type in ('GDC','DDC','DD')
		else if @Document_Type in ('LHPO')
			begin  
				select @Can_Edit_Cancel = 0 from EC_Opr_VTrans_LHPO_Attached_Loading_Branches
				where LHPO_ID = @Document_ID and Attached_LHPO_ID > 0  

				select @Can_Edit_Cancel = 0 from EC_Opr_VTrans_LHPO_ATH_Payable_Details  
				where lhpo_id = @Document_ID and ath_id > 0  

				select @Can_Edit_Cancel = 0 from EC_Opr_VTrans_LHPO  
				where lhpo_id = @Document_ID and bth_id > 0  
			end  --else if @Document_Type in ('LHPO')
		else if @Document_Type = 'GC'   
			begin 
				declare @Is_Auto_Booking_MR_For_Paid_Booking bit

				select @Is_Auto_Booking_MR_For_Paid_Booking = Is_Auto_Booking_MR_For_Paid_Booking 
				from dbo.EC_Master_Company_GC_Parameter

				select @Can_Edit_Cancel = 0 
				from ec_opr_vtrans_gc_articles inner join ec_opr_vtrans_gc 
				on ec_opr_vtrans_gc_articles.gc_id = ec_opr_vtrans_gc.gc_id		 
				where ec_opr_vtrans_gc_articles.Article_ID = @New_Article_ID
				and ec_opr_vtrans_gc_articles.Articles <> ec_opr_vtrans_gc_articles.Actual_Articles
				and ec_opr_vtrans_gc_articles.status_id not in (300)
				and ec_opr_vtrans_gc.Is_Opening_GC = 0	

				select @Can_Edit_Cancel = 0   
				from ec_opr_vtrans_gc GC
				inner join ec_opr_vtrans_gc_articles   
				on ec_opr_vtrans_gc_articles.GC_Id = GC.GC_Id   
				and ec_opr_vtrans_gc_articles.status_id in ( 0,80 ) 
				and Is_Opening_Gc = 0
				where GC.GC_Id = @GC_Id
				and
				((GC.GC_Id  in ( select Attached_GC_Id from ec_opr_vtrans_gc Attached_Gc 
				where Attached_Gc.Is_Cancelled = 0 and Attached_Gc.Is_Attached = 1)  
				or ( Booking_MR_ID > 0 and @Is_Auto_Booking_MR_For_Paid_Booking = 0)
				or GC.Is_Billed = 1))

				declare @booking_branch_id int
				declare @Is_Opening_Gc bit
				select @booking_branch_id = from_branch_id,@Is_Opening_Gc = Is_Opening_Gc 
				from ec_opr_vtrans_gc
				where gc_id = @GC_Id

				if @Is_Opening_Gc = 1
					begin
						select @Can_Edit_Cancel = 0 from ec_opr_vtrans_gc_articles
						where gc_id = @gc_id -- and current_branch_id = @booking_branch_id
						and status_id = 60 and articles <> actual_articles
					end
		end--else if @Document_Type = 'GC'

	if @Found_ID > 0 set @Can_Edit_Cancel = 0

	if @Can_Edit_Cancel = 0 or @Found_ID > 0
		break

	set @Sr_No = @Sr_No + 1
end--while @Sr_No <= @Total_Count


if @Document_Type = 'Oct_Updt' -- for cancel
	begin
		select @Can_Edit_Cancel = 0 from EC_Opr_Octroi_Update_Details
		where Octroi_Update_Id = @Document_ID and gc_id  in 
		(select gc.gc_id from ec_opr_vtrans_gc gc
		inner join ec_opr_vtrans_gc_articles gc_articles
		on gc.gc_id = gc_articles.gc_id
		where (gc_articles.status_id in (150,200))
		and gc_articles.is_cancelled = 0
		and gc.is_cancelled = 0)

		select @Can_Edit_Cancel = 0 from EC_Opr_Octroi_Update_Details
		where Octroi_Update_Id = @Document_ID and gc_id in
		(select gc_id from EC_Opr_VTrans_GC_Billing_Details where bill_octroi_id > 0)
	end--if @Document_Type = 'Oct_Updt' -- octroi_update
else if @Document_Type = 'Oct_Updt_Edit' -- for edit
	begin
		declare @count_Dly_Mr_Or_Credit_Memo_Perpared int
		declare @count_Tot_GC_in_Oct_update int

		select @count_Tot_GC_in_Oct_update = count(*) from
		ec_opr_vtrans_gc gc inner join EC_Opr_Octroi_Update_Details oct_upt_det
		on gc.gc_id = oct_upt_det.gc_id
		where oct_upt_det.Octroi_Update_Id = @Document_ID

		select @count_Dly_Mr_Or_Credit_Memo_Perpared = count(*) from
		ec_opr_vtrans_gc gc inner join EC_Opr_Octroi_Update_Details oct_upt_det
		on gc.gc_id = oct_upt_det.gc_id
		where oct_upt_det.Octroi_Update_Id = @Document_ID
		and (Credit_Memo_Octroi_ID > 0 or Delivery_MR_ID > 0)

		if @count_Tot_GC_in_Oct_update = @count_Dly_Mr_Or_Credit_Memo_Perpared
		  set @Can_Edit_Cancel = 0
	end
else if @Document_Type = 'Booking_MR'
	begin
		select @Can_Edit_Cancel = 0 from FA_Opr_MR
		inner join ec_opr_vtrans_gc on
		ec_opr_vtrans_gc.gc_id = FA_Opr_MR.gc_id
		where ( MR_ID = @Document_ID )--and Is_System_Generated_MR = 1)
		and ec_opr_vtrans_gc.is_cancelled = 1  
	end--else if @Document_Type = 'Booking_MR'
else if @Document_Type = 'Dly_MR'
	begin
		select @GC_ID = gc_id from FA_Opr_MR where mr_id = @Document_ID

		select @gc_dly_type_id = delivery_type_id from EC_Opr_VTrans_GC
		where gc_id = @gc_id

		if @Is_dly_Mr_Req_Before_Godown_Dly = 1
			select @Can_Edit_Cancel = 0 from ec_opr_vtrans_gc_articles
			where gc_id = @gc_id and status_id = 200 and is_cancelled = 0

	end--else if @Document_Type = 'Booking_MR'
RETURN @Can_Edit_Cancel

END


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
CREATE proc [dbo].[EC_Opr_AUS_Other_Agency_FillValues]  
as
BEGIN  

	select  R.Reason_Id,R.Reason 
	from ec_master_reason as R  
		inner join  ec_master_reason_process as RP ON  
		R.Reason_Id=RP.Reason_Id  
		inner join ec_master_process as P ON  
		RP.Process_Id=P.Process_Id   
	where P.Process_Id=30 

----------------------------------------------------------------
	select Received_Condition_ID,Received_Condition
	from EC_Master_Unloading_Condition
	where Is_Active=1		

----------------------------------------------------------------

	select branch_id as Agency_Id,Branch_Name as Agency_Name
	from EC_Master_branch
	where Agency_Ledger_Id > 0	and Is_Active=1
	order by Branch_Name 
END


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 19 Jan 2009 >
-- Description:	<EC_FA_Opr_BillAccountEffects>
-- =============================================
--Declare @Error_Code int,@ERROR_DESC AS VARCHAR(4000); EXEC EC_FA_Opr_GcTransBillAccountEffects 8,'BO',1,1,17,1,@Error_Code,@ERROR_DESC; print @ERROR_DESC
CREATE Proc [dbo].[EC_FA_Opr_GcTransBillAccountEffects]
(
@Year_Code int,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@Bill_ID int,
@User_Id int,
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)
As
BEGIN

--BEGIN TRY
--BEGIN TRAN


--FA_Opr_Bill			
--FA_Opr_Bill_GC_Details			
--FA_Opr_Bill_Other_Charges_Details			


SET NOCOUNT ON;
set @Error_Code = 0;
set @ERROR_DESC = '';

Declare @Document_ID intset @Document_ID =7------Reverse Account Effect--------EXEC	[dbo].[EC_FA_Opr_ReverseAccountEffects]
		@Document_Id = @Document_ID,
		@Transaction_ID = @Bill_ID
------------------------------------FA_Master_GC_Accounting_ParametersDeclare 
------Bill Values------@Bill_Type_ID int,
@Bill_Branch_ID int,
@Bill_Date DateTime,
@Bill_No Varchar(50),
@Client_ID int,
@Bill_Sub_Total numeric(18,2),
@Bill_Other_Charges_Total numeric(18,2),
@Bill_Service_Tax_Amount numeric(18,2),
@Bill_Total_Amount numeric(18,2),
@Bill_Octroi_Amount numeric(18,2),----FA Bill Ledgers-----@GenVoucherId int,@Voucher_Type_Id intselect @Bill_Type_ID=Bill_Type_ID,
@Bill_Branch_ID=Bill_Main_ID,
@Bill_Date=Bill_Date,
@Bill_No=Bill_No_For_Print,
@Client_ID=Client_ID,
@Bill_Sub_Total=Isnull(Bill_Sub_Total,0),
@Bill_Other_Charges_Total=Isnull(Bill_Other_Charges_Total,0),
@Bill_Service_Tax_Amount=Isnull(Bill_Service_Tax_Amount,0),
@Bill_Total_Amount=Isnull(Bill_Total_Amount,0),
@Bill_Octroi_Amount=Isnull(Bill_Octroi_Amount,0)From dbo.FA_Opr_Billwhere Bill_ID = @Bill_ID--FA_Opr_Bill			
--FA_Opr_Bill_GC_Details			
--FA_Opr_Bill_Other_Charges_Details			
Declare 
        @GC_Booking_Branch_Ledger int,@Billing_Branch_Ledger int,        @GC_Billing_Branch_VoucherXML XML,@GC_Booking_Branch_VoucherXML XML,        @CreditDays int,@Bank_Name varchar(20),@Cheque_No int,@Cheque_Date DateTime,		@Client_Ledger int,@GC_Billing_Branch_BillXML Xml,@Is_Mantain_Bill bit,@Gc_No varchar(20),@Gc_No_Narration varchar(max)--        @TruckOrBrokerTDS_VoucherXML Xml,@TotalTruckHire numeric(18,2)		Set @GC_Billing_Branch_VoucherXML=''		Set @GC_Booking_Branch_VoucherXML=''		set @GC_Billing_Branch_BillXML=''		set @Gc_No_Narration = ''		Set @Bank_Name=''		Set @Cheque_No=0		Set @Cheque_Date=Getdate()		Select @Billing_Branch_Ledger=dbo.GetBranchLedger(@Bill_Branch_ID)		Select @Client_Ledger=dbo.GetClientLedger(@Client_ID)		Select @CreditDays=Default_Credit_Period,@Is_Mantain_Bill=Maintain_Bill_By_Bill From FA_Master_Ledger Where Ledger_Id=@Client_LedgerDeclare @Temp_GCTable Table(Sr_No int identity,GC_Payment_Id int,GC_Booking_Mode_Id int,GC_Booking_Branch_Id int,GC_Sub_Total numeric(18,2),Other_Charges numeric(18,2),Service_Tax numeric(18,2),Octroi_Amount numeric(18,2),Total_Amount numeric(18,2),Gc_No varchar(20))insert into @Temp_GCTable(GC_Payment_Id,GC_Booking_Mode_Id,GC_Booking_Branch_Id,GC_Sub_Total,Other_Charges,Service_Tax,Octroi_Amount,Total_Amount,Gc_No)Select  OprGc.Payment_Type_Id,OprGc.Booking_Type_Id,OprGc.From_Branch_ID,        Sum(BillGc.GC_Sub_Total),Sum(BillGc.Other_Charges),Sum(case when OprGc.Tax_Payable_By=3 then BillGc.GC_Service_Tax_Amount else 0 end),Sum(BillGc.Octroi_Amount),        Sum(BillGc.Total_Amount),OprGc.GC_No_For_PrintFrom FA_Opr_Bill_GC_Details as [BillGc] Inner Join EC_Opr_Vtrans_GC as [OprGc] ON  BillGc.GC_Id=OprGc.Gc_Idwhere Bill_ID=@Bill_IDGroup by OprGc.Payment_Type_Id,OprGc.Booking_Type_Id,OprGc.From_Branch_ID,OprGc.GC_No_For_Print--select * from @Temp_BillGCTableDeclare @Count int,@Sr_No int,@GC_Booking_Branch_Id int,@GC_Payment_Id int,@GC_Booking_Mode_Id int,        @GC_Sub_Total numeric(18,2),@Other_Charges numeric(18,2),@Service_Tax numeric(18,2),        @Octroi_Amount numeric(18,2),@Total_Amount numeric(18,2),@Octroi_Payble_Ledger int,@Service_Tax_Ledger int,		@Total_GC_Amount numeric(18,2),@Booking_Income_Legder int,@Other_Charge_Ledger int      select @Count=Count(*) From @Temp_GCTableSelect @Sr_No=1----------GC_Booking_Branch_Ledger DR-------------------
    set @GC_Billing_Branch_VoucherXML=

	dbo.GetVoucherDetailsXML(@Client_Ledger,@Bill_Total_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)	if(@Is_Mantain_Bill=1)---	set @GC_Billing_Branch_BillXML=dbo.GetVoucherBillXML(@Client_Ledger,0,@Bill_No,1,@CreditDays,-1*@Bill_Total_Amount,@Bill_Date)
--------------------------------------------------while @Sr_No<=@CountBegin	select @GC_Payment_Id=GC_Payment_Id,@GC_Booking_Mode_Id=GC_Booking_Mode_Id,           @GC_Booking_Branch_Id=GC_Booking_Branch_Id,@GC_Sub_Total=GC_Sub_Total,		   @Other_Charges=Other_Charges,@Service_Tax=Service_Tax,@Octroi_Amount=Octroi_Amount,		   @Total_Amount=Total_Amount,@Gc_No=Gc_No    from @Temp_GCTable	where Sr_No=@Sr_No	select @GC_Booking_Branch_Ledger=dbo.GetBranchLedger(@GC_Booking_Branch_Id)    select @Booking_Income_Legder = dbo.Get_Ledger_Id1(@Division_Id,1001,@GC_Booking_Mode_Id,@GC_Payment_Id)    select @Octroi_Payble_Ledger = dbo.Get_Ledger_Id1(@Division_Id,4003,@GC_Booking_Mode_Id,0)	select @Service_Tax_Ledger = dbo.Get_Ledger_Id1(@Division_Id,1003,@GC_Booking_Mode_Id,@GC_Payment_Id)	select @Other_Charge_Ledger = dbo.Get_Ledger_Id1(@Division_Id,1004,@GC_Booking_Mode_Id,@GC_Payment_Id)	select @Total_GC_Amount = @GC_Sub_Total + @Other_Chargesselect @GC_Booking_Branch_Ledger,@Octroi_Payble_Ledger,@Service_Tax_Ledger------------------------------------------------------------------------------------------GC_Booking_Branch_Ledger CR-------------------
  if(@GC_Booking_Branch_Id<>@Bill_Branch_Id)  Begin    set @GC_Billing_Branch_VoucherXML=Cast(@GC_Billing_Branch_VoucherXML as Varchar(max))
	+
	dbo.GetVoucherDetailsXML(@GC_Booking_Branch_Ledger,0,@Total_GC_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)  End Else	Begin		set @GC_Billing_Branch_VoucherXML=Cast(@GC_Billing_Branch_VoucherXML as Varchar(max))
		+
		dbo.GetVoucherDetailsXML(@Booking_Income_Legder,0,				case when (@Booking_Income_Legder = @Other_Charge_Ledger) or (@Other_Charge_Ledger = 0)								 then  @Total_GC_Amount else @GC_Sub_Total end,						@Bank_Name,@Cheque_No,@Cheque_Date)		+
		dbo.GetVoucherDetailsXML(case when @Booking_Income_Legder = @Other_Charge_Ledger then 0 else @Other_Charge_Ledger end							,0,@Other_Charges,@Bank_Name,@Cheque_No,@Cheque_Date)	End------------------------------------------------------------Octroi_Payble_Ledger CR-------------------
    set @GC_Billing_Branch_VoucherXML=Cast(@GC_Billing_Branch_VoucherXML as Varchar(max))
	+
	dbo.GetVoucherDetailsXML(@Octroi_Payble_Ledger,0,@Octroi_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)------------------------------------------------------------Service_Tax_Ledger CR-------------------
    set @GC_Billing_Branch_VoucherXML=Cast(@GC_Billing_Branch_VoucherXML as Varchar(max))
	+
	dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax,@Bank_Name,@Cheque_No,@Cheque_Date)-------------------------------------------------------------------------------------------------------------------------------------------------------------EACH GC BOOKING BRANCH--------------------------------------------- Billing_Branch_Ledger DR--------------
    set @GC_Booking_Branch_VoucherXML=Cast(@GC_Booking_Branch_VoucherXML as Varchar(max))
	+
	dbo.GetVoucherDetailsXML(@Billing_Branch_Ledger,@Total_GC_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)----------------------------------------------------------- Booking_Income_Legder CR--------------
    set @GC_Booking_Branch_VoucherXML=Cast(@GC_Booking_Branch_VoucherXML as Varchar(max))
	+
	dbo.GetVoucherDetailsXML(@Booking_Income_Legder,0,							case when (@Booking_Income_Legder = @Other_Charge_Ledger) or (@Other_Charge_Ledger = 0)								 then  @Total_GC_Amount else @GC_Sub_Total end,							@Bank_Name,@Cheque_No,@Cheque_Date)	+
	dbo.GetVoucherDetailsXML(case when @Booking_Income_Legder = @Other_Charge_Ledger then 0 else @Other_Charge_Ledger end							,0,@Other_Charges,@Bank_Name,@Cheque_No,@Cheque_Date)-------------------------------------------------select @Booking_Income_Legder,@Billing_Branch_LedgerSet @GC_Booking_Branch_VoucherXML='<NewDataSet>'+cast(@GC_Booking_Branch_VoucherXML as Varchar(max))+'</NewDataSet>'
	Set @Voucher_Type_Id=36 --TBB BILLdeclare @narration varchar(max)set @narration = dbo.Get_Caption_Company_Parameter(1) +' BOOKING BRANCH BOOK,' + dbo.Get_Caption_Company_Parameter(1) + ' No :' + @Gc_Noselect @Gc_No_Narration = @Gc_No_Narration + @Gc_No + ','  if(@GC_Booking_Branch_Id<>@Bill_Branch_Id)  Begin	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @GC_Booking_Branch_Id,---GC BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@Bill_Date,
			@Ref_No = @Bill_No,
			@Ledger_Id =@Billing_Branch_Ledger,
			@Total_Debit = @Total_GC_Amount,
			@Total_Credit = @Total_GC_Amount,
			@Narration = @narration,
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @GC_Booking_Branch_VoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML ='<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@Bill_ID,@GenVoucherId
	End
--print cast(@GC_Booking_Branch_VoucherXML as varchar(4000))
---------------------------END EACH GC BOOKING BRANCH-----------------------------------Set @SR_No=@SR_No+1End--while @Sr_No<=@Count ---------BILLING BRANCH BOOK-----------------	Set @GC_Billing_Branch_VoucherXML='<NewDataSet>'+cast(@GC_Billing_Branch_VoucherXML as Varchar(max))+'</NewDataSet>'	Set @GC_Billing_Branch_BillXML='<NewDataSet>'+cast(@GC_Billing_Branch_BillXML as Varchar(max))+'</NewDataSet>'declare @narrationbilling varchar(max)select @narrationbilling = 'BILLING BRANCH BOOK,' + dbo.Get_Caption_Company_Parameter(1) + ' No :'+@Gc_No_Narration    Set @Voucher_Type_Id=36    ----TBB Bill	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Bill_Branch_Id,---BILLING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@Bill_Date,
			@Ref_No = @Bill_No,
			@Ledger_Id =@Client_Ledger,
			@Total_Debit = @Bill_Total_Amount,
			@Total_Credit = @Bill_Total_Amount,
			@Narration = @narrationbilling,
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @GC_Billing_Branch_VoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML =@GC_Billing_Branch_BillXML,
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@Bill_ID,@GenVoucherId


---------BILLING BRANCH BOOK-----------------
--print cast(@GC_Billing_Branch_VoucherXML as varchar(4000))--select @BookingBranch_Voucher_XML-----FA_Opr_Operational_Vouchers_Details----dbo.GetClientLedger()----dbo.GetFixedLedger()----dbo.GetOprLedger()----dbo.GetBranchLedger()----dbo.GetBranchCashLedger()----dbo.GetBranchToPayRecoveryLedger()----dbo.GetBranchBankLedger()select @Error_Code
--COMMIT TRAN
--END TRY
--BEGIN CATCH
-- ROLLBACK TRAN
-- SELECT @ERROR_CODE=ERROR_NUMBER()
-- SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
-- CAST(ERROR_MESSAGE() as VARCHAR(4000))
--select @ERROR_DESC
--END CATCH
END










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





--exec EC_Opr_Cancellation 0,'',115,58,'BO',14,'',1,'16 feb 09'

-- =============================================  
-- Author:  <Author,,Amol>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[EC_Opr_Cancellation]  
(  
@Error_Code int output,  
@Error_Desc varchar(4000) output,  
@Menu_Item_Id int,  
@Cancelled_Document_Id int,  
@Hierarchy_code varchar(5),
@Main_Id int,
@Reason varchar(250),  
@Cancelled_By int,  
@Cancellation_Date datetime  
)  
AS  
SET NOCOUNT ON;  
BEGIN  
   
set @Error_Code = 0;  
set @Error_Desc = '';   
  
  
BEGIN TRY  
BEGIN TRAN  

declare @document_id int
declare @Document_Type varchar(10)  
set @Document_Type = ''

if @Menu_Item_Id in (30,188,200,213,229) -- 200 for opening GC
	set @Document_Type = 'GC'  
if @Menu_Item_Id = 38  
	set @Document_Type = 'AT'  
else if @Menu_Item_Id = 51  
	set @Document_Type = 'MEMO'  
else if @Menu_Item_Id = 73  
	set @Document_Type = 'LHPO'  
else if @Menu_Item_Id = 158
	set @Document_Type = 'TAS'  
else if @Menu_Item_Id = 72  
	set @Document_Type = 'AUS'  
else if @Menu_Item_Id = 77  
	set @Document_Type = 'PDS'  
else if @Menu_Item_Id = 82  
	set @Document_Type = 'DDC'  
else if @Menu_Item_Id = 80  
	set @Document_Type = 'GDC'  
else if @Menu_Item_Id = 83  
	set @Document_Type = 'DD'  
else if @Menu_Item_Id = 108
	set @Document_Type = 'Dly_MR'
else if @Menu_Item_Id = 115
	set @Document_Type = 'AUS_OA'  
else if @Menu_Item_Id = 154
	set @Document_Type = 'ALS'  
else if @Menu_Item_Id = 163
	set @Document_Type = 'Oct_Updt'  

else if @Menu_Item_Id = 90 --'PODCG'
	set @Document_Type = 'PODCG'  
else if @Menu_Item_Id = 91 -- 'PODCR'
	set @Document_Type = 'PODCR'  
else if @Menu_Item_Id = 101 -- PODCD
	set @Document_Type = 'PODCD'  
else if @Menu_Item_Id = 109 -- PODCRDD
	set @Document_Type = 'PODCRDD'  

else if @Menu_Item_Id = 46 -- Series Generation
	set @Document_Type = 'SG'
else if @Menu_Item_Id = 48 -- Series Printing
	set @Document_Type = 'SP'
else if @Menu_Item_Id = 50 -- Series Allocation
	set @Document_Type = 'SA'


declare @Is_POD_Menuitem bit  
declare @Is_Series_Menuitem bit
declare @Can_Edit_Cancel bit  
  
set @Is_POD_Menuitem = 0  
set @Is_Series_Menuitem = 0  
set @Can_Edit_Cancel = 1  

if @Menu_Item_Id in (90,91,101,109)  
begin
	set @Is_POD_Menuitem = 1    
end

if @Menu_Item_Id in (46,48,50)  
begin
	set @Is_Series_Menuitem = 1  
end

if(@Is_POD_Menuitem = 0 and @Is_Series_Menuitem = 0)
	set @Can_Edit_Cancel = dbo.Ec_Opr_Can_Edit_Cancel(@Document_Type,@Cancelled_Document_Id) 
else if(@Is_Series_Menuitem = 1 and @Is_POD_Menuitem = 0)
	set @Can_Edit_Cancel = dbo.Ec_Opr_Can_Document_Allocation_Cancel(@Document_Type,@Cancelled_Document_Id)  
else if(@Is_POD_Menuitem = 1 and @Is_Series_Menuitem = 0)
	set @Can_Edit_Cancel = dbo.Ec_POD_Can_Edit_Cancel(@Document_Type,@Cancelled_Document_Id,@Hierarchy_code,@Main_ID)  



if @Can_Edit_Cancel = 1  
	begin  
		if @Is_POD_Menuitem = 0 and @Is_Series_Menuitem = 0
			begin  
				exec EC_Opr_Set_Article_Reverse_Effects @Document_Type,@Cancelled_Document_Id,1  
			end  

  --================================================================================================
		if @Menu_Item_Id in (30,188,200,213,229) --GC,IBA GC, Opening GC
			begin  

				declare @Is_Auto_Booking_MR_For_Paid_Booking bit

				select @Is_Auto_Booking_MR_For_Paid_Booking = Is_Auto_Booking_MR_For_Paid_Booking 
				from dbo.EC_Master_Company_GC_Parameter
		

				update EC_Opr_VTrans_GC set is_cancelled = 1  
				where GC_ID = @Cancelled_Document_Id

				update EC_Opr_VTrans_GC_articles set is_cancelled = 1  
				where GC_ID = @Cancelled_Document_Id 

				if @Is_Auto_Booking_MR_For_Paid_Booking = 1
				begin 
					update FA_Opr_MR set is_cancelled = 1
					where MR_ID = (select Booking_MR_ID from EC_Opr_VTrans_GC where gc_id = @Cancelled_Document_Id)
				end

				declare @Old_Total_Articles as int
				declare @Previous_Article_ID int
				declare @Previous_Document_ID int
				declare @is_rebooked bit
				declare @Is_Opening_Gc bit

				select @is_rebooked = is_rebooked,@Old_Total_Articles = Total_Articles,
				@Previous_Article_ID = Previous_Article_ID,
				@Previous_Document_ID = Previous_Document_ID,
				@Is_Opening_Gc = Is_Opening_Gc 
				from EC_Opr_VTrans_GC where GC_ID = @Cancelled_Document_Id

				if @is_rebooked = 1
				begin
					update EC_Opr_VTrans_GC_Articles
					set Articles =Articles  +  @Old_Total_Articles  
					where Article_ID = @Previous_Article_ID and GC_Id = @Previous_Document_ID
					and status_id = 60
				end
				
				if @Is_Opening_Gc = 1 -- updated By Dinesh 21 04 09 for opening GC
				begin		 
					update AUS set AUS.Is_Cancelled = 1					
					from EC_Opr_VTrans_Actual_Unloading_Sheet AUS  
					inner join EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUS_Detail
					on AUS.Actual_Unloading_Sheet_ID = AUS_Detail.Actual_Unloading_Sheet_ID 
					where AUS_Detail.GC_ID = @Cancelled_Document_Id and Is_Entry_By_Opening_GC = 1
				end
			end  
--================================================================================================
		else if @Menu_Item_Id = 38 --acount tranfer  
			begin  
				update EC_Opr_VTrans_Pickup_Sheet set is_cancelled = 1  
				where Pickup_Sheet_Id = @Cancelled_Document_Id  
			end  
--================================================================================================
		else if @Menu_Item_Id = 154 -- ALS  
			begin  
				update EC_Opr_VTrans_ALS set is_cancelled = 1  
				where ALS_Id = @Cancelled_Document_Id  
			end  
--================================================================================================
		else if @Menu_Item_Id = 51 -- memo  
			begin  
				update EC_Opr_VTrans_Memo set is_cancelled = 1  
				where Memo_Id = @Cancelled_Document_Id  

				update EC_Opr_VTrans_ALS_Details set Memo_Id = 0  
				where Memo_Id = @Cancelled_Document_Id 
			end  
--================================================================================================
		else if @Menu_Item_Id = 73 --lhpo  
			begin  
				declare @LHPO_Type_ID int
				select @LHPO_Type_ID = LHPO_Type_ID from EC_Opr_VTrans_LHPO
				where LHPO_ID = @Cancelled_Document_Id  

				update EC_Opr_VTrans_LHPO set is_cancelled = 1  
				where LHPO_ID = @Cancelled_Document_Id  

				update EC_Opr_VTrans_LHPO_Attached_Loading_Branches set Attached_LHPO_ID = 0  
				where Attached_LHPO_ID = @Cancelled_Document_Id  

				update EC_Opr_Vtrans_Memo set LHPO_ID=0  
				where LHPO_ID = @Cancelled_Document_Id  

				declare @main_lhpo_id int  
				set @main_lhpo_id = 0  
				select @main_lhpo_id = main_lhpo_id from EC_Opr_VTrans_LHPO  
				where LHPO_ID = @Cancelled_Document_Id  

				update EC_Opr_VTrans_LHPO set Is_Trip_Completed = 0  
				where Main_LHPO_ID = @Main_Lhpo_ID  

				if @LHPO_Type_ID = 1 -- new trip
					begin

						set @document_id = 5
						EXEC	EC_Opr_Cancellation_Finance
								@IsOpreration = 1,
								@Menu_Item_Id = @Menu_Item_Id,
								@Transaction_Id = @Cancelled_Document_Id,
								@Document_Id = @document_id,
								@Reason =@Reason,
								@Cancelled_By = @Cancelled_By,
								@Cancellation_Date = @Cancellation_Date
					end
			end  
--================================================================================================
		else if @Menu_Item_Id = 158 --TAS
			begin  
				update EC_Opr_VTrans_TAS set is_cancelled = 1  
				where TAS_ID = @Cancelled_Document_Id  

				update EC_Opr_VTrans_LHPO_GC_Details set TAS_ID=0  
				where TAS_ID = @Cancelled_Document_Id  

				update  EC_Opr_VTrans_Memo
				set  TAS_ID = 0  
				where TAS_ID = @Cancelled_Document_Id

				update EC_Opr_VTrans_Memo_Details set TAS_ID=0  
				where TAS_ID = @Cancelled_Document_Id
			end  
--================================================================================================
		else if @Menu_Item_Id = 72 --aus  
			begin  
				update EC_Opr_VTrans_Actual_Unloading_Sheet set is_cancelled = 1  
				where Actual_Unloading_Sheet_ID = @Cancelled_Document_Id  

				update EC_Opr_VTrans_LHPO_GC_Details set Actual_Unloading_Sheet_ID=0  
				where Actual_Unloading_Sheet_ID = @Cancelled_Document_Id  

				update  EC_Opr_VTrans_Memo
				set  AUS_ID = 0  
				where AUS_ID = @Cancelled_Document_Id

				update EC_Opr_VTrans_TAS
				set AUS_ID=0
				where AUS_ID = @Cancelled_Document_Id

				update EC_Opr_VTrans_Memo_Details set Actual_Unloading_Sheet_ID=0  
				where Actual_Unloading_Sheet_ID = @Cancelled_Document_Id  

				delete from EC_Opr_VTrans_GC_Articles_Unknown  
				where Actual_Unloading_Sheet_ID = @Cancelled_Document_Id  

				delete from EC_Opr_VTrans_Actual_Unloading_Sheet_Excess_Details
				where Actual_Unloading_Sheet_ID = @Cancelled_Document_Id  
			end  
--================================================================================================
		else if @Menu_Item_Id = 115 -- AUS_Other_Agency  
			begin  
				update EC_Opr_VTrans_Actual_Unloading_Sheet set is_cancelled = 1  
				where Actual_Unloading_Sheet_ID = @Cancelled_Document_Id  
			end  
--================================================================================================
		else if @Menu_Item_Id = 163 -- octroi update
			begin
				update EC_Opr_Octori_Update set is_cancelled = 1  
				where Octroi_Update_Id = @Cancelled_Document_Id  

				Update EC_Opr_VTrans_GC set
				Is_Octroi_Updated=0,
				Oct_Bill_No=0,
				Oct_Bill_Date=getdate(), 
				Oct_Form_Type='',        
				Octroi_Form_Type_ID=0,
				Octroi_Paid_By_ID=0,
				Oct_Receipt_no=0,
				Oct_Amount=0,
				Oct_Remark=''
				where gc_id in 
				(select GC_ID From EC_Opr_Octroi_Update_Details
				where Octroi_Update_Id = @Cancelled_Document_Id)

				delete from EC_Opr_Octroi_Update_OtherChargeDetails
				where Octroi_Update_Id = @Cancelled_Document_Id 			

			end
--================================================================================================
		else if @Menu_Item_Id = 77 -- pds  
			begin  
				update EC_Opr_VTrans_Pre_Delivery_Sheet set is_cancelled = 1  
				where PDS_ID = @Cancelled_Document_Id  
			end  
--================================================================================================
		else if  @Menu_Item_Id = 82 --ddc  
			or @Menu_Item_Id = 80 --gdc  
			or @Menu_Item_Id = 83 --dd  
			begin
				update EC_Opr_VTrans_Door_Delivery_Confirmation set is_cancelled = 1  
				where DDC_ID = @Cancelled_Document_Id  

				delete from EC_Opr_VTrans_GC_POD_Tracking where gc_id in
				(select gc_id from EC_Opr_VTrans_Door_Delivery_Confirmation_Details
				where DDC_ID = @Cancelled_Document_Id)

				if @Menu_Item_Id = 82 --ddc  
					begin  
					declare @PDS_ID int  
					set @PDS_ID = 0  
					select @PDS_ID = PDS_ID from EC_Opr_VTrans_Door_Delivery_Confirmation  
					where DDC_ID = @Cancelled_Document_Id  

					update a set  
					a.articles = a.Articles - Delivery_Articles,  
					a.Article_Actual_Weight = a.Article_Actual_Weight - Delivery_Actual_Wt  
					from ec_opr_vtrans_gc_articles a  
					inner join EC_Opr_VTrans_Pre_Delivery_Sheet_Details b  
					on a.article_id = b.Previous_Article_ID  
					where pds_id = @PDS_ID  
					and DDC_ID = 0  

					update a set  
					a.articles = a.Articles + Delivery_Articles,  
					a.Article_Actual_Weight = a.Article_Actual_Weight + Delivery_Actual_Wt  
					from ec_opr_vtrans_gc_articles a  
					inner join EC_Opr_VTrans_Pre_Delivery_Sheet_Details b  
					on a.article_id = b.article_id  
					where pds_id = @PDS_ID  
					and DDC_ID = 0  

					update EC_Opr_VTrans_GC_Articles set  
					status_id = 300,  
					articles = 0,  
					article_actual_weight = 0  
					where article_id in  
					(select article_id from EC_Opr_VTrans_Door_Delivery_Confirmation_Details  
					where ddc_id = @Cancelled_Document_Id and Delivery_Status_ID = 300)  

					update EC_Opr_VTrans_Pre_Delivery_Sheet set is_cancelled = 1
					where DDC_ID = @Cancelled_Document_Id  

					update EC_Opr_VTrans_Pre_Delivery_Sheet_Details set DDC_ID = 0  
					where DDC_ID = @Cancelled_Document_Id  

					exec EC_Opr_Set_Article_Reverse_Effects 'PDS',@PDS_ID,1  
					end  
  				else if @Menu_Item_Id = 83 --dd  
					begin  
						update EC_Opr_VTrans_LHPO_GC_Details set DDC_ID = 0  
						where DDC_ID = @Cancelled_Document_Id  

						update  EC_Opr_VTrans_Memo
						set  DDC_ID = 0  
						where DDC_ID = @Cancelled_Document_Id

						update EC_Opr_VTrans_Memo_Details set DDC_ID = 0  
						where DDC_ID = @Cancelled_Document_Id  

						delete from EC_Opr_VTrans_GC_Articles_Unknown  
						where DDC_ID = @Cancelled_Document_Id  
					end  
			end  
--================================================================================================
		else if @Menu_Item_Id = 90 -- PODCG  
			begin
				update PODTracking set 
				Transaction_Date = Previous_Transaction_Date,      
				POD_Status_ID = 2020,      
				POD_Hierarchy_Code = Previous_POD_Hierarchy_Code,      
				POD_Main_ID = Previous_POD_Main_ID,      
				Cover_Send_Hierarchy_Code = Previous_Cover_Send_Hierarchy_Code,      
				Cover_Sent_Main_ID = Previous_Cover_Sent_Main_ID     
				from 
				EC_Opr_VTrans_GC_POD_Tracking PODTracking inner join        
				EC_Opr_VTrans_POD_Cover_Generation_Details PODCoverDetails
				on PODTracking.gc_id = PODCoverDetails.gc_id     
				where 
				PODCoverDetails.Cover_ID = @Cancelled_Document_Id  

				update EC_Opr_VTrans_POD_Cover_Generation  
				set Is_Cancelled = 1 where Cover_ID = @Cancelled_Document_Id  
			end  
--================================================================================================
		else if @Menu_Item_Id in (91,109) -- PODCR  -- podcr dd
			begin
				if @Menu_Item_Id = 91-- PODCR 
					begin
						Update PODTracking Set   
						Transaction_Date = Previous_Transaction_Date,     
						POD_Status_ID = 2010,  
						POD_Hierarchy_Code = Previous_POD_Hierarchy_Code,
						POD_Main_ID = Previous_POD_Main_ID,
						Cover_Send_Hierarchy_Code = Previous_Cover_Send_Hierarchy_Code,
						Cover_Sent_Main_ID = Previous_Cover_Sent_Main_ID  
						From EC_Opr_VTrans_GC_POD_Tracking PODTracking   
						Inner Join  EC_Opr_VTrans_POD_Cover_Received_Details PODCoverRecievedDetails    
						On  PODTracking.gc_id = PODCoverRecievedDetails.gc_id    
						Where PODCoverRecievedDetails.Cover_Received_ID = @Cancelled_Document_Id    

						update EC_Opr_VTrans_POD_Cover_Generation  
						set Cover_Received_ID = 0 where Cover_Received_ID = @Cancelled_Document_Id  
					end

				update EC_Opr_VTrans_POD_Cover_Received  
				set Is_Cancelled = 1 where Cover_Received_ID = @Cancelled_Document_Id  

				if @Menu_Item_Id = 109-- podcr dd
					begin
						delete from EC_Opr_VTrans_GC_POD_Tracking
						where gc_id in (select gc_id from EC_Opr_VTrans_POD_Cover_Received_Details
						where Cover_Received_ID = @Cancelled_Document_Id)
					end
			end  
--================================================================================================
	else if @Menu_Item_Id = 101 -- PODdelivery  
		begin
			update PODTracking set 
			Transaction_Date = Previous_Transaction_Date,      
			POD_Status_ID = 2020,      
			POD_Hierarchy_Code = PODDeliverySheetDetails.POD_Hierarchy_Code,      
			POD_Main_ID = PODDeliverySheetDetails.POD_Main_ID,      
			Cover_Send_Hierarchy_Code = PODDeliverySheetDetails.Cover_Send_Hierarchy_Code,      
			Cover_Sent_Main_ID = PODDeliverySheetDetails.Cover_Sent_Main_ID     
			from 
			EC_Opr_VTrans_GC_POD_Tracking PODTracking inner join        
			EC_Opr_VTrans_POD_Delivery_Sheet_Details PODDeliverySheetDetails
			on PODTracking.gc_id = PODDeliverySheetDetails.gc_id     
			where 
			PODDeliverySheetDetails.POD_Delivery_Sheet_ID = @Cancelled_Document_Id    

			update EC_Opr_VTrans_POD_Delivery_Sheet  
			set Is_Cancelled = 1 where POD_Delivery_Sheet_ID = @Cancelled_Document_Id  
		end  
--================================================================================================
	else if @Menu_Item_Id = 113 -- ATH  
		begin
			update FA_Opr_ATH_Payment_Voucher set is_cancelled = 1
			where ATH_ID = @Cancelled_Document_Id

			update EC_Opr_VTrans_LHPO_ATH_Payable_Details set ATH_ID = 0
			where ATH_ID = @Cancelled_Document_Id
		end
--================================================================================================
	else if @Menu_Item_Id = 114 -- BTH  
		begin
--print 'pankaj'

			update FA_Opr_BTH_Payment_Voucher set is_cancelled = 1
			where BTH_ID = @Cancelled_Document_Id

			update EC_Opr_VTrans_LHPO set BTH_ID = 0
			where BTH_ID = @Cancelled_Document_Id
		end
--================================================================================================
	else if @Menu_Item_Id = 202 -- BTH (Multiple LHPO)
		begin

			update FA_Opr_BTH_Payment_Voucher set is_cancelled = 1
			where BTH_ID = @Cancelled_Document_Id

			update EC_Opr_VTrans_LHPO set BTH_ID = 0
			where BTH_ID = @Cancelled_Document_Id
		end

--================================================================================================
	else if @Menu_Item_Id = 106 -- MR Booking  
		begin
			update FA_Opr_MR set is_cancelled = 1
			where MR_ID = @Cancelled_Document_Id

			update ec_opr_vtrans_gc set Booking_MR_ID = 0
			where Booking_MR_ID = @Cancelled_Document_Id
		end
--================================================================================================
	else if @Menu_Item_Id = 108 -- MR Delivery  
		begin
			update FA_Opr_MR set is_cancelled = 1
			where MR_ID = @Cancelled_Document_Id

			update ec_opr_vtrans_gc set Delivery_MR_ID = 0
			where Delivery_MR_ID = @Cancelled_Document_Id
		end
--================================================================================================
	else if @Menu_Item_Id = 143 -- Transport Bill
		begin
			declare @transport_bill_type_id int
			declare @Client_Id int
			select @Client_Id = Client_Id,@transport_bill_type_id = transport_bill_type_id 
			from FA_Opr_Bill where Bill_ID = @Cancelled_Document_Id
	
			update FA_Opr_Bill set is_cancelled = 1
			where Bill_ID = @Cancelled_Document_Id

			update EC_Opr_VTrans_GC_Billing_Details set Is_Billed = 0,
			Bill_Freight_ID = case when (@transport_bill_type_id = 1 or @transport_bill_type_id = 3) then 0 else Bill_Freight_ID end,
			Bill_octroi_ID = case when (@transport_bill_type_id = 2 or @transport_bill_type_id = 3) then 0 else Bill_octroi_ID end
			where GC_ID in (Select GC_Id From FA_Opr_Bill_GC_Details where Bill_ID = @Cancelled_Document_Id)
			and Billing_Client_ID = @Client_Id 

			update EC_Opr_Vtrans_GC set Is_Billed = 0,Is_billed_All = 0
			where GC_ID in (Select GC_Id From FA_Opr_Bill_GC_Details where Bill_ID = @Cancelled_Document_Id)

			update EC_Opr_Vtrans_GC set Is_Billed = 1
			where GC_ID in (Select GC_Id From EC_Opr_VTrans_GC_Billing_Details where Is_Billed = 1)
			and Is_Billed = 0


		end
--================================================================================================
	else if @Menu_Item_Id = 195 -- Credit Memo
		begin
			update FA_Opr_Credit_Memo set is_cancelled = 1
			where Credit_Memo_ID = @Cancelled_Document_Id

			declare @Credit_Memo_for_ID int
			select @Credit_Memo_for_ID = Credit_Memo_for_ID from FA_Opr_Credit_Memo
			where Credit_Memo_ID = @Cancelled_Document_Id

			if @Credit_Memo_for_ID in (1)
				update EC_Opr_Vtrans_GC set
				Credit_Memo_Freight_ID = 0
				where Credit_Memo_Freight_ID = @Cancelled_Document_Id
			if @Credit_Memo_for_ID in (2)
				update EC_Opr_Vtrans_GC set
				Credit_Memo_Octroi_ID = 0
				where Credit_Memo_Octroi_ID = @Cancelled_Document_Id
			if @Credit_Memo_for_ID in (3)
				update EC_Opr_Vtrans_GC set
				Credit_Memo_Freight_ID = 0,
				Credit_Memo_Octroi_ID = 0
				where (Credit_Memo_Freight_ID = @Cancelled_Document_Id or Credit_Memo_Octroi_ID = @Cancelled_Document_Id)
		end
--================================================================================================
	else if @Menu_Item_Id = 165 -- Door Delivery Voucher
		begin
			update FA_Opr_Door_Delivery_Voucher set is_cancelled = 1
			where Door_Delivery_Voucher_Id = @Cancelled_Document_Id
		end
--================================================================================================
	else if @Menu_Item_Id = 166 -- Local Cartage Voucher
		begin
			update FA_Opr_Local_Cartage set is_cancelled = 1
			where Local_Cartage_Id = @Cancelled_Document_Id
		end

--=============================== Document Allocation ==========================

	else if @Menu_Item_Id = 46  -- Series Generation
		begin
			if(dbo.Ec_Opr_Can_Document_Allocation_Cancel(@Document_Type,@Cancelled_Document_Id) = 1)
			begin				
				delete from EC_Opr_Document_Series_Generation
				where Series_Generation_ID = @Cancelled_Document_Id
			end
		end
	else if @Menu_Item_Id = 48  -- Printing Stationary
		begin
			if(dbo.Ec_Opr_Can_Document_Allocation_Cancel(@Document_Type,@Cancelled_Document_Id) = 1)
			begin
				declare @series_generation_id int
				declare @previous_balance int

				select	@previous_balance = isnull(Balance,0),@series_generation_id = isnull(Series_Generation_ID,0)
				from EC_Opr_Document_Series_Printing
				where Series_Printing_ID = @Cancelled_Document_Id

				update EC_Opr_Document_series_generation
				set Balance = Balance + @previous_balance
				where Series_Generation_ID = @series_generation_id

				delete from EC_Opr_Document_Series_Printing
				where Series_Printing_ID = @Cancelled_Document_Id
			end
		end
	else if @Menu_Item_Id = 50  -- Document Series
		begin
			if(dbo.Ec_Opr_Can_Document_Allocation_Cancel(@Document_Type,@Cancelled_Document_Id) = 1)
			begin

				declare @document_id1 int
				set @document_id1 = 0


			    declare @parent_allocation_id int,@series_printing_id int
				set @parent_allocation_id = 0
				declare @previousbalance int

				select	@parent_allocation_id = Parent_Document_Series_Allocation_ID,
						@previousbalance = isnull(Balance,0),@series_printing_id = isnull(Series_Printing_ID,0),
						@document_id1 = document_id
				from EC_Opr_Document_Allocation
				where Document_Series_Allocation_ID = @Cancelled_Document_Id

				update EC_Opr_Document_series_printing
				set Balance = Balance + @previousbalance
				where Series_Printing_ID = @series_printing_id

				if @document_id1 in (1,2)
					begin
					delete from EC_Opr_Document_Allocation
					where Document_Series_Allocation_ID = @parent_allocation_id
					end

					delete from EC_Opr_Document_Allocation
					where Document_Series_Allocation_ID = @Cancelled_Document_Id


			end
		end
--*******************************************************************************************
if @Menu_Item_Id in (30,113,114,106,108,143,195,165,166,188,202,163,213,229,115)
	begin
-- lhpo menu item id is not considered here
-- as it has condition that lhpo type id must be 1 i.e new trip

		if @Menu_Item_Id in (30,213,229) -- GC
			set @document_id = 2
		else if @Menu_Item_Id = 113 -- ATH
			set @document_id = 9
		else if @Menu_Item_Id = 114 -- BTH
			set @document_id = 10
		else if @Menu_Item_Id = 202 -- BTH (Multiple)
			set @document_id = 10
		else if @Menu_Item_Id = 106 -- MR Booking
			set @document_id = 3
		else if @Menu_Item_Id = 108 -- MR Delivery
			set @document_id = 11
		else if @Menu_Item_Id = 143 -- Transport Bill
			set @document_id = 7
		else if @Menu_Item_Id = 195 -- Credit Memo
			set @document_id = 8
		else if @Menu_Item_Id = 165 -- Door Delivery Voucher
			set @document_id = 12
		else if @Menu_Item_Id = 166 -- Local Cartage Voucher 
			set @document_id = 13
		else if @Menu_Item_Id = 188 -- IBA GC
			set @document_id = 1
		else if @Menu_Item_Id = 163 -- Octroi update
			set @document_id = 14
		else if @Menu_Item_Id = 115  ---Direct Delivery
			 set @document_id = 16


		EXEC EC_Opr_Cancellation_Finance
		@IsOpreration = 1,
		@Menu_Item_Id = @Menu_Item_Id,
		@Transaction_Id = @Cancelled_Document_Id,
		@Document_Id = @document_id,
		@Reason =@Reason,
		@Cancelled_By = @Cancelled_By,
		@Cancellation_Date = @Cancellation_Date
	end
--================================================================================================
	insert into EC_Opr_Cancellation_History  
	(MenuItem_ID,Cancelled_Document_Id,  
	Reason,Cancelled_By,Cancellation_Date)  
	values  
	(@Menu_Item_Id,@Cancelled_Document_Id,  
	@Reason,@Cancelled_By,@Cancellation_Date)  
 end  
else  
	begin  

		if @Menu_Item_Id in (46,48,50)  
		begin
			set @Error_Code = 1010;  -- for can't cancel
			set @Error_Desc = '';  
		end
		else
		begin
			set @Error_Code = 1012;  -- for can't edit
			set @Error_Desc = '';    
		end
	end  
  
COMMIT TRAN  
END TRY  
BEGIN CATCH  
  ROLLBACK TRAN  
  SELECT @Error_Code=ERROR_NUMBER()  
  SELECT @Error_Desc=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
  CAST(ERROR_MESSAGE() as VARCHAR(4000))  

print @Error_Desc
END CATCH  
END


































GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view VW_MR_Delivery_Octroi_Details
as
select gc_id,oct_master.Bill_Date,oct_details.Oct_Receipt_No,oct_details.Oct_Amount,
oct_details.Octroi_Form_Type_ID,oct_details.Octroi_Paid_By_ID
from EC_Opr_Octori_Update oct_master
inner JOIN EC_Opr_Octroi_Update_Details oct_details
on oct_details.Octroi_Update_Id = oct_master.Octroi_Update_Id 
and oct_master.is_cancelled = 0

--select  *From VW_MR_Delivery_Octroi_Details


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 19 Jan 2009 >
-- Description:	<EC_FA_Opr_LHPOAccountEffects>
-- =============================================
--Declare @Error_Code int,@ERROR_DESC AS VARCHAR(4000); EXEC EC_FA_Opr_LHPOAccountEffects 8,'BO',1,1,298,1,@Error_Code,@ERROR_DESC; print @ERROR_DESC
CREATE Proc [dbo].[EC_FA_Opr_LHPOAccountEffects]
(
@Year_Code int,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@LHPO_Id int,
@User_Id int,
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)
As
BEGIN

--BEGIN TRY
--BEGIN TRAN

SET NOCOUNT ON;
set @Error_Code = 0;
set @ERROR_DESC = '';

Declare @Document_ID int,@Narration varchar(max)set @Document_ID =5----Reverse Account Effect--------EXEC	[dbo].[EC_FA_Opr_ReverseAccountEffects]
		@Document_Id = @Document_ID,
		@Transaction_ID = @LHPO_Id
------------------------------------FA_Master_GC_Accounting_ParametersDeclare 
------LHPO Company Param------
@Is_Book_Own_Truck_Hire Bit,@Is_Market_Truck_Ledger_Account_Truck_Wise bit,
@Is_Attached_Truck_Ledger_Account_Truck_Wise bit,
@Is_Managed_Truck_Ledger_Account_Truck_Wise bit,@LHPO_Nature_Of_Payemnt_ID_For_TDS_Deduction bit,------LHPO Values------
@LHPO_Type_ID int,@LHPO_Branch_ID int,
@LHPO_Date Datetime,@LHPO_No Varchar(50),@Vehicle_Category_ID int,
@Vehicle_ID int,@From_Location_ID int,@To_Location_ID int,
@Broker_ID int,@Truck_Hire_Charge numeric(18,2),
@Other_Charges numeric(18,2),@Loading_Charges numeric(18,2),
@TDS_Percent numeric(18,2),@TDS_Amount numeric(18,2),@Total_Truck_Hire_Payable numeric(18,2),@Total_Actual_Weight int,@Charity_Ledger_ID int,
@Charity_Amt numeric(18,2),----FA LHPO Ledgers-------@GenVoucherId int,@Truck_Hire_Expense_Account_Ledger int,@TDS_Ledger int,@Loading_Charges_Ledger int,----GC Values-------@Gc_No varchar(20),@Gc_No_Narration varchar(max)select @Gc_No_Narration = ''select @Is_Book_Own_Truck_Hire=Is_Book_Own_Truck_Hire,
@Is_Market_Truck_Ledger_Account_Truck_Wise=Is_Market_Truck_Ledger_Account_Truck_Wise,
@Is_Attached_Truck_Ledger_Account_Truck_Wise=Is_Attached_Truck_Ledger_Account_Truck_Wise,
@Is_Managed_Truck_Ledger_Account_Truck_Wise=Is_Managed_Truck_Ledger_Account_Truck_Wise,
@LHPO_Nature_Of_Payemnt_ID_For_TDS_Deduction=LHPO_Nature_Of_Payemnt_ID_For_TDS_DeductionFrom EC_Master_Company_Parametersselect @LHPO_Type_ID=LHPO_Type_ID,
@LHPO_Branch_ID=LHPO_Branch_ID,
@LHPO_Date=LHPO_Date,
@LHPO_No=LHPO_No_For_Print,
@Vehicle_Category_ID=Vehicle_Category_ID,
@Vehicle_ID=Vehicle_ID,
@From_Location_ID=From_Location_ID,
@To_Location_ID=To_Location_ID,
@Broker_ID=Broker_ID,
@Truck_Hire_Charge=Isnull(Truck_Hire_Charge,0),
@Other_Charges=Isnull(Other_Charges,0),
@Loading_Charges=Isnull(Loading_Charges,0),
@TDS_Percent=Isnull(TDS_Percent,0),
@TDS_Amount=Isnull(TDS_Amount,0),
@Total_Truck_Hire_Payable=Isnull(Total_Truck_Hire_Payable,0),@Total_Actual_Weight=Isnull(Total_Actual_Weight,0),@Charity_Ledger_ID=Charity_Ledger_ID,
@Charity_Amt=Isnull(Charity_Amt,0)From dbo.EC_Opr_VTrans_LHPOwhere LHPO_Id=@LHPO_IdDeclare        @Booking_Branch_Cash_Ledger int,@Booking_Branch_Bank_Ledger int,@Booking_Branch_Ledger int,
        @CreateVoucherXML XML,@Voucher_Type_Id int,@CreateBillXML XML,@Is_TDS_Applicable bit,        @BrokerOrTruck_Ledger int,@Truch_Hire_Exp_VoucherXML XML,        @Loading_Charges_VoucherXML XML, @Truch_Hire_Exp_BillXML XML,@CreditDays int,		@Bank_Name varchar(20),@Cheque_No int,@Cheque_Date DateTime,@TruckOrBrokerTDS_VoucherXML Xml,		@TruckOrBrokerTDS_BillXML Xml,@TotalTruckHire numeric(18,2)		Set @Truch_Hire_Exp_VoucherXML=''		Set @Loading_Charges_VoucherXML=''		Set @Truch_Hire_Exp_BillXML=''		Set @TruckOrBrokerTDS_VoucherXML=''		Set @TruckOrBrokerTDS_BillXML=''		Set @Bank_Name=''		Set @Cheque_No=0		Set @Cheque_Date=Getdate()		set @TotalTruckHire= @Truck_Hire_Charge + @Other_Charges	Select            @Booking_Branch_Ledger = Branch_Ledger_Id,           @Booking_Branch_Cash_Ledger=Cash_Ledger_Id,           @Booking_Branch_Bank_Ledger=Bank_Ledger_Id    from EC_Master_Branch where Branch_Id=@LHPO_Branch_Id    select @BrokerOrTruck_Ledger=dbo.Get_Ledger_Id1(0,700,@Vehicle_Id,@Broker_Id)	select @Is_TDS_Applicable = Is_TDS_Applicable From FA_Master_Ledger where Ledger_ID=@BrokerOrTruck_Ledger	if(@Is_TDS_Applicable=0)	Begin		select @TDS_Ledger =Null		select @TDS_Amount=0	End	Else	Begin	    select @TDS_Ledger = dbo.Get_Ledger_Id1(@Division_Id,2002,0, 0)		EXEC	[dbo].[EC_FA_Opr_CalcTdsForLHPO]
				@Division_Id = @Division_Id,
				@Vendor_Id = @Broker_ID,
				@LHPO_Date = @LHPO_Date,
				@Amount = @TotalTruckHire,
				@TDSAmount = @TDS_Amount OUTPUT	 EndSelect @CreditDays=Default_Credit_Period From FA_Master_Ledger Where Ledger_Id=@BrokerOrTruck_Ledger---------Declare @Temp_LHPOGCTable Table(Sr_No int identity,LHPO_GC_Booking_Mode_Type int,LHPO_Waight numeric(18,2),Gc_No varchar(20))insert into @Temp_LHPOGCTable(LHPO_GC_Booking_Mode_Type,LHPO_Waight,Gc_No)Select GC.Booking_Type_Id,sum(LHPO.Loaded_Wt),GC.GC_No_For_Print from dbo.EC_Opr_VTrans_LHPO_GC_Details LHPOInner join  dbo.EC_Opr_VTrans_GC as GC ON LHPO.GC_Id=GC.GC_Idwhere LHPO.LHPO_Id=@LHPO_Idgroup by GC.Booking_Type_Id,GC.GC_No_For_Printselect * from @Temp_LHPOGCTableDeclare @Count int,@Sr_No int,@LHPO_Waight numeric(18,2),@LHPO_GC_Booking_Mode_Type int,@Total_LHPO_Waight numeric(18,2),@Truck_Hire_Expense_Amount numeric(18,2),@Loading_Charges_Amount numeric(18,2)select @Total_LHPO_Waight=Sum(LHPO_Waight) From @Temp_LHPOGCTableselect @Count=Count(*) From @Temp_LHPOGCTable SElect @Sr_No=1while @Sr_No<=@CountBegin	select @LHPO_Waight=LHPO_Waight,@LHPO_GC_Booking_Mode_Type=LHPO_GC_Booking_Mode_Type,@Gc_No=Gc_No 	from @Temp_LHPOGCTable	where Sr_No=@Sr_No	select @Truck_Hire_Expense_Account_Ledger=dbo.Get_Ledger_Id1(@Division_Id,2001,@LHPO_GC_Booking_Mode_Type,0)	select @Loading_Charges_Ledger = dbo.Get_Ledger_Id1(@Division_Id,2003,@LHPO_GC_Booking_Mode_Type, 0)	Set @Truck_Hire_Expense_Amount=(@Truck_Hire_Charge + @Other_Charges) * @LHPO_Waight/@Total_LHPO_Waight	Set @Loading_Charges_Amount = @Loading_Charges * @LHPO_Waight/@Total_LHPO_Waight	Set @Gc_No_Narration = @Gc_No_Narration + @Gc_No + ','----------Truck_Hire_Expense DR-------------------
    set @Truch_Hire_Exp_VoucherXML=Cast(@Truch_Hire_Exp_VoucherXML as Varchar(max))
	+
	dbo.GetVoucherDetailsXML(@Truck_Hire_Expense_Account_Ledger,@Truck_Hire_Expense_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)-----------------------------------------------------------Loading_Charges  DR----------------------    set @Loading_Charges_VoucherXML=Cast(@Loading_Charges_VoucherXML as Varchar(max))
	+
	dbo.GetVoucherDetailsXML(@Loading_Charges_Ledger,@Loading_Charges_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)--select cast(@Truch_Hire_Exp_VoucherXML as Varchar(max))--select cast(@Loading_Charges_VoucherXML as Varchar(max))--select cast(@Loading_Charges_VoucherXML as Varchar(max))--------------------------------------------------Set @SR_No=@SR_No+1End--while @Sr_No<=@Count    set @Truch_Hire_Exp_VoucherXML=

    '<NewDataSet>'
	+ 
    Cast(@Truch_Hire_Exp_VoucherXML as Varchar(max))
	+   ---BrokerOrTruck_Ledger CR
	dbo.GetVoucherDetailsXML(@BrokerOrTruck_Ledger,0,(@Truck_Hire_Charge + @Other_Charges - @Charity_Amt),@Bank_Name,@Cheque_No,@Cheque_Date)    +   ---Charity_Ledger_Id CR
	dbo.GetVoucherDetailsXML(@Charity_Ledger_Id,0,@Charity_Amt,@Bank_Name,@Cheque_No,@Cheque_Date)    +
	'</NewDataSet>'    set @Loading_Charges_VoucherXML=
    '<NewDataSet>'
	+     Cast(@Loading_Charges_VoucherXML as Varchar(max))
	+ ----Booking_Branch_Cash_Ledger  CR
	dbo.GetVoucherDetailsXML(@Booking_Branch_Cash_Ledger,0,@Loading_Charges,@Bank_Name,@Cheque_No,@Cheque_Date)    +
	'</NewDataSet>'set @Truch_Hire_Exp_BillXML=    '<NewDataSet>'
	+  ---    dbo.GetVoucherBillXML(@BrokerOrTruck_Ledger,@TDS_Ledger,@LHPO_No,1,@CreditDays,(@Truck_Hire_Charge + @Other_Charges - @Charity_Amt),@LHPO_Date)
    +
    dbo.GetVoucherBillXML(@Charity_Ledger_Id,0,@LHPO_No,1,@CreditDays, @Charity_Amt,@LHPO_Date)
    +
	'</NewDataSet>' ---------Truck Hire Expense Voucher-----------------    Set @Voucher_Type_Id=27SET @Narration = 'In BOOKING BRANCH BOOK ' + dbo.Get_Caption_Company_Parameter(2) +
' BOOKING ' + dbo.Get_Caption_Company_Parameter(2) +' No : ' + @LHPO_No +','+dbo.Get_Caption_Company_Parameter(1) + ' No : '+@Gc_No_Narration	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @LHPO_Branch_Id,---BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@LHPO_Date,
			@Ref_No = @LHPO_No,
			@Ledger_Id =@BrokerOrTruck_Ledger,
			@Total_Debit = @TotalTruckHire,
			@Total_Credit = @TotalTruckHire,
			@Narration = @Narration,--'LHPO BOOKING',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @Truch_Hire_Exp_VoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML =@Truch_Hire_Exp_BillXML,
			@Gen_Voucher_Id = @GenVoucherId OUTPUT


		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@LHPO_Id,@GenVoucherId


---------Truck OR Broker TDS Voucher-----------------

set @TruckOrBrokerTDS_VoucherXML =    '<NewDataSet>'	+ ----BrokerOrTruck_Ledger  DR
	dbo.GetVoucherDetailsXML(@BrokerOrTruck_Ledger,@TDS_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)	+   ---TDS_Ledger CR	dbo.GetVoucherDetailsXML(@TDS_Ledger,0,@TDS_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)    +	'</NewDataSet>'select @TDS_LedgerSet @TruckOrBrokerTDS_BillXML =     '<NewDataSet>'
	+  ---    dbo.GetVoucherBillXML(@BrokerOrTruck_Ledger,0,@LHPO_No,2,@CreditDays,-@TDS_Amount,@LHPO_Date)
	+  ---
    dbo.GetVoucherBillXML(@TDS_Ledger,0,@LHPO_No,5,@CreditDays,@TDS_Amount,@LHPO_Date)
    +
	'</NewDataSet>'
 
    Set @Voucher_Type_Id=6----JournalSET @Narration = 'In BOOKING BRANCH BOOK ' + dbo.Get_Caption_Company_Parameter(2) +' TDS ENTRY, ' + dbo.Get_Caption_Company_Parameter(2) +' No : ' + @LHPO_Noif(@TDS_Amount<>0)	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @LHPO_Branch_Id,---BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@LHPO_Date,
			@Ref_No = @LHPO_No,
			@Ledger_Id =@BrokerOrTruck_Ledger,
			@Total_Debit = @TDS_Amount,
			@Total_Credit = @TDS_Amount,
			@Narration = @Narration,--'LHPO TDS ENTRY',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @TruckOrBrokerTDS_VoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML =@TruckOrBrokerTDS_BillXML,
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@LHPO_Id,@GenVoucherId



---------Loading Charges Voucher-----------------SET @Narration = 'In BOOKING BRANCH BOOK ' + dbo.Get_Caption_Company_Parameter(2) +' BOOKING, ' + dbo.Get_Caption_Company_Parameter(2) +' No : ' + @LHPO_No +','+dbo.Get_Caption_Company_Parameter(1) + ' No : '+@Gc_No_Narration
    Set @Voucher_Type_Id=8if(@Loading_Charges<>0)	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @LHPO_Branch_Id,---BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@LHPO_Date,
			@Ref_No = @LHPO_No,
			@Ledger_Id =@Booking_Branch_Cash_Ledger,
			@Total_Debit = @Loading_Charges,
			@Total_Credit = @Loading_Charges,
			@Narration = @Narration,--'LHPO BOOKING',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @Loading_Charges_VoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = '<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@LHPO_Id,@GenVoucherId


select cast(@Truch_Hire_Exp_BillXML as Varchar(max)) --select @BookingBranch_Voucher_XML-----FA_Opr_Operational_Vouchers_Details----dbo.GetClientLedger()----dbo.GetFixedLedger()----dbo.GetOprLedger()----dbo.GetBranchLedger()----dbo.GetBranchCashLedger()----dbo.GetBranchToPayRecoveryLedger()----dbo.GetBranchBankLedger()select @Error_Code
--COMMIT TRAN
--END TRY
--BEGIN CATCH
-- ROLLBACK TRAN
-- SELECT @ERROR_CODE=ERROR_NUMBER()
-- SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
-- CAST(ERROR_MESSAGE() as VARCHAR(4000))
--select @ERROR_DESC
--END CATCH
END






























GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- Author: <Ankit champaneriya> 
-- Create date: 07-01-09 2008 5:13PM 
-- Description: <stock Transfer Readvalues> 
-- ============================================= 
-- exec [EC_Opr_GC_Stock_Transfer_ReadValues] 4,'<parentroot><root><item>765</item></root></parentroot>',1,8

CREATE proc [dbo].[EC_Opr_GC_Stock_Transfer_ReadValues] 
( 
@Branch_Id int, 
@Division_ID int, 
@GC_XML xml,
@New_Current_Branch_ID int,
@Year_Code int
)
as 
BEGIN 

set nocount on

DECLARE @idoc int 
EXEC sp_xml_preparedocument @idoc OUTPUT, @GC_XML 

declare @Is_AccountTransReq bit,@Status_Id int

select @Is_AccountTransReq = isnull(Is_Account_Transfer_Required,0) from ec_master_company_parameters

set @Status_Id = case @Is_AccountTransReq when 0 then 0 else 5 end

select gc.gc_id,
gc_no_for_print as [gc_caption no],
dbo.dateonlydisplay(gc.GC_Date) as [gc_caption date],
dly_branch.branch_name as dly_branch,
booking_branch.branch_name as booking_branch,
gc_articles.current_branch_id as branch_id,
gc_articles.article_id,Status,
dbo.dateonlydisplay(Document_Date) AS Document_Date,
gc_articles.articles,Article_Actual_Weight,gc_articles.status_id,
gc.GC_No_For_print as Item_No
from ec_opr_vtrans_gc gc
inner join ec_opr_vtrans_gc_articles gc_articles
on gc.gc_id = gc_articles.gc_id
inner join ec_master_branch dly_branch
on gc.delivery_branch_id = dly_branch.branch_id
inner join ec_master_branch booking_branch
on gc.from_branch_id = booking_branch.branch_id
inner join ec_master_status status
on gc_articles.status_id = status.status_id

where gc.year_code in (0,@Year_Code)
and GC.Division_ID = @Division_ID
and gc_articles.status_id in (0,60)  --@Status_Id = 0,5
and gc_articles.current_branch_id = @Branch_Id
and gc_articles.is_cancelled = 0
and gc_articles.articles > 0
and dbo.Is_Delivery_Done(gc.gc_id) = 0
and gc.GC_No_For_print in 
(SELECT item from OPENXML (@idoc, '/parentroot/root',2) 
WITH (item varchar(20))) 

EXEC sp_xml_removedocument @idoc 
END









GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
  
  
  
  
  
        
                     
-- =============================================                    
-- Author:  <Piyush Kumar>                    
-- Create date: <17-Jan-2009>                    
-- Description: <Description>                    
-- EXEC [dbo].[EC_RPT_Crossing_Stock_List_GRD]  0,0,0,'2009-04-04',0,0,100              
  -- =============================================                    
CREATE proc [dbo].[EC_RPT_Crossing_Stock_List_GRD]                     
                     
@Region_id as int,                      
@Area_id as int,                      
@Branch_id as int,                      
@As_on_Date as datetime,                        
@Division_ID as int,    
@PageIndex int,     
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1               
As                      
                      
set nocount on 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Booking Branch','s,1')
		insert into @Dropdown_Search values ('Delivery Branch','s,2')
		insert into @Dropdown_Search values ('Consignee Name','s,3')
        insert into @Dropdown_Search values ('Consignor Name','s,4')
		insert into @Dropdown_Search values ('Pay Mode','s,5')
		insert into @Dropdown_Search values ('Total Freight','n,6')
		insert into @Dropdown_Search values ('GC Date','d,7')
		select  *From @Dropdown_Search

		return
	end  
--------------------------------------Filter-----------------------------------------               
if @Branch_ID  > 0                       
  BEGIN                
  Set @Region_ID = -1                
  set @Area_ID = -1                
  END                
else if  @Area_ID > 0                       
  BEGIN                       
  Set @Region_ID = -1                      
  set @Branch_ID =  -1                      
  END                       
else if @Region_ID > 0                       
  BEGIN                      
  set @Area_ID = -1                      
  set @Branch_ID = -1                      
  END;                   
  
-------------------------------STEP 1--------------------------------------------------------------    
WITH Crossing_Stock_List AS    
(    
select Distinct ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',   
 dbo.DateOnlyDisplay(A.GC_date) As [gc_caption Date],       
  A.GC_no_for_print as [gc_caption No],           
                 
  frm_br.branch_name as [Bkg Branch],                 
  Delivery.Branch_name as [Dly Branch],             
  A.Consignee_Name as [Cnee Name] ,                 
  A.Consignor_Name as [Cnr Name],            
  Payment.Payment_Type as [Pay Mode],                
              
  ISNULL(Cast(round(A.Charged_Weight, 0) as float),0)  as [Charged Weight],                 
  ISNULL(Cast(round(A.Total_Actual_Weight, 0) as float),0) as [Actual Weight],                
  ISNULL(Cast(round(b.Articles, 0) as float),0) as [Articles],                  
  ISNULL(Cast(round(A.Freight_Amt, 0) as float),0) as [Basic Freight] ,                  
  ISNULL(Cast(round(A.Total_GC_Amount, 0) as float),0) as [Total Freight],                
  ISNULL(Cast(round(A.Total_Invoice_Value, 0) as float),0) as [Invoice Value]           
                
--  c.status  as [Current Status],                
--  b.Document_no_for_print as [Current Document No],                
--  dbo.DateOnlyDisplay(b.Document_Date) as [Current Document Date],                
--  d.Branch_Name as [Current Branch Name]                
                      
From EC_Opr_VTrans_GC A                  
inner join dbo.EC_Opr_Vtrans_GC_Articles b                
ON A.GC_ID=b.GC_ID                
            
inner join ec_master_payment_type Payment                
on Payment.payment_type_id=A.payment_type_id                
INNER JOIN dbo.Ec_Master_Status c                 
ON b.Status_Id=c.Status_ID                
inner join ec_master_branch d                
on b.current_branch_id=d.branch_id                
    
inner join EC_Master_Service_Location frm_loc  
on frm_loc.Service_Location_ID=A.From_Location_ID      
    
inner join ec_master_branch frm_br  
on frm_br.branch_id=frm_loc.branch_id  
  
  
inner join ec_master_branch branch                    
on branch.branch_id=B.current_Branch_ID   
                  
inner join ec_master_area Area                    
on Area.area_id=branch.area_id                    
inner join ec_master_region Region                    
on Region.region_id=Area.region_id                  
                 
inner join ec_master_branch Delivery                    
on Delivery.branch_id=A.Delivery_branch_id                
                 
where A.is_cancelled=0  and A.status_id <> 80                   
and Is_Agency_Booking=0                
and b.is_cancelled=0                 
and b.status_id in (60)                
and b.current_branch_id not in (Delivery.branch_id,frm_br.branch_id)   
and B.articles>0               
                
and(Branch.Branch_ID = @Branch_ID                  
    OR Branch.Region_ID = (Select case @Region_ID when 0 then Branch.Region_ID else  @Region_ID end)                    
 OR Branch.Area_ID =  @Area_ID)                 
                
and (a.GC_Date <= @As_on_Date)                          
and A.Division_ID=(select case @Division_ID when 0 then A.Division_ID else @Division_ID end)    
 and 
(@criteria_id = 0
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and  frm_br.branch_name  = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and  frm_br.branch_name  like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and  frm_br.branch_name  like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and  frm_br.branch_name  like '%' + @Filtered_Text + '%')


or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Delivery.Branch_name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Delivery.Branch_name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and A.Consignee_Name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and A.Consignee_Name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and A.Consignor_Name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and A.Consignor_Name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and Payment.Payment_Type = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and Payment.Payment_Type like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and Payment.Payment_Type like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and Payment.Payment_Type like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 4 and A.Total_GC_Amount = @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 4 and A.Total_GC_Amount >= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 4 and A.Total_GC_Amount <= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 4 and A.Total_GC_Amount > @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 4 and A.Total_GC_Amount < @Filtered_Text_int)

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and A.GC_date = @Filtered_Date)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and A.GC_date >= @Filtered_Date)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and A.GC_date <= @Filtered_Date)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and A.GC_date > @Filtered_Date)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and A.GC_date < @Filtered_Date)
) 
)  
  
-----------------------------STEP 2--------------------------------------------------------------    
SELECT * into #CrossingStock FROM Crossing_Stock_List    
-----------------------------STEP 3--------------------------------------------------------------    
    
select * From #CrossingStock    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
--------------------------------STEP 4-------------------------------------------------------------    
select    
count( [gc_caption No]) as [Total_GC],  
sum([Charged Weight]) as Total_Charged_Wt,    
sum([Actual Weight]) as Total_Actual_Wt,    
sum([Articles]) as Total_Articles,    
sum([Basic Freight]) as Total_Basic_Freight,    
sum([Total Freight]) as Total_Freight,    
sum([Invoice Value]) as Total_Invoice_Value  
from #CrossingStock    
    
--------------------------------STEP 5-------------------------------------------------------  
select count(*) From #CrossingStock    
---------------------------------------------------------------------------------------------                  
  
  
  
  
  
  



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Amol>
-- Create date: Nov 26 2008  3:11PM
-- Description:	<>
-- =============================================

CREATE Proc [dbo].[EC_FA_MR_Booking_Save]
(
@Year_Code int,
@Division_ID int,
@MR_Type_ID int,
@MR_ID int,
@MR_Date datetime,
@MR_Branch_ID int,
@GC_ID int,
@Total_MR_Amount numeric(18,2),
@Cash_Amount numeric(18,2),
@Cash_Ledger_ID int,
@Cheque_Amount numeric(18,2),
@Hierarchy_Code varchar(5),
@Menu_Item_ID int,
@Document_Allocation_ID int,
@MR_No int,
@MR_No_For_Print varchar(20),
@MRChequeDetailsXML xml,
@Created_By int,
@Error_Code int output,
@ERROR_DESC AS VARCHAR(4000) OUTPUT,
@Print_Doc_Id int OUTPUT,
@Is_System_Generated_MR bit = 0
)
As
set @Error_Code = 0;
set @ERROR_DESC = '';
set @Print_Doc_Id = 0DECLARE @Can_Add_Edit int
set @Can_Add_Edit = 1if(@MR_ID<=0)beginSELECT @Can_Add_Edit = 0 FROM EC_Opr_VTrans_GC WHEREgc_id = @gc_id and (Booking_MR_ID > 0 or is_cancelled = 1)endif(@MR_ID > 0)beginSELECT @Can_Add_Edit = 0 FROM EC_Opr_VTrans_GC WHEREgc_id = @gc_id and is_cancelled = 1end

IF @Can_Add_Edit = 0
	BEGIN
	set @Error_Code = 1012;
	return;
END
BEGIN TRY
--BEGIN TRAN
BEGIN
SET NOCOUNT ON;

DECLARE @GC_Sub_Total numeric(18,2),@Service_Tax_Amt numeric(18,2)

SELECT @GC_Sub_Total = ISNULL(Sub_Total,0),
@Service_Tax_Amt = ISNULL(Service_Tax_Amount,0)
FROM dbo.EC_Opr_VTrans_GC
WHERE GC_Id = @GC_ID
IF @Cash_Amount < 0	SET @Cash_Amount = 0IF @Cheque_Amount < 0	SET @Cheque_Amount = 0
if @MR_ID <= 0 -- add
  Begin

	set @MR_No = cast (@MR_No_For_Print as int)


	declare @GC_No_Length int
	select @GC_No_Length = GC_No_Length from EC_Master_Company_GC_Parameter

    insert into FA_Opr_MR(
    Year_Code,
    Division_ID,
    Document_Series_Allocation_ID,
    MR_Type_ID,
    MR_No,
    MR_No_For_Print,
    MR_Date,
    MR_Branch_ID,
    GC_ID,
    GC_Sub_Total,
    Octroi_Form_Charges,
    Octroi_Service_Charges,
    GI_Charges,
    Detention_Charges,
    Hamali_Charges,
    Local_Charges,
    Demurage_Days,
    Demurage_Charges,
    Additional_Charges,
    Additional_Charges_Remarks,
    Discount_Amount,
    Tax_Abatement,
    Amount_Taxable,
    Service_Tax_Percent,
    Service_Tax_Amount,
    Service_Tax_Payable_By,
    Rebooked_Charges,
    Octroi_Amount,
    Octroi_Receipt_No,
    Octroi_Receipt_Date,
    Octroi_Form_Type_ID,
    Octroi_Paid_By_ID,
    Total_MR_Amount,
    Std_Octroi_Form_Charges,
    Std_Octroi_Service_Charges,
    Std_GI_Charges,
    Std_Detention_Charges,
    Std_Hamali_Charges,
    Std_Local_Charges,
    Std_Demurage_Charges,
    Cash_Amount,
    Cash_Ledger_ID,
    Cheque_Amount,
    Is_Cancelled,
    Voucher_ID,
    Created_By,
    Created_On,
    Updated_By,
    Updated_On,
	Is_System_Generated_MR)
    values(
    @Year_Code,
    @Division_ID,
    @Document_Allocation_ID,
    @MR_Type_ID,
    @MR_No,
    dbo.get_no_to_print(@MR_No,@GC_No_Length),
    @MR_Date,
    @MR_Branch_ID,
    @GC_ID,
    @GC_Sub_Total,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    @Total_MR_Amount,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    @Cash_Amount,
    @Cash_Ledger_ID,
    @Cheque_Amount,
    0,
    0,
    @Created_By,
    getdate(),
    @Created_By,
    getdate(),
	@Is_System_Generated_MR)


	SELECT @MR_ID = @@identity

	Update EC_Opr_VTrans_GC
	set Booking_MR_ID = @MR_ID
	where gc_id = @GC_ID

	update EC_Opr_Document_Allocation set
	next_no = @MR_No + 1,
	Balance = Balance - 1
	where Document_Series_Allocation_ID = @Document_Allocation_ID
  End
Else -- Edit
  Begin
    Update FA_Opr_MR set	
 
    MR_Date = @MR_Date,
    Cash_Amount = @Cash_Amount,
	GC_Sub_Total = @GC_Sub_Total,
	Service_Tax_Amount = @Service_Tax_Amt,
	Total_MR_Amount = @Total_MR_Amount,
    Cash_Ledger_ID = @Cash_Ledger_ID,
    Cheque_Amount = @Cheque_Amount,
    Updated_By = @Created_By,
    Updated_On = getdate()
    where MR_ID = @MR_ID
  End
SET @Print_Doc_Id=@MR_IDexec EC_FA_MR_Cheque_Details_Save @Year_Code,@Division_ID,@MR_ID,@MRChequeDetailsXML
-----------MRBookingAccount Effect------------------------
EXEC [dbo].[EC_FA_Opr_MRBookingAccountEffects] @MR_Id=@MR_Id
-----------MRBookingAccount Effect------------------------


END
--COMMIT TRAN
END TRY
BEGIN CATCH
 --ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))

Raiserror(@Error_Desc,18,18)

END CATCH




















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

          
                 
-- =============================================                
-- Author:  <Piyush Kumar>                
-- Create date: <02-Jan-2009>                
-- Description: <Description>                
-- EXEC [dbo].[EC_RPT_Del_Branchwise_Booking_Register_GRD]  0,0,0,'2008-12-01','2009-01-02',0,0,0,0,0,100          
  -- =============================================                
CREATE proc [dbo].[EC_RPT_Del_Branchwise_Booking_Register_GRD]                  
                 
@Region_id as int,                  
@Area_id as int,                  
@Branch_id as int,                  
@From_Date as datetime,                     
@To_date as datetime,                  
@Booking_Type_Id as int,            
@Delivery_Type_Id as int,            
@Payment_Type_Id as int,             
@Division_ID as int,          
@PageIndex int,           
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1                     
          
As                  
begin                   
set nocount on
   --------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('From Location Name','s,1')		
		insert into @Dropdown_Search values ('Delivery Branch','s,2')
        insert into @Dropdown_Search values ('Consignee Name','s,3')
        insert into @Dropdown_Search values ('Consignor Name','s,4')
        insert into @Dropdown_Search values ('Booking Mode','s,4')
        insert into @Dropdown_Search values ('Pay Mode','s,6')
        insert into @Dropdown_Search values ('Charged Wt','n,7')
		insert into @Dropdown_Search values ('Actual Weight','n,8')
        insert into @Dropdown_Search values ('Articles','n,9')		
		insert into @Dropdown_Search values ('GC Date','d,10')
		select  *From @Dropdown_Search

		return
	end 
--------------------------------------Filter-----------------------------------------                      
if @Branch_ID  > 0                   
  BEGIN                  
  Set @Region_ID = -1                  
  set @Area_ID = -1                  
  END                   
else if  @Area_ID > 0                   
  BEGIN                   
  Set @Region_ID = -1                  
  set @Branch_ID =  -1                  
  END                   
else if @Region_ID > 0                   
  BEGIN                  
  set @Area_ID = -1                  
  set @Branch_ID = -1                  
  END;            
             
-------------------------------STEP 1--------------------------------------------------------------          
WITH Del_BranchWiseBookingRegister AS          
(          
select distinct          
ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',          
   Region.Region_Name as [Region Name],              
  Area.Area_Name as [Area Name],              
 A.GC_no_for_print as [gc_caption No],            
  dbo.DateOnlyDisplay(A.GC_date)As [gc_caption Date],              
 branch.branch_name as [Bkg Branch],             
 location.Service_location_name As [From Location Name],               
 Delivery.Branch_name as [Dly Branch],             
 A.Consignee_Name as [Cnee Name] ,                
 A.Consignee_Tel_No as [Cnee Tel No],                
 A.Consignor_Name as [Cnr Name],                
 A.Consignor_Tel_No as [Cnr Tel No],               
 BkgMode.Booking_Mode as [Booking Mode],             
 Payment.Payment_Type as [Pay Mode],               
 ISNULL(Cast(round(A.Charged_Weight, 0) as float),0) as [Charged Weight],                
 ISNULL(Cast(round(A.Total_Actual_Weight, 0) as float),0) as [Actual Weight],                
 A.Total_Articles as [Articles],                
 ISNULL(Cast(round(A.Freight_Amt, 0) as float),0) as [Basic Freight] ,   
ISNULL(Cast(round(A.Local_Charges, 0) as float),0) as [Local Charges] ,                  
              
 ISNULL(Cast(round(A.FOV, 0) as float),0) as [FOV Charges],                
 ISNULL(Cast(round(A.ODA_Charges, 0) as float),0) As [ODA Charges],                
 ISNULL(Cast(round(A.Other_Charges, 0) as float),0) AS [Other Charges],                
 ISNULL(Cast(round(A.Sub_Total, 0) as float),0) AS [Sub Freight],                
 ISNULL(Cast(round(A.Service_Tax_Amount, 0) as float),0) as [STax Amt],                
 ISNULL(Cast(round(A.Total_GC_Amount, 0) as float),0) as [Total Freight],                
 ISNULL(Cast(round(A.Total_Invoice_Value, 0) as float),0) as [Invoice Value],            
 ISNULL(Cast(round(A.hamali_charges, 0) as float),0) as [Hamali Charge],            
 ISNULL(Cast(round(A.DD_charges, 0) as float),0) as [DD Charge],            
 ISNULL(Cast(round(A.Bilti_Charges, 0) as float),0) as [Bilti Charges]                
                 
From EC_Opr_VTrans_GC A                
inner join ec_master_branch branch                
on branch.branch_id=A.from_branch_id                
inner join ec_master_area Area                
on Area.area_id=branch.area_id                
inner join ec_master_region Region                
on Region.region_id=Area.region_id               
inner join  EC_Master_Service_Location Location            
on A.from_location_id=Location.service_location_id            
inner join ec_master_branch Delivery                
on Delivery.branch_id=A.Delivery_branch_id             
inner join ec_master_booking_mode BkgMode            
on A.booking_mode_id=BkgMode.booking_mode_id            
inner join ec_master_payment_type Payment            
on Payment.payment_type_id=A.payment_type_id            
              
where A.is_cancelled=0              
and A.status_id <> 80             
and A.status_id = 0              
and Is_Agency_Booking=0            
and (Delivery.Branch_ID = @Branch_ID              
 OR Delivery.Region_ID = (Select case @Region_ID when 0 then Delivery.Region_ID else @Region_ID end)                
 OR Delivery.Area_ID =  @Area_ID)            
and (A.GC_Date BETWEEN @From_Date  and @To_Date)            
and A.Booking_Type_Id=(select case @Booking_Type_Id when 0 then A.Booking_Type_Id else @Booking_Type_Id end)             
and A.Delivery_Type_Id=(select case @Delivery_Type_Id when 0 then A.Delivery_Type_Id else @Delivery_Type_Id end)             
and A.payment_type_id=(select case @Payment_Type_Id when 0 then A.payment_type_id else @Payment_Type_Id end)            
and A.Division_ID=(select case @Division_ID when 0 then A.Division_ID else @Division_ID end)
and 
(@criteria_id = 0
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and location.Service_location_name = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and location.Service_location_name like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and location.Service_location_name like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and location.Service_location_name like '%' + @Filtered_Text + '%')


or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Delivery.Branch_name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Delivery.Branch_name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and A.Consignee_Name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and A.Consignee_Name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and A.Consignor_Name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and A.Consignor_Name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and BkgMode.Booking_Mode = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and BkgMode.Booking_Mode like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and BkgMode.Booking_Mode like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and BkgMode.Booking_Mode like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and Payment.Payment_Type = @Filtered_Text)
or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and Payment.Payment_Type like @Filtered_Text + '%')
or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and Payment.Payment_Type like '%' + @Filtered_Text)
or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and Payment.Payment_Type like '%' + @Filtered_Text + '%')

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 2 and A.Charged_Weight = @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 2 and A.Charged_Weight >= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 2 and A.Charged_Weight <= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 2 and A.Charged_Weight > @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 2 and A.Charged_Weight < @Filtered_Text_int)

or (@colid = 8 and @criteria_id = 1 and @datatype_id = 2 and A.Total_Actual_Weight = @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 2 and A.Total_Actual_Weight >= @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 2 and A.Total_Actual_Weight <= @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 2 and A.Total_Actual_Weight > @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 2 and A.Total_Actual_Weight < @Filtered_Text_int)

or (@colid = 9 and @criteria_id = 1 and @datatype_id = 2 and A.Total_Articles = @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 2 and @datatype_id = 2 and A.Total_Articles >= @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 3 and @datatype_id = 2 and A.Total_Articles <= @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 4 and @datatype_id = 2 and A.Total_Articles > @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 5 and @datatype_id = 2 and A.Total_Articles < @Filtered_Text_int)

or (@colid = 10 and @criteria_id = 1 and @datatype_id = 4 and A.GC_date = @Filtered_Date)
or (@colid = 10 and @criteria_id = 2 and @datatype_id = 4 and A.GC_date >= @Filtered_Date)
or (@colid = 10 and @criteria_id = 3 and @datatype_id = 4 and A.GC_date <= @Filtered_Date)
or (@colid = 10 and @criteria_id = 4 and @datatype_id = 4 and A.GC_date > @Filtered_Date)
or (@colid = 10 and @criteria_id = 5 and @datatype_id = 4 and A.GC_date < @Filtered_Date)
)                              
)          
          
-------------------------------STEP 2--------------------------------------------------------------          
SELECT * into #Del_bkgregis FROM Del_BranchWiseBookingRegister          
-------------------------------STEP 3--------------------------------------------------------------          
          
select * From #Del_bkgregis          
 WHERE           
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)          
or          
(@PageSize = 0)          
          
--------------------------------STEP 4-------------------------------------------------------------          
          
select  
sum([Charged Weight]) as Total_Charged_Wt,          
sum([Actual Weight]) as Total_Actual_Wt,          
sum([Articles]) as Total_Articles,          
sum([Basic Freight]) as Total_Basic_Freight,          
sum([FOV Charges]) as Total_Fov_Charge,          
sum([ODA Charges]) as Total_ODA_Charge,          
sum([Other Charges]) as Total_Other_Charge,          
sum([Sub Freight]) as Total_Sub_Freight,          
sum([STax Amt]) as Total_Service_Tax,          
sum([Total Freight]) as Total_Freight,          
sum([Invoice Value]) as Total_Invoice_Value,          
sum([Hamali Charge]) as Total_Hamali_Charge,          
sum([DD Charge]) as Total_DD_Charge,          
sum([Bilti Charges]) as Total_Bilti_Charges,  
sum([Local Charges]) as Local_Charges  
          
from #Del_bkgregis          
          
--------------------------------STEP 5-------------------------------------------------------        
select count(*) From #Del_bkgregis          
---------------------------------------------------------------------------------------------       
End

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:  <Dinesh Mahajan>
-- Create date: <30-Mar-2009>
-- Description: <Get_Octroi_Amount_For_GC>
-- =============================================

CREATE Function [dbo].[Ec_Opr_Get_Octroi_Amount_For_GC]
(
@GC_ID  int = 0,
@Client_ID  int=0
)

RETURNS numeric(18,2)
AS

BEGIN

Declare @Octroi_Amount as numeric(18,2)
set @Octroi_Amount = 0
select @Octroi_Amount = oct_amount from
EC_Opr_Octroi_Update_Details OUD
inner join EC_Opr_Octori_Update OU
on OUD.Octroi_Update_Id = OU.Octroi_Update_Id
where OUD.gc_id = @GC_ID
and OU.is_cancelled = 0

set @Octroi_Amount = round(isnull(@Octroi_Amount,0),0)

return @Octroi_Amount

END


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
  
  
  
  
  
  
  
-- Author: <Shiv kumar mishra>  
-- Create date: Nov  05 2008  5:13PM  
-- Description: <Godown Delivery Confirmation(GDC) Readvalues>  
-- =============================================  
CREATE proc [dbo].[EC_Opr_GDC_ReadValues]  
(  
 @Branch_Id int,  
 @Year_Code int,  
 @GDC_Id int,  
 @Division_Id int,  
 @GetGCXML xml,  
 @GDC_Date datetime  
)  
as  
BEGIN  
  
DECLARE @idoc int  
EXEC sp_xml_preparedocument @idoc OUTPUT, @GetGCXML  
  
declare @gc_maxlength int  
select @gc_maxlength = GC_No_Length from ec_master_Company_gc_parameter  
  
declare @temp table(gc_no varchar(20))  
insert into @temp   
select   
case charindex('-',item) when 0 then dbo.Get_No_To_Print(item,@gc_maxlength) else item end  
from OPENXML(@idoc,'/parentroot/root',2)  
WITH (item varchar(20))  
  
declare @CompParameterId bit,@Is_dly_Mr_Req_Before_Godown_Dly bit,@ClientCode as varchar(20)  
set @CompParameterId = 0  
set @Is_dly_Mr_Req_Before_Godown_Dly = 0

set @ClientCode = (select isnull(Client_Code,'') From ec_master_Company)  
  
select @CompParameterId = Is_Dly_Details_Req ,
@Is_dly_Mr_Req_Before_Godown_Dly = Is_dly_Mr_Req_Before_Godown_Dly  
from dbo.EC_Master_Company_Parameters  
  
IF(@GDC_Id <= 0)  ---For ADD  
 begin  
 select 'false' as Att,Article.GC_ID,  
   dbo.dateonlydisplay(GC_Date) as GC_Date,  
   dbo.dateonlydisplay(Committed_Del_Date) as Committed_Del_Date,  
   Article.Article_Id,  
   GC.GC_No_For_Print,  
   0 as is_updated,'' as Delivery_Time,  
   0 as Delivery_Mode_ID,'' as Delivery_Mode_Description, 
   '' as Delivery_Taken_By,'' as Contact_No, 
   Branch.Branch_Name as Booking_Branch_Name,  
   Payment_Type,'' as Packing_Type,  
   GC.Total_Articles as Booking_Articles,  
   GC.Total_Actual_Weight as Booking_Actual_Wt,  
   Articles as Balance_Articles,  
   Article_Actual_Weight as Balance_Actual_Wt,  
   Articles as Delivery_Articles,  
   Article_Actual_Weight as Delivery_Actual_Wt,  
   Article.Article_ID as Previous_Article_ID,  
   Article.Status_ID as Previous_Status_ID,  
   Article.Document_ID as Previous_Document_ID,  
   Article.Document_No_For_Print as Previous_Document_No_For_Print,  
   Article.Document_Date as Previous_Document_Date,  
   convert(varchar(10),Document_Date,103) as AUS_Date,  
   Document_Date as AUS_Date1,isnull(Truck_Unloaded_Time,'00:00') as AUS_Time,  
   0 as Cne_Copy_Status_ID,0 as Delivery_Against_ID,  
   0 as Delivery_To_ID,  
   GC_No_For_Print as Item_No,  
   case when (GC.Is_Octroi_Updated = 0 and Dlyserloc.is_octroi = 1) then 0 else 1 end as 'Octroi_Updated',  
   @CompParameterId as IsDelDetailsReq  
 From EC_Opr_Vtrans_GC_Articles Article  
   inner join EC_Opr_Vtrans_GC GC   
   on Article.GC_ID=GC.GC_ID  
   inner join EC_Master_Branch Branch   
   on GC.From_Branch_ID = Branch.Branch_Id  
   inner join EC_Master_service_location Dlyserloc  
   on GC.To_Location_ID = Dlyserloc.Service_Location_ID  
   inner join EC_Master_Payment_Type Pay   
   on GC.Payment_Type_Id = Pay.Payment_Type_Id    
   left outer join EC_Opr_VTrans_Actual_Unloading_Sheet AUS  
   on Article.Document_ID = AUS.Actual_Unloading_Sheet_ID  
 where cast(dbo.DateOnly(Document_Date)as Datetime) <= cast(dbo.DateOnly(@GDC_Date)as Datetime)  
   and Article.Current_Branch_Id=@Branch_Id  
   and GC.Delivery_Branch_Id=@Branch_Id  
   and GC.Is_Cancelled = 0   
   and GC.Year_Code = case GC.Is_Opening_Gc when 1 then 0 else @Year_Code end  

----------------pankaj 34 jun 09 for excel--------------
   and ((@Is_dly_Mr_Req_Before_Godown_Dly = 1 and GC.delivery_mr_id > 0)
		or @Is_dly_Mr_Req_Before_Godown_Dly = 0)
----------------pankaj 34 jun 09 for excel--------------
   and Article.Is_Cancelled=0  
   and Article.Status_ID = 60  
   and Article.Articles >0  
   and GC.Delivery_Type_Id = 1  
   AND GC_No_For_print in (select gc_no from @temp)  
  
  
 end  
  
ELSE      ---For EDIT  
 begin  
  
  select 'true' as Att,  
    Article.GC_ID,  
    dbo.dateonlydisplay(GC_Date) as GC_Date,  
    dbo.dateonlydisplay(Committed_Del_Date) as Committed_Del_Date,  
    Article.Article_Id,  
    GC_No_For_Print,  
    1 as is_updated,  
    DDCDet.Delivery_Time,  
    DDCDet.Delivery_Mode_ID,  
    DDCDet.Delivery_Mode_Description,
    DDCDet.Delivery_Taken_By,
    DDCDet.Contact_No,  
    Branch.Branch_Name as Booking_Branch_Name,  
    Payment_Type,'' as Packing_Type,  
    GC.Total_Articles as Booking_Articles,  
    GC.Total_Actual_Weight as Booking_Actual_Wt,  
    dbo.Ec_Opr_GetBalanceArticles(@Branch_Id,Article.GC_ID,DDCDet.Delivered_Articles,article.status_id) as Balance_Articles,  
    dbo.Ec_Opr_GetBalanceActualWeight(@Branch_Id,Article.GC_ID,DDCDet.Delivered_Actual_Wt,article.status_id) as Balance_Actual_Wt,  
    DDCDet.Delivered_Articles as Delivery_Articles,  
    DDCDet.Delivered_Actual_Wt as Delivery_Actual_Wt,  
    DDCDet.Previous_Article_ID,  
    DDCDet.Previous_Status_ID,  
    DDCDet.Previous_Document_ID,  
    DDCDet.Previous_Document_No_For_Print,  
    DDCDet.Previous_Document_Date,  
    convert(varchar(10),AUS_Date,103) as AUS_Date,  
    AUS_Date as AUS_Date1,  
    AUS_Time,GC_No_For_Print as Item_No,  
    Cne_Copy_Status_ID,  
       Delivery_Against_ID,  
       Delivery_To_ID,  
    1 as 'Octroi_Updated',  
    @CompParameterId as IsDelDetailsReq  
  
  From EC_Opr_Vtrans_GC_Articles Article  
    inner join EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDCDet  
    on Article.Article_Id = DDCDet.Article_Id  
                inner join EC_Opr_VTrans_Door_Delivery_Confirmation DDC   
    on DDC.DDC_ID=DDCDet.DDC_ID  
    inner join EC_Opr_Vtrans_GC GC   
    on Article.GC_ID=GC.GC_ID  
    inner join EC_Master_Branch Branch   
    on GC.From_Branch_ID = Branch.Branch_Id  
    inner join EC_Master_Payment_Type Pay   
    on GC.Payment_Type_Id = Pay.Payment_Type_Id      
  where DDCDet.DDC_ID = @GDC_Id  
    and cast(dbo.DateOnly(DDCDet.Previous_Document_Date)as Datetime) <= cast(dbo.DateOnly(@GDC_Date)as Datetime)  
--    and Article.Current_Branch_Id=@Branch_Id  
    and GC.Delivery_Type_Id = 1  
  
  
  -------------Master Details --------------------  
  
  select DDC_No_For_Print,DDC_Date,  
    Godown_Supervisor_ID as Supervisor_ID,  
    (Emp.First_Name+' '+Emp.Middle_Name+' '+Emp.Last_Name)as Supervisor_Name,  
    Total_No_Of_GC,  
    Total_DDC_Articles,  
    Total_DDC_Actual_Wt,  
    Remarks  
  From EC_Opr_VTrans_Door_Delivery_Confirmation DDC   
    inner join EC_Master_Employee Emp  
  on  DDC.Godown_Supervisor_ID = Emp.Emp_Id  
  where DDC_ID = @GDC_Id  
--    and DDC_Branch_ID = @Branch_Id  
    and Is_Cancelled = 0  
  
 End  
  
 EXEC sp_xml_removedocument @idoc  
  
END  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO











	-- =============================================  
	-- Author:  <Dinesh Mahajan>  
	-- Create date: march 24 2009
	-- Description: < Rectification_GC_Save >  
	-- =============================================  

	CREATE Proc [dbo].[EC_Opr_Rectification_GC_Save]  
	(  
		@Year_Code int = 0,  
		@Division_ID int = 0 ,  
		@Is_Centralised bit = 0 ,  
		@Centralised_Booking_Branch_Id int = 0 ,  
		@Document_Series_Allocation_ID int = 0 ,  
		@GC_Id int = 0 ,  
		@GC_No int = 0 ,  
		@GC_No_For_Print varchar(20) = '' ,  

		@VA_Id int = 0 ,  
		@Pickup_Type_Id int = 0 ,  
		@GC_Date datetime = getdate  ,  
		@GC_Time varchar(8) = '' ,  
		@Committed_Del_Date datetime = getdate , 
		@Consignment_Type_Id int = 0 ,  
		@Booking_Mode_Id int = 0 ,  
		@Booking_Type_Id int= 0,  
		@Booking_Sub_Type_Id int= 0,  
		@Delivery_Way_Type_ID int=1,
		@Payment_Type_Id int = 0 ,  
		@Delivery_Type_Id int = 0 ,  
		@Door_Delivery_Against_ID int = 0 ,  

		@From_Branch_ID int = 0 ,  
		@From_Location_ID int = 0 ,  
		@To_Location_ID int = 0 ,  
		@Delivery_Branch_Id int = 0 ,  
		@Vehicle_Type_Id int = 0 ,  
		@Vehicle_No nvarchar(40) = '' ,  
		@STM_No nvarchar(50) = '' ,  
		@Feasibility_Route_Survey_No nvarchar(100) = '' ,  
		@Consignee_Client_ID int = 0 ,  

		@Consignee_Name varchar(100) = '' ,  
		@Consignee_Add1 varchar(250) = '' ,  
		@Consignee_Add2 varchar(250) = '' ,  
		@Consignee_City_ID int = 0 ,  
		@Consignee_City varchar(50) = '' ,  
		@Consignee_Pin_Code varchar(20) = '' ,  
		@Consignee_Country_Id int = 0 ,  
		@Consignee_Country varchar(50) = '' ,  
		@Consignee_State_ID int = 0 ,  
		@Consignee_State varchar(50) = '' ,  
		@Consignee_Tel_No varchar(25) = '' ,  
		@Consignee_Mobile_No varchar(25) = '' ,  
		@Consignee_EMail varchar(50) = '' ,  
		@Consignee_CST_TIN_No varchar(50) = '' , 

		@Is_Consignee_Service_Tax_Applicable bit = 0 ,

		@Consignor_Client_ID int = 0 ,  

		@Consignor_Name varchar(100) = '' ,  
		@Consignor_Add1 varchar(250) = '' ,  
		@Consignor_Add2 varchar(250) = '' ,  
		@Consignor_City_ID int = 0 ,  
		@Consignor_City varchar(50) = '' ,  
		@Consignor_Pin_Code varchar(20) = '' ,  
		@Consignor_Country_ID int = 0 ,  
		@Consignor_Country varchar(50) = '' ,  
		@Consignor_State_ID int = 0 ,  
		@Consignor_State varchar(50) = '' ,  
		@Consignor_Tel_No varchar(25) = '' ,  
		@Consignor_Mobile_No varchar(25) = '' ,  
		@Consignor_EMail varchar(50) = '' ,  
		@Consignor_CST_TIN_No varchar(50) = '' ,  

		@Is_Consignor_Service_Tax_Applicable bit = 0 ,

		@DD_Address_1 varchar(100) = '' ,  
		@DD_Address_2 varchar(100) = '' ,  
		@Acknowledge bit = 0 ,  
		@Total_Articles int = 0 ,  
		@Total_Actual_Weight numeric(18,2) = 0 ,  
		@Charged_Weight numeric(18,2) = 0 ,  
		@Total_Invoice_Value numeric(18,2) = 0 ,  
		@Is_DACC bit = 0 ,  
		@Freight_Rate numeric(18,2) = 0 ,  
		@Freight_Amt numeric(18,2) = 0 ,  
		@Local_Charges numeric(18,2) = 0 ,  
		@Bilti_Charges numeric(18,2) = 0 ,  
		@Hamali_Per_Kg numeric(18,2) = 0 ,  
		@Hamali_Charges numeric(18,2) = 0 ,  
		@DD_Charges numeric(18,2) = 0 ,  
		@TP_Charges numeric(18,2) = 0 ,  
		@Other_Charges numeric(18,2) = 0 ,  
		@Tax_Abate_Percent numeric(18,2) = 0 ,  
		@Tax_Abate numeric(18,2) = 0 ,  
		@Amt_Taxable numeric(18,2) = 0 ,  
		@FOVPercent numeric(18,2) = 0 ,  
		@FOV numeric(18,2) = 0 ,  
		@ODA_Charges numeric(18,2) = 0 ,  
		@Oda_charges_upto_500_Kg numeric(18,2) = 0 ,  
		@Oda_charges_above_500_Kg numeric(18,2) = 0 ,  
		@Sub_Total numeric(18,2) = 0 ,  
		@Advance_Amount numeric(18,2) = 0 ,  
		@Service_Tax_Percent numeric(18,2) = 0 ,  
		@Service_Tax_Amount numeric(18,2) = 0 ,  
		@Total_GC_Amount numeric(18,2) = 0 ,  
		@Std_Freight_Rate numeric(18,2) = 0 ,  
		@Std_Freight_Amt numeric(18,2) = 0 ,  
		@Std_Local_Charge_Rate numeric(18,2) = 0 ,  
		@Std_Local_Charge numeric(18,2) = 0 ,  
		@Std_Hamali_Charge numeric(18,2) = 0 ,  
		@Std_DD_Charge_Rate numeric(18,2) = 0,  
		@Std_DD_Charge numeric(18,2) = 0 ,  
		@Std_Bilti_Charges numeric(18,2) = 0 ,  
		@Std_Service_Tax_Amount numeric(18,2) = 0 ,  
		@Std_FOV numeric(18,2) = 0 ,  
		@Std_TP_Charges numeric(18,2) = 0 ,  

		@Std_CFT_Factor numeric(18,2)= 0 ,  

		@Is_Cheque bit = 0 ,  
		@Cheque_No int = 0 ,  
		@Cheque_Date datetime = getdate ,  
		@Bank_Name varchar(100) = '' ,  
		@Cash_Amount numeric(18,2) = 0 ,  
		@Cheque_Amount numeric(18,2) = 0 ,  
		@Tax_Payable_By int = 0 ,  
		@Contract_Branch_ID int = 0 ,  
		@Contract_ID int = 0 ,  
		@Billing_Client_ID int = 0 ,  
		@Billing_Branch_Id int = 0 ,  
		@Billing_Remarks varchar(50) = '' ,  
		@Risk_Type_ID int = 0 ,  
		@Insurance_Company varchar(100) = '' ,  
		@Policy_No nvarchar(50) = '' ,  
		@Policy_Exp_Date datetime = getdate ,  
		@Policy_Amount numeric(18,2) = 0 ,  
		@Risk_Amount numeric(18,2) = 0 ,  
		@Freight_Basis_ID int = 0 ,  
		@Volumetric_Freight_Unit_ID int = 0 ,  
		@Unit_Of_Measurement_ID int = 0 ,  
		@Total_Length numeric(18,2) = 0 ,  
		@Total_Width numeric(18,2) = 0 ,  
		@Total_Height numeric(18,2) = 0 ,  

		@Total_Length_In_Feet numeric(18,2) = 0 ,  
		@Total_Width_In_Feet numeric(18,2) = 0 ,  
		@Total_Height_In_Feet numeric(18,2) = 0 ,  

		@CFT_Factor numeric(18,2) = 0 ,  
		@Total_CFT numeric(18,2) = 0 ,  
		@Total_CBM numeric(18,2) = 0 ,  
		@Customer_Ref_No varchar(20) = '' ,  
		@GC_Remarks varchar(250) = '' ,  
		@GC_Remarks_Other_Charges varchar(100) = '' ,  
		@Enclosures varchar(150) = '' ,  
		@Is_Billed bit = 0 ,  
		@Is_ODA bit = 0 ,  
		@Is_Octroi_Applicable bit = 0 ,
		@Oct_Form_Type varchar(1) = '' ,  
		@Oct_Type_Id int = 0 ,  
		@Oct_Bill_No nvarchar(30) = '' ,  
		@Oct_Bill_Date datetime = getdate ,  
		@Oct_Receipt_No varchar(15) = '' ,  
		@Oct_Amount numeric(18,2) = 0 ,  
		@Oct_Remark varchar(200) = '' ,  
		@Is_Consignor_Regular_Client bit = 0 ,  
		@Is_Consignee_Regular_Client bit = 0 ,  
		@Loading_Supervisor_ID int = 0 ,  
		@Marketing_Executive_ID int = 0 ,  
		@Status_Id int = 0 ,  
		@Is_Cancelled bit = 0 ,  
		@Created_On datetime = getdate ,  
		@Created_By int = 0 ,  
		@Updated_On datetime = getdate ,  
		@Updated_By int = 0 ,  
		@Error_Code int output ,  
		@Error_Desc AS VARCHAR(4000) = '' OUTPUT ,  
		@Invoice_Xml as xml = '<doc></doc>' ,  
		@Multiple_Commodity_Xml as xml = '<doc></doc>' ,
		@Article_Status_ID int = 0 , -- added by pankaj 28 nov 08 5.55 pm
		@Road_Permit_Type_Id int = 0 , 
		@GC_Instruction_Id int = 0 ,
		@Other_Charges_Xml as xml = '<doc></doc>' ,
		@Billing_Details_Xml as xml = '<doc></doc>' ,

		@Is_Attached bit = 0 ,
		@Attached_GC_Id int = 0 ,
		@Is_Multiple_Billing bit = 0 ,
		@Is_Oct_Recovered_From_Consignee bit = 1 ,
		@Is_Octroi_Updated bit = 0 ,
		@Is_ReBooked bit = 0 ,
		@ReBook_GC_Id int = 0 ,
		@New_ReBook_GC_Id int = 0 ,
		@ReBook_Against_GC_Id int = 0 ,
		@ReBook_Charges numeric(18,2)= 0 ,
		@ReBook_GC_Sub_Total numeric(18,2)= 0 ,

		@DACC_Charges numeric(18,2)= 0 ,
		@Std_DACC_Charge numeric(18,2)= 0 ,

		@Std_Octroi_Form_Charges numeric(18,2)= 0 ,
		@Std_Octroi_Service_Charges numeric(18,2)= 0 ,
		@Std_Demurrage_Days numeric(18,2)= 0 ,
		@Std_Demurrage_Rate numeric(18,2)= 0 ,
		@Std_GI_Charges numeric(18,2)= 0 ,

		@Previous_Article_ID int = 0 ,
		@Previous_Status_ID int = 0 ,
		@Previous_Document_ID int = 0 ,
		@Previous_Document_No_For_Print varchar(50) = '' ,
		@Previous_Document_Date datetime = getdate , 
		@Is_SignedByConsignor bit = 0 ,
		@Print_Doc_ID int = 0 output ,
		@Length_Charge_Head_Id int = 0 ,
		@Length_Charge numeric(18,2)= 0 ,
		@ReBook_GC_Octroi_Paid_By_ID int = 0 ,
		@ReBook_Octroi_Amount numeric(18,2)= 0 ,
		@Document_Id int = 2 , 
		@Road_Permit_SrNo varchar(50) = '' ,
		@Is_Insured bit = 0 ,
		@Agency_Branch_ID int = 0 ,
		@Hamali_Per_Articles numeric(18,2) = 0 ,
		@Billing_Party_Ledger_Id int = 0 ,
		@Billing_Party_Credit_Limit numeric(18,2) = 0 ,
		@Is_Opening_GC bit = 0 ,
		@Booking_Branch_Id int = 0 ,
		@Arrived_From_Branch_Id int = 0 ,
		@Arrived_Date datetime = getdate ,
		@Menu_Item_Id int = 30 ,
		@Unloading_Charge numeric(18,2) = 0 ,
		@Private_Mark varchar(20) = '' ,
		@Is_Auto_Booking_MR_For_Paid_Booking bit = 0 ,
		@Cheque_Details_Xml as xml = '<doc></doc>' ,
		@Default_Cash_Ledger_Id int = 0 ,
		@Is_Short_GC bit = 0 ,

		@Container_Type_Id int = 0 ,
		@ContainerNo1 varchar(20) = '' ,
		@ContainerNo2 varchar(20) = '' ,
		@SealNo varchar(20) = '' ,
		@Return_To_Yard_Id  int = 0 ,
		@NFormNo varchar(20) = '' ,
		@NForm_Charge numeric(18,2) = 0 ,
		@Std_NForm_Charge numeric(18,2) = 0  ,
        @Billing_Hierarchy varchar(5) ='BO',
		@AgencyGC_No_For_Print nvarchar(40) =0,
		@Agency_Ledger_Id int = 0
	)  
	As 
		set @Error_Code = 0;
		set @ERROR_DESC = '';
		set @Print_Doc_ID = 0;

--		if @GC_Id > 0 and dbo.Ec_Opr_Can_Edit_Cancel ('GC',@GC_Id ) = 0  
--		begin
--			set @Error_Code = 1012
--			set @ERROR_DESC = 'Cant Edit';
--			return;  
--		end  

	BEGIN TRY  
	BEGIN TRAN  
	BEGIN  
	SET NOCOUNT ON;  

		declare @idoc int
		declare @Article_ID int
		declare @AUS_Article_ID int
		declare @MR_ID int

		declare @GC_Rectification_ID int
		declare @GC_Commodity_Details_Rectification_History_ID int
		declare @GC_Invoice_Details_Rectification_History_ID int
		declare @GC_Other_Charges_Rectification_History_ID int
		declare @GC_Billing_Details_Rectification_History_ID int

		declare @Actual_Unloading_Sheet_ID int
		declare @Actual_Unloading_Sheet_No int

		declare @Actual_Unloading_Sheet_No_For_Print varchar(100)	

		declare @Service_Tax_On_Advance numeric(18,2)
		declare @Taxable_Advance_Amount numeric(18,2)
		
		set @Service_Tax_On_Advance = 0
		set @Taxable_Advance_Amount = 0

		set @MR_ID = 0
		set @Article_ID = 0

		select @MR_ID = Booking_MR_ID from EC_Opr_VTrans_GC where GC_Id = @GC_Id

		if @Is_ODA = 0
		begin
			set @ODA_Charges = 0
			set @Oda_charges_upto_500_Kg = 0
			set	@Oda_charges_above_500_Kg = 0
		end

		if @Is_Attached = 0
		begin
			set @Attached_GC_Id = 0
		end

		if @Is_ReBooked = 0   
		begin
			set @ReBook_Charges = 0
			set @ReBook_Against_GC_Id = 0			
		end

		if @Payment_Type_Id <> 3
		begin
			set @Billing_Client_ID = 0
			set @Billing_Branch_Id = 0
		end		 

		if @Payment_Type_Id = 1
		begin			 
			set @Taxable_Advance_Amount = @Advance_Amount 

			if @Tax_Payable_By = 3
			begin
				set @Taxable_Advance_Amount = @Advance_Amount * 0.25				
			end		
			
			set @Service_Tax_On_Advance = @Taxable_Advance_Amount *	@Service_Tax_Percent / 100

			set @Service_Tax_On_Advance = round(@Service_Tax_On_Advance ,0)
		end		
		else
		begin
			set @Advance_Amount = 0
			set @Taxable_Advance_Amount = 0 
			set @Service_Tax_On_Advance = 0	
		end

		if @Document_Id <= 0
		begin			
			set @Document_Id = 2 -- normal gc
			select @Document_Id = cast(querystring as int) from COM_Adm_Menu_Item
			where MenuItem_ID = @Menu_Item_Id
		end

		declare @Booking_Year_Code int
		declare @AUS_Year_Code int

		set @Booking_Year_Code = @Year_Code 
		set @AUS_Year_Code = @Year_Code 

		if @Is_Opening_GC = 1 or @Menu_Item_Id = 200 -- 200 = opening gc 		begin
			set @Booking_Year_Code = 0
			set @Document_Id = 2
			set @Document_Series_Allocation_ID = 0
		end
		-- 
		insert into Ec_Opr_Vtrans_GC_Rectification_History(
			--		GC_Rectification_ID,
			GC_ID						,	 
			Old_Pickup_Type_Id			,	Pickup_Type_Id,
			Old_GC_Date					,	GC_Date,
			Old_GC_Time					,	GC_Time,
			Old_Committed_Del_Date		,	Committed_Del_Date,
			Old_Consignment_Type_Id		,	Consignment_Type_Id,
			Old_Booking_Mode_Id			,	Booking_Mode_Id,
			Old_Booking_Type_Id			,	Booking_Type_Id,
			Old_Booking_Sub_Type_ID		,	Booking_Sub_Type_ID,
			Old_Payment_Type_Id			,	Payment_Type_Id,
			Old_Delivery_Type_Id		,	Delivery_Type_Id,
			Old_Door_Delivery_Against_ID,	Door_Delivery_Against_ID,
			Old_Vehicle_Type_Id			,	Vehicle_Type_Id,
			Old_Vehicle_No				,	Vehicle_No,
			Old_STM_No					,	STM_No,
			Old_Feasibility_Route_Survey_No,Feasibility_Route_Survey_No,
			Old_Acknowledge				,	Acknowledge,
			Old_Total_Articles			,	Total_Articles,
			Old_Total_Actual_Weight		,	Total_Actual_Weight,
			Old_Loaded_Articles			,	Loaded_Articles,
			Old_Loaded_Actual_Weight	,	Loaded_Actual_Weight,
			Old_Charged_Weight			,	Charged_Weight,
			Old_Total_Invoice_Value		,	Total_Invoice_Value,
			Old_Length_Charge_Head_Id	,	Length_Charge_Head_Id,
			Old_Freight_Rate			,	Freight_Rate,
			Old_Freight_Amt				,	Freight_Amt,
			Old_Length_Charge			,	Length_Charge,
			Old_Unloading_Charge		,	Unloading_Charge,
			Old_NForm_Charge			,	NForm_Charge,
			Old_Local_Charges			,	Local_Charges,
			Old_Bilti_Charges			,	Bilti_Charges,
			Old_Hamali_Per_Kg			,	Hamali_Per_Kg,
			Old_Hamali_Charges			,	Hamali_Charges,
			Old_Hamali_Per_Articles		,	Hamali_Per_Articles,
			Old_DD_Charges				,	DD_Charges,
			Old_DACC_Charges			,	DACC_Charges,
			Old_TP_Charges				,	TP_Charges,
			Old_Other_Charges			,	Other_Charges,
			Old_Tax_Abate				,	Tax_Abate,
			Old_Amt_Taxable				,	Amt_Taxable,
			Old_FOV						,	FOV,
			Old_ODA_Charges				,	ODA_Charges,
			Old_ReBook_Charges			,	ReBook_Charges,
			Old_ReBook_GC_Sub_Total		,	ReBook_GC_Sub_Total,
			Old_Sub_Total				,	Sub_Total,
			Old_Advance_Amount			,	Advance_Amount,
			Old_Service_Tax_Percent		,	Service_Tax_Percent,
			Old_Service_Tax_Amount		,	Service_Tax_Amount,
			Old_ReBook_Octroi_Amount	,	ReBook_Octroi_Amount,
			Old_Total_GC_Amount			,	Total_GC_Amount,
			Old_Std_Freight_Rate		,	Std_Freight_Rate,
			Old_Std_Freight_Amt			,	Std_Freight_Amt,
			Old_Std_Local_Charge_Rate	,	Std_Local_Charge_Rate,
			Old_Std_Local_Charge		,	Std_Local_Charge,
			Old_Std_Hamali_Charge		,	Std_Hamali_Charge,
			Old_Std_DD_Charge_Rate		,	Std_DD_Charge_Rate,
			Old_Std_DD_Charge			,	Std_DD_Charge,
			Old_Std_DACC_Charge			,	Std_DACC_Charge,
			Old_Std_Bilti_Charges		,	Std_Bilti_Charges,
			Old_Std_Service_Tax_Amount	,	Std_Service_Tax_Amount,
			Old_Std_FOVPercent			,	Std_FOVPercent,
			Old_Std_FOV					,	Std_FOV,
			Old_Std_TP_Charges			,	Std_TP_Charges,
			Old_Std_CFT_Factor			,	Std_CFT_Factor,
			Old_Std_Octroi_Form_Charges	,	Std_Octroi_Form_Charges,
			Old_Std_Octroi_Service_Charges,	Std_Octroi_Service_Charges,
			Old_Std_Demurrage_Days		,	Std_Demurrage_Days,
			Old_Std_Demurrage_Rate		,	Std_Demurrage_Rate,
			Old_Std_GI_Charges			,	Std_GI_Charges,
			Old_Std_NForm_Charge		,	Std_NForm_Charge,
			Old_Is_Cheque				,	Is_Cheque,
			Old_Cheque_No				,	Cheque_No,
			Old_Cheque_Date				,	Cheque_Date,
			Old_Bank_Name				,	Bank_Name,
			Old_Cash_Amount				,	Cash_Amount,
			Old_Cheque_Amount			,	Cheque_Amount,
			Old_Tax_Payable_By			,	Tax_Payable_By,
			Old_Contract_Branch_ID		,	Contract_Branch_ID,
			Old_Contract_ID				,	Contract_ID,
			Old_Billing_Client_ID		,	Billing_Client_ID,
			Old_Billing_Branch_Id		,	Billing_Branch_Id,
			Old_Billing_Remarks			,	Billing_Remarks,
			Old_Risk_Type_ID			,	Risk_Type_ID,
			Old_Insurance_Company		,	Insurance_Company,
			Old_Policy_No				,	Policy_No,
			Old_Policy_Exp_Date			,	Policy_Exp_Date,
			Old_Policy_Amount			,	Policy_Amount,
			Old_Risk_Amount				,	Risk_Amount,
			Old_Freight_Basis_ID		,	Freight_Basis_ID,
			Old_Volumetric_Freight_Unit_ID,	Volumetric_Freight_Unit_ID,
			Old_Unit_Of_Measurement_ID	,	Unit_Of_Measurement_ID,
			Old_Total_Length			,	Total_Length,
			Old_Total_Width				,	Total_Width,
			Old_Total_Height			,	Total_Height,
			Old_Total_Length_In_Ft		,	Total_Length_In_Ft,
			Old_Total_Width_In_Ft		,	Total_Width_In_Ft,
			Old_Total_Height_In_Ft		,	Total_Height_In_Ft,
			Old_CFT_Factor				,	CFT_Factor,
			Old_Total_CFT				,	Total_CFT,
			Old_Total_CBM				,	Total_CBM,
			Old_Customer_Ref_No			,	Customer_Ref_No,
			Old_GC_Remarks				,	GC_Remarks,
			Old_GC_Remarks_Other_Charges,	GC_Remarks_Other_Charges,
			Old_Enclosures				,	Enclosures,
			Old_Is_ODA					,	Is_ODA,
			Old_Is_Octroi_Applicable	,	Is_Octroi_Applicable,
			Old_ReBook_GC_Octroi_Paid_By_ID,ReBook_GC_Octroi_Paid_By_ID,
			Old_Is_Oct_Recovered_From_Consignee	,	Is_Oct_Recovered_From_Consignee,
			Old_Loading_Supervisor_ID	,	Loading_Supervisor_ID,
			Old_Marketing_Executive_ID	,	Marketing_Executive_ID,
			Old_Road_Permit_Type_ID		,	Road_Permit_Type_ID,
			Old_Instructions			,	Instructions,
			Old_Is_Multiple_Billing		,	Is_Multiple_Billing,
			Old_Is_Signed_By_Consignor	,	Is_Signed_By_Consignor,
			Old_Road_Permit_SrNo		,	Road_Permit_SrNo,
			Old_Is_Insured				,	Is_Insured,
			Old_Private_Mark			,	Private_Mark,
			Old_Rectifi_On				,	Rectifi_On,
			Old_Rectifi_By				,	Rectifi_By ,
			Old_Container_Type_Id		,	Container_Type_Id ,
			Old_ContainerNo1			,	ContainerNo1  ,
			Old_ContainerNo2			,	ContainerNo2  ,
			Old_SealNo					,	SealNo  ,
			Old_Return_To_Yard_Id		,	Return_To_Yard_Id  ,
			Old_NFormNo					,	NFormNo ,
			Old_Delivery_Way_Type_ID,	Delivery_Way_Type_ID)
		select 
			@GC_ID						,
			Pickup_Type_Id				,	@Pickup_Type_Id,
			GC_Date						,	@GC_Date,
			GC_Time						,	@GC_Time,
			Committed_Del_Date			,	@Committed_Del_Date,
			Consignment_Type_Id			,	@Consignment_Type_Id,
			Booking_Mode_Id				,	@Booking_Mode_Id,
			Booking_Type_Id				,	@Booking_Type_Id,
			Booking_Sub_Type_ID			,	@Booking_Sub_Type_ID,
			Payment_Type_Id				,	@Payment_Type_Id,
			Delivery_Type_Id			,	@Delivery_Type_Id,
			Door_Delivery_Against_ID	,	@Door_Delivery_Against_ID,
			Vehicle_Type_Id				,	@Vehicle_Type_Id,
			Vehicle_No					,	@Vehicle_No,
			STM_No						,	@STM_No,
			Feasibility_Route_Survey_No	,	@Feasibility_Route_Survey_No,
			Acknowledge					,	@Acknowledge,
			Total_Articles				,	@Total_Articles,
			Total_Actual_Weight			,	@Total_Actual_Weight,
			Loaded_Articles				,	@Total_Articles,--@Loaded_Articles,
			Loaded_Actual_Weight		,	@Total_Actual_Weight,--@Loaded_Actual_Weight,
			Charged_Weight				,	@Charged_Weight,
			Total_Invoice_Value			,	@Total_Invoice_Value,
			Length_Charge_Head_Id		,	@Length_Charge_Head_Id,
			Freight_Rate				,	@Freight_Rate,
			Freight_Amt					,	@Freight_Amt,
			Length_Charge				,	@Length_Charge,
			Unloading_Charge			,	@Unloading_Charge,
			NForm_Charge				,	@NForm_Charge,
			Local_Charges				,	@Local_Charges,
			Bilti_Charges				,	@Bilti_Charges,
			Hamali_Per_Kg				,	@Hamali_Per_Kg,
			Hamali_Charges				,	@Hamali_Charges,
			Hamali_Per_Articles			,	@Hamali_Per_Articles,
			DD_Charges					,	@DD_Charges,
			DACC_Charges				,	@DACC_Charges,
			TP_Charges					,	@TP_Charges,
			Other_Charges				,	@Other_Charges,
			Tax_Abate					,	@Tax_Abate,
			Amt_Taxable					,	@Amt_Taxable,
			FOV							,	@FOV,
			ODA_Charges					,	@ODA_Charges,
			ReBook_Charges				,	@ReBook_Charges,
			ReBook_GC_Sub_Total			,	@ReBook_GC_Sub_Total,
			Sub_Total					,	@Sub_Total,
			Advance_Amount				,	@Advance_Amount,
			Service_Tax_Percent			,	@Service_Tax_Percent,
			Service_Tax_Amount			,	@Service_Tax_Amount,
			ReBook_Octroi_Amount		,	@ReBook_Octroi_Amount,
			Total_GC_Amount				,	@Total_GC_Amount,
			Std_Freight_Rate			,	@Std_Freight_Rate,
			Std_Freight_Amt				,	@Std_Freight_Amt,
			Std_Local_Charge_Rate		,	@Std_Local_Charge_Rate,
			Std_Local_Charge			,	@Std_Local_Charge,
			Std_Hamali_Charge			,	@Std_Hamali_Charge,
			Std_DD_Charge_Rate			,	@Std_DD_Charge_Rate,
			Std_DD_Charge				,	@Std_DD_Charge,
			Std_DACC_Charge				,	@Std_DACC_Charge,
			Std_Bilti_Charges			,	@Std_Bilti_Charges,
			Std_Service_Tax_Amount		,	@Std_Service_Tax_Amount,
			Std_FOVPercent				,	@FOVPercent,
			Std_FOV						,	@Std_FOV,
			Std_TP_Charges				,	@Std_TP_Charges,
			Std_CFT_Factor				,	@Std_CFT_Factor,
			Std_Octroi_Form_Charges		,	@Std_Octroi_Form_Charges,
			Std_Octroi_Service_Charges	,	@Std_Octroi_Service_Charges,
			Std_Demurrage_Days			,	@Std_Demurrage_Days,
			Std_Demurrage_Rate			,	@Std_Demurrage_Rate,
			Std_GI_Charges				,	@Std_GI_Charges,
			Std_NForm_Charge			,	@Std_NForm_Charge,
			Is_Cheque					,	@Is_Cheque,
			Cheque_No					,	@Cheque_No,
			Cheque_Date					,	@Cheque_Date,
			Bank_Name					,	@Bank_Name,
			Cash_Amount					,	@Cash_Amount,
			Cheque_Amount				,	@Cheque_Amount,
			Tax_Payable_By				,	@Tax_Payable_By,
			Contract_Branch_ID			,	@Contract_Branch_ID,
			Contract_ID					,	@Contract_ID,
			Billing_Client_ID			,	@Billing_Client_ID,
			Billing_Branch_Id			,	@Billing_Branch_Id,
			Billing_Remarks				,	@Billing_Remarks,
			Risk_Type_ID				,	@Risk_Type_ID,
			Insurance_Company			,	@Insurance_Company,
			Policy_No					,	@Policy_No,
			Policy_Exp_Date				,	@Policy_Exp_Date,
			Policy_Amount				,	@Policy_Amount,
			Risk_Amount					,	@Risk_Amount,
			Freight_Basis_ID			,	@Freight_Basis_ID,
			Volumetric_Freight_Unit_ID	,	@Volumetric_Freight_Unit_ID,
			Unit_Of_Measurement_ID		,	@Unit_Of_Measurement_ID,
			Total_Length				,	@Total_Length,
			Total_Width					,	@Total_Width,
			Total_Height				,	@Total_Height,
			Total_Length_In_Ft			,	@Total_Length_In_Feet,
			Total_Width_In_Ft			,	@Total_Width_In_Feet,
			Total_Height_In_Ft			,	@Total_Height_In_Feet,
			CFT_Factor					,	@CFT_Factor,
			Total_CFT					,	@Total_CFT,
			Total_CBM					,	@Total_CBM,
			Customer_Ref_No				,	@Customer_Ref_No,
			GC_Remarks					,	@GC_Remarks,
			GC_Remarks_Other_Charges	,	@GC_Remarks_Other_Charges,
			Enclosures					,	@Enclosures,
			Is_ODA						,	@Is_ODA,
			Is_Octroi_Applicable		,	@Is_Octroi_Applicable,
			ReBook_GC_Octroi_Paid_By_ID	,	@ReBook_GC_Octroi_Paid_By_ID,
			Is_Oct_Recovered_From_Consignee	,@Is_Oct_Recovered_From_Consignee,
			Loading_Supervisor_ID		,	@Loading_Supervisor_ID,
			Marketing_Executive_ID		,	@Marketing_Executive_ID,
			Road_Permit_Type_ID			,	@Road_Permit_Type_ID,
			Instructions				,	@GC_Remarks,
			Is_Multiple_Billing			,	@Is_Multiple_Billing,
			Is_Signed_By_Consignor		,	@Is_SignedByConsignor ,
			Road_Permit_SrNo			,	@Road_Permit_SrNo,
			Is_Insured					,	@Is_Insured,
			Private_Mark				,	@Private_Mark,
			@Updated_On					,	@Updated_On,--@Rectifi_On,
			@Updated_By					,	@Updated_By,  --@Rectifi_By
			Container_Type_Id			,	@Container_Type_Id ,
			ContainerNo1				,	@ContainerNo1  ,
			ContainerNo2				,	@ContainerNo2,  
			SealNo						,	@SealNo  ,
			Return_To_Yard_Id			,	@Return_To_Yard_Id  ,
			NFormNo						,	@NFormNo  ,
			Delivery_Way_Type_ID		,	@Delivery_Way_Type_ID
		from EC_Opr_VTrans_GC
		where GC_ID = @GC_ID

		Set @GC_Rectification_ID = @@Identity   

		declare @Old_Rectifi_By int
		declare @Old_Rectifi_On datetime

		select @Old_Rectifi_By = 0
		select @Old_Rectifi_On = getdate()

		select top 1 @Old_Rectifi_By = Rectifi_By ,@Old_Rectifi_On = Rectifi_On
		from Ec_Opr_Vtrans_GC_Rectification_History
		where gc_id = @GC_ID and GC_Rectification_ID <> @GC_Rectification_ID
		order by GC_Rectification_ID desc
		
		if @Old_Rectifi_By = 0
		begin
			select	
				@Old_Rectifi_By = Updated_By,
				@Old_Rectifi_On = Updated_On 
			from 
				Ec_Opr_Vtrans_GC 
			where 
				gc_id = @GC_ID
		end

		update Ec_Opr_Vtrans_GC_Rectification_History
		set Old_Rectifi_By = @Old_Rectifi_By , Old_Rectifi_On = @Old_Rectifi_On 
		where GC_Rectification_ID = @GC_Rectification_ID 
		

		EXEC sp_xml_Preparedocument @idoc output,@Invoice_Xml    

		insert into EC_Opr_VTrans_GC_Invoice_Details_Rectification_History (
			GC_Rectification_ID	,	GC_ID,	GC_Invoice_Details_Id,
			Old_Invoice_No		,	Invoice_No,
			Old_Invoice_Amount	,	Invoice_Amount,
			Old_BE_BL_No		,	BE_BL_No ,
			Old_Chalan_No		,	Chalan_No )			
		select 
			@GC_Rectification_ID,@GC_Id,gc_invoice_id,'',invoice_no,
			0,invoice_amount,'',be_bl_no,'',chalan_no  
		from openXml(@idoc,'/newdataset/invoice',2)        
		With(gc_invoice_id int,invoice_no varchar(100),invoice_amount numeric(18,2),
			be_bl_no varchar(100),chalan_no varchar(100)) 

		Set @GC_Invoice_Details_Rectification_History_ID = @@Identity   

		update EC_Opr_VTrans_GC_Invoice_Details_Rectification_History
		set
			Old_Invoice_No		= GC_Invoice_Details.Invoice_No,
			Old_Invoice_Amount	= GC_Invoice_Details.Invoice_Amount,
			Old_BE_BL_No		= GC_Invoice_Details.BE_BL_No			
		from EC_Opr_VTrans_GC_Invoice_Details GC_Invoice_Details inner join 
			EC_Opr_VTrans_GC_Invoice_Details_Rectification_History on
			EC_Opr_VTrans_GC_Invoice_Details_Rectification_History.GC_ID = GC_Invoice_Details.GC_Id
		where
			GC_Rectification_ID = @GC_Rectification_ID			
			and EC_Opr_VTrans_GC_Invoice_Details_Rectification_History.GC_Invoice_Details_Id = GC_Invoice_Details.GC_Invoice_ID 
			and GC_Invoice_Details.GC_Id = @GC_ID

		EXEC sp_xml_removedocument @idoc

		EXEC sp_xml_Preparedocument @idoc output,@Other_Charges_Xml  

		if @Is_Attached = 0
		begin
			insert into EC_Opr_VTrans_GC_Other_Charges_Rectification_History(				
				GC_Rectification_ID			,	GC_ID, GC_Other_Charges_ID,
				Old_GC_Other_Charge_Head_ID	,	GC_Other_Charge_Head_ID,
				Old_Description				,	Description,
				Old_Amount					,	Amount)						
			select @GC_Rectification_ID, @GC_Id, GC_Other_Charges_ID, 0,
				   gc_other_charge_head_id, '', description, 0, amount
			from openXml(@idoc,'/newdataset/othercharges',2)        
			With(gc_other_charges_id int ,gc_other_charge_head_id int ,
				description varchar(100), amount  numeric(18,2),checked bit)
			where checked = 1

			Set @GC_Other_Charges_Rectification_History_ID = @@Identity   

			update EC_Opr_VTrans_GC_Other_Charges_Rectification_History
			set 								
				Old_GC_Other_Charge_Head_ID = GC_Other_Charges.GC_Other_Charge_Head_ID,
				Old_Description = GC_Other_Charges.Description,
				Old_Amount = GC_Other_Charges.Amount
			from EC_Opr_VTrans_GC_Other_Charges GC_Other_Charges
				inner join EC_Opr_VTrans_GC_Other_Charges_Rectification_History on
				EC_Opr_VTrans_GC_Other_Charges_Rectification_History.GC_ID = GC_Other_Charges.GC_Id
			where
				GC_Rectification_ID = @GC_Rectification_ID				
				and EC_Opr_VTrans_GC_Other_Charges_Rectification_History.gc_other_charges_id = GC_Other_Charges.gc_other_charges_id 
				and GC_Other_Charges.GC_Id = @GC_ID				
			end

		EXEC sp_xml_removedocument @idoc

		if @Payment_Type_Id = 3
		begin
			if  @Is_Multiple_Billing = 1
			begin
				EXEC sp_xml_Preparedocument @idoc output, @Billing_Details_Xml

				insert into EC_Opr_VTrans_GC_Billing_Details_Rectification_History(					
					GC_Rectification_ID    ,	GC_ID,GC_Billing_Details_ID,
					Old_Billing_Client_ID  ,	Billing_Client_ID,
					Old_Billing_Branch_ID  ,	Billing_Branch_ID,
					Old_Description		   ,	Description,
					Old_Bill_Ratio		   ,	Bill_Ratio,
					Old_Is_Billed		   ,	Is_Billed)								
				select 
					@GC_Rectification_ID,@GC_Id,gc_billing_details_id,0,Billing_Client_ID,
					0,billing_branch_id,'',Description,0,Bill_Ratio,0,0
				from openXml(@idoc,'/newdataset/billing_details',2)        
				With(gc_billing_details_id int,billing_client_id int ,billing_branch_id int , 
					description varchar(100) , bill_ratio numeric(18,2)) 

				Set @GC_Billing_Details_Rectification_History_ID = @@Identity   

				update EC_Opr_VTrans_GC_Billing_Details_Rectification_History
				set 								
					Old_Billing_Client_ID	=	GC_Billing_Details.Billing_Client_ID,
					Old_Billing_Branch_ID	=	GC_Billing_Details.Billing_Branch_ID,
					Old_Description			=	GC_Billing_Details.Description,
					Old_Bill_Ratio			=	GC_Billing_Details.Bill_Ratio,
					Old_Is_Billed			=	GC_Billing_Details.Is_Billed
				from EC_Opr_VTrans_GC_Billing_Details GC_Billing_Details
					inner join EC_Opr_VTrans_GC_Billing_Details_Rectification_History on
					EC_Opr_VTrans_GC_Billing_Details_Rectification_History.GC_ID = GC_Billing_Details.GC_Id
				where
					GC_Rectification_ID = @GC_Rectification_ID					
					and EC_Opr_VTrans_GC_Billing_Details_Rectification_History.GC_Billing_Details_ID = GC_Billing_Details.GC_Billing_Id
					and GC_Billing_Details.GC_Id = @GC_ID	

				EXEC sp_xml_removedocument @idoc
			end
			else
			begin
				insert into EC_Opr_VTrans_GC_Billing_Details_Rectification_History(		
					GC_Rectification_ID		,	GC_ID,
					Old_Billing_Client_ID	,	Billing_Client_ID,
					Old_Billing_Branch_ID	,	Billing_Branch_ID,
					Old_Description			,	Description,
					Old_Bill_Ratio			,	Bill_Ratio,
					Old_Is_Billed			,	Is_Billed)				
				select 
					@GC_Rectification_ID,@GC_Id,Billing_Client_ID,@Billing_Client_ID,
					billing_branch_id,@billing_branch_id,
					Description,@Billing_Remarks,Bill_Ratio,100,Is_Billed,0
				from EC_Opr_VTrans_GC_Billing_Details 
				where EC_Opr_VTrans_GC_Billing_Details.GC_Id = @GC_ID
			end
		end

		--		Else -- Edit
		Begin
			Update EC_Opr_VTrans_GC 
			set  
				Private_Mark = @Private_Mark,
				Pickup_Type_Id = @Pickup_Type_Id,  
				GC_Date = @GC_Date,  
				GC_Time = @GC_Time,  
				Agency_GC_No = @AgencyGC_No_For_Print,
				Agency_Ledger_ID = @Agency_Ledger_Id,
				Agency_Branch_ID = @Agency_Branch_ID,
				Committed_Del_Date = @Committed_Del_Date,  
				Consignment_Type_Id = @Consignment_Type_Id,  
				Booking_Mode_Id = @Booking_Mode_Id,  
				Booking_Type_Id = @Booking_Type_Id,  
				Booking_Sub_Type_Id = @Booking_Sub_Type_Id ,
				Payment_Type_Id = @Payment_Type_Id,  
				Delivery_Type_Id = @Delivery_Type_Id,  
				Door_Delivery_Against_ID = @Door_Delivery_Against_ID,  

				Vehicle_Type_Id = @Vehicle_Type_Id,  
				Vehicle_No = @Vehicle_No,  
				STM_No = @STM_No,  
				Feasibility_Route_Survey_No = @Feasibility_Route_Survey_No,  

				Acknowledge = @Acknowledge,  
				Total_Actual_Weight = @Total_Actual_Weight,  

				Loaded_Actual_Weight = @Total_Actual_Weight,  

				Charged_Weight = @Charged_Weight,  
				Total_Invoice_Value = @Total_Invoice_Value,  
				
				Length_Charge_Head_Id = @Length_Charge_Head_Id	,

				Freight_Rate = @Freight_Rate,  
				Freight_Amt = @Freight_Amt,  

				Length_Charge = @Length_Charge,
				Unloading_Charge = @Unloading_Charge,
				NForm_Charge = @NForm_Charge,

				Local_Charges = @Local_Charges,  
				Bilti_Charges = @Bilti_Charges,  
				Hamali_Per_Kg = @Hamali_Per_Kg,  
				Hamali_Charges = @Hamali_Charges,  
				Hamali_Per_Articles = @Hamali_Per_Articles,
				DD_Charges = @DD_Charges,  
				DACC_Charges = @DACC_Charges,
				TP_Charges = @TP_Charges,  
				Other_Charges = @Other_Charges,  
				Tax_Abate_Percent = @Tax_Abate_Percent,  
				Tax_Abate = @Tax_Abate,  
				Amt_Taxable = @Amt_Taxable,  
				FOVPercent = @FOVPercent,  
				FOV = @FOV,  
				ODA_Charges = @ODA_Charges,  
				
				ReBook_Charges = @ReBook_Charges ,
				ReBook_GC_Sub_Total = @ReBook_GC_Sub_Total,
				Sub_Total = @Sub_Total,  
				Advance_Amount = @Advance_Amount,  
				Service_Tax_Percent = @Service_Tax_Percent,  
				Service_Tax_Amount = @Service_Tax_Amount,  
				ReBook_Octroi_Amount = @ReBook_Octroi_Amount ,
				Total_GC_Amount = @Total_GC_Amount,  

				Std_Freight_Rate = @Std_Freight_Rate,  
				Std_Freight_Amt = @Std_Freight_Amt,  
				Std_Local_Charge_Rate = @Std_Local_Charge_Rate ,
				Std_Local_Charge = @Std_Local_Charge,  
				Std_Hamali_Charge = @Std_Hamali_Charge,  
				Std_DD_Charge_Rate = @Std_DD_Charge_Rate,
				Std_DD_Charge = @Std_DD_Charge,  
				Std_DACC_Charge = @Std_DACC_Charge,
				Std_Bilti_Charges = @Std_Bilti_Charges,  
				Std_Service_Tax_Amount = @Std_Service_Tax_Amount,  
				Std_FOV = @Std_FOV,  
				Std_FOVPercent = @FOVPercent,  
				Std_TP_Charges = @Std_TP_Charges,  
				Std_CFT_Factor = @Std_CFT_Factor,

				Std_Octroi_Form_Charges = @Std_Octroi_Form_Charges,
				Std_Octroi_Service_Charges = @Std_Octroi_Service_Charges,
				Std_Demurrage_Days = @Std_Demurrage_Days,
				Std_Demurrage_Rate = @Std_Demurrage_Rate,
				Std_GI_Charges = @Std_GI_Charges,
				Std_NForm_Charge = @Std_NForm_Charge,
				Is_Cheque = @Is_Cheque,  
				Cheque_No = @Cheque_No,  
				Cheque_Date = @Cheque_Date,  
				Bank_Name = @Bank_Name,  
				Cash_Amount = @Cash_Amount,  
				Cheque_Amount = @Cheque_Amount,  
				Tax_Payable_By = @Tax_Payable_By,  
				Contract_Branch_ID = @Contract_Branch_ID,  
				Contract_ID = @Contract_ID,  
				Billing_Client_ID = @Billing_Client_ID,  
				Billing_Branch_Id = @Billing_Branch_Id,  
				Billing_Hierarchy = Upper(@Billing_Hierarchy),
				Billing_Remarks = @Billing_Remarks,  
				Risk_Type_ID = @Risk_Type_ID,  
				Insurance_Company = @Insurance_Company,  
				Policy_No = @Policy_No,  
				Policy_Exp_Date = @Policy_Exp_Date,  
				Policy_Amount = @Policy_Amount,  
				Risk_Amount = @Risk_Amount,  
				Freight_Basis_ID = @Freight_Basis_ID,  
				Volumetric_Freight_Unit_ID = @Volumetric_Freight_Unit_ID,  
				Unit_Of_Measurement_ID = @Unit_Of_Measurement_ID,  
				Total_Length = @Total_Length,  
				Total_Width = @Total_Width,  
				Total_Height = @Total_Height,  

				Total_Length_In_Ft = @Total_Length_In_Feet,
				Total_Width_In_Ft = @Total_Width_In_Feet,
				Total_Height_In_Ft = @Total_Height_In_Feet,	

				CFT_Factor = @CFT_Factor,  
				Total_CFT = @Total_CFT,  
				Total_CBM = @Total_CBM,  
				Customer_Ref_No = @Customer_Ref_No,  
				GC_Remarks = @GC_Remarks,  
				Instructions = @GC_Remarks,  -- instruction / remark
				GC_Remarks_Other_Charges = @GC_Remarks_Other_Charges,  
				Enclosures = @Enclosures,  
				
				Is_ODA = @Is_ODA,  
				Is_Octroi_Applicable = @Is_Octroi_Applicable,
				ReBook_GC_Octroi_Paid_By_ID = @ReBook_GC_Octroi_Paid_By_ID ,

				Loading_Supervisor_ID = @Loading_Supervisor_ID,  
				Marketing_Executive_ID = @Marketing_Executive_ID,  
				Road_Permit_Type_ID = @Road_Permit_Type_ID,

				Is_Multiple_Billing = @Is_Multiple_Billing,
				Is_Signed_By_Consignor = @Is_SignedByConsignor ,
				Road_Permit_SrNo = @Road_Permit_SrNo ,
				Is_Insured = @Is_Insured ,

				Container_Type_Id = @Container_Type_Id ,
				ContainerNo1 = @ContainerNo1 ,
				ContainerNo2 = @ContainerNo2 ,
				SealNo = @SealNo ,
				Return_To_Yard_Id = @Return_To_Yard_Id ,
				NFormNo = @NFormNo,
				Delivery_Way_Type_ID = @Delivery_Way_Type_ID
			where 
				GC_Id = @GC_Id  

			set @Print_Doc_ID = @GC_Id
			set @Article_Id = 0

			select @Article_Id = Article_Id 
			from EC_Opr_VTrans_GC_Articles
			where GC_Id=@Gc_id and Status_id in (0,80)		 

			delete from EC_Opr_VTrans_GC_Commodity_Details where GC_Id = @GC_Id  
			delete from EC_Opr_VTrans_GC_Invoice_Details where GC_Id = @GC_Id  
			delete from EC_Opr_VTrans_GC_Other_Charges where GC_Id = @GC_Id  
			delete from EC_Opr_Vtrans_GC_Billing_Details where GC_Id = @GC_Id  
		End  

		EXEC sp_xml_Preparedocument @idoc output,@Multiple_Commodity_Xml        

		insert into EC_Opr_VTrans_GC_Commodity_Details  
			(GC_ID,Commodity_ID,Item_ID,Packing_ID,
			Articles,Weight,Width,Length,Height,Remark)
		SELECT 
			@GC_Id,commodity_id,item_id,packing_id,  
			articles,weight,width,length,height,remark
		from openXml(@idoc,'/newdataset/multiple_commodity',2)        
		With(commodity_id int,item_id int,packing_id int,  
			articles int,weight numeric(18,2),width numeric(18,2),  
			length numeric(18,2),height numeric(18,2),remark varchar(100))        

		EXEC sp_xml_removedocument @idoc

		EXEC sp_xml_Preparedocument @idoc output,@Invoice_Xml    

		insert into EC_Opr_VTrans_GC_Invoice_Details  
			(GC_ID,Invoice_No,Invoice_Amount,BE_BL_No,Chalan_No)  
		select 
			@GC_Id,invoice_no,invoice_amount,be_bl_no ,chalan_no 
		from openXml(@idoc,'/newdataset/invoice',2)        
		With(invoice_no varchar(100),invoice_amount numeric(18,2),
			be_bl_no varchar(100),chalan_no varchar(100)) 

		EXEC sp_xml_removedocument @idoc

		EXEC sp_xml_Preparedocument @idoc output,@Other_Charges_Xml  

		if @Is_Attached = 0
		begin
			insert into EC_Opr_VTrans_GC_Other_Charges
				(GC_ID,GC_Other_Charge_Head_ID,Description,Amount)  
			select @GC_Id,gc_other_charge_head_id,description,amount
			from openXml(@idoc,'/newdataset/othercharges',2)        
			With(gc_other_charge_head_id int ,description varchar(100),
				amount numeric(18,2),checked bit)
			where checked = 1
		end

		EXEC sp_xml_removedocument @idoc

		if @Payment_Type_Id = 3
		begin
			if @Is_Multiple_Billing = 1
			begin
				EXEC sp_xml_Preparedocument @idoc output, @Billing_Details_Xml

				insert into EC_Opr_Vtrans_GC_Billing_Details
					(GC_ID,Billing_Client_ID,Billing_Branch_ID,
					Description,Bill_Ratio,Is_Billed,Billing_Hierarchy)  
				select 
					@GC_Id,Billing_Client_ID,billing_branch_id,
					Description,Bill_Ratio,0,Upper(billing_hierarchy)
				from openXml(@idoc,'/newdataset/billing_details',2)        
				With(billing_client_id int,billing_branch_id int, 
					description varchar(100),bill_ratio numeric(18,2),billing_hierarchy varchar(5)) 

				EXEC sp_xml_removedocument @idoc
			end
			else
			begin
				insert into EC_Opr_Vtrans_GC_Billing_Details
					(GC_ID,Billing_Client_ID,Billing_Branch_ID,Description,Bill_Ratio,Billing_Hierarchy)  
				values
					(@GC_Id,@Billing_Client_ID,@Billing_Branch_Id,@Billing_Remarks,100,Upper(@Billing_Hierarchy)) 
			end
		end

		declare @GC_Type_Id int
		set @GC_Type_Id = 0

		if @Is_DACC = 1 		
			set @GC_Type_Id = 2  -- IBA GC		
		else if @Total_Articles = 0 and @Status_Id = 80		
			set @GC_Type_Id = 3  -- Reserved GC		
		else if @Is_ReBooked = 1 
			set @GC_Type_Id = 4  -- ReBook GC		
		else if @Is_Attached = 1 
			set @GC_Type_Id = 5  -- Attached GC
		else if @Agency_Branch_ID > 0 
			set @GC_Type_Id = 6 -- Other Agency GC
		else if @Is_Opening_GC = 1
			set @GC_Type_Id = 7 -- Opening GC
		else
			set @GC_Type_Id = 1 -- Normal GC
		
		update EC_Opr_VTrans_GC
		set GC_Type_ID = @GC_Type_Id 
		where GC_Id = @GC_Id and GC_Type_ID = 0

		update EC_Opr_VTrans_GC
		set 
			Year_Code = 0 ,
			Document_Id = 2 ,		
			Document_Series_Allocation_ID = 0 ,
			GC_No_For_Print = @GC_No_For_Print ,
			GC_No = @GC_No
		where 
			GC_Id = @GC_Id and ( @Is_Opening_GC = 1 or @Menu_Item_Id = 200 )			

		--    exec EC_Opr_Set_Article_Effects @From_Branch_ID,'GC',@GC_Id,0   
		if @Is_Opening_GC = 0 or @Menu_Item_Id <> 200 -- 200 = opening gc 		begin		-----------GC Accounting Effect------------------------
			EXEC [dbo].[EC_FA_Opr_GcAccountEffects]
				@Year_Code = @Booking_Year_Code,--@Year_Code,
				@Hierarchy_Code = 'BO', -- @Hierarchy_Code,
				@Main_Id = @Booking_Branch_Id , --@From_Branch_ID,
				@Division_Id = @Division_Id,
				@User_Id = @Created_By,
				@GC_Id = @GC_Id
		-----------End GC Accounting Effect------------------------
		end

		if @Payment_Type_Id = 2 and @Is_Auto_Booking_MR_For_Paid_Booking = 1 and @Is_Opening_GC = 0 
		begin

			update fa_opr_mr set is_approved = 0 where mr_id = @mr_id

			exec [dbo].[Create_Auto_Booking_MR_For_Paid_Booking] -- @GC_Id,@Booking_Year_Code,@Cheque_Details_Xml
				@Year_Code = @Booking_Year_Code ,--@Year_Code,
				@Division_ID = @Division_Id ,
				@MR_Type_ID = 1 ,
				@MR_ID = @MR_ID , 
				@MR_Date = @GC_Date ,
				@MR_Branch_ID = @Booking_Branch_Id ,
				@GC_ID = @GC_ID ,
				@Total_MR_Amount = @Total_GC_Amount ,
				@Cash_Amount = @Cash_Amount ,
				@Cash_Ledger_ID = @Default_Cash_Ledger_Id ,
				@Cheque_Amount = @Cheque_Amount ,
				@Hierarchy_Code = 'BO' ,
				@Menu_Item_ID = 106 ,  -- Menu_Item_ID = 106 of booking
				@Document_Allocation_ID = 0 ,
				@MR_No = 0 ,
				@MR_No_For_Print = '' ,
				@MRChequeDetailsXML = @Cheque_Details_Xml ,
				@Created_By = @Created_By ,
				@VA_Id = 0 ,
				@Error_Code = @Error_Code output ,
				@ERROR_DESC = @ERROR_DESC OUTPUT 
		end


	END  
	COMMIT TRAN  
	END TRY  
	BEGIN CATCH  
	ROLLBACK TRAN  
		SELECT @ERROR_CODE=ERROR_NUMBER()  
		SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
		CAST(ERROR_MESSAGE() as VARCHAR(4000))  
	END CATCH  

	----1186--------------------------------------------------------------------------------















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function Is_Commodity_Tax_Applicable_For_GC
(@GC_ID  int)

RETURNS bit
AS 
BEGIN  
Declare @Is_Service_Tax_Applicable_For_Commodity_Of_GC bit
set @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 0

select @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 1
from EC_Master_Commodity
where Commodity_ID in 
(select Commodity_ID from EC_Opr_VTrans_GC_Commodity_Details  where GC_ID = @GC_ID)
and Is_Service_Tax_Applicable = 1

return isnull(@Is_Service_Tax_Applicable_For_Commodity_Of_GC,0)
END


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
  
  
-- =============================================================================  
-- Author:    
-- Create date: <06-April-2009>  
-- Description: <Description,,>  
-- EXEC [dbo].[EC_RPT_Transshipment_Stock_Excel] 0,0,0,'2009-04-06',0,0,100  
-- =============================================================================  
  
  
  
CREATE PROCEDURE [dbo].[EC_RPT_Transshipment_Stock_Excel]  
@Region_Id int,  
@Area_Id int,  
@Branch_Id  int,  
@As_On_Date  datetime,  
@Division_ID  int,    
@PageIndex int,     
@PageSize int,
@calledfrom varchar(20) = '',  
@colid int = 0,  
@datatype_id int = 0,  
@criteria_id int = 0,  
@Filtered_Text varchar(50) = '',  
@Filtered_Date datetime = '1 jan 1900',  
@Filtered_Bit bit = 1                  
AS  
BEGIN  
SET NOCOUNT ON; 
--------------------------------------Filter-----------------------------------------  
declare @Filtered_Text_int int  
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)  
  
if @calledfrom = 'form_and_pageload'    
 begin  
  declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))    
  
  insert into @Dropdown_Search values ('Destination','s,1')  
  insert into @Dropdown_Search values ('Consignee Name','s,2')  
  insert into @Dropdown_Search values ('Total Articles','n,3')  
  insert into @Dropdown_Search values ('Total Received Articles','n,4')  
  insert into @Dropdown_Search values ('Total GC Amount','n,5')  
  insert into @Dropdown_Search values ('GC Date','d,6')  
  insert into @Dropdown_Search values ('AUS Date','d,7')  
  select  *From @Dropdown_Search  
  
  return  
 end;  
--------------------------------------Filter-----------------------------------------   
if @Branch_ID  > 0   
  BEGIN  
  Set @Region_ID = -1  
  set @Area_ID = -1  
  END   
else if  @Area_ID > 0   
  BEGIN   
  Set @Region_ID = -1  
  set @Branch_ID =  -1  
  END   
else if @Region_ID > 0   
  BEGIN  
  set @Area_ID = -1  
  set @Branch_ID = -1  
  END;  
  
WITH Transshipment_Stock AS    
(    
  
select  ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',    
gc_no_for_print as [CN No],   
dbo.dateonly(gc_date) as [CN Date],dbo.dateonly(Actual_Unloading_Sheet_Date)   
as [AUS Date],  
cast(datediff(dd,gc_date,Actual_Unloading_Sheet_Date) as float) as [No of days] ,  
cast(Total_Articles as float)as [Total Articles],  
cast(Total_Received_Articles as float) as [Total Received Articles],   
Remarks,Consignee_Name as [Consignee Name],  
dly_br.branch_name as [Dest],cast(Total_GC_Amount as float) as [Total GC Amount],  
EC_Master_Reason.Reason  
from ec_opr_vtrans_gc A  
inner join EC_Opr_VTrans_Actual_Unloading_Sheet_Details B  
on A.gc_id=B.gc_id  
inner join EC_Opr_VTrans_Actual_Unloading_Sheet C  
on C.Actual_Unloading_Sheet_ID=B.Actual_Unloading_Sheet_ID  
inner join EC_Master_Service_Location E  
on A.To_Location_ID=E.Service_Location_ID  
inner join ec_master_branch dly_br  
on dly_br.branch_id=E.branch_id  
inner join ec_master_branch unldg_br  
on unldg_br.branch_id=C.Un_Loading_Branch_ID  
left outer join dbo.EC_Master_Reason  
on dbo.EC_Master_Reason.Reason_Id=C.Reason_For_Late_Unloading_ID  
where A.Is_cancelled=0 and C.Is_cancelled=0  
and  A.Gc_date <= dbo.dateonly(@As_On_Date)  
and(unldg_br.Branch_ID = @Branch_ID  
OR unldg_br.Region_ID = (Select case @Region_ID when 0 then unldg_br.Region_ID else  @Region_ID end)  
OR unldg_br.Area_ID =  @Area_ID)   
and A.Division_ID=(select case @Division_ID when 0 then A.Division_ID else @Division_ID end)
and   
(@criteria_id = 0  
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and dly_br.branch_name = @Filtered_Text)  
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and dly_br.branch_name like @Filtered_Text + '%')  
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and dly_br.branch_name like '%' + @Filtered_Text)  
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and dly_br.branch_name like '%' + @Filtered_Text + '%')  
  
  
or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Consignee_Name = @Filtered_Text)  
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Consignee_Name like @Filtered_Text + '%')  
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Consignee_Name like '%' + @Filtered_Text)  
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Consignee_Name like '%' + @Filtered_Text + '%')  
  
or (@colid = 3 and @criteria_id = 1 and @datatype_id = 2 and Total_Articles = @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 2 and @datatype_id = 2 and Total_Articles >= @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 3 and @datatype_id = 2 and Total_Articles <= @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 4 and @datatype_id = 2 and Total_Articles > @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 5 and @datatype_id = 2 and Total_Articles < @Filtered_Text_int)  

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 2 and Total_GC_Amount = @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 2 and @datatype_id = 2 and Total_GC_Amount >= @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 3 and @datatype_id = 2 and Total_GC_Amount <= @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 4 and @datatype_id = 2 and Total_GC_Amount > @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 5 and @datatype_id = 2 and Total_GC_Amount < @Filtered_Text_int)  
  
  
or (@colid = 5 and @criteria_id = 1 and @datatype_id = 4 and gc_date = @Filtered_Date)  
or (@colid = 5 and @criteria_id = 2 and @datatype_id = 4 and gc_date >= @Filtered_Date)  
or (@colid = 5 and @criteria_id = 3 and @datatype_id = 4 and gc_date <= @Filtered_Date)  
or (@colid = 5 and @criteria_id = 4 and @datatype_id = 4 and gc_date > @Filtered_Date)  
or (@colid = 5 and @criteria_id = 5 and @datatype_id = 4 and gc_date < @Filtered_Date)  
  
or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and Actual_Unloading_Sheet_Date = @Filtered_Date)  
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and Actual_Unloading_Sheet_Date >= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and Actual_Unloading_Sheet_Date <= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and Actual_Unloading_Sheet_Date > @Filtered_Date)  
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and Actual_Unloading_Sheet_Date < @Filtered_Date)  
  )          
)  
  
-----------------------------STEP 2--------------------------------------------------------------    
SELECT * into #TransshipmentStock FROM Transshipment_Stock    
-----------------------------STEP 3--------------------------------------------------------------    
    
select * From #TransshipmentStock    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
--------------------------------STEP 4-------------------------------------------------------------    
select    
sum([No of days]) as No_of_days,    
sum([Total Articles]) as Total_Articles,    
sum([Total Received Articles]) as Total_Received_Articles,    
sum([Total GC Amount]) as Total_GC_Amount    
  
from #TransshipmentStock    
  
--------------------------------STEP 5-------------------------------------------------------  
select count(*) From #TransshipmentStock    
---------------------------------------------------------------------------------------------                  
  
  
End  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



  
  
  
      
-- =============================================      
-- Author:  <Lad Ashish>      
-- Create date: <20th October 2008>      
-- Description: <Fill Dropdown Values For Series Generation Operation Form>      
-- =============================================      
      
CREATE PROCEDURE [dbo].[EC_Opr_SeriesGeneration_FillValues]       
AS      
BEGIN         
  
declare @IsMemoSeriesRequired bit  
declare @IsLHPOSeriesRequired bit  
declare @IsHOBSeriesRequired bit
declare @IsTransBillSeriesRequired bit

set @IsMemoSeriesRequired = 0  
set @IsLHPOSeriesRequired = 0 
set @IsHOBSeriesRequired=0 
set @IsTransBillSeriesRequired=0 

select @IsMemoSeriesRequired = Is_Memo_Series_Required ,  
@IsLHPOSeriesRequired = Is_LHPO_Series_Required ,
@IsHOBSeriesRequired = Is_HOB_Series_Req ,
@IsTransBillSeriesRequired = Is_Transport_Bill_Series_Required from  
EC_Master_Company_Parameters  
  
declare @Document_Master table (Document_Id int,Document_Name varchar(100))  
  
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (1,2,3,6,8)  
  
if @IsMemoSeriesRequired = 1  
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (4)  
  
if @IsLHPOSeriesRequired = 1  
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (5)  

if @IsTransBillSeriesRequired = 1  
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (7)  


if @IsHOBSeriesRequired=1
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (15)   
  
select * From @Document_Master 
 
End  
  
  



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Pankaj thapliyal>
-- Create date: <25-oct-2008>
-- Description:	<>
-- =============================================
CREATE Function [dbo].[Ec_Opr_GetBalanceActualWeight]  
(
@Login_Branch_ID int,
@GC_ID int,
@Loaded_Weight numeric(18,2),
@Status_Id int
)
  
RETURNS numeric(18,2)
AS  

BEGIN  

Declare @Balance_Actual_Weight numeric(18,2)
set @Balance_Actual_Weight = 0

if @Status_Id = 20
	select @Balance_Actual_Weight = sum (Article_Actual_Weight) from ec_opr_vtrans_gc_articles
	where Status_ID in(0,5,60) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID
else if @Status_Id = 30
	select @Balance_Actual_Weight = sum (Article_Actual_Weight) from ec_opr_vtrans_gc_articles
	where Status_ID in(0,5,20,60) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID
else if @Status_Id = 9999  --For Other Agency
	select @Balance_Actual_Weight = sum (Article_Actual_Weight) from ec_opr_vtrans_gc_articles
	where Status_ID in(9999) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID
else if @Status_Id = 150
	select @Balance_Actual_Weight = sum (Article_Actual_Weight) from ec_opr_vtrans_gc_articles
	where Status_ID in(60) and gc_id = @GC_ID and Current_Branch_ID = @Login_Branch_ID

set @Balance_Actual_Weight = @Balance_Actual_Weight + @Loaded_Weight
RETURN @Balance_Actual_Weight
END
















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



	-- =============================================  
	-- Author:  <Dinesh Mahajan>  
	-- Create date: Oct 21 2008     
	-- Description: < Save GC >  
	-- =============================================  

	CREATE Proc [dbo].[EC_Opr_GC_Save]  
	(  
		@Year_Code int = 0,			@Division_ID int = 0 ,  
		@Is_Centralised bit = 0,	@Centralised_Booking_Branch_Id int = 0 ,  
		@Document_Series_Allocation_ID int = 0 ,  
		@GC_Id int = 0 ,@GC_No int = 0 ,@GC_No_For_Print varchar(20) = '' ,  
		@VA_Id int = 0,				@Pickup_Type_Id int = 0 ,  
		@GC_Date datetime=getdate,	@GC_Time varchar(8) = '' ,  
		@Committed_Del_Date datetime = getdate ,  
		@Consignment_Type_Id int = 0,
		@Booking_Mode_Id int = 0,	@Booking_Type_Id int= 0, 
		@Booking_Sub_Type_Id int= 0,@Payment_Type_Id int =0,  
		@Delivery_Way_Type_ID int=1,@Delivery_Type_Id int = 0 ,  
		@Door_Delivery_Against_ID int = 0,
		@From_Branch_ID int = 0 ,	@From_Location_ID int = 0 ,  
		@To_Location_ID int = 0 ,	@Delivery_Branch_Id int = 0 ,  
		@Vehicle_Type_Id int = 0 ,	@Vehicle_No nvarchar(40) = '' ,  
		@STM_No nvarchar(50) = '' ,	@Feasibility_Route_Survey_No nvarchar(50) = '',  
		@Consignee_Client_ID int=0,	@Consignee_Name varchar(100) = '',  
		@Consignee_Add1 varchar(250)='',@Consignee_Add2 varchar(250) = '',  
		@Consignee_City_ID int = 0,	@Consignee_City varchar(50) = '',  
		@Consignee_Pin_Code varchar(20) = '',
		@Consignee_Country_Id int=0,@Consignee_Country varchar(50) = '',
		@Consignee_State_ID int = 0,@Consignee_State varchar(50) = '',
		@Consignee_Tel_No varchar(25)='',@Consignee_Mobile_No varchar(25) ='',  
		@Consignee_EMail varchar(50) = '',@Consignee_CST_TIN_No varchar(50) ='',
		@Is_Consignee_Service_Tax_Applicable bit = 0 ,

		@Consignor_Client_ID int = 0,	@Consignor_Name varchar(100) ='',  
		@Consignor_Add1 varchar(250)='',@Consignor_Add2 varchar(250) = '' ,  
		@Consignor_City_ID int = 0 ,	@Consignor_City varchar(50) = '' ,  
		@Consignor_Pin_Code varchar(20) = '' , 
		@Consignor_Country_ID int=0,	@Consignor_Country varchar(50) = '',  
		@Consignor_State_ID int = 0,	@Consignor_State varchar(50) = '',  
		@Consignor_Tel_No varchar(25)='',@Consignor_Mobile_No varchar(25) ='',  
		@Consignor_EMail varchar(50)='',@Consignor_CST_TIN_No varchar(50) = '' ,  
		@Is_Consignor_Service_Tax_Applicable bit = 0 ,

		@DD_Address_1 varchar(100) ='',	@DD_Address_2 varchar(100) = '',  
		@Acknowledge bit = 0,			@Is_DACC bit = 0,
		@Total_Articles int = 0,		@Total_Actual_Weight numeric(18,2) = 0,  
		@Charged_Weight numeric(18,2) = 0,
		@Total_Invoice_Value numeric(18,2) = 0 ,  
		@Freight_Rate numeric(18,2)=0,	@Freight_Amt numeric(18,2) = 0,
		@Local_Charges numeric(18,2) =0,@Bilti_Charges numeric(18,2) = 0,  
		@Hamali_Per_Kg numeric(18,2) =0,@Hamali_Charges numeric(18,2) = 0,  
		@DD_Charges numeric(18,2) = 0,	@TP_Charges numeric(18,2) = 0 ,  
		@Other_Charges numeric(18,2)=0,	@Tax_Abate_Percent numeric(18,2) = 0 ,  
		@Tax_Abate numeric(18,2) = 0,	@Amt_Taxable numeric(18,2) = 0 ,  
		@FOVPercent numeric(18,2) = 0 , @FOV numeric(18,2) = 0 ,  
		@ODA_Charges numeric(18,2) = 0 ,
		@Oda_charges_upto_500_Kg numeric(18,2) = 0 ,@Oda_charges_above_500_Kg numeric(18,2) = 0 ,  
		@Sub_Total numeric(18,2) = 0 ,			@Advance_Amount numeric(18,2) = 0 ,  
		@Service_Tax_Percent numeric(18,2)=0,	@Service_Tax_Amount numeric(18,2) = 0 ,  
		@Total_GC_Amount numeric(18,2) = 0 ,	@Std_Freight_Rate numeric(18,2) = 0 ,  
		@Std_Freight_Amt numeric(18,2) = 0 ,  	@Std_Local_Charge_Rate numeric(18,2) = 0 ,  
		@Std_Local_Charge numeric(18,2) = 0 , 	@Std_Hamali_Charge numeric(18,2) = 0 ,  
		@Std_DD_Charge_Rate numeric(18,2)= 0, 	@Std_DD_Charge numeric(18,2) = 0 ,  
		@Std_Bilti_Charges numeric(18,2) = 0 ,	@Std_Service_Tax_Amount numeric(18,2) = 0 ,  
		@Std_FOV numeric(18,2) = 0 ,			@Std_TP_Charges numeric(18,2) = 0 ,  
		@Std_CFT_Factor numeric(18,2) = 0 ,  

		@Is_Cheque bit = 0 ,  			@Cheque_No int = 0 ,  
		@Cheque_Date datetime =getdate, @Bank_Name varchar(100) = '' ,  
		@Cash_Amount numeric(18,2) = 0 ,@Cheque_Amount numeric(18,2) = 0 ,  
		@Tax_Payable_By int = 0 ,  
		@Contract_Branch_ID int = 0 ,  	@Contract_ID int = 0 ,  
		@Billing_Client_ID int = 0 ,  	@Billing_Branch_Id int = 0 ,  
		@Billing_Remarks varchar(50)='',@Is_Multiple_Billing bit = 0 ,
		@Risk_Type_ID int = 0 ,  		@Insurance_Company varchar(100) = '' ,  
		@Policy_No nvarchar(50) = '' ,  @Policy_Exp_Date datetime = getdate ,  
		@Policy_Amount numeric(18,2) =0,@Risk_Amount numeric(18,2) = 0 ,  
		@Freight_Basis_ID int = 0 ,  	@Volumetric_Freight_Unit_ID int = 0 ,  
		@Unit_Of_Measurement_ID int = 0,@Total_Length numeric(18,2) = 0 ,  
		@Total_Width numeric(18,2) = 0 ,@Total_Height numeric(18,2) = 0 ,  

		@Total_Length_In_Feet numeric(18,2)=0,	@Total_Width_In_Feet numeric(18,2)= 0 , 
		@Total_Height_In_Feet numeric(18,2)= 0 ,@CFT_Factor numeric(18,2) = 0 ,  
		@Total_CFT numeric(18,2) = 0 ,  @Total_CBM numeric(18,2) = 0 ,  
		@Customer_Ref_No varchar(20)='',
		@GC_Remarks varchar(250) = '' , @GC_Remarks_Other_Charges varchar(100) = '' ,  
		@Enclosures varchar(150) = '' , @Is_Billed bit = 0 ,  
		@Is_ODA bit = 0 ,				@Is_Octroi_Applicable bit= 0 ,
		@Oct_Form_Type varchar(1) = '' ,@Oct_Type_Id int = 0 ,  
		@Oct_Bill_No nvarchar(30) = '' ,@Oct_Bill_Date datetime = getdate ,  
		@Oct_Receipt_No varchar(15) ='',@Oct_Amount numeric(18,2) = 0 ,  
		@Oct_Remark varchar(200) = '' ,  
		@Is_Consignor_Regular_Client bit=0, @Is_Consignee_Regular_Client bit = 0 ,  
		@Loading_Supervisor_ID int = 0 ,    @Marketing_Executive_ID int = 0 ,  
		@Status_Id int = 0 ,			@Is_Cancelled bit = 0 ,  
		@Created_On datetime = getdate ,@Created_By int = 0 ,  
		@Updated_On datetime = getdate ,@Updated_By int = 0 ,  
		@Error_Code int output ,  		@Error_Desc AS VARCHAR(4000) = '' OUTPUT , 
		@Invoice_Xml as xml ='<doc></doc>' ,  
		@Multiple_Commodity_Xml as xml='<doc></doc>' ,
		@Article_Status_ID int = 0 , -- added by pankaj 28 nov 08 5.55 pm
		@Road_Permit_Type_Id int = 0 ,@GC_Instruction_Id int = 0 ,
		@Other_Charges_Xml as xml='<doc></doc>' ,
		@Billing_Details_Xml as xml='<doc></doc>' ,

		@Is_Attached bit = 0 ,			@Attached_GC_Id int = 0 ,
		@Is_Oct_Recovered_From_Consignee bit = 1 ,
		@Is_Octroi_Updated bit = 0 ,
		@Is_ReBooked bit = 0 ,			@ReBook_GC_Id int = 0 ,
		@New_ReBook_GC_Id int = 0 ,		@ReBook_Against_GC_Id int = 0 ,
		@ReBook_Charges numeric(18,2)=0,@ReBook_GC_Sub_Total numeric(18,2)= 0 ,
		@DACC_Charges numeric(18,2)= 0 ,@Std_DACC_Charge numeric(18,2)= 0 ,

        @Std_Octroi_Form_Charges numeric(18,2)= 0 ,@Std_Octroi_Service_Charges numeric(18,2)= 0 ,
        @Std_Demurrage_Days numeric(18,2)= 0 ,     @Std_Demurrage_Rate numeric(18,2)= 0 ,
        @Std_GI_Charges numeric(18,2)= 0 ,

		@Previous_Article_ID int = 0 ,			@Previous_Status_ID int = 0 ,
		@Previous_Document_ID int = 0 ,			@Previous_Document_No_For_Print varchar(50) = '' ,
		@Previous_Document_Date datetime=getdate,@Is_SignedByConsignor bit = 0 ,
		@Print_Doc_ID int = 0 output ,			@Length_Charge_Head_Id int = 0 ,
        @Length_Charge numeric(18,2)= 0 ,		@ReBook_GC_Octroi_Paid_By_ID int = 0 ,
		@ReBook_Octroi_Amount numeric(18,2)= 0 ,@Document_Id int = 2 , 
		@Road_Permit_SrNo varchar(50) = '' ,	@Is_Insured bit = 0 ,
		@Agency_Branch_ID int = 0 ,				@Hamali_Per_Articles numeric(18,2)= 0 ,
		@Billing_Party_Ledger_Id int=0,			@Billing_Party_Credit_Limit numeric(18,2) = 0 ,
		@Is_Opening_GC bit = 0 ,		        @Booking_Branch_Id int = 0 ,
		@Arrived_From_Branch_Id int = 0 ,		@Arrived_Date datetime = getdate ,
		@Menu_Item_Id int = 30 ,				@Unloading_Charge numeric(18,2) = 0 ,
		@Private_Mark varchar(20) = '' ,		@Is_Auto_Booking_MR_For_Paid_Booking bit= 0 ,
		@Cheque_Details_Xml as xml='<doc></doc>' ,
		@Default_Cash_Ledger_Id int = 0 ,		@Is_Short_GC bit = 0 ,

		@Container_Type_Id int = 0 ,	@ContainerNo1 varchar(20) = '' ,
		@ContainerNo2 varchar(20) = '' ,@SealNo varchar(20) = '' ,
		@Return_To_Yard_Id int = 0 ,	@NFormNo varchar(20) = '' ,
		@NForm_Charge numeric(18,2) = 0,@Std_NForm_Charge numeric(18,2) = 0 ,
		@Billing_Hierarchy varchar(5) ='BO',@AgencyGC_No_For_Print nvarchar(40) =0,
		@Agency_Ledger_Id int = 0
	)  

	As  
		set @Error_Code = 0;
		set @ERROR_DESC = '';
		set @Print_Doc_ID = 0;

		if @GC_Id > 0 and dbo.Ec_Opr_Can_Edit_Cancel ('GC',@GC_Id ) = 0  
		begin
			set @Error_Code = 1012
			set @ERROR_DESC = 'Cant Edit';
			return;  
		end  

--		if @Payment_Type_Id = 3 and 
--		   dbo.Ec_Opr_Check_Credit_Limit ('GC',@GC_Id, @Billing_Details_Xml,
--			@Is_Multiple_Billing,@Billing_Client_ID,@Billing_Party_Ledger_Id, 
--			@Billing_Party_Credit_Limit,100,@Total_GC_Amount) = 0  
--		begin
--			set @Error_Code = 1012
--			set @ERROR_DESC = 'Credit Limit Exceed For The Selected Billing Parties.';
--			return;  
--		end  

		BEGIN TRY  
		BEGIN TRAN  
		BEGIN  
		SET NOCOUNT ON;  

		declare @idoc int,@Article_ID int,@AUS_Article_ID int,@MR_ID int,
				@Actual_Unloading_Sheet_ID int,@Actual_Unloading_Sheet_No int,
				@Actual_Unloading_Sheet_No_For_Print varchar(100),@ClientCode varchar(50),
				@Service_Tax_On_Advance numeric(18,2),@Taxable_Advance_Amount numeric(18,2),
				@Is_Agency_Booking bit

		set @ClientCode = (select Client_Code from ec_master_company)

		set @Service_Tax_On_Advance = 0
		set @Taxable_Advance_Amount = 0
		set @MR_ID = 0
		set @Article_ID = 0
		set @Is_Agency_Booking = 0
		
		select @MR_ID = Booking_MR_ID from EC_Opr_VTrans_GC where GC_Id = @GC_Id

		if @Is_ODA = 0
		begin
			set @ODA_Charges = 0
			set @Oda_charges_upto_500_Kg = 0
			set	@Oda_charges_above_500_Kg = 0
		end

		if @Is_Attached = 0
		begin
			set @Attached_GC_Id = 0
		end

		if @Is_ReBooked = 0   
		begin
			set @ReBook_Charges = 0
			set @ReBook_Against_GC_Id = 0			
		end
 
		if @Payment_Type_Id <> 3
		begin
			set @Billing_Client_ID = 0
			set @Billing_Branch_Id = 0
		end		
 
		if @Payment_Type_Id = 1
		begin			 
			set @Taxable_Advance_Amount = @Advance_Amount 
		
			if @Tax_Payable_By = 3
			begin
				set @Taxable_Advance_Amount = @Advance_Amount * 0.25				
			end		

			set @Service_Tax_On_Advance = @Taxable_Advance_Amount *	@Service_Tax_Percent / 100
			set @Service_Tax_On_Advance = round(@Service_Tax_On_Advance ,0) 

		end		
		else
		begin
			set @Advance_Amount = 0 
			set @Taxable_Advance_Amount = 0 
			set @Service_Tax_On_Advance = 0	
		end

		if @Document_Id <= 0
		begin			
			set @Document_Id = 2 -- normal gc
			select @Document_Id = cast(querystring as int) from COM_Adm_Menu_Item
			where MenuItem_ID = @Menu_Item_Id
		end

		declare @Booking_Year_Code int,@AUS_Year_Code int

		set @Booking_Year_Code = @Year_Code 
		set @AUS_Year_Code = @Year_Code 

		if @Is_Opening_GC = 1 or @Menu_Item_Id = 200 -- 200 = opening gc 		begin
			set @Booking_Year_Code = 0
			set @Document_Id = 2
			set @Document_Series_Allocation_ID = 0
		end
		
		if((@Is_Opening_GC = 1 or @Menu_Item_Id = 200) and lower(@ClientCode) = 'nandwana')			set @GC_No = cast(@GC_No as varchar(6)) + dbo.Get_No_To_Print(@Booking_Branch_Id,3)


		if(@Menu_Item_Id = 229)
		begin
			set @Is_Agency_Booking = 1
			set @Article_Status_ID = 9999
			set @Status_ID = 9999
			set @Private_Mark = @AgencyGC_No_For_Print
		end


		if @GC_Id <= 0 -- add  
		Begin  
			insert into EC_Opr_VTrans_GC(  
				Year_Code,Division_ID,Is_Centralised,  
				Centralised_Booking_Branch_Id,Document_Series_Allocation_ID,Document_Id,
				Is_Agency_Booking,Agency_Branch_ID,Agency_Ledger_ID,Agency_GC_No,Arrival_Date_From_Agency,
				GC_No,GC_No_For_Print,
				Private_Mark,Is_Attached,Attached_GC_Id,
				Is_ReBooked,ReBook_Against_GC_Id,New_ReBook_GC_Id,
				VA_Id,Pickup_Type_Id,GC_Date,  
				GC_Time,Committed_Del_Date,Consignment_Type_Id,  
				Booking_Mode_Id,Booking_Type_Id,Booking_Sub_Type_Id,
				Payment_Type_Id,Delivery_Type_Id,Door_Delivery_Against_ID,
				From_Branch_ID,From_Location_ID,To_Location_ID,
				Delivery_Branch_Id,Vehicle_Type_Id,Vehicle_No,
				STM_No,Feasibility_Route_Survey_No,Consignee_Client_ID,
				Consignee_Name,Consignee_Add1,Consignee_Add2,
				Consignee_City_ID,Consignee_City,Consignee_Pin_Code,  
				Consignee_Country_Id,Consignee_Country,Consignee_State_ID,  
				Consignee_State,Consignee_Tel_No,Consignee_Mobile_No,  
				Consignee_EMail,Consignee_CST_TIN_No,Is_Consignee_Service_Tax_Applicable ,
				Consignor_Client_ID,Consignor_Name,Consignor_Add1,
				Consignor_Add2,Consignor_City_ID,Consignor_City,  
				Consignor_Pin_Code,Consignor_Country_ID,Consignor_Country,  
				Consignor_State_ID,Consignor_State,Consignor_Tel_No,  
				Consignor_Mobile_No,Consignor_EMail,Consignor_CST_TIN_No,
				Is_Consignor_Service_Tax_Applicable,DD_Address_1,DD_Address_2,  
				Acknowledge,Total_Articles,Total_Actual_Weight,
				Loaded_Articles,Loaded_Actual_Weight,Charged_Weight,  
				Total_Invoice_Value,Is_DACC,Length_Charge_Head_Id,
				Freight_Rate,Freight_Amt,Length_Charge,
				Unloading_Charge,Local_Charges,Bilti_Charges,
				Hamali_Per_Kg,Hamali_Charges,Hamali_Per_Articles,
				DD_Charges,DACC_Charges,TP_Charges,
				Other_Charges,Tax_Abate_Percent,Tax_Abate,
				Amt_Taxable,FOVPercent,FOV,
				ODA_Charges,Oda_charges_upto_500_Kg,Oda_charges_above_500_Kg,
				ReBook_Charges,ReBook_GC_Sub_Total,Sub_Total,
				Advance_Amount,Service_Tax_Percent,Service_Tax_Amount,
				Service_Tax_On_Advance,ReBook_Octroi_Amount,Total_GC_Amount,
				Std_Freight_Rate,Std_Freight_Amt,Std_Local_Charge_Rate,
				Std_Local_Charge,Std_Hamali_Charge,Std_DD_Charge_Rate,
				Std_DD_Charge,Std_DACC_Charge ,Std_Bilti_Charges,
				Std_Service_Tax_Amount,Std_FOV,Std_FOVPercent,
				Std_TP_Charges,Std_CFT_Factor,Std_Octroi_Form_Charges,
				Std_Octroi_Service_Charges,Std_Demurrage_Days,Std_Demurrage_Rate,
				Std_GI_Charges,Std_NForm_Charge,Is_Cheque,  
				Cheque_No,Cheque_Date,Bank_Name,
				Cash_Amount,Cheque_Amount,Tax_Payable_By,
				Contract_Branch_ID,Contract_ID,Billing_Client_ID,
				Billing_Branch_Id,Billing_Remarks,Risk_Type_ID,
				Insurance_Company,Policy_No,Policy_Exp_Date,
				Policy_Amount,Risk_Amount,Freight_Basis_ID,  
				Volumetric_Freight_Unit_ID,Unit_Of_Measurement_ID,Total_Length,
				Total_Width,Total_Height,Total_Length_In_Ft,
				Total_Width_In_Ft,Total_Height_In_Ft,CFT_Factor,  
				Total_CFT,Total_CBM,Customer_Ref_No,  
				GC_Remarks,GC_Remarks_Other_Charges,Enclosures,
				Is_Billed,Is_ODA,Is_Octroi_Applicable,
				Oct_Form_Type,Octroi_Form_Type_ID,Octroi_Paid_By_ID, 
				ReBook_GC_Octroi_Paid_By_ID,Is_Oct_Recovered_From_Consignee,Is_Octroi_Updated ,
				Oct_Type_Id,Oct_Bill_No,Oct_Bill_Date,  
				Oct_Receipt_No,Oct_Amount,Oct_Remark,  
				Is_Consignor_Regular_Client,Is_Consignee_Regular_Client,Loading_Supervisor_ID,
				Marketing_Executive_ID,Road_Permit_Type_ID ,Instructions,
				Status_Id,Is_Cancelled,Booking_MR_ID,
				Delivery_MR_ID,Created_On,Created_By,  
				Updated_On,Updated_By,Is_Multiple_Billing ,
				Previous_Article_ID ,Previous_Status_ID ,Previous_Document_ID ,
				Previous_Document_No_For_Print ,Previous_Document_Date ,Is_Signed_By_Consignor,
				Road_Permit_SrNo,Is_Insured ,GC_Type_ID,
				Is_Opening_GC,Booking_Branch_Id,Arrived_From_Branch_Id,
				Arrived_Date,Is_Short_GC,Container_Type_Id ,
				ContainerNo1 ,ContainerNo2 ,SealNo ,
				Return_To_Yard_Id,NFormNo,NForm_Charge,
				Delivery_Way_Type_ID,Billing_Hierarchy) 
			values(  
				@Booking_Year_Code,@Division_ID,@Is_Centralised,  
				@Centralised_Booking_Branch_Id,@Document_Series_Allocation_ID,@Document_Id,
				@Is_Agency_Booking,@Agency_branch_ID,@Agency_Ledger_Id,@AgencyGC_No_For_Print,@GC_Date,
				@GC_No,@GC_No_For_Print,  
				@Private_Mark,@Is_Attached,@Attached_GC_Id,
				@Is_ReBooked ,@ReBook_Against_GC_Id,0,
				@VA_Id,@Pickup_Type_Id,@GC_Date,
				@GC_Time,@Committed_Del_Date,@Consignment_Type_Id,
				@Booking_Mode_Id,@Booking_Type_Id,@Booking_Sub_Type_Id ,
				@Payment_Type_Id,@Delivery_Type_Id,@Door_Delivery_Against_ID,
				@Booking_Branch_Id,@From_Location_ID,@To_Location_ID,  
				@Delivery_Branch_Id,@Vehicle_Type_Id,@Vehicle_No,  
				@STM_No,@Feasibility_Route_Survey_No,@Consignee_Client_ID,  
				@Consignee_Name,@Consignee_Add1,@Consignee_Add2,
				@Consignee_City_ID,@Consignee_City,@Consignee_Pin_Code,
				@Consignee_Country_Id,@Consignee_Country,@Consignee_State_ID,
				@Consignee_State,@Consignee_Tel_No,@Consignee_Mobile_No,
				@Consignee_EMail,@Consignee_CST_TIN_No,@Is_Consignee_Service_Tax_Applicable,
				@Consignor_Client_ID,@Consignor_Name,@Consignor_Add1,
				@Consignor_Add2,@Consignor_City_ID,@Consignor_City,
				@Consignor_Pin_Code,@Consignor_Country_ID,@Consignor_Country,  
				@Consignor_State_ID,@Consignor_State,@Consignor_Tel_No,  
				@Consignor_Mobile_No,@Consignor_EMail,@Consignor_CST_TIN_No,
				@Is_Consignor_Service_Tax_Applicable,@DD_Address_1,@DD_Address_2,  
				@Acknowledge,@Total_Articles,@Total_Actual_Weight,
				@Total_Articles,@Total_Actual_Weight,@Charged_Weight,
				@Total_Invoice_Value,@Is_DACC,@Length_Charge_Head_Id,
				@Freight_Rate,@Freight_Amt,@Length_Charge,
				@Unloading_Charge,@Local_Charges,@Bilti_Charges,  
				@Hamali_Per_Kg,@Hamali_Charges,@Hamali_Per_Articles,
				@DD_Charges,@DACC_Charges,@TP_Charges,
				@Other_Charges,@Tax_Abate_Percent,@Tax_Abate,
				@Amt_Taxable,@FOVPercent,@FOV,  
				@ODA_Charges,@Oda_charges_upto_500_Kg,@Oda_charges_above_500_Kg,  
				@ReBook_Charges,@ReBook_GC_Sub_Total,@Sub_Total,  
				@Advance_Amount,@Service_Tax_Percent,@Service_Tax_Amount,  
				@Service_Tax_On_Advance,@ReBook_Octroi_Amount ,@Total_GC_Amount, 
				@Std_Freight_Rate,@Std_Freight_Amt,@Std_Local_Charge_Rate  ,
				@Std_Local_Charge,@Std_Hamali_Charge,@Std_DD_Charge_Rate,
				@Std_DD_Charge,@Std_DACC_Charge,@Std_Bilti_Charges,  
				@Std_Service_Tax_Amount,@Std_FOV,@FOVPercent,
				@Std_TP_Charges,@Std_CFT_Factor,@Std_Octroi_Form_Charges,
				@Std_Octroi_Service_Charges,@Std_Demurrage_Days,@Std_Demurrage_Rate,
				@Std_GI_Charges,@Std_NForm_Charge,@Is_Cheque,
				@Cheque_No,@Cheque_Date,@Bank_Name,
				@Cash_Amount,@Cheque_Amount,@Tax_Payable_By,
				@Contract_Branch_ID,@Contract_ID,@Billing_Client_ID,
				@Billing_Branch_Id,@Billing_Remarks,@Risk_Type_ID,
				@Insurance_Company,@Policy_No,@Policy_Exp_Date,
				@Policy_Amount,@Risk_Amount,@Freight_Basis_ID,
				@Volumetric_Freight_Unit_ID,@Unit_Of_Measurement_ID,@Total_Length,
				@Total_Width,@Total_Height,@Total_Length_In_Feet,
				@Total_Width_In_Feet,@Total_Height_In_Feet,@CFT_Factor,
				@Total_CFT,@Total_CBM,@Customer_Ref_No,
				@GC_Remarks,@GC_Remarks_Other_Charges,@Enclosures,  
				@Is_Billed,@Is_ODA,@Is_Octroi_Applicable,
				@Oct_Form_Type,0,0,
				@ReBook_GC_Octroi_Paid_By_ID,1,0,
				@Oct_Type_Id,@Oct_Bill_No,@Oct_Bill_Date,
				@Oct_Receipt_No,@Oct_Amount,@Oct_Remark,  
				@Is_Consignor_Regular_Client,@Is_Consignee_Regular_Client,@Loading_Supervisor_ID,  
				@Marketing_Executive_ID,@Road_Permit_Type_ID,@GC_Remarks,
				@Status_Id,@Is_Cancelled,0,
				0,@Created_On,@Created_By,
				@Updated_On,@Updated_By,@Is_Multiple_Billing ,
				@Previous_Article_ID ,@Previous_Status_ID,@Previous_Document_ID ,
				@Previous_Document_No_For_Print,@Previous_Document_Date ,@Is_SignedByConsignor,
				@Road_Permit_SrNo ,@Is_Insured ,0 ,
				@Is_Opening_GC,@Booking_Branch_Id,@Arrived_From_Branch_Id,
				@Arrived_Date,@Is_Short_GC,@Container_Type_Id ,
				@ContainerNo1 ,@ContainerNo2 ,@SealNo ,
				@Return_To_Yard_Id ,@NFormNo,@NForm_Charge,
				@Delivery_Way_Type_ID,upper(@Billing_Hierarchy))

			Set @GC_Id =@@Identity   
			set @Print_Doc_ID = @@identity    

			insert into EC_Opr_VTrans_GC_Articles(
				Updated_Date,GC_ID,Current_Branch_ID,
				Status_ID,Article_Actual_Weight,Articles,
				Actual_Articles,Document_ID,Document_No_For_Print,
				Document_Date,Is_Cancelled)
			values(@Created_On,@GC_ID,@Booking_Branch_Id,
				@Article_Status_ID,@Total_Actual_Weight,@Total_Articles,
				@Total_Articles,@GC_ID,@GC_No_For_Print,  
				@GC_Date,0)

			Set @Article_ID =@@Identity   
			
			if @Is_Opening_GC = 0
			begin
				update EC_Opr_Document_Allocation 
				set	Next_No = @GC_No + 1,Balance = Balance - 1
				where Document_Series_Allocation_ID = @Document_Series_Allocation_ID

				exec Ec_opr_Vtrans_Increase_Counter 'GC' ,2,@Booking_Branch_Id , @GC_ID --@From_Branch_ID, @GC_ID
			end
			else
			begin
				exec EC_Opr_Generate_Next_No @AUS_Year_Code ,'BO',@From_Branch_ID, @Division_ID, 72 , -- @Menu_Item_ID,  72 of AUS
					 0,@Actual_Unloading_Sheet_No output, @Actual_Unloading_Sheet_No_For_Print output  

				update EC_Opr_VTrans_GC_Articles set Articles = 0
				where Article_ID = @Article_ID and GC_ID = @GC_ID
				
				insert into EC_Opr_VTrans_Actual_Unloading_Sheet(  
					Division_ID, Year_Code, Un_Loading_Branch_ID,  
					Actual_Unloading_Sheet_No, Actual_Unloading_Sheet_No_For_Print,  
					Actual_Unloading_Sheet_Date, Agency_Ledger_ID,
					Arrived_From_Branch_ID, Arrived_From_Location_Id,
					Manual_TUR_No, Vehicle_ID,Vehicle_No,Vehicle_Type_ID,  
					LHPO_ID, LHPO_No_For_Print,LHPO_Date,Total_Actual_GCs,  
					Total_Actual_Weight, Total_Received_Weight,  
					Total_Actual_Articles, Total_Received_Articles,
					Total_Loaded_Articles, Scheduled_Arrival_Date,  
					Scheduled_Arrival_Time, Vehicle_Arrival_Date,  
					Vehicle_Arrival_Time, Truck_Unloaded_Time,  
					Reason_For_Late_Arrival_ID, Reason_For_Late_Unloading_ID,      
					Total_Short_Articles, Total_Excess_Articles,  
					Total_Damaged_Leakage_Articles, Total_Damaged_Leakage_Value,  
					Unloaded_Supervisor_ID, Remarks, Is_Cancelled, 
					Created_By, Created_On,Updated_By, Updated_On  ,
					TAS_Id,Is_Entry_By_Opening_GC)  
				values(@Division_ID,@AUS_Year_Code ,@From_Branch_ID,
					@Actual_Unloading_Sheet_No,@Actual_Unloading_Sheet_No_For_Print,  
					@Arrived_Date,0,
					@Arrived_From_Branch_Id ,@Arrived_From_Branch_Id ,
					'',0,@Vehicle_No,@Vehicle_Type_ID,  
					0,'',getdate(),1 , -- @Total_Actual_GCs,  
					@Total_Actual_Weight,@Total_Actual_Weight , -- @Total_Received_Weight,  
					@Total_Articles ,@Total_Articles , -- @Total_Received_Articles,  
					@Total_Articles ,getdate() , -- @Scheduled_Arrival_Date,  
					convert(varchar(5),getdate(),108) ,@Arrived_Date , -- @Vehicle_Arrival_Date,  
					convert(varchar(5),getdate(),108) ,convert(varchar(5),getdate(),108) ,
					0,0, -- @Reason_For_Late_Unloading_ID,  
					0,0 , -- @Total_Excess_Articles,  
					0,0, -- @Total_Damaged_Leakage_Value,  
					@Loading_Supervisor_ID,'',0,
					@Created_By,getdate(),@Created_By,getdate(),
					0,1) 

				Set @Actual_Unloading_Sheet_ID =@@Identity  

				insert into EC_Opr_VTrans_Actual_Unloading_Sheet_Details(       
					Year_Code, Actual_Unloading_Sheet_ID,
					Memo_ID, GC_ID, Article_ID,
					Loaded_Articles, Received_Articles,
					Received_Weight, Received_Condition_ID,
					Damaged_Articles, Damaged_Value,
					Previous_Article_ID, Previous_Status_ID,  
					Previous_Branch_ID, Previous_Document_ID,  
					Previous_Document_No_For_Print, Previous_Document_Date,  
					Found_ID,Is_Existing,
					Additional_Freight,Is_Last_Unloading)  
				values(@AUS_Year_Code ,@Actual_Unloading_Sheet_ID,  
					0 ,@GC_Id,@Article_ID,
					@Total_Articles,@Total_Articles, 
					@Total_Actual_Weight,0,
					0,0,
					@Article_ID ,0, -- Previous_Status_ID,  booking
					@Arrived_From_Branch_Id,@GC_Id , -- Previous_Document_ID,  
					@GC_No_For_Print ,@GC_Date, -- cast(Previous_Document_Date as datetime),  
					0,0, -- is_existing
					0,0 -- Is_Last_Unloading
				 )
				
				insert into EC_Opr_VTrans_GC_Articles
				(   Updated_Date,GC_ID,Current_Branch_ID,
					Status_ID,Article_Actual_Weight,Articles,
					Actual_Articles,Document_ID,Document_No_For_Print,
					Document_Date,Is_Cancelled)
				values(@Created_On,@GC_ID,@From_Branch_ID,  
					60,@Total_Actual_Weight,@Total_Articles,
					@Total_Articles,@Actual_Unloading_Sheet_ID,@Actual_Unloading_Sheet_No_For_Print,  
					@Arrived_Date,0)

				Set @Aus_Article_ID =@@Identity   
				
				update EC_Opr_VTrans_Actual_Unloading_Sheet_Details  
				set Previous_Article_ID = @Article_ID ,Previous_Status_ID = 0,
					Previous_Branch_ID = @Arrived_From_Branch_Id ,
					Previous_Document_ID = @GC_Id ,
					Previous_Document_No_For_Print = @GC_No_For_Print ,
					Previous_Document_Date = @GC_Date				
				where @Actual_Unloading_Sheet_ID = Actual_Unloading_Sheet_ID
					and GC_Id = @GC_Id
			end
		End  
		Else  --  Edit
		Begin  
			-- exec EC_Opr_Set_Article_Reverse_Effects 'GC',@GC_Id  
	 			
			if @Is_ReBooked = 1
			begin
				declare @Old_Total_Articles as int

				set @Old_Total_Articles =(select Total_Articles from EC_Opr_VTrans_GC where GC_Id = @GC_Id )
				
				update EC_Opr_VTrans_GC_Articles
				set Articles = Articles  +  @Old_Total_Articles  
				where Article_ID = @Previous_Article_ID and GC_Id = @ReBook_Against_GC_Id	
					  and status_id = 60

				update EC_Opr_VTrans_GC_Articles
				set Articles = Actual_Articles 
				where Article_ID = @Previous_Article_ID and GC_Id = @ReBook_Against_GC_Id 	
					  and Articles > Actual_Articles 
			end 

			Update EC_Opr_VTrans_GC 
			set Private_Mark=@Private_Mark,			Pickup_Type_Id = @Pickup_Type_Id,  
				GC_Date = @GC_Date,  				GC_Time = @GC_Time,  
				Is_Attached = @Is_Attached ,		Attached_GC_Id =@Attached_GC_Id ,
				Is_ReBooked = @Is_ReBooked ,		ReBook_Against_GC_Id = @ReBook_Against_GC_Id,
				Committed_Del_Date = @Committed_Del_Date,  
				Consignment_Type_Id = @Consignment_Type_Id,  
				Booking_Mode_Id = @Booking_Mode_Id, Booking_Type_Id = @Booking_Type_Id,  
				Booking_Sub_Type_Id  = @Booking_Sub_Type_Id ,
				Payment_Type_Id = @Payment_Type_Id, Delivery_Type_Id = @Delivery_Type_Id,  
				Door_Delivery_Against_ID = @Door_Delivery_Against_ID,  
				From_Location_ID = @From_Location_ID,To_Location_ID = @To_Location_ID,  
				Delivery_Branch_Id = @Delivery_Branch_Id,  
				Vehicle_Type_Id = @Vehicle_Type_Id, Vehicle_No = @Vehicle_No,  
				STM_No = @STM_No,Feasibility_Route_Survey_No = @Feasibility_Route_Survey_No,  
				Consignee_Client_ID = @Consignee_Client_ID,
				Consignee_Name = @Consignee_Name,   Consignee_Add1 = @Consignee_Add1,  
				Consignee_Add2 = @Consignee_Add2,  	Consignee_City_ID = @Consignee_City_ID,  
				Consignee_City = @Consignee_City,  	Consignee_Pin_Code = @Consignee_Pin_Code,  
				Consignee_Country_Id = @Consignee_Country_Id,  
				Consignee_Country = @Consignee_Country,  
				Consignee_State_ID = @Consignee_State_ID,  
				Consignee_State = @Consignee_State, Consignee_Tel_No = @Consignee_Tel_No,  
				Consignee_Mobile_No = @Consignee_Mobile_No,  
				Consignee_EMail = @Consignee_EMail, Consignee_CST_TIN_No = @Consignee_CST_TIN_No,  
				Is_Consignee_Service_Tax_Applicable = @Is_Consignee_Service_Tax_Applicable,

				Consignor_Client_ID = @Consignor_Client_ID,  
				Consignor_Name = @Consignor_Name,  Consignor_Add1 = @Consignor_Add1,  
				Consignor_Add2 = @Consignor_Add2,  Consignor_City_ID = @Consignor_City_ID,  
				Consignor_City = @Consignor_City,  Consignor_Pin_Code = @Consignor_Pin_Code,  
				Consignor_Country_ID = @Consignor_Country_ID,  
				Consignor_Country = @Consignor_Country,  
				Consignor_State_ID = @Consignor_State_ID,  
				Consignor_State = @Consignor_State,Consignor_Tel_No = @Consignor_Tel_No,  
				Consignor_Mobile_No = @Consignor_Mobile_No,
				Consignor_EMail = @Consignor_EMail,	Consignor_CST_TIN_No = @Consignor_CST_TIN_No,  
				Is_Consignor_Service_Tax_Applicable = @Is_Consignor_Service_Tax_Applicable,

				DD_Address_1 = @DD_Address_1,  		DD_Address_2 = @DD_Address_2,  
				Acknowledge = @Acknowledge,  		Total_Articles = @Total_Articles,  
				Total_Actual_Weight = @Total_Actual_Weight,  
				Loaded_Articles	= @Total_Articles,  Loaded_Actual_Weight = @Total_Actual_Weight,  
				Charged_Weight = @Charged_Weight,  	Total_Invoice_Value = @Total_Invoice_Value,  
				Is_DACC = @Is_DACC,					Length_Charge_Head_Id	= @Length_Charge_Head_Id	,
				Freight_Rate = @Freight_Rate,  		Freight_Amt = @Freight_Amt,  
				Length_Charge  = @Length_Charge,	Unloading_Charge = @Unloading_Charge,
				Local_Charges = @Local_Charges,  	Bilti_Charges = @Bilti_Charges,  
				Hamali_Per_Kg = @Hamali_Per_Kg,  	Hamali_Charges = @Hamali_Charges,  
				Hamali_Per_Articles = @Hamali_Per_Articles,
				DD_Charges = @DD_Charges,			DACC_Charges = @DACC_Charges,
				TP_Charges = @TP_Charges,  			Other_Charges = @Other_Charges,  
				Tax_Abate_Percent = @Tax_Abate_Percent,  
				Tax_Abate = @Tax_Abate,  			Amt_Taxable = @Amt_Taxable,  
				FOVPercent = @FOVPercent,  			FOV = @FOV,  
				ODA_Charges = @ODA_Charges,  
				Oda_charges_upto_500_Kg = @Oda_charges_upto_500_Kg,  
				Oda_charges_above_500_Kg = @Oda_charges_above_500_Kg,  
				ReBook_Charges = @ReBook_Charges ,	ReBook_GC_Sub_Total = @ReBook_GC_Sub_Total,
				Sub_Total = @Sub_Total,  			Advance_Amount = @Advance_Amount,  
				Service_Tax_Percent = @Service_Tax_Percent,  
				Service_Tax_Amount = @Service_Tax_Amount,  
				Service_Tax_On_Advance = @Service_Tax_On_Advance,
				ReBook_Octroi_Amount = @ReBook_Octroi_Amount ,
				Total_GC_Amount = @Total_GC_Amount,  

				Std_Freight_Rate = @Std_Freight_Rate,	Std_Freight_Amt = @Std_Freight_Amt,  
				Std_Local_Charge_Rate  = @Std_Local_Charge_Rate ,
				Std_Local_Charge = @Std_Local_Charge,  
				Std_Hamali_Charge = @Std_Hamali_Charge,  
				Std_DD_Charge_Rate = @Std_DD_Charge_Rate,
				Std_DD_Charge = @Std_DD_Charge,  		Std_FOV = @Std_FOV,  
				Std_DACC_Charge = @Std_DACC_Charge,
				Std_Bilti_Charges = @Std_Bilti_Charges,  
				Std_Service_Tax_Amount = @Std_Service_Tax_Amount,  
				Std_FOVPercent = @FOVPercent,  			Std_TP_Charges = @Std_TP_Charges,  
				Std_CFT_Factor = @Std_CFT_Factor,

				Std_Octroi_Form_Charges = @Std_Octroi_Form_Charges,
				Std_Octroi_Service_Charges = @Std_Octroi_Service_Charges,
				Std_Demurrage_Days = @Std_Demurrage_Days,Std_Demurrage_Rate = @Std_Demurrage_Rate,
				Std_GI_Charges = @Std_GI_Charges,		Std_NForm_Charge = @Std_NForm_Charge,
				Is_Cheque = @Is_Cheque,  				Cheque_No = @Cheque_No,  
				Cheque_Date = @Cheque_Date,  			Bank_Name = @Bank_Name,  
				Cash_Amount = @Cash_Amount,  			Cheque_Amount = @Cheque_Amount,  
				Tax_Payable_By = @Tax_Payable_By,  		Contract_Branch_ID = @Contract_Branch_ID,  
				Contract_ID = @Contract_ID,  			Billing_Client_ID = @Billing_Client_ID,  
				Billing_Branch_Id = @Billing_Branch_Id, Billing_Remarks = @Billing_Remarks,  
				Risk_Type_ID = @Risk_Type_ID,  			Insurance_Company = @Insurance_Company,  
				Policy_No = @Policy_No,  				Policy_Exp_Date = @Policy_Exp_Date,  
				Policy_Amount = @Policy_Amount,  		Risk_Amount = @Risk_Amount,  
				Freight_Basis_ID = @Freight_Basis_ID,  	Volumetric_Freight_Unit_ID = @Volumetric_Freight_Unit_ID,  
				Unit_Of_Measurement_ID = @Unit_Of_Measurement_ID,  
				Total_Length = @Total_Length,  			Total_Width = @Total_Width,  
				Total_Height = @Total_Height,  			Total_Length_In_Ft = @Total_Length_In_Feet,
				Total_Width_In_Ft= @Total_Width_In_Feet,Total_Height_In_Ft = @Total_Height_In_Feet,		
				CFT_Factor = @CFT_Factor,  				Total_CFT = @Total_CFT,  
				Total_CBM = @Total_CBM,  				Customer_Ref_No = @Customer_Ref_No,  
				GC_Remarks = @GC_Remarks,  				Instructions = @GC_Remarks,  -- instruction / remark
				GC_Remarks_Other_Charges = @GC_Remarks_Other_Charges,  
				Enclosures = @Enclosures,  				Is_Billed = @Is_Billed,  
				Is_ODA = @Is_ODA,						Is_Octroi_Applicable = @Is_Octroi_Applicable,
				ReBook_GC_Octroi_Paid_By_ID  = @ReBook_GC_Octroi_Paid_By_ID ,
				
				Oct_Form_Type = @Oct_Form_Type,  		Oct_Type_Id = @Oct_Type_Id,  
				Oct_Bill_No = @Oct_Bill_No,  			Oct_Bill_Date = @Oct_Bill_Date,
	  			Oct_Receipt_No = @Oct_Receipt_No,  		Oct_Amount = @Oct_Amount,  
				Oct_Remark = @Oct_Remark,  				Is_Consignor_Regular_Client = @Is_Consignor_Regular_Client,  
				Is_Consignee_Regular_Client = @Is_Consignee_Regular_Client,  
				Loading_Supervisor_ID = @Loading_Supervisor_ID, Marketing_Executive_ID = @Marketing_Executive_ID,  
				Road_Permit_Type_ID= @Road_Permit_Type_ID,  	Is_Multiple_Billing = @Is_Multiple_Billing,
				Status_Id = @Status_Id,					Updated_On = @Updated_On,  
				Updated_By = @Updated_By,

				Previous_Article_ID = @Previous_Article_ID ,	Previous_Status_ID = @Previous_Status_ID  ,
				Previous_Document_ID = @Previous_Document_ID ,	Previous_Document_No_For_Print = @Previous_Document_No_For_Print ,
				Previous_Document_Date = @Previous_Document_Date,Is_Signed_By_Consignor = @Is_SignedByConsignor ,
				Road_Permit_SrNo = @Road_Permit_SrNo ,			Is_Insured = @Is_Insured,
				Arrived_From_Branch_Id = @Arrived_From_Branch_Id,Arrived_Date  = @Arrived_Date,
				Is_Short_GC = @Is_Short_GC,
				Container_Type_Id = @Container_Type_Id ,		ContainerNo1 = @ContainerNo1 ,
				ContainerNo2 = @ContainerNo2 ,					SealNo = @SealNo ,
				Return_To_Yard_Id  = @Return_To_Yard_Id  ,		NFormNo = @NFormNo ,
				NForm_Charge = @NForm_Charge,					Delivery_Way_Type_ID = @Delivery_Way_Type_ID,
				Billing_Hierarchy = upper(@Billing_Hierarchy),
				Agency_GC_No = @AgencyGC_No_For_Print,
				Agency_Ledger_Id = @Agency_Ledger_Id,
				Agency_Branch_Id = @Agency_Branch_Id
			where GC_Id = @GC_Id  

			set @Print_Doc_ID = @GC_Id

			set @Article_Id = 0

			select @Article_Id = Article_Id from EC_Opr_VTrans_GC_Articles
			where GC_Id=@Gc_id and Status_id in (0,80)

			update EC_Opr_VTrans_GC_Articles
			set Updated_Date = @Updated_On,		
				Article_Actual_Weight = @Total_Actual_Weight, 
				Articles = @Total_Articles,
				Actual_Articles = @Total_Articles	,
				Current_Branch_ID = @Booking_Branch_Id , -- @From_Branch_ID,   
				Status_ID = 0,
				Document_ID = @GC_ID ,
				Document_No_For_Print = @GC_No_For_Print,
				Document_Date = @GC_Date,  
				Is_Cancelled = 0
			where GC_Id = @GC_Id and Article_Id = @Article_Id 

			delete from EC_Opr_VTrans_GC_Commodity_Details where GC_Id = @GC_Id  
			delete from EC_Opr_VTrans_GC_Invoice_Details where GC_Id = @GC_Id  
			delete from EC_Opr_VTrans_GC_Other_Charges where GC_Id = @GC_Id  
			delete from EC_Opr_Vtrans_GC_Billing_Details where GC_Id = @GC_Id  
						
			if @Is_Opening_GC = 1
			begin
				select @Actual_Unloading_Sheet_ID = Actual_Unloading_Sheet_ID ,
					@Aus_Article_ID = Previous_Article_ID
				from EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUS_Details
				where AUS_Details.GC_ID = @GC_Id  

				update EC_Opr_VTrans_GC_Articles
				set Articles = 0
				where Article_ID = @Article_ID and GC_ID = @GC_ID

				update EC_Opr_VTrans_GC_Articles
				set Articles = @Total_Articles,
					actual_articles = @Total_Articles,
					Document_Date = @Arrived_Date
				where GC_ID = @GC_ID and status_id = 60

				update EC_Opr_VTrans_Actual_Unloading_Sheet
				set Actual_Unloading_Sheet_Date = @Arrived_Date, 
					Arrived_From_Branch_ID = @Arrived_From_Branch_Id ,
					Arrived_From_Location_Id = @Arrived_From_Branch_Id ,  
					Vehicle_No = @Vehicle_No ,Vehicle_Type_ID = @Vehicle_Type_ID,  
					Total_Actual_Weight = @Total_Actual_Weight,
					Total_Received_Weight = @Total_Actual_Weight,  
					Total_Actual_Articles = @Total_Articles , 
					Total_Received_Articles = @Total_Articles ,
					Total_Loaded_Articles = @Total_Articles , 
					Vehicle_Arrival_Date = @Arrived_Date,  
					Unloaded_Supervisor_ID = @Loading_Supervisor_ID, 
					Updated_On = @Updated_On,Updated_By = @Updated_By   
				where Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID 

				update EC_Opr_VTrans_Actual_Unloading_Sheet_Details
				set Loaded_Articles = @Total_Articles, 
					Received_Articles = @Total_Articles,
					Received_Weight = @Total_Actual_Weight
				where Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID 
					and GC_ID = @GC_Id  
			end
		End  
	
		if @Is_ReBooked = 1  and  @ReBook_Against_GC_Id > 0
		begin
			update EC_Opr_VTrans_GC
			set Status_Id = 500,New_ReBook_GC_Id = @GC_Id 
			where GC_Id = @ReBook_Against_GC_Id -- @New_ReBook_GC_Id -- @ReBook_GC_Id 				
		end
		else
		begin
			update EC_Opr_VTrans_GC
			set New_ReBook_GC_Id = 0
			where GC_Id = @ReBook_Against_GC_Id -- @New_ReBook_GC_Id -- @ReBook_GC_Id 				
		end
			  
		if @Is_ReBooked = 0   
		begin
			update EC_Opr_VTrans_GC
			set	Previous_Article_ID = @Article_ID ,
				Previous_Status_ID = 0,  -- booking
				Previous_Document_ID  = @GC_Id ,
				Previous_Document_No_For_Print = @GC_No_For_Print ,
				Previous_Document_Date  = @GC_Date
			where GC_Id = @GC_Id 			
		end
		else
		begin
			declare @Unloading_Articles as int

			set @Unloading_Articles = ( select Articles from EC_Opr_VTrans_GC_articles 
										where Article_ID = @Previous_Article_ID 
										and GC_Id = @ReBook_Against_GC_Id and status_id = 60 
										and Current_Branch_ID = @Booking_Branch_Id ) --@From_Branch_ID)
			
			set @Unloading_Articles = @Unloading_Articles - @Total_Articles

			if @Unloading_Articles <= 0
			begin
				set @Unloading_Articles = 0
			end 

			update EC_Opr_VTrans_GC_Articles
			set Articles = @Unloading_Articles
			where Article_ID = @Previous_Article_ID and GC_Id = @ReBook_Against_GC_Id 		
				and status_id = 60 and Current_Branch_ID = @Booking_Branch_Id --@From_Branch_ID				
		end 

		EXEC sp_xml_Preparedocument @idoc output,@Multiple_Commodity_Xml        

		insert into EC_Opr_VTrans_GC_Commodity_Details  
			(GC_ID,Commodity_ID,Item_ID,Packing_ID,
			Articles,Weight,Width,Length,Height,Remark)
		SELECT @GC_Id,commodity_id,item_id,packing_id,  
			articles,weight,width,length,height,upper(remark)
		from openXml(@idoc,'/newdataset/multiple_commodity',2)        
			With(commodity_id int,item_id int,packing_id int,  
			articles int,weight numeric(18,2),width numeric(18,2),  
			length numeric(18,2),height numeric(18,2),remark varchar(100))        

		EXEC sp_xml_removedocument @idoc
		EXEC sp_xml_Preparedocument @idoc output,@Invoice_Xml    

		insert into EC_Opr_VTrans_GC_Invoice_Details  
			(GC_ID,Invoice_No,Invoice_Amount,BE_BL_No,Chalan_No)  
		select @GC_Id,invoice_no,invoice_amount,be_bl_no  ,chalan_no 
		from openXml(@idoc,'/newdataset/invoice',2)        
			With(invoice_no varchar(100),invoice_amount numeric(18,2),be_bl_no varchar(100),chalan_no varchar(100)) 

		EXEC sp_xml_removedocument @idoc
		EXEC sp_xml_Preparedocument @idoc output,@Other_Charges_Xml  

		if @Is_Attached = 0
		begin
			insert into EC_Opr_VTrans_GC_Other_Charges
				(GC_ID,GC_Other_Charge_Head_ID,Description,Amount)  
			select @GC_Id,gc_other_charge_head_id,description,amount
			from openXml(@idoc,'/newdataset/othercharges',2)        
			With(gc_other_charge_head_id int ,description varchar(100),
				amount  numeric(18,2),checked bit)
			where checked = 1
		end

		EXEC sp_xml_removedocument @idoc
		
		if @Payment_Type_Id = 3
		begin
			if  @Is_Multiple_Billing = 1
			begin
				EXEC sp_xml_Preparedocument @idoc output, @Billing_Details_Xml

				insert into EC_Opr_Vtrans_GC_Billing_Details
					(GC_ID,Billing_Client_ID, Billing_Branch_ID,
					  Description,Bill_Ratio,Is_Billed,Billed_date,Billing_Hierarchy)  
				select @GC_Id,Billing_Client_ID,billing_branch_id,
					Description,Bill_Ratio,0,getdate(),upper(billing_hierarchy)
				from openXml(@idoc,'/newdataset/billing_details',2)        
				With(billing_client_id int ,billing_branch_id int , 
					description varchar(100),bill_ratio numeric(18,2),billing_hierarchy varchar(5)) 

				EXEC sp_xml_removedocument @idoc
			end
			else
			begin
				insert into EC_Opr_Vtrans_GC_Billing_Details
					(GC_ID,Billing_Client_ID, Billing_Branch_ID,Description,Bill_Ratio,
					Is_Billed,Billed_date,Billing_Hierarchy)  
				values(@GC_Id,@Billing_Client_ID,@Billing_Branch_Id,@Billing_Remarks,100,
					0,getdate(),upper(@Billing_Hierarchy)) 
			end
		end

		declare @GC_Type_Id int
		set @GC_Type_Id = 0
		
		if @Is_DACC = 1 
		begin
			set @GC_Type_Id = 2  -- IBA GC
		end
		else if @Total_Articles = 0  and @Status_Id = 80
		begin
			set @GC_Type_Id = 3  -- Reserved GC
		end
		else if @Is_ReBooked = 1 
		begin
			set @GC_Type_Id = 4  -- ReBook GC
		end
		else if @Is_Attached = 1 
		begin
			set @GC_Type_Id = 5  -- Attached GC
		end
		else if @Menu_Item_Id = 229 -- Other Agency GC
		begin
			set @GC_Type_Id = 6 -- Other Agency GC
		end
		else if @Is_Opening_GC = 1
		begin
			set @GC_Type_Id = 7 -- Opening GC
		end
		else if @Menu_Item_Id = 213 -- Short GC
		begin
			set @GC_Type_Id = 8 -- Opening GC
		end
		else
		begin
			set @GC_Type_Id = 1  -- Normal GC
		end

		update EC_Opr_VTrans_GC
		set GC_Type_ID = @GC_Type_Id 
		where GC_Id = @GC_Id and GC_Type_ID = 0

		update EC_Opr_VTrans_GC
		set Year_Code = 0,
			From_Branch_ID = @Booking_Branch_Id, 
			Booking_Branch_Id = @Booking_Branch_Id,
			Document_Id = 2,			
			Document_Series_Allocation_ID = 0,
			GC_No_For_Print = @GC_No_For_Print,
			GC_No = @GC_No
		where GC_Id = @GC_Id and ( @Is_Opening_GC = 1 or @Menu_Item_Id = 200 )			

	--    exec EC_Opr_Set_Article_Effects @From_Branch_ID,'GC',@GC_Id,0   
		if @Is_Opening_GC = 0 or @Menu_Item_Id <> 200 -- 200 = opening gc 		begin	-----------GC Accounting Effect------------------------
			EXEC	[dbo].[EC_FA_Opr_GcAccountEffects]
					@Year_Code = @Booking_Year_Code,--@Year_Code,
 					@Hierarchy_Code = 'BO', -- @Hierarchy_Code,
 					@Main_Id = @Booking_Branch_Id , -- @From_Branch_ID,
					@Division_Id = @Division_Id,
					@User_Id = @Created_By,
					@GC_Id = @GC_Id
	-----------End GC Accounting Effect------------------------
		end
 
		if @Payment_Type_Id = 2 and @Is_Auto_Booking_MR_For_Paid_Booking = 1 and @Is_Opening_GC = 0 and @Is_Attached = 0
		begin
			exec [dbo].[Create_Auto_Booking_MR_For_Paid_Booking] -- @GC_Id,@Booking_Year_Code,@Cheque_Details_Xml
				@Year_Code = @Booking_Year_Code,--@Year_Code,
				@Division_ID = @Division_Id,
				@MR_Type_ID =1,  -- booking mr 
				@MR_ID =  @MR_ID, 
				@MR_Date = @GC_Date,
				@MR_Branch_ID = @Booking_Branch_Id,
				@GC_ID = @GC_ID ,
				@Total_MR_Amount = @Total_GC_Amount,
				@Cash_Amount = @Cash_Amount,
				@Cash_Ledger_ID = @Default_Cash_Ledger_Id,
				@Cheque_Amount = @Cheque_Amount,
				@Hierarchy_Code ='BO',
				@Menu_Item_ID = 106,  -- Menu_Item_ID = 106 of booking
				@Document_Allocation_ID =0,
				@MR_No =0,
				@MR_No_For_Print ='',
				@MRChequeDetailsXML =  @Cheque_Details_Xml,
				@Created_By =@Created_By,
				@VA_Id = 0,
				@Error_Code =@Error_Code output,
				@ERROR_DESC =@ERROR_DESC OUTPUT 
		end

	END  
		COMMIT TRAN  
	END TRY  
	BEGIN CATCH  
		ROLLBACK TRAN  
		SELECT @ERROR_CODE=ERROR_NUMBER()  
		SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
		CAST(ERROR_MESSAGE() as VARCHAR(4000))  
	END CATCH  

----1186--------------------------------------------------------------------------------





















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:  <Dinesh Mahajan>
-- Create date: <20-Jan-2009>
-- Description: <>
-- =============================================

CREATE Function [dbo].[Ec_Opr_Get_Service_Tax_For_GC]
(@GC_ID  int,
@Client_ID  int)

RETURNS numeric(18,2)
AS 

BEGIN  

Declare @Service_Tax as numeric(18,2)
Declare @Actual_Sub_Total as numeric(18,2)
Declare @Sub_Total as numeric(18,2)
Declare @Total_GC_Amount as numeric(18,2)

Declare @Is_Service_Tax_Applicable_For_Client bit
Declare @Is_Service_Tax_Applicable_For_Commodity_Of_GC bit

Declare @Bill_Ratio as numeric(18,2)
Declare @Other_Charges as numeric(18,2)
declare @Service_Tax_Percent as numeric(18,2)
declare @Tax_Payable_By as numeric(18,2)
declare @Service_Tax_Amount as numeric(18,2)
declare @Tax_Abate_Percent as numeric(18,2)
declare @Tax_Abate as numeric(18,2)
declare @Amt_Taxable as numeric(18,2)
Declare @booking_type_id int

set @Is_Service_Tax_Applicable_For_Client = 0
set @Service_Tax = 0
set @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 0

select @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 1
from EC_Master_Commodity
where Commodity_ID in 
(select Commodity_ID from EC_Opr_VTrans_GC_Commodity_Details  where GC_ID = @GC_ID)
and Is_Service_Tax_Applicable = 1

select @Is_Service_Tax_Applicable_For_Client = Is_Service_Tax_Applicable
from EC_Master_Client_VTrans
inner join EC_Opr_VTrans_GC_Billing_Details
on EC_Master_Client_VTrans.client_id = EC_Opr_VTrans_GC_Billing_Details.Billing_Client_ID
where gc_id = @GC_ID and Billing_Client_ID = @Client_ID


set @Service_Tax = 0
set @Bill_Ratio = 0 
set @Other_Charges = 0
set @Actual_Sub_Total  =0
set @Sub_Total  =0
set @Total_GC_Amount =0

select
@booking_type_id = booking_type_id,
@Actual_Sub_Total= Sub_Total ,
@Total_GC_Amount = Total_GC_Amount ,
@Other_Charges = Other_Charges
from EC_Opr_VTrans_GC
where GC_ID = @GC_ID 

select
	@Bill_Ratio = isnull(Bill_Ratio,0),  
	@Service_Tax_Percent = isnull(Service_Tax_Percent,0),  
	@Tax_Payable_By = Tax_Payable_By,  
	@Service_Tax_Amount = isnull(Service_Tax_Amount,0),  
	@Tax_Abate_Percent = isnull(Tax_Abate_Percent,0),  
	@Tax_Abate = isnull(Tax_Abate,0),  
	@Amt_Taxable = isnull(Amt_Taxable,0)  
from
	EC_Opr_VTrans_GC_Billing_Details  
	inner join EC_Opr_VTrans_GC on  
	EC_Opr_VTrans_GC.gc_id = EC_Opr_VTrans_GC_Billing_Details.Gc_ID  
where
	EC_Opr_VTrans_GC_Billing_Details.GC_ID = @GC_ID 
	and EC_Opr_VTrans_GC_Billing_Details.Billing_Client_ID = @Client_ID

set @Sub_Total  = @Actual_Sub_Total  * @Bill_Ratio / 100

set @Sub_Total  = @Sub_Total * 0.25  

set @Service_Tax = @Sub_Total  * @Service_Tax_Percent  / 100

if (@Actual_Sub_Total < 750 and @booking_type_id = 1) set @Service_Tax = 0
if (@Actual_Sub_Total < 1500 and @booking_type_id <> 1) set @Service_Tax = 0
if @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 0	set @Service_Tax = 0
if @Is_Service_Tax_Applicable_For_Client = 1 set @Service_Tax = 0

set @Service_Tax = round(@Service_Tax ,0)
return @Service_Tax
END





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- =============================================
-- Author:		<Author,,Amol>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

--exec EC_FA_MR_Get_GC_Details -1,0,521,8,2,4

CREATE PROCEDURE [dbo].[EC_FA_MR_Get_GC_Details] 
(
@GC_No varchar(20),
@Year_Code int,
@MR_Type_ID int,
@Division_ID int,
@Mr_branch_Id int,
@Document_Id int
)	
AS
SET NOCOUNT ON;
BEGIN

  
declare @Is_dly_Mr_Req_Before_Godown_Dly bit
set @Is_dly_Mr_Req_Before_Godown_Dly = 0

select @Is_dly_Mr_Req_Before_Godown_Dly = Is_dly_Mr_Req_Before_Godown_Dly
from dbo.EC_Master_Company_Parameters  

if(@Document_Id = 8)
begin
	set @MR_Type_ID = 2
end

declare @gc_maxlength int
select @gc_maxlength = GC_No_Length from ec_master_Company_gc_parameter

declare @gc_no_for_print varchar(20)
select @gc_no_for_print = case charindex('-',@GC_No) when 0 then dbo.Get_No_To_Print(@GC_No,@gc_maxlength) else @GC_No end


SELECT distinct GC.GC_ID,dbo.DateOnlyDisplay(GC.GC_Date) as GC_Date,
Del_Branch.Branch_Name as Delivery_Branch,
Bkg_Branch.Branch_Name as Booking_Branch
,Consignor_Name,Consignee_Name,Btype.Booking_Type
,Ptype.Payment_Type,Sub_Total,
Total_GC_Amount,GC.Service_Tax_Amount,
(case GC.Tax_Payable_By 
when 1 then 'Consignor'
when 2 then 'Consignee'
when 3 then 'Transporter' end) Tax_Payable_By,

(case 
when ((GC.Delivery_MR_ID > 0 and @Document_Id = 3) or
	 (GC.Credit_Memo_Freight_ID > 0 and @Document_Id = 8)) then 0 else 1
end) as Is_MR_FirstTime,

(case when GC.Credit_Memo_Octroi_ID > 0 then 0 else 1 end) as Is_CreditMemo_Octroi_FirstTime

FROM	EC_Opr_VTrans_GC GC INNER JOIN 
EC_Opr_VTrans_GC_Articles GC_Articles
ON		GC.GC_ID = GC_Articles.GC_ID
INNER JOIN ec_master_branch Bkg_Branch
ON		GC.From_Branch_ID = Bkg_Branch.Branch_Id
INNER JOIN ec_master_branch Del_Branch
ON		GC.Delivery_Branch_Id = Del_Branch.Branch_Id
INNER JOIN EC_Master_Booking_Type Btype
ON		GC.Booking_Type_Id = Btype.Booking_Type_Id
INNER JOIN EC_Master_Payment_Type Ptype
ON		GC.Payment_Type_Id = Ptype.Payment_Type_Id
LEFT OUTER JOIN EC_OPR_VTRANS_DOOR_DELIVERY_CONFIRMATION DDC
ON	DDC.DDC_Id = GC_Articles.Document_Id
inner join EC_Master_service_location Dlyserloc  
on GC.To_Location_ID = Dlyserloc.Service_Location_ID  
WHERE gc_no_for_print = @gc_no_for_print
and Gc.Is_Cancelled = 0
and gc.Year_Code = case GC.Is_Opening_Gc when 1 then 0 else @Year_Code end
and GC_Articles.is_cancelled = 0
and gc.Division_Id = @Division_ID 
and((GC.Payment_Type_ID in (2,4) and @MR_Type_ID = 1)	-- paid bookings
or
(GC.Payment_Type_ID in (1,2,3,4,5) and @MR_Type_ID = 2))

and((GC.From_Branch_ID = @Mr_branch_Id and @MR_Type_ID = 1)
or
(GC.Delivery_Branch_Id = @Mr_branch_Id and @MR_Type_ID = 2))

and((GC.Booking_MR_ID = 0 and @MR_Type_ID = 1)
or
(@MR_Type_ID = 2))

and
(
(GC_Articles.Status_id = 200 and @MR_Type_ID = 2 and Gc.delivery_type_id = 2)
or (@Is_dly_Mr_Req_Before_Godown_Dly = 1 and 
	(Gc.is_octroi_updated = case when Dlyserloc.is_octroi = 1 then 1 else Gc.is_octroi_updated end)
	and @MR_Type_ID = 2 and Gc.delivery_type_id = 1)
or (@Is_dly_Mr_Req_Before_Godown_Dly = 0 and GC_Articles.Status_id = 200 and @MR_Type_ID = 2 and Gc.delivery_type_id = 1)
or (@MR_Type_ID = 1)
)

and ((Delivery_MR_ID = 0 and @Document_Id = 8)
or
(Credit_Memo_Freight_ID = 0 and Credit_Memo_Octroi_ID = 0 and @Document_Id = 3))

--and((gc.Division_Id = @Division_ID and @MR_Type_ID = 1)
--or
--(gc.Division_Id = @Division_ID and @MR_Type_ID = 2))


END




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





	-- =============================================    
	-- Author:  <Dinesh Mahajan>    
	-- Create date: <22 / 10 /2008>    
	-- Description: <Read GC Values >    
	-- =============================================    
	    
	CREATE PROCEDURE [dbo].[EC_Opr_GC_ReadValues]       
	(
		@GC_ID int  =0   ,
		@Menu_Item_Id int = 30,
		@Year_Code int = 0,  
		@Division_ID int = 0 ,
		@GC_No_For_Print varchar(10) = ''
	)

	AS    
	BEGIN    
	 
		declare @GC_Status_Id_At_Current_Branch int 
		declare @GC_Articles_At_Current_Branch int
		 
		set @GC_Status_Id_At_Current_Branch = 0
		set @GC_Articles_At_Current_Branch = 0

		if @Menu_Item_Id = 194
		begin
			select   
				@GC_ID = GC.GC_ID     
			from   
				EC_Opr_VTrans_GC GC
			where
				GC.Division_ID = @division_id
				and GC.Year_Code = @year_code
				and GC.GC_No = @GC_No_For_Print
				and GC.Is_Agency_Booking = 0
				and GC.Total_Articles > 0
		end 
		
		select    
			GC.* ,  
			--GC.Attached_GC_Id Attached_GC_Id,			
	 
			isnull(Attached_GC.GC_No_For_Print,'') as  Attached_GC_No_For_Print,
			isnull(ReBook_GC.GC_No_For_Print,'') as ReBook_GC_No_For_Print,
			isnull(upper(From_loc.Service_Location_Name),'') as From_Location_Name,  
			isnull(upper(To_loc.Service_Location_Name),'') as To_Location_Name,  
			isnull(upper(EC_Master_Branch.Branch_Name),'') as Delivery_Branch_Name  ,

			isnull(upper(Booking_Branch.Branch_Name),'') as Booking_Branch_Name  ,
			isnull(upper(Arrived_From_Branch.Branch_Name),'') as Arrived_From_Branch_Name  ,		
	 
			isnull(upper(Loading_Supervisor.First_Name),'') + ' ' + isnull(upper(Loading_Supervisor.Middle_Name),'')  + ' ' + isnull(upper(Loading_Supervisor.Last_Name),'')  as Loading_Supervisor_Name,
			isnull(upper(Marketing_Executive.First_Name),'') + ' ' + isnull(upper(Marketing_Executive.Middle_Name),'')  + ' ' + isnull(upper(Marketing_Executive.Last_Name),'')  as Marketing_Executive_Name,

			isnull(EC_Master_Client_VTrans.Client_ID,0) as Contractual_Client_Id,
			isnull(upper(EC_Master_Client_VTrans.Client_Name),'') as Contractual_Client_Name ,

			isnull(upper(Billing_Client.Client_Name),'') as Billing_Client_Name,
			isnull(upper(Billing_Branch.Branch_Name),'') as billing_Branch_Name,
			isnull(upper(Agency_Branch.Branch_Name),'') as Agency_Name,
			isnull(GC.Agency_Branch_Id,0) as Agency_Id,
			isnull(upper(Agency_Ledger.Ledger_Name),'') as Agency_Ledger_Name,
			isnull(GC.Agency_Ledger_ID,0) as Agency_Ledger_ID,

			isnull(EC_Master_Branch.Is_Octroi,0) Is_Octroi,
			isnull(To_loc.Is_To_Pay_Booking,0) Is_To_Pay_Booking,
			GC.Previous_Article_ID as Previous_Article_ID_1 ,
			GC.Previous_Status_ID as Previous_Status_ID_1 ,
			GC.Previous_Document_ID as Previous_Document_ID_1  ,
			GC.Previous_Document_No_For_Print as Previous_Document_No_For_Print_1  ,
			GC.Previous_Document_Date as Previous_Document_Date_1 ,
			@GC_Status_Id_At_Current_Branch as GC_Status_Id_At_Current_Branch ,
			@GC_Articles_At_Current_Branch as GC_Articles_At_Current_Branch,
			Container_Type,isnull(GC.Delivery_Way_Type_ID,1) as DeliveryWayTypeID,
			isnull(upper(Return_To_Yard.Service_Location_Name),'') as Return_To_Yard_Name

		from  EC_Opr_VTrans_GC GC 
			left join EC_Opr_VTrans_GC Attached_GC on  
			GC.Attached_GC_Id = Attached_GC.GC_Id  

			left join EC_Opr_VTrans_GC ReBook_GC on  
			GC.ReBook_Against_GC_Id = ReBook_GC.GC_Id  

			left join ec_master_service_location From_loc on  
			GC.From_Location_ID = From_loc.Service_Location_ID  

			left join ec_master_service_location To_loc on  
			GC.To_Location_ID = To_loc.Service_Location_ID  

			left join ec_master_Branch on  
			ec_master_Branch.branch_id = GC.Delivery_Branch_Id  

			left join ec_master_Branch Booking_Branch on  
			Booking_Branch.branch_id = GC.Booking_Branch_Id

			left join ec_master_Branch Arrived_From_Branch on  
			Arrived_From_Branch.branch_id = GC.Arrived_From_Branch_Id

			left join ec_master_Employee Loading_Supervisor on  
			GC.Loading_Supervisor_ID = Loading_Supervisor.Emp_ID  

			left join ec_master_Employee Marketing_Executive on  
			GC.Marketing_Executive_ID = Marketing_Executive.Emp_ID  

			left join EC_Opr_Contract_Master on  
			GC.Contract_ID = EC_Opr_Contract_Master.Contract_ID  

			left join EC_Master_Client_VTrans on  
			EC_Opr_Contract_Master.Client_ID = EC_Master_Client_VTrans.Client_ID  

			left join EC_Master_Client_VTrans Billing_Client on  
			GC.Billing_Client_ID = Billing_Client.Client_ID  

			left join EC_Master_Branch Billing_Branch on  
			GC.Billing_Branch_Id = Billing_Branch.Branch_Id  

			left join ec_master_service_location Return_To_Yard on  
			GC.Return_To_Yard_Id = Return_To_Yard.Service_Location_ID  

			left join EC_Master_Container_Type on  
			GC.Container_Type_Id = EC_Master_Container_Type.Container_Type_ID

			left join EC_Master_Branch Agency_Branch on  
			GC.Agency_Branch_Id = Agency_Branch.Branch_Id  

			left join FA_Master_Ledger Agency_Ledger on  
			GC.Agency_Ledger_Id = Agency_Ledger.Ledger_Id  

		where  GC.GC_ID=@GC_ID
	   	   
----------------------------  Commodity Details ------------------------------------

		select 0 as sr_no,  
			GC_Commodity_Details.Commodity_ID,  
			GC_Commodity_Details.Item_ID,  
			GC_Commodity_Details.Packing_ID,  
			Articles,Weight,Width,Length,Height ,  
			isnull(Commodity_Name,'') as Commodity_Name,
			isnull(Packing_Type,'') as Packing_Type,
			isnull(Item_Name,'') as Item_Name ,
			isnull(Remark,'') as Remark,GC_ID,GC_Commodity_ID
		from EC_Opr_VTrans_GC_Commodity_Details GC_Commodity_Details
			left join ec_Master_Item on   
			GC_Commodity_Details.Item_ID = ec_Master_Item.Item_Id    
			left join ec_Master_Commodity on   
			GC_Commodity_Details.Commodity_ID = ec_Master_Commodity.Commodity_ID  
			left join ec_Master_Packing on   
			GC_Commodity_Details.Packing_ID = ec_Master_Packing.Packing_ID  
		where GC_ID=@GC_ID  
	  
----------------------------  Invoice Details ------------------------------------

		select 0 as sr_no,Invoice_No,Invoice_Amount,
			BE_BL_No,GC_ID,GC_Invoice_ID, isnull(upper(Chalan_No),'') as Chalan_No
		from EC_Opr_VTrans_GC_Invoice_Details  
		where GC_ID=@GC_ID  

---------------------------- other Charge Details ------------------------------------

		select 'true' as checked, 0 as sr_no,
			GC_Other_Charges_ID, GC_ID,
			GC_Other_Charges.GC_Other_Charge_Head_ID,
			GC_Other_Charge_Head, Description,
			isnull(Amount,0) as Amount ,GC_Other_Charges_ID
		from EC_Opr_VTrans_GC_Other_Charges GC_Other_Charges 
			inner join EC_Master_GC_Other_Charge_Head 
		on  GC_Other_Charges.GC_Other_Charge_Head_ID = EC_Master_GC_Other_Charge_Head.GC_Other_Charge_Head_ID  
		where GC_ID=@GC_ID  

		union

		select 'false' as checked, 0 as sr_no,
			0 GC_Other_Charges_ID, 0 GC_ID,
			EC_Master_GC_Other_Charge_Head.GC_Other_Charge_Head_ID,
			GC_Other_Charge_Head, '' Description,
			0 Amount, 0 GC_Other_Charges_ID
		from EC_Master_GC_Other_Charge_Head  
		where GC_Other_Charge_Head_ID not in (
				select GC_Other_Charge_Head_ID 
				from EC_Opr_VTrans_GC_Other_Charges  
				where GC_ID=@GC_ID  ) 
			and is_Active=1
		order by GC_Other_Charge_Head

----------------------------  Billing Details ------------------------------------

		select 0 as sr_no,GC_Billing_Details.* ,Hierarchy.Hierarchy_Name as 'Hierarchy_Name',
			isnull(upper(Billing_Client.Client_Name),'') as Billing_Client_Name,
			Billing_Client.Credit_Limit as Credit_Limit, 
			cast(0.00 as float) as Closing_Balance,Billing_Client.Ledger_Id,
			GC_Billing_Id,
			 Case GC_Billing_Details.Billing_Hierarchy 
				When 'AO' then Area.Area_Name
				When 'BO' then Billing_Branch.Branch_Name 
			    When 'RO' then Region.Region_Name
				When 'HO' then ''
			  End as billing_Branch_Name

		from EC_Opr_Vtrans_GC_Billing_Details GC_Billing_Details
			left join EC_Master_Client_VTrans Billing_Client on  
			GC_Billing_Details.Billing_Client_ID = Billing_Client.Client_ID  
			Left Join Ec_Master_Hierarchy Hierarchy      
			On Hierarchy.Hierarchy_Code=GC_Billing_Details.Billing_Hierarchy

			left join EC_Master_Branch Billing_Branch on  
			GC_Billing_Details.Billing_Branch_Id = Billing_Branch.Branch_Id 
			left join EC_Master_Area Area on  
			GC_Billing_Details.Billing_Branch_Id = Area.Area_Id  
			left join EC_Master_Region Region on  
			GC_Billing_Details.Billing_Branch_Id = Region.Region_Id  
 
		where GC_ID=@GC_ID

----------------------------  MR Bank Details ------------------------------------

		SELECT MR_Bank_Details.Year_Code,MR_Bank_Details.Division_ID,MR_Details_ID,
			MR_Bank_Details.MR_ID,Cheque_Bank_Name,Cheque_Branch_Name,
			MR_Bank_Details.Cheque_No,MR_Bank_Details.Cheque_Amount,
			Ledger_Name as Bank_Ledger_Name,Bank_Ledger_ID,
			convert(varchar(20),MR_Bank_Details.Cheque_Date,106) as Cheque_Date
		FROM FA_Opr_MR_Bank_Details MR_Bank_Details INNER JOIN FA_Opr_MR  on  
			FA_Opr_MR.MR_ID = MR_Bank_Details.MR_ID INNER JOIN EC_Opr_Vtrans_GC  on  
			FA_Opr_MR.GC_ID = EC_Opr_Vtrans_GC.GC_ID INNER JOIN FA_Master_Ledger 
			ON MR_Bank_Details.Bank_Ledger_ID = FA_Master_Ledger.Ledger_Id
		WHERE FA_Opr_MR.GC_ID = @GC_ID
			and EC_Opr_Vtrans_GC.Payment_Type_Id = 2 -- paid

	END    






















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 19 Jan 2009 >
-- Description:	<EC_FA_Opr_LHPOAccountEffects>
-- =============================================
--Declare @Error_Code int,@ERROR_DESC AS VARCHAR(4000); EXEC EC_FA_Opr_LHPOAccountEffects 8,'BO',1,1,298,1,@Error_Code,@ERROR_DESC; print @ERROR_DESC
CREATE Proc [dbo].[EC_FA_Opr_LHPOCrossingAccountEffects]
(
@LHPO_Id int=0,
@AUS_Id int=0,
@IsFromLHPO Bit=0,
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)
As
BEGIN

BEGIN TRY
BEGIN TRAN

SET NOCOUNT ON;
set @Error_Code = 0;
set @ERROR_DESC = '';

if((select Isnull(Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking,0) From dbo.EC_Master_Company_Parameters) = 1)
 GOTO EXITPROC


Declare @Document_ID intif(@IsFromLHPO=1)Begin	set @Document_ID =5	EXEC [dbo].[EC_FA_Opr_ReverseAccountEffects]
				@Document_Id = @Document_ID,
				@Transaction_ID = @LHPO_IdEndelseBegin	set @Document_ID =16	EXEC [dbo].[EC_FA_Opr_ReverseAccountEffects]
				@Document_Id = @Document_ID,
				@Transaction_ID = @AUS_IdEnd--FA_Master_GC_Accounting_ParametersDeclare 
------LHPO Company Param------
@Is_Book_Own_Truck_Hire Bit,@Is_Market_Truck_Ledger_Account_Truck_Wise bit,
@Is_Attached_Truck_Ledger_Account_Truck_Wise bit,
@Is_Managed_Truck_Ledger_Account_Truck_Wise bit,@LHPO_Nature_Of_Payemnt_ID_For_TDS_Deduction bit,------LHPO Values------
@LHPO_Type_ID int,@LHPO_Branch_ID int,
@LHPO_Date Datetime,@LHPO_No Varchar(50),@Vehicle_Category_ID int,
@Vehicle_ID int,@From_Location_ID int,@To_Location_ID int,
@Broker_ID int,@Truck_Hire_Charge numeric(18,2),
@Other_Charges numeric(18,2),@Loading_Charges numeric(18,2),
@TDS_Percent numeric(18,2),@TDS_Amount numeric(18,2),@Total_Truck_Hire_Payable numeric(18,2),@Total_Actual_Weight int,@Advance_Amount numeric(18,2),@Balance_Payable_Hierarchy_Code varchar(2),
@Balance_Payable_Main_ID int,@Year_Code int,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@User_Id int,
----FA LHPO Ledgers-------@GenVoucherId int,@Truck_Hire_Expense_Account_Ledger int,@TDS_Ledger int,@Loading_Charges_Ledger int--select --@Is_Book_Own_Truck_Hire=Is_Book_Own_Truck_Hire,
--@Is_Market_Truck_Ledger_Account_Truck_Wise=Is_Market_Truck_Ledger_Account_Truck_Wise,
--@Is_Attached_Truck_Ledger_Account_Truck_Wise=Is_Attached_Truck_Ledger_Account_Truck_Wise,
--@Is_Managed_Truck_Ledger_Account_Truck_Wise=Is_Managed_Truck_Ledger_Account_Truck_Wise,
--@LHPO_Nature_Of_Payemnt_ID_For_TDS_Deduction=LHPO_Nature_Of_Payemnt_ID_For_TDS_Deduction--From EC_Master_Company_Parametersselect @Year_Code=Year_Code,
@Hierarchy_Code='BO',
@Main_Id=LHPO_Branch_ID,
@Division_Id=Division_Id,
@User_Id=Created_By,@LHPO_Type_ID=LHPO_Type_ID,
@LHPO_Branch_ID=LHPO_Branch_ID,
@LHPO_Date=LHPO_Date,
@LHPO_No=LHPO_No_For_Print,
@Vehicle_Category_ID=Vehicle_Category_ID,
@Vehicle_ID=Vehicle_ID,
@From_Location_ID=From_Location_ID,
@To_Location_ID=To_Location_ID,
@Broker_ID=Broker_ID,
@Truck_Hire_Charge=Isnull(Truck_Hire_Charge,0),
@Other_Charges=Isnull(Other_Charges,0),
@Loading_Charges=Isnull(Loading_Charges,0),
@TDS_Percent=Isnull(TDS_Percent,0),
@TDS_Amount=Isnull(TDS_Amount,0),
@Total_Truck_Hire_Payable=Isnull(Total_Truck_Hire_Payable,0),@Total_Actual_Weight=Isnull(Total_Actual_Weight,0),@Balance_Payable_Hierarchy_Code=Balance_Payable_Hierarchy_Code,
@Balance_Payable_Main_ID=Balance_Payable_Main_ID,@Advance_Amount=IsNull(Total_Advance_To_Be_Paid,0)From dbo.EC_Opr_VTrans_LHPOwhere LHPO_Id=@LHPO_IdDeclare @Delivery_Comm_Amount numeric(18,2),@Upcountry_Cost_Amount numeric(18,2),		@Trans_Sales_Receivables_Amount numeric(18,2),@Upcountry_Receivables_Amount numeric(18,2),		@Lorry_Payable_Amount numeric(18,2),@Other_Charges_Payable numeric(18,2),@Memo_To_Branch_Id numeric(18,2),		@Memo_To_Branch_Amount numeric(18,2),@Balance_Payble_Amount numeric(18,2),		@Truck_Hire_Charge_Ledger int,@Other_Charges_Expense_Ledger int,
		@Delivery_Commission_Ledger int,@Upcountry_Cost_Ledger int,
		@Trans_Sales_Receivables_Ledger int,@Upcountry_Receivables_Ledger int,
		@Lorry_Payable_Ledger int,@Other_Charges_Payable_Ledger int,@PerKg numeric(18,2),
		@Delivery_Receivable_Ledger int,
        @Memo_To_Branch_Voucher_XML XML,@Bank_Name varchar(50),		@Cheque_No int,@Cheque_Date datetime,@TotalTruckHire numeric(18,2),        @Sr_No int,@Count int,@RatePer numeric(18,2),@Memo_Id int,@From_Branch int,@To_Branch int,		@Sub_Total_Amount numeric(18,2),@Total_Delivery_Comm numeric(18,2),@Total_UpCountry_Cost numeric(18,2),		@Branch_Ledger_Id int,@Voucher_Type_Id int,@VoucherXML XML		set @Memo_To_Branch_Voucher_XML=''		set @VoucherXML=''		Set @Bank_Name=''		Set @Cheque_No=0		Set @Cheque_Date=Getdate()		set @TotalTruckHire= @Truck_Hire_Charge + @Other_Charges		set @Balance_Payble_Amount=@Truck_Hire_Charge - Isnull(@Advance_Amount,0)		set @RatePer=(select Isnull(Standard_Freight_Rate_Per,0) from  EC_Master_Company_Parameters)--Truck Hire Expense Account		Declare @Temp_DeliveryComm as Table(Sr_No int Identity,Memo_Id int,GC_Id int,Delivery_Comm int)		Declare @Temp_UpcountryCost as Table(Sr_No int Identity,Upcountry_Cost int,Memo_Id int,GC_Id int)		Declare @Temp_Manifest as Table(Sr_No int Identity,Memo_Id int,From_Branch int,To_Branch int)	Insert Into @Temp_UpcountryCost(GC_Id,Memo_Id,Upcountry_Cost)	select LHPOGc.GC_Id,Memo.Memo_Id,    (Select isnull(sum(Total),0) From dbo.EC_Master_Vtrans_Standard_Crossing_Rate      where From_Branch_Id=Memo.To_Branch_Id And To_Branch_Id=GC.Delivery_Branch_Id) as UpcounryCost	From	dbo.EC_Opr_VTrans_LHPO_GC_Details LHPOGc inner Join dbo.EC_Opr_VTrans_GC GC ON LHPOGc.GC_Id=GC.GC_Id	Inner Join dbo.EC_Opr_VTrans_Memo Memo ON Memo.Memo_Id=LHPOGc.Memo_Id 	where GC.Delivery_Branch_Id <> Memo.To_Branch_Id And GC.Payment_Type_Id=1 And LHPOGc.LHPO_ID=@LHPO_ID	Insert Into @Temp_DeliveryComm(Delivery_Comm,GC_Id,Memo_Id)	select     (Select Isnull(Sum(Delivery_Commission),0) From dbo.EC_Master_Branch_Rate_Card_VTrans      where Branch_ID=GC.Delivery_Branch_Id) as Delivery_Commission,	Gc.GC_Id,Memo.Memo_Id	From dbo.EC_Opr_VTrans_GC GC Inner Join	dbo.EC_Opr_VTrans_LHPO_GC_Details LHPOGc ON LHPOGc.GC_Id=GC.GC_Id	Inner Join dbo.EC_Opr_VTrans_Memo Memo ON Memo.Memo_Id=LHPOGc.Memo_Id	where GC.Delivery_Branch_Id = Memo.To_Branch_Id And LHPOGc.LHPO_ID=@LHPO_ID	Insert Into @Temp_Manifest(Memo_Id,From_Branch,To_Branch)	select Memo.Memo_ID,Memo_Branch_Id,To_Branch_Id	From dbo.EC_Opr_VTrans_LHPO_Memo_Details LHPOMemo Inner Join dbo.EC_Opr_VTrans_Memo Memo	On LHPOMemo.Memo_ID=Memo.Memo_ID	where LHPOMemo.LHPO_ID=@LHPO_ID	Set @Total_Delivery_Comm=0	Set @Total_UpCountry_Cost=0	select @Count=Count(*) From @Temp_Manifest 	SElect @Sr_No=1select * from @Temp_DeliveryCommselect * from @Temp_UpcountryCostselect * from @Temp_Manifestwhile @Sr_No<=@CountBegin	select @Memo_Id=Memo_Id,@From_Branch=From_Branch,@To_Branch=To_Branch  from @Temp_Manifest	where Sr_No=@Sr_NoSet @Sub_Total_Amount=(Select Sum(Sub_Total) From EC_Opr_VTrans_GC where  GC_Id in  (Select GC_Id From EC_Opr_VTrans_LHPO_GC_Details                                                                                  where Memo_Id=@Memo_ID And LHPO_Id=@LHPO_Id                                                                                )  And Payment_Type_Id=1                           )Set @Delivery_Comm_Amount=(  Select Isnull(Sum(Delivery_Comm * Total_Actual_Weight / @RatePer),0) from @Temp_DeliveryComm as Temp inner Join dbo.EC_Opr_VTrans_GC GC On Temp.GC_Id=GC.Gc_Id where Memo_Id = @Memo_Id) Set @UpCountry_Cost_Amount=(Select Isnull(Sum(Upcountry_Cost * Total_Actual_Weight / @RatePer),0) from @Temp_UpcountryCost as Temp inner Join dbo.EC_Opr_VTrans_GC GC On Temp.GC_Id=GC.Gc_Id where Memo_Id = @Memo_Id)Set @Total_Delivery_Comm=@Delivery_Comm_Amount + @Total_Delivery_CommSet @Total_UpCountry_Cost=@UpCountry_Cost_Amount + @Total_UpCountry_Costif(@Balance_Payable_Main_ID=@To_Branch)    Set @Memo_To_Branch_Amount = @Sub_Total_Amount - @Delivery_Comm_Amount - @UpCountry_Cost_Amount - @Balance_Payble_AmountElse	Set @Memo_To_Branch_Amount = @Sub_Total_Amount - @Delivery_Comm_Amount - @UpCountry_Cost_Amountselect @Sub_Total_Amount , @Delivery_Comm_Amount, @UpCountry_Cost_Amount , @Balance_Payble_Amount	Set @Branch_Ledger_Id= dbo.GetBranchLedger(@To_Branch)	set @Memo_To_Branch_Voucher_XML= Cast(@Memo_To_Branch_Voucher_XML as Varchar(2000))									 + dbo.GetVoucherDetailsXML(@Branch_Ledger_Id,@Memo_To_Branch_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)    Set @SR_No=@SR_No+1End--while @Sr_No<=@CountSet @Trans_Sales_Receivables_Amount=(   Select Isnull(Sum(Sub_Total),0) From dbo.EC_Opr_VTrans_GC GC Inner Join										dbo.EC_Opr_VTrans_LHPO_GC_Details LHPOGc ON LHPOGc.GC_Id=GC.GC_Id										where GC.From_Branch_Id = @LHPO_Branch_Id And GC.Payment_Type_Id=1 And LHPOGc.LHPO_ID=@LHPO_ID									)Set @Upcountry_Receivables_Amount=(   Select Isnull(Sum(Sub_Total),0) From dbo.EC_Opr_VTrans_GC GC Inner Join										dbo.EC_Opr_VTrans_LHPO_GC_Details LHPOGc ON LHPOGc.GC_Id=GC.GC_Id										where GC.From_Branch_Id <> @LHPO_Branch_Id And GC.Payment_Type_Id=1 And LHPOGc.LHPO_ID=@LHPO_ID								  )
		Set @Truck_Hire_Charge_Ledger=dbo.Get_Ledger_Id1(0,1150,0,0)		Set @Other_Charges_Expense_Ledger=dbo.Get_Ledger_Id1(0,1000,0,0)		Set @Delivery_Commission_Ledger=dbo.Get_Ledger_Id1(0,950,0,0)		Set @Upcountry_Cost_Ledger=dbo.Get_Ledger_Id1(0,1200,0,0)		Set @Trans_Sales_Receivables_Ledger=dbo.Get_Ledger_Id1(0,1300,0,0)		Set @Upcountry_Receivables_Ledger=dbo.Get_Ledger_Id1(0,850,0,0)		Set @Lorry_Payable_Ledger=dbo.Get_Ledger_Id1(0,1100,0,0)		Set @Other_Charges_Payable_Ledger=dbo.Get_Ledger_Id1(0,1050,0,0)		Set @Delivery_Receivable_Ledger=dbo.Get_Ledger_Id1(0,800,0,0)if(@IsFromLHPO=1)Beginset @VoucherXML =    '<NewDataSet>'	+  
	dbo.GetVoucherDetailsXML(@Truck_Hire_Charge_Ledger,@Truck_Hire_Charge,0,@Bank_Name,@Cheque_No,@Cheque_Date)	+  	dbo.GetVoucherDetailsXML(@Other_Charges_Expense_Ledger,@Other_Charges,0,@Bank_Name,@Cheque_No,@Cheque_Date)	+  	dbo.GetVoucherDetailsXML(@Delivery_Commission_Ledger,@Total_Delivery_Comm,0,@Bank_Name,@Cheque_No,@Cheque_Date)	+  
	dbo.GetVoucherDetailsXML(@Upcountry_Cost_Ledger,@Total_UpCountry_Cost,0,@Bank_Name,@Cheque_No,@Cheque_Date)	+  
	dbo.GetVoucherDetailsXML(@Trans_Sales_Receivables_Ledger,0,@Trans_Sales_Receivables_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)	+  	dbo.GetVoucherDetailsXML(@Upcountry_Receivables_Ledger,0,@Upcountry_Receivables_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)	+  	dbo.GetVoucherDetailsXML(@Lorry_Payable_Ledger,0,@Advance_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)    +	dbo.GetVoucherDetailsXML(@Other_Charges_Payable_Ledger,0,@Other_Charges,@Bank_Name,@Cheque_No,@Cheque_Date)    +	cast(@Memo_To_Branch_Voucher_XML as Varchar(2000))	+	'</NewDataSet>'
 

    Set @Voucher_Type_Id=6----Journal	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @LHPO_Branch_Id,---LHPO BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@LHPO_Date,
			@Ref_No = @LHPO_No,
			@Ledger_Id =@Truck_Hire_Charge_Ledger,
			@Total_Debit = 0,
			@Total_Credit = 0,
			@Narration = 'LHPO BOOKS ENTRY',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @VoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML ='<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@LHPO_Id,@GenVoucherIdEndElseBegin----------------------ULOADING ACCOUNT EFFECT--------------------------------------------------------Declare @LHPO_Branch_Ledger int,@Memo_Branch_Id int,@Diff_Amount numeric(18,2),@Diff_Debit_Amount numeric(18,2),@Diff_Credit_Amount numeric(18,2),@Delivery_AUS_Amount numeric(18,2),@Upcountry_Receivables_AUS_Amount Numeric(18,2),@AUS_Date datetime,@AUS_No varchar(100),@AUS_Branch_Id intselect @LHPO_Id=LHPO_Id ,@AUS_Date= Actual_Unloading_Sheet_Date,@AUS_No=Actual_Unloading_Sheet_No_For_Print,@AUS_Branch_Id=Un_Loading_Branch_IDFrom dbo.EC_Opr_VTrans_Actual_Unloading_Sheetwhere  Actual_Unloading_Sheet_ID=@AUS_Idselect @Year_Code=Year_Code,@Hierarchy_Code='BO',@Main_Id=LHPO_Branch_ID,
@Division_Id=Division_Id,@User_Id=Created_By,@LHPO_Branch_Id=LHPO_Branch_IdFrom dbo.EC_Opr_VTrans_LHPOwhere LHPO_Id=@LHPO_Idset @LHPO_Branch_Ledger=dbo.GetLocationLedger('BO',@LHPO_Branch_Id)Declare @Temp_AUSManifest as Table(Sr_No int Identity,Memo_Id int)Insert Into @Temp_AUSManifest(Memo_Id)select Distinct Memo_Id  from dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details where Actual_Unloading_Sheet_ID=@AUS_Idselect @Count=Count(*) From @Temp_AUSManifestSelect @Sr_No=1select * from @Temp_AUSManifestwhile @Sr_No<=@CountBegin	select @Memo_Id=Memo_Id from @Temp_AUSManifest	where Sr_No=@Sr_Noselect @Memo_Branch_Id=Memo_Branch_Id From dbo.EC_Opr_VTrans_Memo where Memo_Id=@Memo_IdSet @Delivery_AUS_Amount=(		Select Isnull(Sum(Sub_Total),0) From dbo.EC_Opr_VTrans_GC GC Inner Join									dbo.EC_Opr_VTrans_LHPO_GC_Details LHPOGc ON LHPOGc.GC_Id=GC.GC_Id								     where GC.From_Branch_Id = @LHPO_Branch_Id And GC.Payment_Type_Id=1 And LHPOGc.LHPO_ID=@LHPO_ID                                      And LHPOGc.Memo_Id=@Memo_Id						 )Set @Upcountry_Receivables_AUS_Amount=(   Select Isnull(Sum(Sub_Total),0) From dbo.EC_Opr_VTrans_GC GC Inner Join										dbo.EC_Opr_VTrans_LHPO_GC_Details LHPOGc ON LHPOGc.GC_Id=GC.GC_Id										where GC.From_Branch_Id <> @LHPO_Branch_Id                                         And GC.Payment_Type_Id=1 And LHPOGc.LHPO_ID=@LHPO_ID And LHPOGc.Memo_Id=@Memo_Id								  )Set @Delivery_Comm_Amount=(  Select Isnull(Sum(Delivery_Comm * Total_Actual_Weight / @RatePer),0) from @Temp_DeliveryComm as Temp inner Join dbo.EC_Opr_VTrans_GC GC On Temp.GC_Id=GC.Gc_Id where Memo_Id = @Memo_Id) Set @UpCountry_Cost_Amount=(Select Isnull(Sum(Upcountry_Cost * Total_Actual_Weight / @RatePer),0) from @Temp_UpcountryCost as Temp inner Join dbo.EC_Opr_VTrans_GC GC On Temp.GC_Id=GC.Gc_Id where Memo_Id = @Memo_Id)set @Diff_Amount=@Trans_Sales_Receivables_Amount + @Upcountry_Receivables_Amount - @Delivery_Comm_Amount - @UpCountry_Cost_Amount - @Balance_Payble_Amountif(@Diff_Amount<0)   set @Diff_Debit_Amount=abs(@Diff_Amount)else   Set @Diff_Credit_Amount=@Diff_Amountselect @Delivery_AUS_Amount,@Upcountry_Receivables_AUS_Amount,@Diff_Amountset @VoucherXML =    '<NewDataSet>'	+  	dbo.GetVoucherDetailsXML(@Delivery_Receivable_Ledger,@Delivery_AUS_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)	+  	dbo.GetVoucherDetailsXML(@Upcountry_Receivables_Ledger,@Upcountry_Receivables_AUS_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)	+  	dbo.GetVoucherDetailsXML(@Delivery_Commission_Ledger,0,@Delivery_Comm_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)	+  
	dbo.GetVoucherDetailsXML(@Upcountry_Cost_Ledger,0,@UpCountry_Cost_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)	+  
	dbo.GetVoucherDetailsXML(@Lorry_Payable_Ledger,0,case when @Sr_No=1 then @Balance_Payble_Amount else 0 end,@Bank_Name,@Cheque_No,@Cheque_Date)    + 	dbo.GetVoucherDetailsXML(@LHPO_Branch_Ledger,@Diff_Debit_Amount,@Diff_Credit_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)	+	'</NewDataSet>'
 

    Set @Voucher_Type_Id=6----Journal	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @AUS_Branch_Id,---AUS BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@AUS_Date,
			@Ref_No = @AUS_No,
			@Ledger_Id =@LHPO_Branch_Ledger,
			@Total_Debit = 0,
			@Total_Credit = 0,
			@Narration = 'AUS BOOKS ENTRY',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @VoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML ='<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@AUS_Id,@GenVoucherId    Set @SR_No=@SR_No+1End--while @Sr_No<=@CountEnd----------------------END ULOADING ACCOUNT EFFECT------------------------------------------------------------dbo.EC_Opr_VTrans_GC--GC_Id--Sub_Total--From_Branch_ID--Delivery_Branch_Id--------select ----dbo.EC_Opr_VTrans_Memo--Memo_Id--Memo_Branch_Id--To_Branch_Id------dbo.EC_Opr_VTrans_LHPO_GC_Details--Memo_ID--GC_ID--LHPO_ID------dbo.EC_Opr_VTrans_GC--GC_Id--Sub_Total--From_Branch_ID--Delivery_Branch_Id------dbo.EC_Master_Branch_Rate_Card_VTrans--Branch_ID--Delivery_Commission------dbo.EC_Master_Vtrans_Standard_Crossing_Rate--From_Branch_Id--To_Branch_Id--Total--
EXITPROC:
COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
select @ERROR_DESC
END CATCH
END






























GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



 -- =============================================
 -- Author:<Dinesh Mahajan>
 -- Create date: <20-Jan-2009>
 -- Description: <>
 -- =============================================

CREATE Function [dbo].[Ec_Opr_Is_Service_Tax_Applicable_GC]
(@GC_ID int,@Client_ID int)

RETURNS bit
AS

BEGIN
Declare @Actual_Sub_Total as numeric(18,2)
Declare @booking_type_id int

Declare @Is_Service_Tax_Applicable_For_Client bit
Declare @Is_Service_Tax_Applicable_For_Commodity_Of_GC bit
Declare @Is_Service_Tax_Applicable_GC bit

set @Is_Service_Tax_Applicable_For_Client = 0
set @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 0
set @Is_Service_Tax_Applicable_GC = 0

select @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 1
from EC_Master_Commodity
where Commodity_ID in 
(select Commodity_ID from EC_Opr_VTrans_GC_Commodity_Details where GC_ID = @GC_ID)
 and Is_Service_Tax_Applicable = 1

select @Is_Service_Tax_Applicable_For_Client = Is_Service_Tax_Applicable
from EC_Master_Client_VTrans
inner join EC_Opr_VTrans_GC_Billing_Details
on EC_Master_Client_VTrans.client_id = EC_Opr_VTrans_GC_Billing_Details.Billing_Client_ID
where gc_id = @GC_ID and Billing_Client_ID = @Client_ID

select
@booking_type_id = booking_type_id,
@Actual_Sub_Total= Sub_Total
from EC_Opr_VTrans_GC
where GC_ID = @GC_ID 

set @Is_Service_Tax_Applicable_GC = 1

--if (@Actual_Sub_Total < 750 and @booking_type_id = 1) set @Is_Service_Tax_Applicable_GC = 0
--if (@Actual_Sub_Total < 1500 and @booking_type_id <> 1) set @Is_Service_Tax_Applicable_GC = 0
if @Is_Service_Tax_Applicable_For_Commodity_Of_GC = 0	set @Is_Service_Tax_Applicable_GC = 0
if @Is_Service_Tax_Applicable_For_Client = 1 set @Is_Service_Tax_Applicable_GC = 0

RETURN @Is_Service_Tax_Applicable_GC 

END




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- Author:	<Shiv kumar mishra>
-- Create date: Oct  13 2008  5:13PM
-- Description:	<Client master ReadValues>
-- =============================================

CREATE proc [dbo].[EC_Master_Client_ReadValues]
(
	@flag varchar(20),
    @Client_ID as int
)
as

BEGIN

if(@flag ='General')
	Begin
			select	Branch.Branch_Name,Client_Code,Client_Name,Client_Group_ID,
					Client.Branch_ID,Client.Contact_Person,Address1,Address2,
					Client.City_ID,Client.Pin_Code,Client.Std_Code,Phone1,Phone2,
					Mobile_No,Client.Fax,Client.Email_ID,CST_TIN_No,Service_Tax_No
			from	EC_Master_Client_VTrans Client 
					left outer join EC_Master_Branch Branch
			on		Client.Branch_Id=Branch.Branch_Id			
			where	Client_ID=@Client_ID
	End
else if(@flag ='Finance')
	Begin
			select	Ledger.Ledger_Name,(First_Name+' '+Middle_Name+' '+Last_Name)as Marketing_Executive_Name,
					Client.Ledger_Id,Credit_Days,Client.Credit_Limit,Interest_Percent,Grace_Days,
					Client.Is_Service_Tax_Applicable,Business_Hrs,Registration_Date,
					Client.Is_User,Client.Profile_Id,
					Is_Mechanical_Loading,Marketing_Executive_ID,Is_Existing_Ledger,dbo.CheckLedgerTrans(Client.Ledger_Id) as [Exists]
			from	EC_Master_Client_VTrans Client			
					left outer join FA_Master_Ledger Ledger 
			on		Client.Ledger_Id=Ledger.Ledger_Id
					left outer join EC_Master_Employee EMP 
			on		Client.Marketing_Executive_ID=EMP.Emp_Id
			where	Client_ID=@Client_ID
	End
else if(@flag ='Billing')
	Begin
		select	Is_Paid_Allowed,Is_To_Pay_Allowed,
				Is_To_Be_Billed_Docket_Allowed,Is_FOC_Allowed 
		from	EC_Master_Client_VTrans Client 		
		where	Client_ID=@Client_ID

		Select	Branch_ID,Branch_Name,Billing.Contact_Person,Billing_Name,Billing_Address,
				Billing.City_ID,City_Name,Contact_No,email
		from	EC_Master_Client_Vtrans_Billing_Details Billing inner join 
				EC_Master_Branch Branch on Billing.Billing_Branch_ID = Branch.Branch_ID
				inner join EC_Master_City City 
		on		Billing.City_ID = City.City_ID
		where	Client_Id = @Client_Id

	End
END







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Ankit champaneriya>
-- Create date: < 10 Oct 2008 >
-- Description:	<Add ,Edit cost centre / cost_centre_allocation>
-- =============================================

--select * from FA_Master_Cost_Centre
--select * from FA_Master_Cost_Centre_Allocation

CREATE Proc [dbo].[EC_FA_Mst_CostCentre_Save]
(
@Key_Id int,
@XML as xml,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Cost_Centre_Name as varchar(100),
@Parent_Cost_Centre_ID as int,
@ERROR_CODE AS INT OUTPUT,
@ERROR_DESC AS VARCHAR(4000) OUTPUT,
@UserId int
)
As
BEGIN TRY
BEGIN TRAN
BEGIN
SET NOCOUNT ON;
set @ERROR_CODE = 0;
set @ERROR_DESC = '';

if(@Key_Id<=0)
Begin
	INSERT INTO FA_Master_Cost_Centre
		(
		Hierarchy_Code,
		Main_Id,
        Cost_Centre_Name,
		Parent_Cost_Centre_ID
		)
	VALUES
		(@Hierarchy_Code,
		@Main_Id,
		@Cost_Centre_Name,
		@Parent_Cost_Centre_ID
		)

			Declare @Cost_Centre_ID_New as int    
			select @Cost_Centre_ID_New = @@identity    

			DECLARE @idoc int
			EXEC sp_xml_preparedocument @idoc OUTPUT, @xml 
				 
			INSERT INTO FA_Master_Cost_Centre_Allocation
					( Hierarchy_Code, Main_Id,Cost_Centre_ID,Ledger_ID )

			SELECT  
					@Hierarchy_Code, @Main_Id,@Cost_Centre_ID_New , Ledger_Id 
				FROM  
					OPENXML (@idoc, '/NewDataSet/tbl_Cost_Centre',2)
					WITH 
						(	 Ledger_Id  int	) 
					
			EXEC sp_xml_removedocument @idoc

END
Else
Begin   
       UPDATE FA_Master_Cost_Centre 
	   SET
			Hierarchy_Code=@Hierarchy_Code,
			Main_Id=@Main_Id,
			Cost_Centre_Name=@Cost_Centre_Name,
			Parent_Cost_Centre_ID=@Parent_Cost_Centre_ID
		WHERE
			Cost_Centre_ID=@Key_Id

		DELETE FROM FA_Master_Cost_Centre_Allocation
		WHERE Cost_Centre_ID=@Key_Id

--		Declare @Cost_Centre_ID_New as int    
--			select @Cost_Centre_ID_New = @@identity    

			DECLARE @idocUpdate int
			EXEC sp_xml_preparedocument @idocUpdate OUTPUT, @xml 
				 
			INSERT INTO FA_Master_Cost_Centre_Allocation
					( Hierarchy_Code, Main_Id,Cost_Centre_ID,Ledger_ID )

			SELECT  
					@Hierarchy_Code, @Main_Id,@Key_Id , Ledger_Id 
				FROM  
					OPENXML (@idocUpdate, '/NewDataSet/tbl_Cost_Centre',2)
					WITH 
						(	 Ledger_Id  int	) 
					
			EXEC sp_xml_removedocument @idocUpdate
End

END
COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
END CATCH







----223--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



          
          
          
-- =============================================          
-- Author:  <Piyush Kumar>          
-- Create date: <09-Jan-2009>          
-- Description: <Description>          
-- [dbo].[EC_RPT_Paid_Freight_Details_Grid] 0,0,0,'2008-04-04','2009-01-30',0,0        
  -- =============================================          
            
CREATE PROCEDURE [dbo].[EC_RPT_Paid_Freight_Details_Grid]             
@Region_id as int,          
@Area_id as int,          
@Branch_id as int,          
@From_Date as datetime,            
@To_date as datetime,          
@Payment_Type_Id as int,        
@Division_ID as int,    
@PageIndex int,     
@PageSize int, 
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1         
               
AS            
BEGIN           
set nocount on 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Booking Type','s,5')
        insert into @Dropdown_Search values ('Pay Type','s,6')
        insert into @Dropdown_Search values ('Cash Amount','n,7')
        insert into @Dropdown_Search values ('Cheque Amount','n,8')
     	insert into @Dropdown_Search values ('Total GC Amount','n,9')
		select  *From @Dropdown_Search

		return
	end  
--------------------------------------Filter-----------------------------------------          
if @Branch_ID  > 0          
  BEGIN          
  Set @Region_ID = -1          
  set @Area_ID = -1          
  END          
else if  @Area_ID > 0          
  BEGIN          
  Set @Region_ID = -1          
  set @Branch_ID =  -1          
  END          
else if @Region_ID > 0          
  BEGIN          
  set @Area_ID = -1          
  set @Branch_ID = -1          
  END;  
          
-------------------------------STEP 1--------------------------------------------------------------    
WITH BranchWiseBookingRegister AS    
(    
select distinct    
  ROW_NUMBER() OVER(Order by ec_master_region.Region_name, ec_master_Area.Area_name,   
  ec_master_branch.Branch_name, Ec_Opr_vtrans_GC.Gc_No_for_Print) AS 'Sr No.',   
  ec_master_region.Region_name as [Booking Region],           
  ec_master_Area.Area_name as [Booking Area],           
  ec_master_branch.Branch_name as [Booking Branch],          
  Ec_Opr_vtrans_GC.Gc_No_for_Print as [gc_caption No],          
  dbo.dateonlydisplay(Ec_Opr_vtrans_GC.GC_date) as [gc_caption Date],            
  Ec_Opr_vtrans_GC.Consignor_Name as [Conr Name],            
  Ec_master_booking_type.Booking_type as [Bkg Type],            
  Ec_master_delivery_type.Delivery_Type as [Dly Type],          
  Ec_master_payment_type.Payment_type as [Pmt Type],            
  Cast(Ec_Opr_vtrans_GC.Cheque_No as varchar(20)) as [Cheque No],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Cash_amount, 0) as float),0) as [Cash Amount],            
  ISNULL(Cast(round(ec_opr_vtrans_gc.Cheque_Amount, 0) as float),0) as [Cheque Amount],                
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.total_Gc_Amount, 0) as float),0) as [gc_caption Amount],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Freight_Amt, 0) as float),0) as [Basic Amount],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Local_Charges, 0) as float),0) as [Local Charges],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.FOV, 0) as float),0) as [FOV],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Hamali_Charges, 0) as float),0) as [Hamali Charges],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Other_Charges, 0) as float),0) as [Other Charges],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Bilti_Charges, 0) as float),0) as [Bilti Charges],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.DD_Charges, 0) as float),0) as [DD Charges],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Sub_Total, 0) as float),0) as [Sub Total],            
  ISNULL(Cast(round(Ec_Opr_vtrans_GC.Service_Tax_Amount, 0) as float),0) as [Service Tax Amount],            
  Case When Ec_Opr_vtrans_GC.Tax_Payable_By = 1 Then 'Consignor'           
   When Ec_Opr_vtrans_GC.Tax_Payable_By = 2 Then 'Consignee'           
   When Ec_Opr_vtrans_GC.Tax_Payable_By = 3 Then 'Transporter'           
  End as [Tax Payable By]           
                
from Ec_Opr_vtrans_GC             
inner join ec_master_branch            
 on ec_master_branch.branch_id=Ec_Opr_vtrans_GC.From_Branch_ID            
inner join ec_master_area            
 on ec_master_area.area_id=ec_master_branch.area_id            
inner join ec_master_region            
 on ec_master_region.region_id=ec_master_branch.region_id            
inner join Ec_master_booking_type          
 on Ec_master_booking_type.booking_type_id=Ec_Opr_vtrans_GC.booking_type_id          
inner join Ec_master_delivery_type          
 on Ec_master_delivery_type.delivery_type_id=Ec_Opr_vtrans_GC.delivery_type_id          
inner join Ec_master_payment_type          
 on Ec_master_payment_type.payment_type_id=Ec_Opr_vtrans_GC.payment_type_id          
left outer join Ec_opr_vtrans_GC_Articles            
 on Ec_opr_vtrans_GC_Articles.Gc_id =  Ec_Opr_vtrans_GC.GC_id             
                           
 Where Ec_Opr_vtrans_GC.Is_Cancelled=0            
 and Ec_Opr_vtrans_GC.status_id<>80            
 and Ec_opr_vtrans_GC_Articles.status_id =0          
 and Ec_opr_vtrans_GC_Articles.status_id<>80                 
 and Ec_Opr_vtrans_GC.Cash_amount<> 0           
          
 and(ec_master_branch.Branch_ID = @Branch_ID            
  OR ec_master_branch.Region_ID = (Select case @Region_ID when 0 then ec_master_branch.Region_ID else  @Region_ID end)          
  OR ec_master_branch.Area_ID =  @Area_ID)           
          
 and (Ec_Opr_vtrans_GC.GC_Date BETWEEN @From_Date and @To_Date)          
 and Ec_master_payment_type.payment_type_id=(select case @Payment_Type_Id when 0 then Ec_master_payment_type.payment_type_id else @Payment_Type_Id end)           
             
 and Ec_Opr_vtrans_GC.Division_ID=(select case @Division_ID when 0 then Ec_Opr_vtrans_GC.Division_ID else @Division_ID end) 
and 
(@criteria_id = 0


or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and Ec_master_booking_type.Booking_type = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and Ec_master_booking_type.Booking_type like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and Ec_master_booking_type.Booking_type like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and Ec_master_booking_type.Booking_type like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and Ec_master_payment_type.Payment_Type  = @Filtered_Text)
or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and Ec_master_payment_type.Payment_Type  like @Filtered_Text + '%')
or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and Ec_master_payment_type.Payment_Type  like '%' + @Filtered_Text)
or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and Ec_master_payment_type.Payment_Type  like '%' + @Filtered_Text + '%')

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and Ec_Opr_vtrans_GC.Cash_amount = @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and Ec_Opr_vtrans_GC.Cash_amount >=@Filtered_Text_int)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and Ec_Opr_vtrans_GC.Cash_amount <= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and Ec_Opr_vtrans_GC.Cash_amount > @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and Ec_Opr_vtrans_GC.Cash_amount < @Filtered_Text_int)

or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and ec_opr_vtrans_gc.Cheque_Amount = @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and ec_opr_vtrans_gc.Cheque_Amount >= @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and ec_opr_vtrans_gc.Cheque_Amount <= @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and ec_opr_vtrans_gc.Cheque_Amount > @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and ec_opr_vtrans_gc.Cheque_Amount < @Filtered_Text_int)

or (@colid = 9 and @criteria_id = 1 and @datatype_id = 4 and Ec_Opr_vtrans_GC.total_Gc_Amount = @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 2 and @datatype_id = 4 and Ec_Opr_vtrans_GC.total_Gc_Amount >= @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 3 and @datatype_id = 4 and Ec_Opr_vtrans_GC.total_Gc_Amount <= @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 4 and @datatype_id = 4 and Ec_Opr_vtrans_GC.total_Gc_Amount > @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 5 and @datatype_id = 4 and Ec_Opr_vtrans_GC.total_Gc_Amount < @Filtered_Text_int)


)                 
)  
-------------------------------STEP 2--------------------------------------------------------------    
SELECT * into #bkgregis FROM BranchWiseBookingRegister    
-------------------------------STEP 3--------------------------------------------------------------    
    
select * From #bkgregis    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
--------------------------------STEP 4-------------------------------------------------------------    
select    
sum([Cash Amount]) as Total_Cash_Amount,    
sum([Cheque Amount]) as Total_Cheque_Amount,    
sum([gc_caption Amount]) as Total_GC_Amount,    
sum([Basic Amount]) as Total_Basic_Amount,    
sum([Local Charges]) as Total_Local_Charges,    
sum([FOV]) as Total_FOV,    
sum([Hamali Charges]) as Total_Hamali_Charges,    
sum([Other Charges]) as Total_Other_Charges,  
sum([Bilti Charges]) as Total_Bilti_Charges,    
sum([DD Charges]) as Total_DD_Charges,    
sum([Sub Total]) as Total_Sub_Total,   
sum([Service Tax Amount]) as Total_Service_Tax_Amount  
from #bkgregis    
    
--------------------------------STEP 5-------------------------------------------------------  
select count(*) From #bkgregis    
---------------------------------------------------------------------------------------------    
End   
  
----698--------------------------------------------------------------------------------  
  
  
  
----118--------------------------------------------------------------------------------  
  




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE proc [dbo].[EC_Opr_Set_Article_Effects]
(@Login_Branch_ID int,
@Document_Type varchar(10),
@New_Document_ID Int,
@User_Action int)
as

--declare @Login_Branch_ID int
--declare @Document_Type varchar(10)
--declare @New_Document_ID Int
--declare @User_Action int
--
--set @Login_Branch_ID = 5
--set @Document_Type = 'LHPO'
--set @New_Document_ID = 99


--@User_Action = 1 add
--@User_Action = 2 edit

set nocount on

declare @New_Status_id int

declare @Temp_Article
table (Sr_No int identity, GC_ID int,
Balance_Articles int,Balance_Actual_Wt int,
Loaded_Articles int,Loaded_Actual_Wt int,
New_Article_ID int,New_Document_No_For_Print nvarchar(20),
New_Document_Date datetime,Details_Id int,
Previous_Article_ID int,Status_ID int,Current_Branch_ID int,
Delivery_Status_ID int)

if @Document_Type = 'GC'
	begin
		insert into @Temp_Article
		select b.GC_ID,
		b.Total_Articles,b.Total_Actual_Weight,
		b.Total_Articles,b.Total_Actual_Weight,
		0,b.GC_No_For_Print,
		b.GC_Date,b.GC_ID,
		isnull(a.Article_ID,0),isnull(a.Status_ID,0),isnull(a.Current_Branch_ID,0),200
		from ec_opr_vtrans_gc_articles a
		RIGHT Outer Join EC_Opr_VTrans_GC b
		on a.GC_ID = b.GC_ID
		where 1=1
		and b.GC_ID = @New_Document_ID
		and isnull(a.Status_ID,0) = 0

		set @New_Status_id = 0
	end
else if @Document_Type = 'AT'
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		a.Actual_Articles,a.Article_Actual_Weight,
		a.Article_ID,c.Pickup_Sheet_No_For_Print,
		c.Pickup_Sheet_Date,b.Pickup_Sheet_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,200
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Pickup_Sheet_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_Pickup_Sheet c
		on b.Pickup_Sheet_Id = c.Pickup_Sheet_Id
		where b.Pickup_Sheet_Id = @New_Document_ID

		set @New_Status_id = 5
	end

else if @Document_Type = 'ALS'
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		b.Loaded_Articles,b.Loaded_Actual_Wt,
		a.Article_ID,c.ALS_No_For_Print,
		c.ALS_Date,b.ALS_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,200
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_ALS_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_ALS c
		on b.ALS_ID = c.ALS_ID
		where b.ALS_ID = @New_Document_ID

		set @New_Status_id = 20
	end


else if @Document_Type = 'Memo'
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		b.Loaded_Articles,b.Loaded_Actual_Wt,
		a.Article_ID,c.Memo_No_For_Print,
		c.Memo_Date,b.Memo_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,200
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Memo_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_Memo c
		on b.Memo_ID = c.Memo_ID
		where b.Memo_ID = @New_Document_ID

		set @New_Status_id = 30
	end
else if @Document_Type = 'LHPO'
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		b.Loaded_Articles,b.Loaded_Wt,
		a.Article_ID,c.LHPO_No_For_Print,
		c.LHPO_Date,b.LHPO_GC_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,200
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_LHPO_GC_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_LHPO c
		on b.LHPO_ID = c.LHPO_ID
		where b.LHPO_ID = @New_Document_ID

		set @New_Status_id = 40
	end
else if @Document_Type = 'TAS'
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		a.Actual_Articles,a.Article_Actual_Weight,
		a.Article_ID,c.TAS_No_For_Print,
		c.TAS_Date,b.TAS_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,200
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_TAS_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_TAS c
		on b.TAS_ID = c.TAS_ID
		where b.TAS_ID = @New_Document_ID

		set @New_Status_id = 50
	end
else if @Document_Type in ('AUS','AUS_OA')
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		b.Received_Articles,b.Received_Weight,
		a.Article_ID,c.Actual_Unloading_Sheet_No_For_Print,
		c.Actual_Unloading_Sheet_Date,b.Actual_Unload_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,200
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Actual_Unloading_Sheet_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_Actual_Unloading_Sheet c
		on b.Actual_Unloading_Sheet_ID = c.Actual_Unloading_Sheet_ID
		where b.Actual_Unloading_Sheet_ID = @New_Document_ID

		set @New_Status_id = 60
	end
else if @Document_Type = 'PDS'
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		b.Delivery_Articles,b.Delivery_Actual_Wt,
		a.Article_ID,c.PDS_No_For_Print,
		c.PDS_Date,b.PDS_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,200
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Pre_Delivery_Sheet_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_Pre_Delivery_Sheet c
		on b.PDS_ID = c.PDS_ID
		where b.PDS_ID = @New_Document_ID

		set @New_Status_id = 150
	end
else if @Document_Type = 'GDC' or @Document_Type = 'DDC' or @Document_Type = 'DD'
	begin
		insert into @Temp_Article
		select a.GC_ID,
		a.Actual_Articles,a.Article_Actual_Weight,
		b.Delivered_Articles,b.Delivered_Actual_Wt,
		a.Article_ID,c.DDC_No_For_Print,
		c.DDC_Date,b.DDC_Details_ID,
		b.Previous_Article_Id,a.Status_ID,a.Current_Branch_ID,Delivery_Status_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Door_Delivery_Confirmation_Details b
		on a.Article_Id = b.Article_Id
		inner join EC_Opr_VTrans_Door_Delivery_Confirmation c
		on b.DDC_ID = c.DDC_ID
		where b.DDC_ID = @New_Document_ID
--		and Delivery_Status_ID in (200,250)

		set @New_Status_id = 200
	end

declare @Sr_No int
declare @Total_Count int
declare @GC_ID int
declare @Balance_Articles int
declare @Balance_Actual_Wt int
declare @Loaded_Articles int
declare @Loaded_Actual_Wt int
declare @Previous_Article_ID int
declare @Details_Id int
declare @New_Artcle_ID int
declare @Status_ID int
declare @Current_Branch_ID int
declare @Delivery_Status_ID int
declare @New_Document_No_For_Print nvarchar(20)
declare @New_Document_Date datetime
declare @Existing_AUS_Article_ID int
declare @Insert_Into_Artciles_Table int


set @Sr_No = 1
set @Total_Count = 0
set @GC_ID = 0
set @Balance_Articles = 0
set @Balance_Actual_Wt = 0
set @Loaded_Articles = 0
set @Loaded_Actual_Wt = 0
set @Previous_Article_ID = 0
set @Details_Id = 0
set @New_Artcle_ID = 0
set @Status_ID = 0
set @Current_Branch_ID = 0
set @Delivery_Status_ID = 0
set @New_Document_No_For_Print = ''
set @New_Document_Date = getdate()
set @Existing_AUS_Article_ID = 0

select @Total_Count = count(*) from @Temp_Article

while @Sr_No <= @Total_Count
	begin
		select @GC_ID = GC_ID,@Previous_Article_ID = Previous_Article_ID,
		@Balance_Articles = Balance_Articles,@Balance_Actual_Wt = Balance_Actual_Wt,
		@Loaded_Articles = Loaded_Articles,@Loaded_Actual_Wt = Loaded_Actual_Wt,
		@Previous_Article_ID = Previous_Article_ID,@Details_Id = Details_Id,
		@New_Artcle_ID = New_Article_ID,@Status_id = Status_id,
		@Current_Branch_ID = Current_Branch_ID,@Delivery_Status_ID = Delivery_Status_ID,
		@New_Document_No_For_Print = New_Document_No_For_Print,
		@New_Document_Date = New_Document_Date
		from @Temp_Article where Sr_No = @Sr_No


		set @New_Status_id = case when (@Delivery_Status_ID = 200 or @Delivery_Status_ID = 250) then @New_Status_id else 300 end

		if @Document_Type = 'AT'
			begin
				select @Loaded_Actual_Wt = Article_Actual_Weight from
				ec_opr_vtrans_gc_articles where article_id = @Previous_Article_ID
			end

		if @New_Artcle_ID = @Previous_Article_ID
			set @User_Action = 1 -- add
		else
			set @User_Action = 2 --edit 

		if @Document_Type in ('AUS','DD')
			begin
				update ec_opr_vtrans_gc_articles set
				articles = 0,
				article_actual_weight = 0
				where article_id = @Previous_Article_ID
			end
		else --if @Document_Type <> 'AUS'
			begin
				if @New_Status_id <> 300
					update ec_opr_vtrans_gc_articles set
					articles = articles - @Loaded_Articles,
					article_actual_weight = article_actual_weight - @Loaded_Actual_Wt
					where article_id = @Previous_Article_ID
			end

--		if @Document_Type <> 'AUS'
--			begin
		if @User_Action = 2 --edit
			begin
				update ec_opr_vtrans_gc_articles set
				document_date = @New_Document_Date,
				articles = articles + @Loaded_Articles,
				actual_articles = articles + @Loaded_Articles,
				article_actual_weight = article_actual_weight + @Loaded_Actual_Wt
				where article_id = @New_Artcle_ID
			end
--			end--if @Document_Type <> 'AUS'

		if @User_Action = 1 --add
			begin
				set @Insert_Into_Artciles_Table = 1

				if @Document_Type in ('AUS','AUS_OA')
					begin
						set @Existing_AUS_Article_ID = 0

						select @Existing_AUS_Article_ID = Article_ID from ec_opr_vtrans_gc_articles
						where gc_id = @GC_ID and Status_ID = @New_Status_id
						and Current_Branch_ID = @Login_Branch_ID
						and Is_Cancelled = 0

						if @Existing_AUS_Article_ID > 0
							begin
								set @Insert_Into_Artciles_Table = 0

								update ec_opr_vtrans_gc_articles set
								articles = articles + @Loaded_Articles,
								article_actual_weight = article_actual_weight + @Loaded_Actual_Wt,
								Actual_Articles = Actual_Articles + @Loaded_Articles,
								Document_ID = @New_Document_ID,
								Document_No_For_Print = @New_Document_No_For_Print,
								Document_Date = @New_Document_Date
								where article_id = @Existing_AUS_Article_ID

								update EC_Opr_VTrans_Actual_Unloading_Sheet_Details set
								article_id = @Existing_AUS_Article_ID where Actual_Unload_Details_ID = @Details_Id
							end
					end --if @Document_Type = 'AUS'

				if @Insert_Into_Artciles_Table = 1
					begin
						insert into ec_opr_vtrans_gc_articles
						(Updated_Date,GC_ID,Current_Branch_ID,Status_ID,
						Article_Actual_Weight,Articles,Actual_Articles,
						Document_ID,Document_No_For_Print,Document_Date,Is_Cancelled)
						select getdate(),@gc_id,@Login_Branch_ID,@New_Status_id,
						@Loaded_Actual_Wt,@Loaded_Articles,@Loaded_Articles,
						@New_Document_ID,@New_Document_No_For_Print,@New_Document_Date,0

						set @New_Artcle_ID = @@identity

						if @Document_Type = 'AT'
							update EC_Opr_VTrans_Pickup_Sheet_Details set
							article_id = @New_Artcle_ID where Pickup_Sheet_Details_ID = @Details_Id
						else if @Document_Type = 'ALS'
							update EC_Opr_VTrans_ALS_Details set
							article_id = @New_Artcle_ID where ALS_Details_ID = @Details_Id
						else if @Document_Type = 'Memo'
							update EC_Opr_VTrans_Memo_Details set
							article_id = @New_Artcle_ID where Memo_Details_ID = @Details_Id
						else if @Document_Type = 'LHPO'
							update EC_Opr_VTrans_LHPO_GC_Details set
							article_id = @New_Artcle_ID where LHPO_GC_Details_ID = @Details_Id
						else if @Document_Type = 'TAS'
							update EC_Opr_VTrans_TAS_Details set
							article_id = @New_Artcle_ID where TAS_Details_ID = @Details_Id
						else if @Document_Type in ('AUS','AUS_OA')
							update EC_Opr_VTrans_Actual_Unloading_Sheet_Details set
							article_id = @New_Artcle_ID where Actual_Unload_Details_ID = @Details_Id
						else if @Document_Type = 'PDS'
							update EC_Opr_VTrans_Pre_Delivery_Sheet_Details set
							article_id = @New_Artcle_ID where PDS_Details_ID = @Details_Id
						else if @Document_Type = 'GDC' or @Document_Type = 'DDC' or @Document_Type = 'DD'
							update EC_Opr_VTrans_Door_Delivery_Confirmation_Details set
							article_id = @New_Artcle_ID where DDC_Details_ID = @Details_Id
					end--if @Insert_Into_Artciles_Table = 1
			end--if @User_Action = 1 --add
	set @Sr_No = @Sr_No + 1
	end








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






      
      
      
-- =============================================            
-- Author:  <Kanuga Vajiha>            
-- Create date: <22/05/09>            
-- Description: <MR Booking/Delivery Report For Nandawana>        
-- EXEC [dbo].[EC_RPT_MR_Booking_Delivery_Report] 5,'2009-04-01','2009-05-23',0,0,0          
-- =============================================            
CREATE PROCEDURE [dbo].[EC_RPT_MR_Booking_Delivery_Report]            
  @Branch_ID as int = 0,          
 @From_Date as datetime,          
 @To_Date as datetime,      
 @MRTypeId int, 
 @Approval int, 
 @PageIndex int,   
 @PageSize int           
          
AS            
BEGIN           
  

       
 SET NOCOUNT ON;        
-------------------------------STEP 1--------------------------------------------------------------  
WITH MRBookingDeliveryRegister AS  
(  
select distinct
 ROW_NUMBER() OVER(ORDER BY FA_Opr_MR.MR_Date) AS 'Sr No.',
 FA_Opr_MR.MR_No AS [MR No],
 dbo.DateOnlyDisplay(FA_Opr_MR.MR_Date) as [MR Date],
 ec_master_MR_type.MR_Type as [MR Type],
 FA_Opr_MR.Total_MR_Amount as [MR Amount], 
 dbo.EC_Opr_VTrans_GC.GC_No_For_Print AS [gc_caption No],         
 dbo.dateonlydisplay(dbo.EC_Opr_VTrans_GC.GC_Date) as [gc_caption Date],       
 FromBranch.Branch_Name AS [BKG Branch],       
 DeliveryBranch.Branch_Name AS [DEL Branch], 
 ISNULL(Cast(round(dbo.EC_Opr_VTrans_GC.Total_GC_Amount, 0) as float),0) AS [gc_caption Amount],       
 dbo.EC_Opr_VTrans_GC.Consignee_Name AS Consignee,
 dbo.EC_Opr_VTrans_GC.Consignor_Name as Consignor,
 Employee.First_Name + ' ' + Middle_Name+ ' ' + Last_Name as [Approved By]      

From FA_Opr_MR 
inner join  EC_Opr_VTrans_GC
on EC_Opr_VTrans_GC.GC_Id=FA_Opr_MR.GC_Id
inner join Ec_Master_MR_Type
on FA_Opr_MR.MR_Type_ID=Ec_Master_MR_Type.MR_Type_Id
inner join ec_master_branch  FromBranch      
 on FromBranch.branch_id=Ec_Opr_vtrans_GC.From_Branch_ID 
inner join EC_Master_Service_Location FromServiceLocation
on FromServiceLocation.Service_Location_Id=Ec_Opr_vtrans_GC.From_Location_ID
--inner join EC_Master_Area FromArea
--on FromArea.Area_Id=FromBranch.Area_Id
inner join EC_Master_Service_Location ToServiceLocation
on ToServiceLocation.Service_Location_Id=Ec_Opr_vtrans_GC.To_Location_ID
inner join  Ec_Master_Branch DeliveryBranch  
on DeliveryBranch.Branch_id=Ec_Opr_vtrans_GC.Delivery_Branch_Id
--inner join EC_Master_Area ToArea
--on ToArea.Area_Id=DeliveryBranch.Area_Id
left outer join Com_Adm_User AdmUser  
on FA_Opr_MR.Approved_By=AdmUser.User_Id  
left outer join Ec_Master_Employee Employee  
on Employee.Emp_Id=AdmUser.Employee_Id 

 Where Ec_Opr_vtrans_GC.Is_Cancelled=0          
and FA_Opr_MR.MR_Branch_ID = @Branch_ID   
and (FA_Opr_MR.MR_Date BETWEEN @From_Date and @To_Date)        
and Ec_Master_MR_Type.MR_Type_Id=(select case @MRTypeId when 0 then Ec_master_MR_type.MR_Type_Id else @MRTypeId end)
and FA_Opr_MR.Is_Approved=(select case @Approval when -1 then FA_Opr_MR.Is_Approved else @Approval end)    
--and FA_Opr_MR.Division_ID=(select case @Division_ID when 0 then FA_Opr_MR.Division_ID else @Division_ID end)         
)
-------------------------------STEP 2--------------------------------------------------------------  
SELECT * into #MRbkgDelregis FROM MRBookingDeliveryRegister  
-------------------------------STEP 3--------------------------------------------------------------  
  
select * From #MRbkgDelregis
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
--------------------------------STEP 4-------------------------------------------------------------  
select  
sum([MR Amount]) AS [MR Amount],
sum([gc_caption Amount]) as [gc_caption Amount]
from  #MRbkgDelregis 
  
--------------------------------STEP 5-------------------------------------------------------
select count(*) From  #MRbkgDelregis  
---------------------------------------------------------------------------------------------  
End 

  




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
    
--Exec EC_Master_Company_Fill_Values
CREATE proc [dbo].[EC_Master_Company_Fill_Values]    
as    
set nocount on    
--EC_Master_Division--    
select Division_Id,Division_Name    
from EC_Master_Division    
order by Division_Name    
    
--EC_Master_Booking_Type--    
select Booking_Type_Id,Booking_Type    
From EC_Master_Booking_Type    
order by Booking_Type    
    
--EC_Master_Payment_Type--    
select Payment_Type_Id,Payment_Type    
from EC_Master_Payment_Type    
order by Payment_Type    
    
--FA_Master_GC_Accounting_Parameters_Details--    
SELECT  GC_Accounting_Parameters_Details_ID as 'SrNo',    
Advance_Booking_Income_Ledger_ID as 'Advance_Booking_Income_Ledger_ID',     
AdvanceBookingLedger.Ledger_Name as 'Advance_Booking_Income_Ledger_Name',    
Booking_Income_Ledger_ID as 'Booking_Income_Ledger_ID',     
BookingIncomeLedger.Ledger_Name as 'Booking_Income_Ledger_Name',    
Service_Tax_Ledger_ID as 'Service_Tax_Ledger_ID',     
ServiceTaxLedger.Ledger_Name as 'Service_Tax_Ledger_Name',    
FA_Master_GC_Accounting_Parameters_Details.Booking_Type_Id,    
FA_Master_GC_Accounting_Parameters_Details.Payment_Type_Id,    
EC_Master_Booking_Type.Booking_Type,     
EC_Master_Payment_Type.Payment_Type,    
Other_Charge_Ledger_Id as 'OtherChargeLedger_Id',  
OtherChargeLedger.Ledger_Name as 'OtherChargeLedger_Name',   
FA_Master_GC_Accounting_Parameters_Details.Division_ID    
FROM FA_Master_GC_Accounting_Parameters_Details     
INNER JOIN EC_Master_Booking_Type ON        
EC_Master_Booking_Type.Booking_Type_Id=FA_Master_GC_Accounting_Parameters_Details.Booking_Type_ID    
Inner join EC_Master_Payment_Type ON     
EC_Master_Payment_Type.Payment_Type_Id =FA_Master_GC_Accounting_Parameters_Details.Payment_Type_ID     
INNER JOIN FA_Master_Ledger AdvanceBookingLedger ON     
AdvanceBookingLedger.Ledger_Id=FA_Master_GC_Accounting_Parameters_Details.Advance_Booking_Income_Ledger_ID     
inner join FA_Master_Ledger BookingIncomeLedger on    
BookingIncomeLedger.Ledger_Id=FA_Master_GC_Accounting_Parameters_Details.Booking_Income_Ledger_ID     
inner join FA_Master_Ledger ServiceTaxLedger on    
ServiceTaxLedger.Ledger_Id=FA_Master_GC_Accounting_Parameters_Details.Service_Tax_Ledger_ID     
left join FA_Master_Ledger OtherChargeLedger on    
OtherChargeLedger.Ledger_Id=FA_Master_GC_Accounting_Parameters_Details.Other_Charge_Ledger_Id   
    
--FA_Master_LHPO_Accounting_Parameters--    
Select LHPO_Accounting_Parameters_ID as 'SrNo',      
BookingType.Booking_Type,LHPOPar.Booking_Type_ID,      
Truck_Hire_Expense_Ledger_ID As 'Truck_Hire_Expense_Ledger_ID',    
TruckLedger.Ledger_Name As 'Truck_Hire_Expense_Ledger_Name',      
TDS_Ledger_ID As 'TDS_Ledger_ID',TDSLedger.Ledger_Name As 'TDS_Ledger_Name',    
Loading_Charges_Ledger_ID As 'Loading_Charges_Ledger_ID',    
LoadingLedger.Ledger_Name As 'Loading_Charges_Ledger_Name',LHPOPar.Division_ID      
From FA_Master_LHPO_Accounting_Parameters LHPOPar    
Inner Join Ec_Master_Booking_Type BookingType      
On BookingType.Booking_Type_Id=LHPOPar.Booking_Type_Id      
Inner Join FA_Master_Ledger TruckLedger      
On TruckLedger.Ledger_Id=LHPOPar.Truck_Hire_Expense_Ledger_ID      
Inner Join FA_Master_Ledger TDSLedger      
On TDSLedger.Ledger_Id=LHPOPar.TDS_Ledger_ID      
Inner Join FA_Master_Ledger LoadingLedger      
On LoadingLedger.Ledger_Id=LHPOPar.Loading_Charges_Ledger_ID     
    
--FA_Master_ATH_Accounting_Parameters--    
Select ATH_Accounting_Parameters_ID as 'SrNo',      
BookingType.Booking_Type,AccPar.Booking_Type_ID,      
Fuel_Expense_Ledger_ID As 'Ledger_ID',Ledger.Ledger_Name,      
AccPar.Division_ID      
From FA_Master_ATH_Accounting_Parameters AccPar    
Inner Join Ec_Master_Booking_Type BookingType      
On BookingType.Booking_Type_Id=AccPar.Booking_Type_Id      
Inner Join FA_Master_Ledger Ledger      
On Ledger.Ledger_Id=AccPar.Fuel_Expense_Ledger_ID     
    
--FA_Master_Delivery_Accounting_Parameters--    
SELECT Delivery_Accounting_Parameters_ID as 'SrNo',    
Delivery_Income_Ledger_ID as 'Delivery_Income_Ledger_ID',    
DeliveryIncomeLeger.Ledger_Name as 'Delivery_Income_Ledger_Name',        
Service_Tax_Ledger_ID as 'Service_Tax_Ledger_ID',     
ServiceTaxLedger.Ledger_Name as 'Service_Tax_Ledger_Name',    
Octroi_Receivable_Ledger_ID as 'Octroi_Receivable_Ledger_ID' ,     
OctroiReceivableLeger.Ledger_Name as 'Octroi_Receivable_Ledger_Name',    
FA_Master_Delivery_Accounting_Parameters.Booking_Type_Id,       
EC_Master_Booking_Type.Booking_Type,    
FA_Master_Delivery_Accounting_Parameters.Division_ID     
FROM FA_Master_Delivery_Accounting_Parameters    
INNER JOIN EC_Master_Booking_Type ON       
EC_Master_Booking_Type.Booking_Type_Id=FA_Master_Delivery_Accounting_Parameters.Booking_Type_ID     
INNER JOIN FA_Master_Ledger DeliveryIncomeLeger ON     
DeliveryIncomeLeger.Ledger_Id=FA_Master_Delivery_Accounting_Parameters.Delivery_Income_Ledger_ID     
inner join FA_Master_Ledger  OctroiReceivableLeger on    
OctroiReceivableLeger.Ledger_Id=FA_Master_Delivery_Accounting_Parameters.Octroi_Receivable_Ledger_ID     
inner join FA_Master_Ledger ServiceTaxLedger on    
ServiceTaxLedger.Ledger_Id=FA_Master_Delivery_Accounting_Parameters.Service_Tax_Ledger_ID     
    
--FA_Master_Local_Collection_Expense_Accounting_Parameters--    
Select Local_Collection_Accounting_Parameters_ID as 'SrNo',    
BookingType.Booking_Type,LocColl.Booking_Type_ID,      
Local_Collection_Expense_Ledger_ID As 'Ledger_ID',Ledger.Ledger_Name,      
LocColl.Division_ID    
From FA_Master_Local_Collection_Expense_Accounting_Parameters LocColl      
Inner Join Ec_Master_Booking_Type BookingType      
On BookingType.Booking_Type_Id=LocColl.Booking_Type_Id      
Inner Join FA_Master_Ledger Ledger      
On Ledger.Ledger_Id=LocColl.Local_Collection_Expense_Ledger_ID      
    
--FA_Master_Door_Delivery_Expense_Accounting_Parameters--    
Select Door_Delivery_Accounting_Parameters_ID as 'SrNo',    
BookingType.Booking_Type,DoorAcc.Booking_Type_ID,      
Door_Delivery_Expense_Ledger_ID As 'Ledger_ID',Ledger.Ledger_Name,    
DoorAcc.Division_ID      
From FA_Master_Door_Delivery_Expense_Accounting_Parameters DoorAcc      
Inner Join Ec_Master_Booking_Type BookingType      
On BookingType.Booking_Type_Id=DoorAcc.Booking_Type_Id      
Inner Join FA_Master_Ledger Ledger      
On Ledger.Ledger_Id=DoorAcc.Door_Delivery_Expense_Ledger_ID     
     
--FA_Mst_Ledger_TDS_Nature_Of_Payment    
select TDS_Nature_Of_Payment_Id,    
       TDS_Nature_Of_Payment_Name    
From   FA_Mst_Ledger_TDS_Nature_Of_Payment    
order by TDS_Nature_Of_Payment_Id    
    


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  =============================================      
--  Author:  <Harshal A. Sapre>      
--  Create date: <Create Date>      
--  dbo.[EC_RPT_Direct_Printing_Transport_Bill_Annexure_Reach] 143, 140
--  =============================================      

CREATE PROCEDURE [dbo].[EC_RPT_Direct_Printing_Transport_Bill_Annexure_Reach]      

@Menu_Item_ID int,      
@Document_Id int      

AS      
BEGIN
SET NOCOUNT ON;    

Select	distinct c.Bill_ID, c.Bill_No_For_Print, c.Bill_Date, 
		a.GC_ID, d.Client_PO_No, a.GC_No_For_Print, a.GC_Date, VehicleType.Vehicle_Type,
		FromLocation.Service_Location_Name as From_Location, ToLocation.Service_Location_Name as To_Location,
		a.Charged_Weight, a.Freight_Rate,
		b.Total_Amount, c.Bill_Total_Amount

From EC_OPR_VTRANS_GC a
INNER JOIN dbo.FA_Opr_Bill_GC_Details b
ON a.GC_ID = b.GC_ID
INNER JOIN dbo.FA_Opr_Bill c
ON b.Bill_ID = c.Bill_ID

INNER JOIN EC_MASTER_Service_Location FromLocation
ON a.From_Location_ID = FromLocation.Service_Location_ID      
INNER JOIN EC_MASTER_Service_Location ToLocation      
ON a.To_Location_ID = ToLocation.Service_Location_ID      

INNER JOIN EF_MASTER_VEHICLE_TYPE VehicleType
ON a.Vehicle_Type_ID = VehicleType.Vehicle_Type_ID

Left Outer Join dbo.EC_Opr_Contract_Master d
ON a.Contract_ID = d.Contract_ID

Where b.Bill_ID =  @Document_Id

Order by c.Bill_No_For_Print

Select	a.Bill_ID, c.GC_ID, 
		e.GC_Other_Charge_Head, 
		d.Description,
		d.Amount

From dbo.FA_Opr_Bill a     
INNER JOIN dbo.FA_Opr_Bill_GC_Details b      
ON a.Bill_ID = b.Bill_ID
INNER JOIN EC_OPR_VTRANS_GC c   
ON b.GC_ID = c.GC_ID  

INNER JOIN dbo.FA_Opr_Bill_Other_Charges_Details d
ON a.Bill_ID = d.Bill_ID
and c.GC_ID = d.GC_ID  
INNER JOIN dbo.EC_Master_GC_Other_Charge_Head e
ON d.GC_Other_Charge_Head_ID = e.GC_Other_Charge_Head_ID

Where a.Bill_ID =  @Document_Id


Select	b.Bill_ID, a.GC_ID, 
		ISNULL(b.Oct_Form_Charges,0) as Oct_Form_Charges, 
		ISNULL(b.Oct_Service_Charges,0) as Oct_Service_Charges, 
		ISNULL(b.Octroi_Amount,0) as Octroi_Amount

From EC_OPR_VTRANS_GC a
INNER JOIN dbo.FA_Opr_Bill_GC_Details b
ON a.GC_ID = b.GC_ID

Where b.Bill_ID =  @Document_Id


----------Company Address Deatils---------------------------------          
Select Company.Company_Name,  
Company.Address_Line_1 + ', ' + Company.Address_Line_2 + ', ' + City.City_Name + ', ' + State.State_Name
+ ' Pin : - ' + cast(Company.Pin_Code as varchar(20)) as [Address],
Case when Phone_2 = '' then Phone_1 else Phone_1 + ', ' + Phone_2 end as [Phone_No],
Fax as [Fax], email as [Email]
from dbo.EC_Master_Company Company
INNER JOIN EC_Master_City City
ON Company.City_ID = City.City_ID
INNER JOIN EC_Master_State State
ON Company.State_ID = State.State_ID

End











GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






--exec EC_Opr_Set_Article_Reverse_Effects 'AUS_OA',54,1

CREATE proc [dbo].[EC_Opr_Set_Article_Reverse_Effects]
(@Document_Type varchar(10),
@Document_ID Int,
@Is_Cancelled bit = 0)
as

declare @New_Status_id int

declare @Temp_Article
table (Sr_No int identity, New_Article_ID int,
loaded_articles int, Loaded_weight int,Previous_Article_ID int)

--if @Document_Type = 'GC'
--	begin
--		insert into @Temp_Article
--		select a.Article_Id,
--		a.Articles,a.Article_Actual_Weight,0
--		from ec_opr_vtrans_gc_articles a
--		inner join ec_opr_vtrans_gc b
--		on a.GC_ID = b.GC_ID
--		where 1=1
--		and b.GC_ID = @Document_ID
--		and b.Status_ID = 0
--	end
--else 

if @Document_Type = 'AT'
	begin
		insert into @Temp_Article
		select a.Article_Id,
		a.Articles,a.Article_Actual_Weight,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Pickup_Sheet_Details b
		on a.Article_Id = b.Article_Id
		where b.Pickup_Sheet_Id = @Document_ID
	end
else if @Document_Type = 'ALS'
	begin
		insert into @Temp_Article
		select a.Article_Id,
		b.Loaded_Articles,b.Loaded_Actual_Wt,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_ALS_Details b
		on a.Article_Id = b.Article_Id
		where b.ALS_ID = @Document_ID
	end
else if @Document_Type = 'MEMO'
	begin
		insert into @Temp_Article
		select a.Article_Id,
		b.Loaded_Articles,b.Loaded_Actual_Wt,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Memo_Details b
		on a.Article_Id = b.Article_Id
		where b.Memo_ID = @Document_ID
	end
else if @Document_Type = 'LHPO'
	begin
		insert into @Temp_Article
		select a.Article_Id,
		b.Loaded_Articles,b.Loaded_Wt,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_LHPO_GC_Details b
		on a.Article_Id = b.Article_Id
		where b.LHPO_ID = @Document_ID
	end
else if @Document_Type = 'TAS'
	begin
		insert into @Temp_Article
		select a.Article_Id,
		a.Articles,a.Article_Actual_Weight,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_TAS_Details b
		on a.Article_Id = b.Article_Id
		where b.TAS_ID = @Document_ID
	end
else if @Document_Type in ('AUS','AUS_OA')
	begin
		insert into @Temp_Article
		select a.Article_Id,
		b.Received_Articles,b.Received_Weight,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Actual_Unloading_Sheet_Details b
		on a.Article_Id = b.Article_Id
		where b.Actual_Unloading_Sheet_ID = @Document_ID
	end
else if @Document_Type = 'PDS'
	begin
		insert into @Temp_Article
		select a.Article_Id,
		b.Delivery_Articles,b.Delivery_Actual_Wt,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Pre_Delivery_Sheet_Details b
		on a.Article_Id = b.Article_Id
		where b.PDS_ID = @Document_ID
		and b.DDC_ID = 0
	end
else if @Document_Type = 'GDC' or @Document_Type = 'DDC' or @Document_Type = 'DD'
	begin
		insert into @Temp_Article
		select a.Article_Id,
		b.Delivered_Articles,b.Delivered_Actual_Wt,b.Previous_Article_ID
		from ec_opr_vtrans_gc_articles a
		inner join EC_Opr_VTrans_Door_Delivery_Confirmation_Details b
		on a.Article_Id = b.Article_Id
		where b.DDC_ID = @Document_ID
		and Delivery_Status_ID in (200,250)
	end

declare @Sr_No int
declare @Total_Count int
declare @New_Article_ID int
declare @Loaded_Articles int
declare @Loaded_weight int
declare @Previous_Article_ID int

declare @Previous_AUS_ID int
declare @Previous_AUS_Date datetime
declare @Previous_AUS_No varchar(20)

set @Sr_No = 1
set @Total_Count = 0
set @New_Article_ID = 0
set @Loaded_Articles = 0
set @Loaded_weight = 0
set @Previous_Article_ID = 0

select @Total_Count = count(*) from @Temp_Article

while @Sr_No <= @Total_Count
	begin


		select @New_Article_ID = New_Article_ID,@Loaded_Articles = Loaded_Articles,
		@Loaded_weight = Loaded_weight,@Previous_Article_ID = Previous_Article_ID
		from @Temp_Article where Sr_No = @Sr_No

		if @Document_Type in ('AUS','AUS_OA') and @Is_Cancelled = 1
			begin
				set @Previous_AUS_ID = 0

				select @Previous_AUS_ID = max(AUS.actual_unloading_sheet_id) from
				EC_Opr_VTrans_Actual_Unloading_Sheet AUS
				inner join EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUSD
				on AUS.Actual_Unloading_Sheet_ID = AUSD.Actual_Unloading_Sheet_ID
				where AUSD.article_id = @New_Article_ID
				and AUS.Is_Cancelled = 0
				and AUS.actual_unloading_sheet_id <> @Document_ID

				select @Previous_AUS_Date = Actual_Unloading_Sheet_Date,
				@Previous_AUS_No = Actual_Unloading_Sheet_No_For_Print from 
				EC_Opr_VTrans_Actual_Unloading_Sheet where actual_unloading_sheet_id = @Previous_AUS_ID
			end
	
		update ec_opr_vtrans_gc_articles set
		articles = articles + @Loaded_Articles,
		article_actual_weight = article_actual_weight + @Loaded_weight
		where article_id = @Previous_Article_ID

		if @Document_Type in ('AUS','AUS_OA') and @Previous_AUS_ID > 0 and @Is_Cancelled = 1
			begin
				update ec_opr_vtrans_gc_articles set
				articles = articles - @Loaded_Articles,
				article_actual_weight = article_actual_weight - @Loaded_weight,
				Document_ID = @Previous_AUS_ID,
				Document_No_For_Print = @Previous_AUS_No,
				Document_Date = @Previous_AUS_Date,
				Is_Cancelled = case when @Document_Type in ('AUS','AUS_OA') and @Previous_AUS_ID = 0 then @Is_Cancelled else Is_Cancelled end
				where article_id = @New_Article_ID
			end
		else
			begin
				update ec_opr_vtrans_gc_articles set
				articles = articles - @Loaded_Articles,
				article_actual_weight = article_actual_weight - @Loaded_weight,
				Is_Cancelled = @Is_Cancelled
				where article_id = @New_Article_ID
			end

	set @Sr_No = @Sr_No + 1
	end




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




    
    
    
    
    
    
          
          
          
-- =============================================                
-- Author:  <Kanuga Vajiha>                
-- Create date: <24/05/09>                
-- Description: <Short Term Bill Outstanding Report For Nandawana>            
-- EXEC [dbo].[EC_RPT_ShortTermBillOutstanding_Report] 0,'react','2009/05/30',0,0             
-- =============================================                
CREATE PROCEDURE [dbo].[EC_RPT_ShortTermBillOutstanding_Report]                
  @Branch_ID as int = 0,   
  @ClientName as varchar(100),             
  @AsOnDate as datetime,       
 @PageIndex int,       
 @PageSize int               
              
AS                
BEGIN               
      
    
           
 SET NOCOUNT ON;            
-------------------------------STEP 1--------------------------------------------------------------      
WITH ShortTermBillOutstandingRegister AS      
(      
select distinct    
 ROW_NUMBER() OVER(ORDER BY CreditMemo.Credit_Memo_date) AS 'Sr No.',    
Branch.Branch_Name ,    
      CreditMemo.Credit_Memo_No_For_print,    
      dbo.DateOnlyDisplay(CreditMemo.Credit_Memo_date) as Credit_Memo_date,    
      Gc.GC_No_For_Print as [gc_caption No],    
      GC.Consignee_Name,    
      GC.Consignor_Name,          
      FA_Master_Ledger.Ledger_Name,    
      Isnull(Sum(Amount),0) as 'Pending Amount',    
    
(Select Top 1 Case when DateDiff(d,Bill_Date + Credit_Days,@AsOnDate)>0 then DateDiff(d,Bill_Date + Credit_Days,@AsOnDate) else 0 end     
From FA_Bill_Wise_Details where Ledger_Id=FA_Bill_Wise_Details.Ledger_Id and Ref_No=FA_Bill_Wise_Details.Ref_No    
order By Details_ID desc    
)    
as OverDueDays,    
      Ref_No as 'Ref No'    
    
    
from  FA_Opr_Credit_Memo  CreditMemo    
inner join EC_Master_Branch Branch    
on CreditMemo.Credit_Memo_Branch_Id=Branch.Branch_id    
inner join Ec_Opr_Vtrans_GC GC    
on CreditMemo.Gc_id=GC.GC_Id    
inner join FA_Master_ledger    
on FA_Master_Ledger.Ledger_Id=CreditMemo.Debit_To_ledger_Id    
inner join FA_Bill_Wise_Details      
on CreditMemo.Credit_Memo_No_For_print=FA_Bill_Wise_Details.Ref_No    
     where 
--     FA_Bill_Wise_Details.Amount <> 0 
      FA_Master_Ledger.Ledger_Name='Short term bill'    
     and CreditMemo.Credit_Memo_Branch_id=(Select case @Branch_ID when 0 then CreditMemo.Credit_Memo_Branch_id else @Branch_ID end)        
     and (GC.Consignee_Name like (select case @ClientName when ' ' then GC.Consignee_Name else '' + @ClientName + '%' END)                
     or GC.Consignor_Name like (select case @ClientName when ' ' then GC.Consignor_Name else  '' + @ClientName + '%' END)                )
Group by Branch.Branch_Name,    
      CreditMemo.Credit_Memo_No_For_print,    
      CreditMemo.Credit_Memo_date,    
      Gc.GC_No_For_Print,    
      GC.Consignee_Name,    
      GC.Consignor_Name,    
      Ref_No,    
      FA_Master_Ledger.Ledger_Name 

having Isnull(Sum(Amount),0) <> 0   
)    
-------------------------------STEP 2--------------------------------------------------------------      
SELECT * into #ShortTermBillRegis FROM ShortTermBillOutstandingRegister      
-------------------------------STEP 3--------------------------------------------------------------      
      
select * From #ShortTermBillRegis    
 WHERE       
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)      
or      
(@PageSize = 0)      
--------------------------------STEP 4-------------------------------------------------------------      
select      
sum([Pending Amount]) AS [Pending Amount]    
from  #ShortTermBillRegis     
      
--------------------------------STEP 5-------------------------------------------------------    
select count(*) From  #ShortTermBillRegis      
---------------------------------------------------------------------------------------------      
End     
    





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
-- =============================================    
-- Author:  <Kanuga Vajiha>    
-- Create date: 30/03/09  
-- Description: <Proc To Fill Ledger Search>    
-- =============================================  
CREATE PROCEDURE [dbo].[EC_Opr_LHPO_GetTerminatedLHCLedger]  
(    
@SearchFor as varchar(50)    
)     
AS    
SET NOCOUNT ON;    
BEGIN    
--select Ledger_Name,Ledger_Id   
--From FA_Master_Ledger  
--where Ledger_Group_Id in(24,27)  
--union
--select Ledger_Name,Ledger_Id   
--From FA_Master_Ledger  
--where 
--ledger_id in
--(select agency_ledger_id from ec_master_branch
--where branch_type_id = 2 and is_active = 1) and 
--Ledger_Name like @SearchFor  

select Ledger_Name,Ledger_Id   
From FA_Master_Ledger 
where Ledger_Name like @SearchFor 
order by Ledger_Name



    
END    




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO










-- =============================================  
-- Author:  <Ashish Lad>  
-- Create date: Nov  5 2008  6:42PM  
-- Description: <Insert The Record For LHPO .  
-- Insert Record In Following Tables..  
-- 1.EC_Opr_VTrans_LHPO  
-- 2.EC_Opr_VTrans_LHPO_Memo_Details  
-- 3.EC_Opr_VTrans_LHPO_ATH_Payable_Details  
-- 4.EC_Opr_VTrans_LHPO_Incentives_Penalties  
-- 5.EC_Opr_VTrans_LHPO_Attached_Loading_Branches
-- >  
-- =============================================  
CREATE Proc [dbo].[EC_Opr_LHPO_Save]   
(  
@Division_ID int,  
@Year_Code int,  
@LHPO_Type_ID int,  
@LHPO_Branch_ID int,  
@Menu_Item_ID int,  
@LHPO_ID int,  
@Hierarchy_Code varchar(4),  
@LHPO_Date datetime,  
@Main_LHPO_ID int,  
@LHPO_No int,  
@LHPO_No_For_Print varchar(20),  
@Manual_Ref_No varchar(20),  
@Vehicle_Category_ID int,  
@Vehicle_ID int,  
@From_Location_ID int,  
@To_Location_ID int,  
@Broker_ID int,  
@Is_TDS_Certificate_Broker bit,  
@Total_No_Of_Memo int,  
@Total_Articles int,  
@Total_Actual_Weight numeric(18,2),  
@Total_No_Of_GCs int,  
@Driver1_Id int,  
@Driver2_Id int,  
@Cleaner_ID int,  
@LHPO_Freight_Basis_ID int,  
@Min_Wt_Guarantee numeric(18,2),  
@Rate numeric(18,2),  
@Actual_Kms numeric(18,2),  
@Wt_Kms_Articles_Payable numeric(18,2),  
@Truck_Hire_Charge numeric(18,2),
@OtherCharges numeric(18,2),
@Loading_Charges numeric(18,2),  
@TDS_Percent numeric(18,2),  
@TDS_Amount numeric(18,2),  
@Total_Truck_Hire_Payable numeric(18,2),  
@Total_Advance_To_Be_Paid numeric(18,2),  
@Balance_Payble_Amount numeric(18,2),  
@Balance_Payable_Hierarchy_Code varchar(2),  
@Balance_Payable_Main_ID int,  
@Crossing_Cost_Payable numeric(18,2),  
@Delivery_Commission_Payable numeric(18,2),  
@Other_Payable numeric(18,2),  
@Net_Amount numeric(18,2),  
@Vehicle_Departure_Time varchar(5),  
@Transit_Days int,  
@Commited_Delivery_Date datetime,  
@Loading_Supervisor_ID int,  
@Remark varchar(250),  
@BTH_ID int, 
@To_Pay_Collection numeric(18,2),
@Document_Series_Allocation_ID int = 0, 
@MemoGridXML xml,  
@AlertBranchesXML xml,
@AttachedLHPOBranchesXML xml,  
@ATHDetailsXML xml,  
@PenaltyDetailsXML xml,  
@IncentiveDetailsXML xml, 
@OtherChargesDetailsXML xml, 
@Created_By int,
@IsTerminatedLHCReceivedCash bit,
@TerminatedLHCReceivedCash money,
@IsTerminatedLHCDebitTo bit,
@TermiantedLHCDebitedLedger int,
@CharityLedgerId int,
@CharityAmount numeric(18,2),
@TotalAfterTDSDeduction numeric(18,2),
@Print_Doc_ID int = 0 output,  
@Error_Code int output,  
@ERROR_DESC AS VARCHAR(4000) OUTPUT)  
As  

set @Error_Code = 0;  
set @ERROR_DESC = '';
set @Print_Doc_ID = 0;    
if @LHPO_ID <= 0   
 begin  
  declare @Can_Add bit  

  exec dbo.Ec_Opr_Can_Add @MemoGridXML,'newdataset','memogrid',@Can_Add output  
  if @Can_Add = 0 return;  
 end  

if @LHPO_ID > 0 and dbo.Ec_Opr_Can_Edit_Cancel ('LHPO',@LHPO_ID) = 0  
 begin  
  set @Error_Code = 1012;  
  set @ERROR_DESC = '';
  return;
 end  

 declare @Is_LHPO_Series_Required bit
 select @Is_LHPO_Series_Required = Is_LHPO_Series_Required
 from EC_Master_Company_Parameters

if @Is_LHPO_Series_Required = 1 and @LHPO_ID<=0 and @LHPO_Type_ID=1
	begin
		declare @is_duplicate bit
		set @is_duplicate = 0
		select @is_duplicate = 1 from EC_Opr_VTrans_LHPO where year_code = @year_code and
		lhpo_no = @LHPO_No and LHPO_Type_ID=1

		if @is_duplicate = 1
			begin
			set @Error_Code = 2627;
			set @ERROR_DESC = 'Duplcate Record Found!';
			return;
			end
	end


BEGIN TRY  
BEGIN TRAN  
BEGIN  
SET NOCOUNT ON;  
  
If @OtherCharges <= 0   
set @OtherCharges=0  

if @Min_Wt_Guarantee<=0
set @Min_Wt_Guarantee=0

if @Rate <=0
set @Rate=0

 if @IsTerminatedLHCReceivedCash=0 
   set @TerminatedLHCReceivedCash=0



   if @IsTerminatedLHCDebitTo=0
   set @TermiantedLHCDebitedLedger=0

if @TDS_Percent=0
set @TDS_Amount=0

if @CharityLedgerId <= 0
set @CharityLedgerId=0

Declare @Document_ID as int  
Declare @Document_ID1 as int,@Document_ID2 as int,@Document_ID0 as int  
Declare @Document_ID4 as int,@Document_ID5 as int ,@OtherChargeDoc as int  

 IF @Vehicle_Category_ID=1 or @Vehicle_Category_ID=2 or @Vehicle_Category_ID=3  
 Begin  
  
  Select  @Broker_ID=Vendor_ID  From  EF_Master_Vehicle  
  Where Vehicle_ID=@Vehicle_ID  

 End  
  
if @Other_Payable < 0 set @Other_Payable =0  

if @LHPO_ID <= 0 -- add  
 Begin  

 if @LHPO_Type_ID=1  -- nee trip
  Begin  
   if @Is_LHPO_Series_Required = 0
		begin
		 exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@LHPO_Branch_ID,  
		 @Division_ID,@Menu_Item_ID,0,@LHPO_No output,@LHPO_No_For_Print OUTPUT  
		end
   else
		BEGIN
		 update EC_Opr_Document_Allocation set
		 next_no = @LHPO_No + 1,
		 Balance = Balance - 1
		 where Document_Series_Allocation_ID = @Document_Series_Allocation_ID

		declare @GC_No_Length int
		select @GC_No_Length = GC_No_Length from EC_Master_Company_GC_Parameter

		set @LHPO_No_For_Print = dbo.get_no_to_print(@LHPO_No,@GC_No_Length)

		END
  End
 Else
  Begin 
		 exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@LHPO_Branch_ID,  
		 @Division_ID,@Menu_Item_ID,0,@LHPO_No output,@LHPO_No_For_Print OUTPUT  
  End
   
  
  
 
 Insert Into EC_Opr_VTrans_LHPO  
 (Division_ID,Year_Code,LHPO_Type_ID,LHPO_Branch_ID,LHPO_Date,Main_LHPO_ID,  
 LHPO_No,LHPO_No_For_Print,Manual_Ref_No,Vehicle_Category_ID,Vehicle_ID,From_Location_ID,  
 To_Location_ID,Broker_ID,Is_TDS_Certificate_Broker,Total_No_Of_Memo,  
 Total_Articles,Total_Actual_Weight,Total_No_Of_GCs,Driver1_Id,  
 Driver2_Id,Cleaner_ID,LHPO_Freight_Basis_ID,Min_Wt_Guarantee,  
 Rate,Actual_Kms,Wt_Kms_Articles_Payable,Truck_Hire_Charge,Other_Charges,
 Loading_Charges,TDS_Percent,TDS_Amount,Total_Truck_Hire_Payable,  
 Total_Advance_To_Be_Paid,Balance_Payble_Amount,Balance_Payable_Hierarchy_Code,  
 Balance_Payable_Main_ID,Crossing_Cost_Payable,Delivery_Commission_Payable,  
 Other_Payable,Net_Amount,Vehicle_Departure_Time,Transit_Days,  
 Commited_Delivery_Date,Loading_Supervisor_ID,Remarks,Is_Cancelled,  
 BTH_ID,Created_By,Created_On,Updated_By,Updated_On,
 Is_Trip_Completed,Document_Series_Allocation_ID,To_Pay_Collection,Is_LHC_Terminated_By_Recieving_Cash,
 Recieved_Cash_Amount_For_Terminated_LHC,Is_LHC_Terminated_By_Debit_To_Ledger_ID,
 Debited_To_Leder_ID_For_Terminated_LHC,Total_After_TDS_Ded,Charity_Ledger_ID,Charity_Amt)  
 Values  
 (@Division_ID,@Year_Code,@LHPO_Type_ID,@LHPO_Branch_ID,@LHPO_Date,@Main_LHPO_ID,  
 @LHPO_No,@LHPO_No_For_Print,@Manual_Ref_No,@Vehicle_Category_ID,@Vehicle_ID,@From_Location_ID,  
 @To_Location_ID,@Broker_ID,@Is_TDS_Certificate_Broker,@Total_No_Of_Memo,  
 @Total_Articles,@Total_Actual_Weight,@Total_No_Of_GCs,@Driver1_Id,  
 @Driver2_Id,@Cleaner_ID,@LHPO_Freight_Basis_ID, @Min_Wt_Guarantee,  
 @Rate,@Actual_Kms,@Wt_Kms_Articles_Payable, @Truck_Hire_Charge,@OtherCharges,  
 @Loading_Charges,@TDS_Percent,@TDS_Amount,@Total_Truck_Hire_Payable,  
 @Total_Advance_To_Be_Paid,@Balance_Payble_Amount, @Balance_Payable_Hierarchy_Code,  
 @Balance_Payable_Main_ID,@Crossing_Cost_Payable, @Delivery_Commission_Payable,  
 @Other_Payable,@Net_Amount,@Vehicle_Departure_Time,@Transit_Days,  
 @Commited_Delivery_Date,@Loading_Supervisor_ID,@Remark,0,  
 @BTH_ID,@Created_By,getdate(),@Created_By,getdate(),
 0,@Document_Series_Allocation_ID,@To_Pay_Collection,@IsTerminatedLHCReceivedCash,
 @TerminatedLHCReceivedCash,@IsTerminatedLHCDebitTo,@TermiantedLHCDebitedLedger,
 @TotalAfterTDSDeduction,@CharityLedgerId,@CharityAmount
)  

 set @LHPO_ID=@@Identity 
 set @Print_Doc_ID = @@identity      
 
--print '1'
 exec Ec_opr_Vtrans_Increase_Counter 'LHPO' ,0,@LHPO_Branch_ID, @LHPO_ID

 if @LHPO_Type_ID=1  -- nee trip
  Begin  
   Update EC_Opr_VTrans_LHPO  
   Set Main_LHPO_ID=@LHPO_ID  
   Where LHPO_ID=@LHPO_ID  
  End  

 if @LHPO_Type_ID=2 --attached trip
  begin
   update EC_Opr_VTrans_LHPO_Attached_Loading_Branches
   set Attached_LHPO_ID = @LHPO_ID
   where LHPO_ID = @Main_Lhpo_ID
   and Branch_ID = @LHPO_Branch_ID

   declare @Is_Trip_Completed bit
   set @Is_Trip_Completed = 1
   select @Is_Trip_Completed = 0 from EC_Opr_VTrans_LHPO_Attached_Loading_Branches
   where LHPO_ID = @Main_Lhpo_ID and Attached_LHPO_ID = 0

   update EC_Opr_VTrans_LHPO set Is_Trip_Completed = @Is_Trip_Completed
   where Main_LHPO_ID = @Main_Lhpo_ID

   Select @LHPO_No_For_Print=LHPO_No_For_Print From EC_Opr_VTrans_LHPO
   Where LHPO_ID= @Main_LHPO_ID
  
   Update EC_Opr_VTrans_LHPO
		Set LHPO_No_For_Print=@LHPO_No_For_Print
   Where LHPO_ID=@LHPO_ID

  end
 End
Else -- Edit  
 Begin  
  exec EC_Opr_Set_Article_Reverse_Effects 'LHPO',@LHPO_ID  

  Update EC_Opr_VTrans_LHPO Set  
  LHPO_Date = @LHPO_Date,  
  Manual_Ref_No = @Manual_Ref_No, Vehicle_Category_ID = @Vehicle_Category_ID,  
  Vehicle_ID = @Vehicle_ID,From_Location_ID = @From_Location_ID,  
  To_Location_ID = @To_Location_ID,Broker_ID = @Broker_ID,  
  Is_TDS_Certificate_Broker = @Is_TDS_Certificate_Broker,Total_No_Of_Memo = @Total_No_Of_Memo,  
  Total_Articles = @Total_Articles,Total_Actual_Weight = @Total_Actual_Weight,  
  Total_No_Of_GCs = @Total_No_Of_GCs,Driver1_Id = @Driver1_Id,  
  Driver2_Id = @Driver2_Id,Cleaner_ID = @Cleaner_ID,  
  LHPO_Freight_Basis_ID = @LHPO_Freight_Basis_ID, Min_Wt_Guarantee = @Min_Wt_Guarantee,  
  Rate = @Rate,Actual_Kms = @Actual_Kms,Wt_Kms_Articles_Payable = @Wt_Kms_Articles_Payable,  
  Truck_Hire_Charge = @Truck_Hire_Charge,Other_Charges=@OtherCharges,Loading_Charges = @Loading_Charges,  
  TDS_Percent = @TDS_Percent,TDS_Amount = @TDS_Amount,Total_Truck_Hire_Payable = @Total_Truck_Hire_Payable,  
  Total_Advance_To_Be_Paid = @Total_Advance_To_Be_Paid,Balance_Payble_Amount = @Balance_Payble_Amount,  
  Balance_Payable_Hierarchy_Code = @Balance_Payable_Hierarchy_Code,Balance_Payable_Main_ID = @Balance_Payable_Main_ID,  
  Crossing_Cost_Payable = @Crossing_Cost_Payable,Delivery_Commission_Payable = @Delivery_Commission_Payable,  
  Other_Payable = @Other_Payable,Net_Amount = @Net_Amount,Vehicle_Departure_Time = @Vehicle_Departure_Time,  
  Transit_Days = @Transit_Days,Commited_Delivery_Date = @Commited_Delivery_Date,  
  Loading_Supervisor_ID = @Loading_Supervisor_ID,  
  Updated_By = @Created_By,  
  Updated_On = getdate(),  
  Remarks=@Remark ,
  To_Pay_Collection=@To_Pay_Collection,
  Is_LHC_Terminated_By_Recieving_Cash=@IsTerminatedLHCReceivedCash,
  Recieved_Cash_Amount_For_Terminated_LHC=@TerminatedLHCReceivedCash,
  Is_LHC_Terminated_By_Debit_To_Ledger_ID=@IsTerminatedLHCDebitTo,
  Debited_To_Leder_ID_For_Terminated_LHC=@TermiantedLHCDebitedLedger,
  Total_After_TDS_Ded=@TotalAfterTDSDeduction,
  Charity_Ledger_ID=@CharityLedgerId,
  Charity_Amt=@CharityAmount
  Where LHPO_ID = @LHPO_ID  
  set @Print_Doc_ID = @LHPO_ID

  update ec_opr_vtrans_memo set LHPO_ID = 0  
  where memo_id in (select memo_id from EC_Opr_VTrans_LHPO_Memo_Details where lhpo_id = @lhpo_ID)  
 End  

------------------------------------------------------------------------------

Delete from EC_Opr_VTrans_LHPO_Memo_Details  
Where Lhpo_Id=@LHPO_ID  

EXEC sp_xml_preparedocument @Document_ID0 OUTPUT, @MemoGridXML  

Insert Into EC_Opr_VTrans_LHPO_Memo_Details  
(Year_Code,LHPO_ID,Memo_ID)  
Select @Year_Code,@LHPO_ID,memo_id  
from openxml (@Document_ID0, '/newdataset/memogrid',2)  
with(memo_id int)  

EXEC sp_xml_removedocument @Document_ID0  
--print '2'
------------------------------------------------------------------------------

update ec_opr_vtrans_memo set LHPO_ID = @LHPO_ID  
where memo_id in (select memo_id from EC_Opr_VTrans_LHPO_Memo_Details where lhpo_id = @lhpo_ID)  


------------------------------------------------------------------------------

-- added by pankaj 1 dec  
declare @Preserved_Article_ID table  
(Memo_ID int,GC_ID int,Article_ID int)  
insert into @Preserved_Article_ID  
select Memo_ID,GC_ID,Article_ID from EC_Opr_VTrans_LHPO_GC_Details  
Where LHPO_ID=@LHPO_ID  
-- added by pankaj 1 dec  

Delete From EC_Opr_VTrans_LHPO_GC_Details  
Where LHPO_ID=@LHPO_ID  

declare @TempMemoTable table
(SrNo int identity,  
LHPO_Memo_Details_ID int,  
Memo_ID int)  

Insert Into @TempMemoTable  
(LHPO_Memo_Details_ID,Memo_ID)  
Select LHPO_Memo_Details_ID,Memo_ID  
from EC_Opr_VTrans_LHPO_Memo_Details  
where lhpo_id = @LHPO_ID  

declare @Sr_No as int
declare @Count as int  
declare @Temp_LHPO_Memo_Details_ID as int
declare @Temp_Memo_ID as int  

Select @Count=Count(*) From @TempMemoTable
Set @Sr_No = 1

While @Sr_No <= @count
 Begin
  Select @Temp_LHPO_Memo_Details_ID=LHPO_Memo_Details_ID,  
  @Temp_Memo_ID=Memo_ID from @TempMemoTable  
  where SrNo=@Sr_No   

  Insert Into EC_Opr_VTrans_LHPO_GC_Details  
  (Year_Code,LHPO_ID,LHPO_Memo_Details_ID,Memo_ID,  
  GC_ID,Article_ID,Loaded_Articles,Loaded_Wt,  
  Previous_Article_ID,Previous_Status_ID,  
  Previous_Document_ID,Previous_Document_No_For_Print,  
  Previous_Document_Date,Actual_Unloading_Sheet_ID,DDC_ID)  
  Select  @Year_Code,@LHPO_ID,@Temp_LHPO_Memo_Details_ID,memodetails.memo_id,  
  memodetails.gc_id,memodetails.article_id,memodetails.loaded_articles,  
  memodetails.loaded_actual_wt,  
  articles.article_id,articles.status_id,  
  articles.document_id,articles.document_no_for_print,  
  articles.document_date,0,0  
  from EC_Opr_VTrans_Memo_Details memodetails  
  inner join ec_opr_vtrans_gc_articles articles  
  on memodetails.article_id = articles.article_id  
  where memodetails.memo_id = @Temp_Memo_ID  

  Set @Sr_No=@Sr_No+1
 End  --While @Sr_No <= @count

-- added by pankaj 1 dec 
update LHPO_GC_Details set
LHPO_GC_Details.Article_ID = pai.Article_ID
from EC_Opr_VTrans_LHPO_GC_Details LHPO_GC_Details
inner join @Preserved_Article_ID pai
on pai.memo_id = LHPO_GC_Details.memo_id and pai.gc_id = LHPO_GC_Details.gc_id
-- added by pankaj 1 dec

-----------------updating total memos and total gcs in lhpo------------------------------------------------------------  
declare @Total_Memos int
declare @Total_GCs int


set @Total_Memos = 0
set @Total_GCs = 0
set @Total_articles = 0
set @Total_Actual_Weight = 0

select @Total_Memos = count(*) from EC_Opr_VTrans_LHPO_Memo_Details
where LHPO_ID = @LHPO_ID

select @Total_GCs = count(distinct(gc_id)) from EC_Opr_VTrans_LHPO_GC_Details
where LHPO_ID = @LHPO_ID

--select @Total_articles = sum(Total_Articles),@Total_Actual_Weight = sum(Total_Actual_Weight)
--from ec_opr_vtrans_gc
--where gc_id in (select distinct gc_id from EC_Opr_VTrans_LHPO_GC_Details
--where LHPO_ID = @LHPO_ID)

select @Total_articles = sum(Total_Loaded_Articles),@Total_Actual_Weight = sum(Total_Loaded_Weight)
from EC_Opr_VTrans_Memo memo inner join EC_Opr_VTrans_LHPO_Memo_Details memo_det
on memo.memo_id = memo_det.memo_id
where memo_det.LHPO_ID = @LHPO_ID

update EC_Opr_VTrans_LHPO set
Total_No_Of_Memo = @Total_Memos,
Total_No_Of_GCs = @Total_GCs,
Total_Articles = @Total_Articles,
Total_Actual_Weight = @Total_Actual_Weight
where LHPO_ID = @LHPO_ID

-----------------------------------------------------------------------------  

Delete from EC_Opr_VTrans_LHPO_Alerts_Details  
Where Lhpo_Id=@LHPO_ID  

EXEC sp_xml_preparedocument @Document_ID4 OUTPUT, @AlertBranchesXML  

Insert Into EC_Opr_VTrans_LHPO_Alerts_Details  
(Year_Code,LHPO_ID,Branch_ID,Remark)  
Select  
@Year_Code,@LHPO_ID,BranchID,Description  
from openxml (@Document_ID4, '/NewDataSet/AlertBranchGrid',2)  
with(BranchID int,Description varchar(250))  

EXEC sp_xml_removedocument @Document_ID4  

-----------------------------------------------------------------------------  

Delete from EC_Opr_VTrans_LHPO_Attached_Loading_Branches  
Where Lhpo_Id=@LHPO_ID  

EXEC sp_xml_preparedocument @Document_ID5 OUTPUT, @AttachedLHPOBranchesXML  

Insert Into EC_Opr_VTrans_LHPO_Attached_Loading_Branches
(Year_Code,LHPO_ID,Branch_ID,Attached_LHPO_ID)
Select @Year_Code,@LHPO_ID,branchid,0
from openxml (@Document_ID5, '/newdataset/attachedbranchgrid',2)
with(branchid int)

EXEC sp_xml_removedocument @Document_ID5  

-----------------------------------------------------------------------------  

Delete from EC_Opr_VTrans_LHPO_ATH_Payable_Details  
Where LHPO_ID=@LHPO_ID  

EXEC sp_xml_preparedocument @Document_ID OUTPUT, @ATHDetailsXML  

Insert Into EC_Opr_VTrans_LHPO_ATH_Payable_Details  
(Year_Code,LHPO_ID,ATH_Payable_Hierarchy_Code,  
ATH_Payable_Main_ID,Advance_Amount,Schedule_Arr_Date,Schedule_Arr_Time,  
Ref_No,ATH_ID)  
Select   
@Year_Code,@LHPO_ID,ath_payable_hierarchy_code,  
ath_payable_main_id,advance_amount,cast(schedule_arr_date as datetime),schedule_arr_time,  
ref_no,0
from openxml (@Document_ID, '/newdataset/athgrid',2)  
with(ath_payable_hierarchy_code varchar(2),ath_payable_main_id int,  
advance_amount numeric(18,2),schedule_arr_date varchar(10), schedule_arr_time varchar(5),ref_no varchar(25))  
EXEC sp_xml_removedocument @Document_ID  

------------------------------------------------------------------------------
Delete from EC_Opr_VTrans_LHPO_Incentives_Penalties   
Where Lhpo_id=@LHPO_ID  

EXEC sp_xml_preparedocument @Document_ID1 OUTPUT, @PenaltyDetailsXML  

Insert Into EC_Opr_VTrans_LHPO_Incentives_Penalties  
(Year_Code,LHPO_ID,Is_Incentive,No_Of_Days,Amount,Remark)  
Select  
@Year_Code,@LHPO_ID,0,No_Of_Days,Amount,Remark  
from openxml (@Document_ID1, '/NewDataSet/Table1',2)  
with(No_Of_Days int,Amount numeric(18,2),Remark varchar(100))  

EXEC sp_xml_removedocument @Document_ID1  

------------------------------------------------------------------------------

EXEC sp_xml_preparedocument @Document_ID2 OUTPUT, @IncentiveDetailsXML  

Insert Into EC_Opr_VTrans_LHPO_Incentives_Penalties  
(Year_Code,LHPO_ID,Is_Incentive,No_Of_Days,Amount,Remark)  
Select  
@Year_Code,@LHPO_ID,1,No_Of_Days,Amount,Remark  
from openxml (@Document_ID2, '/NewDataSet/Table',2)  
with(No_Of_Days int,Amount numeric(18,2),Remark varchar(100))  

EXEC sp_xml_removedocument @Document_ID2  
------------------------------------------------------------------------------
Delete From EC_Opr_VTrans_Other_Charge_Details  
where  Document_ID=@LHPO_ID 
  
EXEC sp_xml_preparedocument @OtherChargeDoc OUTPUT, @OtherChargesDetailsXML  

Insert Into EC_Opr_VTrans_Other_Charge_Details  
(Document_ID,Other_Charge_Head_ID,Description,Amount,MenuItem_ID)  
Select  
@LHPO_ID,Other_Charge_Head_ID,Description,Amount,MenuItem_ID  
from openxml (@OtherChargeDoc, '/NewDataSet/Table',2)  
with(Document_ID int,Other_Charge_Head_ID int,Description varchar(100),Amount varchar(100),MenuItem_ID  int)  

EXEC sp_xml_removedocument @OtherChargeDoc  

------------------------------------------------------------------------------
exec EC_Opr_Set_Article_Effects @LHPO_Branch_ID,'LHPO',@LHPO_ID,0  


----------------LHPOAccountEffects-------------------------------
if( @LHPO_Type_ID=1 and (@Vehicle_Category_ID <> 1 OR (select Is_Book_Own_Truck_Hire From dbo.EC_Master_Company_Parameters) = 1))
BEGIN
if((select Isnull(Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking,0) From dbo.EC_Master_Company_Parameters) = 1)

	EXEC	[dbo].[EC_FA_Opr_LHPOAccountEffects]
			@Year_Code = @Year_Code,
			@Hierarchy_Code = @Hierarchy_Code,
			@Main_Id = @LHPO_Branch_ID,
			@Division_Id = @Division_Id,
			@LHPO_Id = @LHPO_Id,
			@User_Id = @Created_By

Else  
	EXEC	[dbo].[EC_FA_Opr_LHPOCrossingAccountEffects]
			@LHPO_Id = @LHPO_Id,
			@AUS_Id = 0,
			@IsFromLHPO = 1

END
------------------END LHPOAccountEffects-------------------------------

END  
COMMIT TRAN  
END TRY  
BEGIN CATCH  
ROLLBACK TRAN  
SELECT @ERROR_CODE=ERROR_NUMBER()  
SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
CAST(ERROR_MESSAGE() as VARCHAR(4000))  

print ERROR_LINE()
print @ERROR_DESC
END CATCH  












  
  
  
  



































GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

          
              
--===========================================================================                  
-- <Created By> : Harshal Sapre              
-- <Created Date> : '2009-01-21'              
-- <Description> : Door Delivery Expences              
-- exec [dbo].[EC_RPT_Door_Delivery_Expenses] 0,0,0,0,0,0,'2008-01-01','2009-01-31',0              
--===========================================================================              
              
CREATE PROCEDURE [dbo].[EC_RPT_Door_Delivery_Expenses]               
              
@Delivery_Region_ID as int = 0,                        
@Delivery_Area_ID as int = 0 ,                            
@Delivery_Branch_ID as int = 0,                  
                    
@Booking_Region_ID as int = 0,                        
@Booking_Area_ID as int = 0,                            
@Booking_Branch_ID as int = 0,                            
              
@From_Date as datetime,                            
@To_Date as datetime,                
@Division_Id int,    
@PageIndex int,       
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1                     
              
                         
AS                        
BEGIN                        
if @Delivery_Branch_ID  > 0                         
  BEGIN                        
  Set @Delivery_Region_ID = -1                        
  set @Delivery_Area_ID = -1                        
  END                         
else if  @Delivery_Area_ID > 0                         
  BEGIN                         
  Set @Delivery_Region_ID = -1                        
  set @Delivery_Branch_ID =  -1                        
  END                         
else if @Delivery_Region_ID > 0                         
  BEGIN                        
  set @Delivery_Area_ID = -1                        
  set @Delivery_Branch_ID = -1                        
  END                        
                      
if @Booking_Branch_ID  > 0                         
  BEGIN                        
  Set @Booking_Region_ID = -1                        
  set @Booking_Area_ID = -1                        
  END                         
else if  @Booking_Area_ID > 0                         
  BEGIN                         
  Set @Booking_Region_ID = -1                        
  set @Booking_Branch_ID =  -1                        
  END                         
else if @Booking_Region_ID > 0                         
  BEGIN                        
  set @Booking_Area_ID = -1                        
  set @Booking_Branch_ID = -1                        
  END                        
                         
SET NOCOUNT ON;  
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Booking Type','s,1')
        insert into @Dropdown_Search values ('Vehicle No','s,2')
        insert into @Dropdown_Search values ('Memo No','s,3')
        insert into @Dropdown_Search values ('MR No','s,4')                     
        insert into @Dropdown_Search values ('Charged Weight','n,5') 
        insert into @Dropdown_Search values ('Freight Amount','n,6')                        
		insert into @Dropdown_Search values ('GC Date','d,7')
        	
		select  *From @Dropdown_Search

		return
	end;
--------------------------------------Filter-----------------------------------------                           
              
-------------------------------STEP 1--------------------------------------------------------------      
WITH Door_Delivery_Expenses AS      
(      
Select distinct ROW_NUMBER() OVER(ORDER BY a.GC_date) AS 'Sr No.',      
  a.GC_No_For_Print as [gc_caption No],               
  dbo.dateonlydisplay(a.GC_Date) as [gc_caption Date],               
  BookingBranch.Branch_Code as [Booking Branch Code],              
  DeliveryBranch.Branch_Code as [Delivery Branch Code],              
  h.Booking_Type as [Booking Type],              
  ISNULL(Cast(round(a.Charged_Weight, 0) as float),0) as [Charged Weight],              
  ISNULL(Cast(round(a.Sub_Total, 0) as float),0) as [Freight Amount],               
  g.Payment_Type as [Bill Type],              
              
Cast(round(      
  (case when (a.Is_ODA = 1) then        
   (Case When ISNULL(a.Charged_Weight,0) > 500 then              
    (case when (a.Is_ODA = 1) then ISNULL(a.Oda_charges_above_500_Kg,0) else ISNULL(f.ODA_Branch_Rate,0) end)-- as [ODA_Branch_Rate]              
   else              
    (case when (a.Is_ODA = 1) then ISNULL(a.Oda_charges_upto_500_Kg,0) else ISNULL(f.Near_By_Branch_Rate,0) end)-- as [Near_By_Branch_Rate],              
   end)      
  Else       
     (case When ((ISNULL(a.Charged_Weight,0) = 0) or               
   ((Case When ISNULL(a.Charged_Weight,0) > 500 then              
      (case when (a.Is_ODA = 1) then ISNULL(a.Oda_charges_above_500_Kg,0) else ISNULL(f.ODA_Branch_Rate,0) end)-- as [ODA_Branch_Rate]              
     else              
      (case when (a.Is_ODA = 1) then ISNULL(a.Oda_charges_upto_500_Kg,0) else ISNULL(f.Near_By_Branch_Rate,0) end)-- as [Near_By_Branch_Rate],              
     end) = 0))then              
      0              
   else              
    (ISNULL(a.Charged_Weight,0) *               
     (Case When ISNULL(a.Charged_Weight,0) > 500 then              
      (case when (a.Is_ODA = 1) then ISNULL(a.Oda_charges_above_500_Kg,0) else ISNULL(f.ODA_Branch_Rate,0) end)-- as [ODA_Branch_Rate]              
     else              
      (case when (a.Is_ODA = 1) then ISNULL(a.Oda_charges_upto_500_Kg,0) else ISNULL(f.Near_By_Branch_Rate,0) end)-- as [Near_By_Branch_Rate],              
     end))              
   End)       
  End)      
, 0) as float)      
as [As Per Decided],              
              
  ISNULL(Cast(round(a.DD_Charges, 0) as float),0) as [DD in gc_caption],              
  i.MR_No_For_Print as [MR No],              
  e.Memo_No_For_Print as [Memo No],              
  j.Vehicle_No as [Vehicle No]              
              
from dbo.EC_Opr_VTrans_GC a              
Inner Join EC_Opr_VTrans_Door_Delivery_Confirmation_Details b              
on a.GC_ID = b.GC_ID              
Inner Join EC_Opr_VTrans_Door_Delivery_Confirmation c              
on b.DDC_ID = c.DDC_ID              
Inner Join EC_Opr_VTrans_Memo_Details d              
on a.GC_ID = d.GC_ID              
INNER JOIN EC_Opr_VTrans_Memo e              
on d.Memo_ID = e.Memo_Id              
              
Inner Join dbo.EC_Master_Payment_Type g              
on a.Payment_Type_ID = g.Payment_Type_ID              
Inner Join dbo.EC_Master_Booking_Type h              
on a.Booking_Type_ID = h.Booking_Type_ID              
Inner Join dbo.EF_Master_Vehicle j              
on b.Vehicle_ID = j.Vehicle_ID              
              
INNER JOIN dbo.Ec_master_Branch as BookingBranch               
ON a.From_Branch_Id=BookingBranch.Branch_Id                       
INNER JOIN dbo.Ec_master_area as BookingArea               
ON BookingBranch.Area_Id=BookingArea.Area_Id                       
INNER JOIN Ec_Master_Region as BookingRegion               
ON BookingBranch.Region_Id=BookingRegion.Region_Id                         
              
INNER JOIN dbo.Ec_master_Branch AS DeliveryBranch              
ON a.Delivery_Branch_Id = DeliveryBranch.Branch_Id                
INNER JOIN dbo.Ec_master_area as DeliveryArea               
ON DeliveryBranch.Area_Id=DeliveryArea.Area_Id                       
INNER JOIN Ec_Master_Region as DeliveryRegion               
ON DeliveryBranch.Region_Id=DeliveryRegion.Region_Id                         
              
left outer join dbo.EC_Master_VTrans_Door_Delivery_Charges f              
ON DeliveryArea.Area_Id = f.Area_Id              
Left outer Join dbo.FA_Opr_MR i              
on i.MR_ID = a.Delivery_MR_ID              
              
Where a.Status_Id<>80                         
and a.Is_cancelled=0                        
and (DeliveryBranch.Branch_ID = @Delivery_Branch_ID OR DeliveryBranch.Region_ID = (Select case @Delivery_Region_ID when 0 then DeliveryBranch.Region_ID else  @Delivery_Region_ID end) OR DeliveryBranch.Area_ID =  @Delivery_Area_ID)                       
and (BookingBranch.Branch_ID = @Booking_Branch_ID OR BookingBranch.Region_ID = (Select case @Booking_Region_ID when 0 then BookingBranch.Region_ID else  @Booking_Region_ID end) OR BookingBranch.Area_ID =  @Booking_Area_ID)                         
and (c.DDC_Date BETWEEN @From_Date  and @To_Date)                        
and A.Division_Id =(select case @Division_Id when 0 then A.Division_Id else @Division_Id end) 
and 
(@criteria_id = 0
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and h.Booking_Type = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and h.Booking_Type like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and h.Booking_Type like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and h.Booking_Type like '%' + @Filtered_Text + '%')

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and j.Vehicle_No = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and j.Vehicle_No like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and j.Vehicle_No like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and j.Vehicle_No like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and e.Memo_No_For_Print = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and e.Memo_No_For_Print like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and e.Memo_No_For_Print like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and e.Memo_No_For_Print like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and i.MR_No_For_Print = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and i.MR_No_For_Print like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and i.MR_No_For_Print like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and i.MR_No_For_Print like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 2 and a.Charged_Weight = @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 2 and @datatype_id = 2 and a.Charged_Weight >= @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 3 and @datatype_id = 2 and a.Charged_Weight <= @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 4 and @datatype_id = 2 and a.Charged_Weight > @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 5 and @datatype_id = 2 and a.Charged_Weight < @Filtered_Text_int)

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 2 and a.Sub_Total = @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 2 and a.Sub_Total >= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 2 and a.Sub_Total <= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 2 and a.Sub_Total > @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 2  and a.Sub_Total < @Filtered_Text_int)

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and a.GC_date = @Filtered_Date)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and a.GC_date >= @Filtered_Date)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and a.GC_date <= @Filtered_Date)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and a.GC_date > @Filtered_Date)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and a.GC_date < @Filtered_Date)
)                                        
)      
      
-------------------------------STEP 2--------------------------------------------------------------      
SELECT * into #DDExp FROM Door_Delivery_Expenses      
-------------------------------STEP 3--------------------------------------------------------------      
      select * From #DDExp      
 WHERE       
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)      
or      
(@PageSize = 0)      
      
--------------------------------STEP 4-------------------------------------------------------------      
select      
sum([Charged Weight]) as Total_Charged_Wt,      
sum([Freight Amount]) as Total_Freight_Amt,      
sum([As Per Decided]) as Total_As_Per_decided,     
sum([DD in gc_caption]) as Total_DD_in_GC      
    
from #DDExp      
      
--------------------------------STEP 5-------------------------------------------------------------      
select count(*) From #DDExp      
---------------------------------------------------------------------------------------------      
End     
  
----693--------------------------------------------------------------------------------  
  
  
  
----110--------------------------------------------------------------------------------  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--select [dbo].[Incoming_Truck_Alert_Get_Wt_And_Article] (418,2,'ho',1,1)

CREATE FUNCTION [dbo].[Incoming_Truck_Alert_Get_Wt_And_Article] 
(@LHPO_ID int,@flag smallint,@hierarchy_code varchar(5),@Main_ID int,
@for_me bit)

RETURNS int
AS
BEGIN

declare @return_val int

declare @Total_loaded int
set @Total_loaded = 0

select @Total_loaded= case @flag when 1 then sum(total_loaded_articles) else  sum(total_loaded_weight) end
from ec_opr_vtrans_memo memo
inner join Main_LHPO_With_All_Memos all_memos
on memo.memo_id = all_memos.memo_id
inner join ec_master_branch memo_to_branch
on memo.to_branch_id = memo_to_branch.branch_id
where memo_type_id = 1 and aus_id = 0
and memo.is_cancelled = 0
and all_memos.main_lhpo_id = @LHPO_ID
and 
	((@for_me = 1 and
			(memo_to_branch.branch_id = @Main_ID and @hierarchy_code = 'BO')
		or (memo_to_branch.area_id = @Main_ID and @hierarchy_code = 'AO' and @for_me = 1)
		or (memo_to_branch.region_id = @Main_ID and @hierarchy_code = 'RO' and @for_me = 1)
	)
	or
		@for_me = 0)

return isnull(@Total_loaded,0)

END





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetVoucherDetailsXML] 
(
	@Ledger_Id int,
	@Debit numeric(18,2),
	@Credit numeric(18,2),
	@Bank_Name varchar(100),
	@Cheque_No int,
	@Cheque_Date datetime
)

RETURNS varchar(2000)
AS
BEGIN
Declare @CreatedXML varchar(2000)
set @CreatedXML=''
if((@Ledger_Id Is Null) OR (@Debit=0 And @Credit=0))

 set @CreatedXML=''

Else

set @CreatedXML=
'
   <Voucher>
		<Ledger_Id>'+Cast(Isnull(@Ledger_Id,0) as varchar(200))+'</Ledger_Id>
		<Debit>'+Cast(Isnull(@Debit,0) as varchar(20))+'</Debit>
		<Credit>'+Cast(Isnull(@Credit,0) as varchar(20))+'</Credit>
		<Bank_Name>'+Isnull(@Bank_Name,'')+'</Bank_Name>
		<Cheque_No>'+Cast(Isnull(@Cheque_No,0) as varchar(20))+'</Cheque_No>
		<Cheque_Date>'+dbo.DateOnly_M_D_Y(IsNull(@Cheque_Date,Getdate()))+'</Cheque_Date>
   </Voucher>
'

RETURN(@CreatedXML)
END
	






















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 04 Oct 2008 >
-- Description:	<Add ,Edit Ledger Group>
-- =============================================
CREATE Proc [dbo].[EC_FA_Mst_LedgerRecoAndBillDetails_Save]
(
@Hierarchy_Code varchar(10),
@Main_Id int,
@Ledger_Id int,
@Division_Id int,
@Cleared_Amount numeric(18,2),
@Opening_Balance numeric(18,2),
@IsBankReco bit,
@IsBillWise bit,
@Details_XML as Xml,
@ERROR_CODE AS INT OUTPUT,
@ERROR_DESC AS VARCHAR(4000) OUTPUT
)
As
BEGIN TRY
BEGIN TRAN
BEGIN
SET NOCOUNT ON;
set @ERROR_CODE = 0;
set @ERROR_DESC = '';

DECLARE @idoc int        

if(@IsBillWise=1)
Begin

EXEC sp_xml_Preparedocument @idoc output,@Details_XML    

Delete from FA_Bill_Wise_Details
where Ledger_Id=@Ledger_Id And Voucher_Id=0
and Hierarchy_Code=@Hierarchy_Code
and Main_Id=@Main_Id
and Division_Id=@Division_Id


Insert into FA_Bill_Wise_Details(
	Hierarchy_Code,
	Main_Id,
    Division_Id,
	Ledger_Id,
	Bill_Date,
	Ref_No,
	Ref_Type_Id,
	Credit_Days,
	Amount,
	Voucher_Id,
	Voucher_No,
	Voucher_Type_Id,
	Voucher_Date,
	TDS_Ledger_Id,
	Is_Lower_Rate,
	Section_No,
	Tax_Rate,
	Tax_Amount,
	Surcharge_Rate,
	Surcharge_Amount,
	Add_Surcharge_Rate,
	Add_Surcharge_Amount,
	Add_Edu_Cess_Rate,
	Add_Edu_Cess_Amount
  )
Select
	@Hierarchy_Code,
	@Main_Id,
    @Division_Id,
	@Ledger_Id,
	Bill_Date,
	Ref_No,
	1,--Ref_Type_Id,
	Credit_Days,
	Amount,
	0,--Voucher_Id,
	'',--Voucher_No,
	0,--Voucher_Type_Id,
	'1/1/1900',--Voucher_Date,
	0,--TDS_Ledger_Id,
	0,--Is_Lower_Rate,
	'',--Section_No,
	0,--Tax_Rate,
	0,--Tax_Amount,
	0,--Surcharge_Rate,
	0,--Surcharge_Amount,
	0,--Add_Surcharge_Rate,
	0,--Add_Surcharge_Amount,
	0,--Add_Edu_Cess_Rate,
	0--Add_Edu_Cess_Amount
from openxml (@idoc,'/NewDataSet/BillWise',2)       
with(
	Bill_Date varchar(10),
	Ref_No varchar(50),
	Credit_Days int,
	Amount numeric(18,2)
   )

  EXEC sp_xml_removedocument @idoc  

End



else if(@IsBankReco=1)
Begin

EXEC sp_xml_Preparedocument @idoc output,@Details_XML    

Delete FA_Opening_Bank_Reco
where Ledger_Id=@Ledger_Id And Bank_Date IS NULL
and Hierarchy_Code=@Hierarchy_Code
and Main_Id=@Main_Id
and Division_Id=@Division_Id

Insert into FA_Opening_Bank_Reco(
Hierarchy_Code,
Main_Id,
Division_Id,
Ledger_Id,
Voucher_Date,
Particulars,
Bank_Date,
Cheque_No,
Amount)
Select
@Hierarchy_Code,
@Main_Id,
@Division_Id,
@Ledger_Id,
cast(Voucher_Date as DateTime),
Particulars,
NULL,--Bank_Date,
Cheque_No,
Amount
from openxml (@idoc,'/NewDataSet/BankReco',2)       
with(
	Particulars varchar(20),
	Voucher_Date varchar(10),
	Cheque_No varchar(20),
	Amount numeric(18,2)
    )


End


if Exists(select * From dbo.FA_Master_Ledger_Opening_Details 
		  where Ledger_Id=@Ledger_Id
			and Hierarchy_Code=@Hierarchy_Code
			and Main_Id=@Main_Id
            and Division_Id=@Division_Id
          )

		Update dbo.FA_Master_Ledger_Opening_Details
		Set Cleared_Amount=@Cleared_Amount,
		Opening_Balance=@Opening_Balance,
		Closing_Balance=(Isnull(Closing_Balance,0) - Isnull(Opening_Balance,0)) + @Opening_Balance 
		where Ledger_Id=@Ledger_Id
		and Hierarchy_Code=@Hierarchy_Code
		and Main_Id=@Main_Id
        and Division_Id=@Division_Id
Else

		Insert into FA_Master_Ledger_Opening_Details(
		Hierarchy_Code,
		Main_Id,
        Division_Id,
		Ledger_Id,
		Cleared_Amount,
		Opening_Balance,
		Closing_Balance)
		values(
		@Hierarchy_Code,
		@Main_Id,
        @Division_Id,
		@Ledger_Id,
		@Cleared_Amount,
		@Opening_Balance,
		@Opening_Balance)

END--if Exists

delete from FA_Opr_Voucher_Details
where Ledger_Id=@Ledger_Id 
and Hierarchy_Code=@Hierarchy_Code
and Main_Id=@Main_Id
and Division_Id=@Division_Id
and Voucher_Id=0

declare @Debit as numeric(18,2)
declare @Credit as numeric(18,2)

Set @Debit=0
Set @Credit=0

if @Opening_Balance<=0
	Begin
		set @Debit=abs(@Opening_Balance)
	End
else
	Begin
		set @Credit=@Opening_Balance
	End

Insert into FA_Opr_Voucher_Details
(Year_Code,Hierarchy_Code,Main_Id,Division_Id,
Voucher_Id,Voucher_Type_Id,Voucher_Type_Id_Main,
Voucher_Date,Ledger_Id,Debit,Credit,
FBT_Category_ID,Is_FBT_Recovery,Bank_Name,Cheque_No,Cheque_Date)
Values(
0,@Hierarchy_Code,@Main_Id,@Division_Id,
0,0,0,
'1/1/1900',@Ledger_Id,@Debit,@Credit,
0,0,'','',getdate())


COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
END CATCH










----235--------------------------------------------------------------------------------






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  <Ankit champaneriya>  
-- Create date: <14-10-2008>  
-- Description: <Fill ledger in panel >  
-- =============================================  
  
CREATE PROCEDURE [dbo].[EC_FA_Mst_Ledgers_Fill]  
AS  
BEGIN  
  
select Ledger_Id,Ledger_Name from FA_Master_Ledger
where Is_Cost_Centre_Applicable=1 

--in
--(select Ledger_Group_Id from FA_Master_Ledger_Group
--Where Nature='Expenses')
--order by Ledger_Name
  
END  
  



----236--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: Oct 11 2008  4:42PM
-- Description:	<RecoAndBillDetails_ReadValues>
-- =============================================


CREATE Proc [dbo].[EC_FA_Mst_RecoAndBillDetails_ReadValues]
@Hierarchy_Code varchar(10),
@Main_Id int,
@Ledger_Id int,
@Division_Id int
as 

Declare @IsBillByBill bit
Declare @IsBankReco bit
Declare @DefaultDrCr varchar(5)
Declare @Ledger_Name varchar(100)
Select @IsBillByBill=0
Select @IsBankReco=0


Select @IsBillByBill=Maintain_Bill_By_Bill,@Ledger_Name = Ledger_Name  From dbo.FA_Master_Ledger
where Ledger_Id=@Ledger_Id

Select @IsBankReco=1 From dbo.FA_Master_Ledger
where Ledger_Id=@Ledger_Id  And Ledger_Group_Id In (19,28)


Select @DefaultDrCr=(Select Default_Dr_Cr From FA_Master_Ledger_group
                     where Ledger_Group_Id=(Select Primary_Ledger_Group_Id from FA_Master_Ledger where Ledger_Id=@Ledger_Id))


Select @IsBankReco as IsBankReco,@IsBillByBill as IsBillByBill, @DefaultDrCr as DefaultDrCr,isnull(@Ledger_Name,'') as Ledger_Name

Select Isnull(Opening_Balance,0) as Opening_Balance,Cleared_Amount From dbo.FA_Master_Ledger_Opening_Details
where Ledger_Id=@Ledger_Id
and Hierarchy_Code=@Hierarchy_Code
and Main_Id=@Main_Id
and Division_Id=@Division_Id


if(@IsBankReco=1)
select * from  dbo.FA_Opening_Bank_Reco
where Ledger_Id=@Ledger_Id And Bank_Date Is Null
and Hierarchy_Code=@Hierarchy_Code
and Main_Id=@Main_Id
and Division_Id=@Division_Id

if(@IsBillByBill=1)
select * from  dbo.FA_Bill_Wise_Details
where Ledger_Id=@Ledger_Id And Voucher_Id=0
and Hierarchy_Code=@Hierarchy_Code
and Main_Id=@Main_Id
and Division_Id=@Division_Id



----240--------------------------------------------------------------------------------






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =============================================
-- Author:  <Lad Ashish>
-- Create date: <21th October 2008>
-- Description: <Fill  Values For Document Series Operation Form>
-- =============================================

CREATE PROCEDURE [dbo].[EC_Opr_DocumentSeries_FillValues] 
AS
BEGIN

--Select Document_Id,Document_Name from EC_Master_Document
declare @IsMemoSeriesRequired bit
declare @IsLHPOSeriesRequired bit
declare @IsHOBSeriesRequired bit
declare @IsTransBillSeriesRequired bit

set @IsMemoSeriesRequired = 0
set @IsLHPOSeriesRequired = 0
set @IsHOBSeriesRequired=0 
set @IsTransBillSeriesRequired=0 

select @IsMemoSeriesRequired = Is_Memo_Series_Required ,
@IsLHPOSeriesRequired = Is_LHPO_Series_Required,
@IsHOBSeriesRequired = Is_HOB_Series_Req,
@IsTransBillSeriesRequired = Is_Transport_Bill_Series_Required from 
EC_Master_Company_Parameters

declare @Document_Master table (Document_Id int,Document_Name varchar(100))

insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (1,2,3,6,8)

if @IsMemoSeriesRequired = 1
insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (4)

if @IsLHPOSeriesRequired = 1
insert into @Document_Master
Select Document_Id,Document_Name from EC_Master_Document
where Document_Id in (5)

if @IsTransBillSeriesRequired = 1  
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (7)  

if @IsHOBSeriesRequired=1
insert into @Document_Master  
Select Document_Id,Document_Name from EC_Master_Document  
where Document_Id in (15)   


select * From @Document_Master

Select Series_Printing_ID,Start_No,End_No,Balance from EC_Opr_Document_Series_Printing
Where Series_Printing_ID=-1
End





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  =============================================      
--  Author:  <Harshal A. Sapre>      
--  Create date: <Create Date,,>      
--  dbo.[EC_RPT_Direct_Printing_Transport_Bill_Reach] 143, 143
--  =============================================

CREATE PROCEDURE [dbo].[EC_RPT_Direct_Printing_Transport_Bill_Reach]      
@Menu_Item_ID int,      
@Document_Id int

AS      
BEGIN      
SET NOCOUNT ON;  

Declare @GC_Count int
Declare @GC_Sub_Total float
Declare @Other_Charges float
Declare @Charged_Weight float
Declare @Oct_Form_Charges float
Declare @Oct_Service_Charges float
Declare @Octroi_Amount float

Select	@GC_Count=Count(c.GC_ID), 
		@GC_Sub_Total = SUM(ISNULL(b.GC_Sub_Total,0)),  
		@Other_Charges = SUM(ISNULL(b.Other_Charges,0)),
		@Charged_Weight = SUM(ISNULL(c.Charged_Weight,0)),
		@Oct_Form_Charges =	SUM(ISNULL(b.Oct_Form_Charges,0)),
		@Oct_Service_Charges = SUM(ISNULL(b.Oct_Service_Charges,0)),
		@Octroi_Amount = SUM(ISNULL(b.Octroi_Amount,0))

From dbo.FA_Opr_Bill a
INNER JOIN dbo.FA_Opr_Bill_GC_Details b 
ON b.Bill_ID = a.Bill_ID
INNER JOIN EC_OPR_VTRANS_GC c
ON b.GC_ID = c.GC_ID  
Where b.Bill_ID = @Document_Id

Declare @Taxable_Service_Amount float
Select @Taxable_Service_Amount =
	(case c.Tax_Payable_By when 3 Then
		cast(round(((a.Bill_Sub_Total + a.Bill_Other_Charges_Total) * 0.25),2)as float) 
	else 
		cast(round((a.Bill_Sub_Total + a.Bill_Other_Charges_Total),2)as float) 
	End)
From dbo.FA_Opr_Bill a
INNER JOIN dbo.FA_Opr_Bill_GC_Details b  
ON b.Bill_ID = a.Bill_ID
INNER JOIN EC_OPR_VTRANS_GC c
ON b.GC_ID = c.GC_ID
Where b.Bill_ID =  @Document_Id


if @GC_Count <= 1
Begin
	Select	Distinct a.Client_Id, a.Billing_Name as [Client_Name],
			a.Billing_Address as [Client_Address],

			a.Bill_ID, a.Bill_No_For_Print, a.Bill_Date, 

			c.GC_ID, c.GC_No_For_Print, dbo.dateonlydisplay(c.GC_Date) as GC_Date, b.GC_Sub_Total,
			BookingBranch.Branch_Name as From_Branch, DeliveryBranch.Branch_Name as To_Branch,
			d.Vehicle_Type, 0 as Advance_Amount, b.Other_Charges,

			case c.Tax_Payable_By when 1 Then 'Consignor'
					when 2 Then 'Consignee'
					when 3 Then 'Transporter'
			End as Tax_Payable_By,

			(a.Bill_Sub_Total + a.Bill_Other_Charges_Total) as Bill_Sub_Total,

			@Taxable_Service_Amount as Taxable_Service_Amount,

			cast(round((@Taxable_Service_Amount * 0.10),2)as float)	as Service_Tax_Payable,

			cast(round((cast(round((@Taxable_Service_Amount * 0.10),2)as float)* 0.03),2)as float)	as Education_Cess,

			(cast(round((@Taxable_Service_Amount * 0.10),2)as float)+
			cast(round((cast(round((@Taxable_Service_Amount * 0.10),2)as float)* 0.03),2)as float))
			as Total_Service_Tax_Payable,

			@Charged_Weight as Charged_Weight,
			e.Freight_Basis,
			f.Client_PO_No,

			case a.Bill_Hierarchy_Code 
			when 'HO' then 'HO'
			when 'RO' then Bill_Region.Region_Name
			when 'AO' then Bill_Area.Area_Name
			when 'BO' then Bill_Branch.Branch_Name
			end as [Branch_Name],

			cast(round(@Oct_Form_Charges,2)as float) as Oct_Form_Charges,
			cast(round(@Oct_Service_Charges,2)as float) as Oct_Service_Charges,
			cast(round(@Octroi_Amount,2)as float) as Octroi_Amount

	From dbo.FA_Opr_Bill a     
	INNER JOIN dbo.FA_Opr_Bill_GC_Details b      
	ON a.Bill_ID = b.Bill_ID
	INNER JOIN EC_OPR_VTRANS_GC c   
	ON b.GC_ID = c.GC_ID

	INNER JOIN dbo.EC_Master_GC_Freight_Basis e
	ON e.Freight_Basis_ID =  c.Freight_Basis_ID 
	LEFT OUTER JOIN dbo.EC_Opr_Contract_Master f
	ON c.Contract_ID = f.Contract_ID
	
	LEFT OUTER JOIN dbo.EC_Master_Client_VTrans Client
	ON a.Client_ID = Client.Client_ID
	INNER JOIN dbo.EC_Master_City City
	ON Client.City_ID = City.City_ID

	INNER JOIN dbo.EC_Master_State State
	ON Client.State_ID = State.State_ID
	INNER JOIN dbo.EC_Master_Country Country
	ON Client.Country_ID = Country.Country_ID

	LEFT OUTER JOIN EF_MASTER_VEHICLE_TYPE d
	ON c.Vehicle_Type_Id = d.Vehicle_Type_Id

	INNER JOIN EC_MASTER_BRANCH BookingBranch      
	ON c.From_Branch_ID = BookingBranch.Branch_ID      
	INNER JOIN EC_MASTER_BRANCH DeliveryBranch      
	ON c.Delivery_Branch_Id = DeliveryBranch.Branch_ID      

	LEFT OUTER JOIN EC_MASTER_REGION Bill_Region
	ON A.Bill_Main_ID = Bill_Region.Region_ID
	LEFT OUTER JOIN EC_MASTER_Area Bill_Area
	ON A.Bill_Main_ID = Bill_Area.Area_ID
	LEFT OUTER JOIN EC_MASTER_BRANCH Bill_Branch
	ON A.Bill_Main_ID = Bill_Branch.Branch_ID

	Where a.Bill_ID =  @Document_Id


	Select	a.Bill_ID, c.GC_ID, 
			e.GC_Other_Charge_Head, 
			d.Description,
			d.Amount

	From dbo.FA_Opr_Bill a     
	INNER JOIN dbo.FA_Opr_Bill_GC_Details b      
	ON a.Bill_ID = b.Bill_ID
	INNER JOIN EC_OPR_VTRANS_GC c   
	ON b.GC_ID = c.GC_ID  

	INNER JOIN dbo.FA_Opr_Bill_Other_Charges_Details d
	ON a.Bill_ID = d.Bill_ID
	and c.GC_ID = d.GC_ID  
	INNER JOIN dbo.EC_Master_GC_Other_Charge_Head e
	ON d.GC_Other_Charge_Head_ID = e.GC_Other_Charge_Head_ID

	Where a.Bill_ID =  @Document_Id
End
Else
Begin
	Select	distinct a.Client_Id, a.Billing_Name as [Client_Name],
			a.Billing_Address as [Client_Address],

			a.Bill_ID, a.Bill_No_For_Print, a.Bill_Date,

			0 as GC_ID, '' as GC_No_For_Print, '' as GC_Date, @GC_Sub_Total as GC_Sub_Total,
			'' as From_Branch, '' as To_Branch, '' as Vehicle_Type, 0 as Advance_Amount, 
			@Other_Charges as Other_Charges,
			
			case c.Tax_Payable_By when 1 Then 'Consignor'
					when 2 Then 'Consignee'
					when 3 Then 'Transporter'
			End as Tax_Payable_By,

			(a.Bill_Sub_Total + a.Bill_Other_Charges_Total) as Bill_Sub_Total,

			@Taxable_Service_Amount as Taxable_Service_Amount,

			cast(round((@Taxable_Service_Amount * 0.10),2)as float)	as Service_Tax_Payable,

			cast(round((cast(round((@Taxable_Service_Amount * 0.10),2)as float)* 0.03),2)as float)	as Education_Cess,

			(cast(round((@Taxable_Service_Amount * 0.10),2)as float)+
			cast(round((cast(round((@Taxable_Service_Amount * 0.10),2)as float)* 0.03),2)as float))
			as Total_Service_Tax_Payable,

			@Charged_Weight as [Charged_Weight],
			e.Freight_Basis,
			'' as Client_PO_No,

			case a.Bill_Hierarchy_Code 
			when 'HO' then 'HO'
			when 'RO' then Bill_Region.Region_Name
			when 'AO' then Bill_Area.Area_Name
			when 'BO' then Bill_Branch.Branch_Name
			end as [Branch_Name],

			cast(round(@Oct_Form_Charges,2)as float) as Oct_Form_Charges,
			cast(round(@Oct_Service_Charges,2)as float) as Oct_Service_Charges,
			cast(round(@Octroi_Amount,2)as float) as Octroi_Amount


	From dbo.FA_Opr_Bill a     
	INNER JOIN dbo.FA_Opr_Bill_GC_Details b      
	ON a.Bill_ID = b.Bill_ID
	INNER JOIN EC_OPR_VTRANS_GC c   
	ON b.GC_ID = c.GC_ID

	INNER JOIN dbo.EC_Master_GC_Freight_Basis e
	ON e.Freight_Basis_ID =  c.Freight_Basis_ID 

	LEFT OUTER JOIN dbo.EC_Master_Client_VTrans Client
	ON a.Client_ID = Client.Client_ID
	INNER JOIN dbo.EC_Master_City City
	ON Client.City_ID = City.City_ID

	INNER JOIN dbo.EC_Master_State State
	ON Client.State_ID = State.State_ID
	INNER JOIN dbo.EC_Master_Country Country
	ON Client.Country_ID = Country.Country_ID

	LEFT OUTER JOIN EF_MASTER_VEHICLE_TYPE d
	ON c.Vehicle_Type_Id = d.Vehicle_Type_Id

	INNER JOIN EC_MASTER_BRANCH BookingBranch      
	ON c.From_Branch_ID = BookingBranch.Branch_ID      
	INNER JOIN EC_MASTER_BRANCH DeliveryBranch      
	ON c.Delivery_Branch_Id = DeliveryBranch.Branch_ID      

	LEFT OUTER JOIN EC_MASTER_REGION Bill_Region
	ON A.Bill_Main_ID = Bill_Region.Region_ID
	LEFT OUTER JOIN EC_MASTER_Area Bill_Area
	ON A.Bill_Main_ID = Bill_Area.Area_ID
	LEFT OUTER JOIN EC_MASTER_BRANCH Bill_Branch
	ON A.Bill_Main_ID = Bill_Branch.Branch_ID

	Where a.Bill_ID =  @Document_Id

	Select	a.Bill_ID, c.GC_ID, 
			e.GC_Other_Charge_Head, 
			d.Description,
			d.Amount

	From dbo.FA_Opr_Bill a     
	INNER JOIN dbo.FA_Opr_Bill_GC_Details b      
	ON a.Bill_ID = b.Bill_ID
	INNER JOIN EC_OPR_VTRANS_GC c   
	ON b.GC_ID = c.GC_ID  

	INNER JOIN dbo.FA_Opr_Bill_Other_Charges_Details d
	ON a.Bill_ID = d.Bill_ID
	and c.GC_ID = d.GC_ID  
	INNER JOIN dbo.EC_Master_GC_Other_Charge_Head e
	ON d.GC_Other_Charge_Head_ID = e.GC_Other_Charge_Head_ID

	Where a.Bill_ID =  @Document_Id
End

Select @GC_Count

----------Company Address Deatils---------------------------------          
Select Company.Company_Name,  
Company.Address_Line_1 + ', ' + Company.Address_Line_2 + ', ' + City.City_Name + ', ' + State.State_Name
+ ' Pin : - ' + cast(Company.Pin_Code as varchar(20)) as [Address],
Case when Phone_2 = '' then Phone_1 else Phone_1 + ', ' + Phone_2 end as [Phone_No],
Fax as [Fax], email as [Email], PAN_No, Service_Tax_No as [Service_Tax_No]
from dbo.EC_Master_Company Company
INNER JOIN EC_Master_City City
ON Company.City_ID = City.City_ID
INNER JOIN EC_Master_State State
ON Company.State_ID = State.State_ID

End







GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
-- =============================================  
-- Author:  <Sunil Bhoyar>  
-- alter date: Nov 13 2008  2:14PM  
-- Description: <EC_FA_Mst_Voucher_ManualSave>  
-- =============================================  
CREATE Proc [dbo].[EC_FA_Mst_Voucher_ManualSave]  
(  
@Year_Code int,  
@Hierarchy_Code varchar(2),  
@Main_Id int,  
@Division_Id int,  
@User_Id int,  
@Voucher_Id int,  
@Voucher_No varchar(20),  
@Voucher_Type_Id int,  
@Voucher_Type_Id_Main int=0,  
@Voucher_Date datetime,  
@Ref_No varchar(20),  
@Ledger_Id int=0,  
@Total_Debit numeric(18,2)=0,  
@Total_Credit numeric(18,2)=0,  
@Narration varchar(200),  
@FBT_Payment_Type varchar(100)='',  
@Menu_Item_ID int,  
--@Is_Manual_Entry bit,  
@UnApproved_Voucher_Id int = NULL,  
@Is_Manual_Entry int =1,  
@VoucherXML XML,  
@VoucherCostCentreXML XML='<NewDataSet></NewDataSet>',  
@VoucherBillByBillXML XML='<NewDataSet></NewDataSet>',  
@Error_Code int =0 output,  
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT,  
@Gen_Voucher_Id int=Null output  
)  
As  
 BEGIN  
  
BEGIN TRY  
BEGIN TRAN  
  
SET NOCOUNT ON;  
set @Error_Code = 0;  
set @ERROR_DESC = '';  
   
    EXEC [dbo].[EC_FA_Mst_Voucher_Save]  
   @Year_Code = @Year_Code,  
   @Hierarchy_Code =@Hierarchy_Code,  
   @Main_Id = @Main_Id,   
   @Division_Id = @Division_Id,  
   @User_Id = @User_Id,  
   @Voucher_Id = @Voucher_Id,  
   @Voucher_No =@Voucher_No,  
   @Voucher_Type_Id = @Voucher_Type_Id,  
   @Voucher_Type_Id_Main = @Voucher_Type_Id_Main,  
   @Voucher_Date =@Voucher_Date,  
   @Ref_No = @Ref_No,  
   @Ledger_Id =@Ledger_Id,  
   @Total_Debit = @Total_Debit,  
   @Total_Credit = @Total_Credit,  
   @Narration = @Narration,  
   @FBT_Payment_Type = @FBT_Payment_Type,  
   @UnApproved_Voucher_Id = @UnApproved_Voucher_Id,  
   @Menu_Item_ID=@Menu_Item_ID,
   @Is_Manual_Entry=@Is_Manual_Entry,  
   @VoucherXML = @VoucherXML,  
   @VoucherCostCentreXML = @VoucherCostCentreXML,  
   @VoucherBillByBillXML = @VoucherBillByBillXML  
  
COMMIT TRAN  
END TRY  
BEGIN CATCH  
 ROLLBACK TRAN  
 SELECT @ERROR_CODE=ERROR_NUMBER()  
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
 CAST(ERROR_MESSAGE() as VARCHAR(4000))  
END CATCH  
END  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
----243--------------------------------------------------------------------------------  
  
  
  
  
  





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [dbo].[EC_Opr_AUS_Other_Agency_GC_Ledger_Search]
@Agency_Id int = 0,
@SearchFor varchar(20)
as
BEGIN
--	declare @LedgerId int ; set @LedgerId = 0 
--
--	set @LedgerId = (select isnull(Agency_Ledger_ID,0) from ec_master_branch where Branch_Id = @Agency_Id)
--
--	select upper(Ledger_Name),Ledger_Id
--	from FA_Master_Ledger
--	where (Ledger_Id = @LedgerId or Ledger_Group_Id = 24) --24 means sundry debters
--	and Ledger_Name like @SearchFor
--	order by Ledger_Name 

	select upper(Ledger_Name),Ledger_Id
	from FA_Master_Ledger
	where Ledger_Group_Id in(257,24) --24 means sundry debters 257 - means agency acco.
	and Ledger_Name like @SearchFor
	order by Ledger_Name 
END



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Sunil Bhoyar>
-- alter date: Nov 13 2008  2:14PM
-- Description:	<Voucher_Save>
-- =============================================
CREATE Proc [dbo].[EC_FA_Mst_Voucher_Save]
(
@Year_Code int,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@User_Id int,
@Voucher_Id int,
@Voucher_No varchar(20),
@Voucher_Type_Id int,
@Voucher_Type_Id_Main int=0,
@Voucher_Date datetime,
@Ref_No varchar(20),
@Ledger_Id int=0,
@Total_Debit numeric(18,2)=0,
@Total_Credit numeric(18,2)=0,
@Narration varchar(2000),
@FBT_Payment_Type varchar(100)='',
@Menu_Item_ID int=1,
--@Is_Manual_Entry bit,
@UnApproved_Voucher_Id int = NULL,
@Is_Manual_Entry int =1,
@VoucherXML XML,
@VoucherCostCentreXML XML='<NewDataSet></NewDataSet>',
@VoucherBillByBillXML XML='<NewDataSet></NewDataSet>',
@Error_Code int =0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT,
@Gen_Voucher_Id int=Null output
--@in int
)
As
BEGIN

--BEGIN TRY
--BEGIN TRAN

SET NOCOUNT ON;
set @Error_Code = 0;
set @ERROR_DESC = '';
 if(@Voucher_Type_Id=1) set @Menu_Item_ID=97 --Contraelse if(@Voucher_Type_Id=2) set @Menu_Item_ID=100  --Credit Noteelse if(@Voucher_Type_Id=3) set @Menu_Item_ID=99 --Debit Noteelse if(@Voucher_Type_Id=6) set @Menu_Item_ID=98 --Journalelse if(@Voucher_Type_Id=8) set @Menu_Item_ID=94--Paymentelse if(@Voucher_Type_Id=14) set @Menu_Item_ID=96--Receiptelse set @Menu_Item_ID=1--OtherSET @Voucher_No=''


if @Voucher_Id <= 0 -- add
  Begin

EXEC	[dbo].[EC_Opr_Generate_Next_No]
		@Year_Code = @Year_Code,
		@Hierarchy_Code =@Hierarchy_Code,
		@Main_ID = @Main_Id,
		@Division_ID = @Division_Id,
		@Menu_Item_ID = @Menu_Item_ID,
		@Call_For_Display = 0,
		@Next_No_For_Print = @Voucher_No OUTPUT


    insert into FA_Opr_Voucher(
    Year_Code,
    Hierarchy_Code,
    Main_Id,
    Division_Id,
    Voucher_No,
    Voucher_Type_Id,
    Voucher_Type_Id_Main,
    UnApproved_Voucher_Id,
    Voucher_Date,
    Ref_No,
    Ledger_Id,
    Total_Debit,
    Total_Credit,
    Narration,
    FBT_Payment_Type,
    Is_Manual_Entry,
    Is_Cancelled,
    Created_On,
    Created_By,
    Updated_On,
    Updated_By)
    values(
    @Year_Code,
    @Hierarchy_Code,
    @Main_Id,
    @Division_Id,
    @Voucher_No,
    @Voucher_Type_Id,
    @Voucher_Type_Id_Main,
	@UnApproved_Voucher_Id,
    @Voucher_Date,
    @Ref_No,
    @Ledger_Id,
    @Total_Debit,
    @Total_Credit,
    @Narration,
    @FBT_Payment_Type,
    @Is_Manual_Entry,--@Is_Manual_Entry,
    0,   --@Is_Cancelled,
    GetDate(),--@Created_On,
    @User_Id,--@Created_By,
    GetDate(),--@Updated_On,
    @User_Id--@Updated_By
)

   set @Voucher_Id=@@Identity
   set @Gen_Voucher_Id = @@Identity

  End
Else -- Edit
  Begin
    Update FA_Opr_Voucher set
    Voucher_Date = @Voucher_Date,
	Ref_No = @Ref_No,
    Ledger_Id = @Ledger_Id,
    Total_Debit = @Total_Debit,
    Total_Credit = @Total_Credit,
    Narration = @Narration,
    FBT_Payment_Type = @FBT_Payment_Type,
	UnApproved_Voucher_Id=@UnApproved_Voucher_Id,
    Updated_On = GetDate(),
    Updated_By = @User_Id
    where Voucher_Id = @Voucher_Id
  End






----------------------------------------Delete Details-------------------------------------------	

Delete From FA_Opr_Voucher_Details
where Voucher_Id=@Voucher_Id

Delete From FA_Opr_Voucher_Cost_Centre_Details
where Voucher_Id=@Voucher_Id

Delete From FA_Bill_Wise_Details
where Voucher_Id=@Voucher_Id

----------------------------------------------Insert Details---------------------------------------------------

Declare @idocVoucherDetails int
Declare @idocVoucherCostCentre int
Declare @idocVoucherBillByBill int

EXEC sp_xml_Preparedocument @idocVoucherDetails output,@VoucherXML    
EXEC sp_xml_Preparedocument @idocVoucherCostCentre output,@VoucherCostCentreXML    
EXEC sp_xml_Preparedocument @idocVoucherBillByBill output,@VoucherBillByBillXML    


-------------------------------------------------------------------------------------------------------------
Insert into FA_Opr_Voucher_Details
(
Year_Code,
Hierarchy_Code,
Main_Id,
Division_Id,
Voucher_Id,
Voucher_Type_Id,
Voucher_Type_Id_Main,
Voucher_Date,
Ledger_Id,
Debit,
Credit,
FBT_Category_ID,
Is_FBT_Recovery,
Bank_Name,
Cheque_No,
Cheque_Date,
Bank_Date
)
Select
@Year_Code,
@Hierarchy_Code,
@Main_Id,
@Division_Id,
@Voucher_Id,
@Voucher_Type_Id,
@Voucher_Type_Id_Main,
@Voucher_Date,
Ledger_Id,
Debit,
Credit,
Isnull(FBT_Category_ID,0),
Isnull(Is_FBT_Recovery,0),
Isnull(Bank_Name,''),
Isnull(Cheque_No,''),
Cast(IsNull(Cheque_Date, Getdate()) as DateTime),
NULL--Bank_Date

from openxml (@idocVoucherDetails, '/NewDataSet/Voucher',2)
with(
	Ledger_Id int,
	Debit numeric(18,2),
	Credit numeric(18,2),

	FBT_Category_ID int,
	Is_FBT_Recovery bit,

	Bank_Name varchar(100),
	Cheque_No varchar(100),
	Cheque_Date varchar(10)
   )

-------------------------------------------------------------------------------------------------
Insert into FA_Opr_Voucher_Cost_Centre_Details
(
Voucher_ID,
Ledger_ID,
Cost_Centre_ID,
Amount
)
Select
@Voucher_Id,
Ledger_ID,
Cost_Centre_ID,
Amount
from openxml (@idocVoucherCostCentre, '/NewDataSet/CostCenter',2)
with
(
    Ledger_ID int,
	Cost_Centre_ID int,
	Amount numeric(18,2)
)


-------------------------------------------------------------------------------------------------


declare @Temp_Table table    
  (    
   Sr_No int identity,    
   Ledger_Id int,    
   TDS_Ledger_Id int,    
   Ref_Type_Id int,     
   Ref_No1 varchar(100),    
   Credit_Days int,    
   Amount numeric(18,2)    
  )    
    
    
  Insert into @Temp_Table(Ledger_Id,TDS_Ledger_Id,Ref_Type_Id,Ref_No1,Credit_Days,Amount)    
  (SELECT Ledger_Id,Isnull(TDS_Ledger_Id,0),Ref_Type_Id,Ref_No,IsNull(Credit_Days,0),Amount    
  FROM                    
  OPENXML(@idocVoucherBillByBill, '/NewDataSet/BillByBill',2)                  
  WITH   (Ledger_Id int,     
  TDS_Ledger_Id int,                 
  Ref_No varchar(100),                  
  Ref_Type_Id varchar(100),                  
  Credit_Days int,                  
  Amount numeric(18, 2))    
  )    

 

  declare @Count as int    
  select @Count=count(*) from @Temp_Table    
    
  declare @Sr_No as int    
  set @Sr_No=1    
    
 declare @Ledger_Id1 as int    
 declare @TDS_Ledger_Id as int    
 declare @Ref_No1 as varchar(100)    
 declare @Ref_Type_Id as int    
 declare @Credit_Days as int    
 declare @Amount as numeric(18,2)    
    
   declare @Is_Lower_Rate as bit    
 declare @Section_No as nvarchar(15)    
 declare @Tax_Rate as numeric(18,2)   

 declare @Nature_Of_Payment_Id as int  
 declare @TDS_Deductee_Type_Id as int  
  
   
 declare @Tax_Amount as numeric(18,2)    
 declare @Surcharge_Rate as numeric(18,2)    
 declare @Surcharge_Amount as numeric(18,2)    
 declare @Add_Surcharge_Rate as numeric(18,2)    
 declare @Add_Surcharge_Amount as numeric(18,2)    
 declare @Add_Edu_Cess_Rate as numeric(18,2)    
 declare @Add_Edu_Cess_Amount as numeric(18,2)    
    
 declare @Is_TDS_Applicable as bit  
  
   
  
 while @Sr_No<=@Count    
  
 begin    
  
  select @Ledger_Id1=Ledger_Id,@TDS_Ledger_Id=TDS_Ledger_Id,    
  @Ref_No1=Ref_No1,@Ref_Type_Id=Ref_Type_Id,@Credit_Days=Credit_Days,    
  @Amount=Amount from @Temp_Table    
  where Sr_No=@Sr_No    
  
  
  
  select @Is_TDS_Applicable=Is_TDS_Applicable,@Is_Lower_Rate=Is_Lower_Deduction,  
  @Section_No=Section_Number,@Tax_Rate=TDS_Lower_Rate,  
  @TDS_Deductee_Type_Id=TDS_Deductee_Type_Id  
  from FA_Master_Ledger  
  where Ledger_Id=@Ledger_Id1  
  
  select @Nature_Of_Payment_Id=Nature_Of_Payment_Id  
  from FA_Master_Ledger  
  where Ledger_Id=@TDS_Ledger_Id  
  
select * from @Temp_Table
--   and @Voucher_Type_Id=6  

  if @Is_TDS_Applicable=1  and @Voucher_Type_Id=6  
   Begin  
  
    if @Is_Lower_Rate=0  
     Begin  
      select @Tax_Rate=IsNull((select top 1 Rate from dbo.FA_Mst_Ledger_TDS_Nature_Of_Payment_Details  
      where TDS_Nature_of_Payment_Id=@Nature_Of_Payment_Id   
      and TDS_Deductee_Type_Id=@TDS_Deductee_Type_Id and Applicable_From<=@Voucher_Date  
      order by Applicable_From desc ),0)

     End--if @Is_Lower_Rate=0  
    else--else if @Is_Lower_Rate=0  
     Begin  
      if @Section_No='197A'  
       Begin  
        Set @Tax_Rate=0  
       End--if @Section_No='197A'  
     End--if @Is_Lower_Rate=0  
  
	 Set @Tax_Rate=Isnull(@Tax_Rate,0)

     select @Surcharge_Rate=IsNull((select Top 1 Surcharge   
     from dbo.FA_Mst_Ledger_TDS_Deductee_Type_Details  
     where TDS_Deductee_Type_Id=@TDS_Deductee_Type_Id and Applicable_From<=@Voucher_Date  
     order by Applicable_From desc),0)
  
     select @Add_Surcharge_Rate=IsNull((select Top 1 Addl_Surcharge_Cess  
     from dbo.FA_Mst_Ledger_TDS_Deductee_Type_Details  
     where TDS_Deductee_Type_Id=@TDS_Deductee_Type_Id and Applicable_From<=@Voucher_Date  
     order by Applicable_From desc),0) 
  
     select @Add_Edu_Cess_Rate=IsNull((select Top 1 Addl_Education_Cess  
     from dbo.FA_Mst_Ledger_TDS_Deductee_Type_Details  
     where TDS_Deductee_Type_Id=@TDS_Deductee_Type_Id and Applicable_From<=@Voucher_Date  
     order by Applicable_From desc),0) 
  
     set @Tax_Amount=(@Amount*@Tax_Rate)/100  
     set @Surcharge_Amount=((@Tax_Amount)* @Surcharge_Rate)/100  
     set @Add_Surcharge_Amount=((@Tax_Amount + @Surcharge_Amount)* @Add_Surcharge_Rate)/100  
     set @Add_Edu_Cess_Amount=((@Tax_Amount + @Surcharge_Amount + @Add_Surcharge_Amount) * @Add_Edu_Cess_Rate)/100  
  
  
   End--if @Is_TDS_Applicable=1 and @Voucher_Type_Id_Main=6  
  else --else if @Is_TDS_Applicable=1 and @Voucher_Type_Id_Main=6  
   Begin  
    set @TDS_Ledger_Id=0    
    set @Is_Lower_Rate=0  
    set @Section_No=''  
    set @Tax_Rate=0  
    set @Tax_Amount=0  
    set @Surcharge_Rate=0    
    set @Surcharge_Amount=0  
    set @Add_Surcharge_Rate=0  
    set @Add_Surcharge_Amount=0  
    set @Add_Edu_Cess_Rate=0  
    set @Add_Edu_Cess_Amount=0  
      
   End--if @Is_TDS_Applicable=1 and @Voucher_Type_Id_Main=6  
  


Insert into FA_Bill_Wise_Details
(
Hierarchy_Code,
Main_Id,
Division_Id,
Ledger_Id,
Bill_Date,
Ref_No,
Ref_Type_Id,
Credit_Days,
Amount,
Voucher_Id,
Voucher_No,
Voucher_Type_Id,
Voucher_Date,
TDS_Ledger_Id,
Is_Lower_Rate,
Section_No,
Tax_Rate,
Tax_Amount,
Surcharge_Rate,
Surcharge_Amount,
Add_Surcharge_Rate,
Add_Surcharge_Amount,
Add_Edu_Cess_Rate,
Add_Edu_Cess_Amount
)
values(
@Hierarchy_Code,
@Main_Id,
@Division_Id,
@Ledger_Id1,
@Voucher_Date,--Bill_Date,
@Ref_No1,
@Ref_Type_Id,
@Credit_Days,
@Amount,
@Voucher_Id,
@Voucher_No,
@Voucher_Type_Id,
@Voucher_Date,
@TDS_Ledger_Id,
@Is_Lower_Rate,
@Section_No,
@Tax_Rate,
@Tax_Amount,
@Surcharge_Rate,
@Surcharge_Amount,
@Add_Surcharge_Rate,
@Add_Surcharge_Amount,
@Add_Edu_Cess_Rate,
@Add_Edu_Cess_Amount
)  

select @Sr_No=@Sr_No+1    
    
 end  --while @Sr_No<=@Count   
    




-------------------------------------------------------------------------------------------------
EXEC sp_xml_removedocument @idocVoucherDetails  
EXEC sp_xml_removedocument @idocVoucherCostCentre  
EXEC sp_xml_removedocument @idocVoucherBillByBill 
-------------------------------------------------------------------------------------------------
--COMMIT TRAN
--END TRY
--BEGIN CATCH
-- ROLLBACK TRAN
-- SELECT @ERROR_CODE=ERROR_NUMBER()
-- SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
-- CAST(ERROR_MESSAGE() as VARCHAR(4000))
--END CATCH
END

























----243--------------------------------------------------------------------------------













GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
    
    
    
    
-- =============================================    
-- Author:  <Kanuga Vajiha>    
-- Create date:  8 May 09    
-- Description: <Proc To Save For Approval>    
-- =============================================    
CREATE proc [dbo].[EC_FA_AccountigVouchers_Approval_Save]  
( @UserId as int,  
  @ApprovalGridDetailsXML as xml,
  @MenuItemId as int  
)    
as    
BEGIN TRY    
BEGIN TRAN    
BEGIN    
  
SET NOCOUNT ON;  
  
DECLARE @idoc int  
EXEC sp_xml_preparedocument @idoc OUTPUT,@ApprovalGridDetailsXML  
 
 if (@MenuItemId = 106 or @MenuItemId = 108)
Begin
	update fa_opr_mr   
	set Is_Approved =a.is_approved_now,  
		Approved_By=@UserId,  
		Approved_On=Getdate()  
	from   
	 (SELECT id,is_approved_now  
	 from openXml(@idoc,'/newdataset/table',2)  
	 With(id int,is_approved_now bit))as a  
	   where fa_opr_mr.Mr_Id= a.id  
	   and  Is_approved = 0  
	End
Else if (@MenuItemId=195)
		Begin
			update FA_Opr_Voucher
        set Approve_By=(case a.is_approved_now  when 1 then @UserId else null end),
            Approve_On=(case a.is_approved_now When 0 then getdate() else null end)
--		set Approve_By=@UserId,  
--			Approve_On=Getdate()  
		from   
		 (SELECT id,is_approved_now 
		 from openXml(@idoc,'/newdataset/table',2)  
		 With(id int,is_approved_now bit))as a
		   where FA_Opr_Voucher.Voucher_Id= a.id  
          End
		  

  
  
EXEC sp_xml_removedocument @idoc  
  
END  
COMMIT TRAN  
END TRY  
BEGIN CATCH  
ROLLBACK TRAN  
END CATCH  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: Oct 23 2008  4:42PM
-- Description:	<Voucher_SearchLedger>
-- =============================================
CREATE Proc [dbo].[EC_FA_Mst_Voucher_SearchBills]
@SearchFor varchar(10),
@Ledger_Id int,
@Voucher_Id int,
@Hierarchy_Code varchar(10),
@Main_Id int,
@Division_Id int
as 
BEGIN

--select top 20 Bill_No as Ref_No,Bill_No as Ref_No1 From dbo.FA_Bill_wise_Details
--where 
--FA_Bill_wise_Details.Hierarchy_Code = @Hierarchy_Code
--and FA_Bill_wise_Details.Main_Id = @Main_Id
--and FA_Bill_wise_Details.Division_Id = @Division_Id
--And Bill_No like @SearchFor    



select Ref_No
from FA_Bill_Wise_Details
where Ledger_id=@Ledger_Id       
--and Ref_No like @SearchFor      
and Ref_No not in       
(      
select Ref_No      
from FA_Bill_Wise_Details      
where Ledger_id=@Ledger_id       
--and ref_no like @SearchFor      
and Voucher_id=@Voucher_Id      
)  
and FA_Bill_wise_Details.Hierarchy_Code = @Hierarchy_Code
and FA_Bill_wise_Details.Main_Id = @Main_Id
and FA_Bill_wise_Details.Division_Id = @Division_Id
--And Ref_Type_Id=1
group by Ref_No,Ledger_Id,Hierarchy_Code,Main_Id,Division_Id
having sum(Amount)<>0   


  
END 








----244--------------------------------------------------------------------------------








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: Oct 23 2008  4:42PM
-- Description:	<Voucher_SearchLedger>
-- =============================================
--select * from fa_Master_ledger_group
--Exec EC_FA_Mst_Voucher_SearchLedger 'Tds%','Receipt','Dr',1
CREATE Proc [dbo].[EC_FA_Mst_Voucher_SearchLedger]
@SearchFor varchar(50),
@VoucherType varchar(50),
@CrDr Varchar(10),
@Division_ID int
as 
select top 50
FA_Master_Ledger.Ledger_Name, FA_Master_Ledger.Ledger_Id
From dbo.FA_Master_Ledger
INNER JOIN dbo.FA_Master_Ledger_Division
ON FA_Master_Ledger.Ledger_Id = FA_Master_Ledger_Division.Ledger_Id
where 
(
	(@VoucherType='Payment'and (@CrDr='Cr' and Ledger_Group_Id in (19,20) or @CrDr='Dr' and Ledger_Group_Id Not In (19,20)))
	OR
	(@VoucherType='Receipt'and (@CrDr='Dr' and Ledger_Group_Id not in (0) or @CrDr='Cr' and Ledger_Group_Id Not In (19,20)))
	OR
	(@VoucherType='Contra'and Ledger_Group_Id in (19,20))
	OR
	(@VoucherType='Journal'and Ledger_Group_Id Not in (19,20))
	OR
	(@VoucherType='CreditNote' and (@CrDr='Cr' and Ledger_Group_Id  In (24,27) or @CrDr='Dr' and Ledger_Group_Id In (6,9,13)))
	OR
	(@VoucherType='DebitNote' and (@CrDr='Dr' and Ledger_Group_Id in (24,27) or @CrDr='Cr' and Ledger_Group_Id In (6,9,13)))
    OR
	(@VoucherType='IBTCreditNote' and (@CrDr='Cr' and Ledger_Group_Id in (2) or @CrDr='Dr' and Ledger_Group_Id Not In (2)))
	OR
	(@VoucherType='IBTDebitNote' and (@CrDr='Dr' and Ledger_Group_Id in (2) or @CrDr='Cr' and Ledger_Group_Id Not In (2)))

)
AND
Ledger_Name Like @SearchFor
AND dbo.FA_Master_Ledger_Division.Division_ID = @Division_ID



--SElect * from FA_Master_Ledger 
--where Ledger_Group_Id in (2)









----245--------------------------------------------------------------------------------








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 04 Oct 2008 >
-- Description:	<FillOnBillChanged>
-- =============================================
CREATE Proc [dbo].[EC_FA_Mst_VoucherBillByBill_FillOnBillChanged]
(
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@Ledger_Id int,
@Ref_No varchar(50)
)
As
Declare @Amount Numeric(18,2)

select @Amount=ISNull(Sum(Amount),0) from FA_Bill_Wise_Details 
where Hierarchy_Code=@Hierarchy_Code 
And Main_Id=@Main_Id and Division_Id=@Division_Id and Ledger_Id=@Ledger_Id
and Ref_No=@Ref_No

select Bill_Date,Credit_Days,@Amount as Amount from FA_Bill_Wise_Details 
where Hierarchy_Code=@Hierarchy_Code 
And Main_Id=@Main_Id and Division_Id=@Division_Id and Ledger_Id=@Ledger_Id
and Ref_No=@Ref_No and Ref_Type_Id=1 




----246--------------------------------------------------------------------------------





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO












-- =============================================  
-- Author:  <Parikshit Chawda>  
-- Modify:  Ankit champaneriya  11-2-09  Added  Division_ID 
-- Create date: <10/Oct/2008>  
-- Description: < Fill Common Grid Operations Menu Items for ECARGO >  
-- =============================================    
--     exec [EC_Opr_Fill_details_In_Grid] 158,'TAS.TAS_No_For_Print',
--'',0,'BO',1,8,'21 jan 09','21 jan 09'

CREATE PROC [dbo].[EC_Opr_Fill_details_In_Grid]     
(     
@MenuItemId as int,     
@ColName as varchar(100),     
@SearchText as varchar(50),     
@IsPageLoad as bit ,   
@HierarchyCode as varchar(2),     
@MainId as int,     
@YearCode as int,     
@FromDate datetime,     
@ToDate datetime,
@Division_ID int     
)  
as    

set nocount on

declare @HasParameter bit  
set @HasParameter = 0  
  
declare @xml as varchar(8000)     
declare @SqlQuery as nvarchar(max)     
  
declare @Interval as int     
declare @Selected_Interval as numeric(18,2)     
   
--if @IsPageLoad=0     
-- Begin     
--     
--  select @Interval=Days_Interval from dbo.COM_Adm_Date_Interval     
--  where Menu_Item_Id=@MenuItemId     
--  if @Interval is NULL Set @Interval=31
--     
--  set @Selected_Interval=Datediff(d,@FromDate,@ToDate)     
--  set @Selected_Interval=@Selected_Interval+1     
--     
--  if @Selected_Interval>@Interval     
--   Begin     
--  select 'Cannot Exceed Date Interval By More Than ' + cast(@Interval as varchar(50)) + ' Day(s)'     
--  GOTO EXITPROC     
--   End     
-- End--if @IsPageLoad=0     
  
 set @FromDate = cast(dbo.dateonly(@FromDate) as datetime)  
 set @ToDate = cast(dbo.dateonly(@ToDate) as datetime)  
     
  
declare @GC_Caption varchar(50)  
declare @LHPO_Caption varchar(50)  
declare @AUS_Caption varchar(50)  
  
select @GC_Caption = GC_Caption,@LHPO_Caption = LHPO_Caption,@AUS_Caption= AUS_Caption from  
dbo.EC_Master_Company_Parameters  
  
--if @Search_Text=''     
-- begin     
--  select @Search_Text='Ö'     
-- end     
     
--****************************** Series Generation *******************************************  
  
if @MenuItemId=46     
 begin     
     
 if @IsPageLoad=1     
  begin     
     
   select @xml='     
   <root>     
   <row>     
   <id>EC_Opr_Document_Series_Generation.Series_Generation_ID</id>     
   <name>Series_Generation_ID</name>     
   </row>     
     
   <row>     
   <id>EC_Master_Document.Document_Name</id>     
   <name>Document Type</name>     
   </row>     
     
   <row>     
   <id>EC_Opr_Document_Series_Generation.Generation_Date</id>     
   <name>Generated Date</name>     
   </row>     
     
   <row>     
   <id>EC_Opr_Document_Series_Generation.Start_No</id>     
   <name>Start No</name>     
   </row>     
       
   <row>     
   <id>EC_Opr_Document_Series_Generation.End_No</id>     
   <name>End No</name>     
   </row>     
    
   <row>     
   <id>EC_Opr_Document_Series_Generation.Balance</id>     
   <name>Balance</name>     
   </row>  
   
   </root>'  
       
  end     
 else--if @Is_Page_Load=1     
  begin     
 select @SqlQuery='select EC_Opr_Document_Series_Generation.Series_Generation_ID as Col1,   
 EC_Master_Document.Document_Name as Col2,   
 dbo.DateOnlyDisplay(EC_Opr_Document_Series_Generation.Generation_Date) as Col3,   
 EC_Opr_Document_Series_Generation.Start_No as Col4,  
 EC_Opr_Document_Series_Generation.End_No as Col5,   
 EC_Opr_Document_Series_Generation.Balance as Col6,  
 '''' as Col7,     
 '''' as Col8,'''' as Col9,'''' as Col10   
 ,case Balance when 0 then 0 else 1 end as Can_Edit_Cancel 
 from EC_Opr_Document_Series_Generation   
 Inner Join EC_Master_Document   
 on EC_Opr_Document_Series_Generation.Document_Id=EC_Master_Document.Document_Id   
 where  ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            
     
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=46     
    
--****************************** PRINTING STATIONARY *******************************************  
  
if @MenuItemId=48     
 begin     
  
 if @IsPageLoad=1     
  begin     
        
   select @xml='     
   <root>     
   <row>     
   <id>Printing.Series_Printing_ID</id>     
   <name>Series_Printing_ID</name>     
   </row>     
     
   <row>     
   <id>Doc.Document_Name</id>     
   <name>Document Type</name>     
   </row>     
     
   <row>     
   <id>Printing.Date_Of_Printing</id>     
<name>Date Of Printing</name>     
   </row>     
     
   <row>     
   <id>Printing.Start_No</id>     
   <name>Start No</name>     
   </row>     
       
   <row>     
   <id>Printing.End_No</id>     
   <name>End No</name>     
   </row>     
     
   <row>     
   <id>Printing.Balance</id>     
   <name>Balance</name>     
   </row>  
   
   </root>'  
     
  end     
 else--if @Is_Page_Load=1     
  begin   
 select @SqlQuery='select Printing.Series_Printing_ID as Col1,    
 Doc.Document_Name as Col2,  
 dbo.DateOnlyDisplay(Printing.Date_Of_Printing) as Col3,    
 Printing.Start_No as Col4,Printing.End_No as Col5,Printing.Balance as Col6,    
 '''' as Col7,'''' as Col8,'''' as Col9,'''' as Col10  
 ,case Balance when 0 then 0 else 1 end as Can_Edit_Cancel 
 from EC_Opr_Document_Series_Printing as Printing    
 Inner Join EC_Master_Document as Doc    
 On  Printing.Document_Id=Doc.Document_Id    
 where  ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            
     
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=48     
     
--****************************** Doc_Allo STATIONARY *******************************************  
  
if @MenuItemId=50     
 begin     
  
 if @IsPageLoad=1     
  begin  
        
   select @xml='     
   <root>     
   <row>     
   <id>Doc_Allo.Document_Series_Allocation_ID</id>     
   <name>Document_Series_Allocation_ID</name>     
   </row>     
     
   <row>     
   <id>Doc.Document_Name</id>     
   <name>Document Type</name>     
   </row>    
   
   <row>     
   <id>Location_Name</id>     
   <name>Location Name</name>     
   </row>     
     
   <row>     
   <id>Doc_Allo.Date_Of_Allocation</id>     
   <name>Date Of Allocation</name>     
   </row>     
     
   <row>     
   <id>Doc_Allo.Start_No</id>     
   <name>Start No</name>     
   </row>     
    
   <row>     
   <id>Doc_Allo.End_No</id>     
   <name>End No</name>     
   </row>     
   
   <row>     
   <id>Doc_Allo.Balance</id>     
   <name>Balance</name>     
   </row>  
   
   </root>'  
     
  end     
 else--if @Is_Page_Load=1     
  begin  	--case Doc_Allo.va_id when 0 then  Branch.Branch_Name  else assobranch.Branch_Name end as Col3,  

 select @SqlQuery='select Doc_Allo.Document_Series_Allocation_ID as Col1,    
	Doc.Document_Name as Col2,  
	(case 
	   when Doc_Allo.Branch_ID = 0 and Doc_Allo.Area_ID = 0 and Doc_Allo.Region_ID <> 0 then upper(EC_Master_Region.Region_Name) +'' REGION''
       when Doc_Allo.Region_Id = 0 and Doc_Allo.Area_ID = 0 and Doc_Allo.Branch_ID <> 0 and Doc_Allo.va_id = 0 then upper(Branch.Branch_Name) +'' BRANCH''
       when Doc_Allo.Region_Id = 0 and Doc_Allo.Area_ID = 0 and Doc_Allo.Branch_ID = 0 and Doc_Allo.va_id <> 0 then upper(assobranch.Branch_Name) +'' BRANCH''
       when Doc_Allo.Region_Id = 0 and Doc_Allo.Branch_ID = 0 and Doc_Allo.Area_ID <> 0 then upper(EC_Master_area.Area_Name) +'' AREA''
       when Doc_Allo.Is_HO = 1 and Doc_Allo.Region_ID = 0 and Doc_Allo.Area_ID = 0 and Doc_Allo.Branch_ID = 0 then ''HEAD OFFICE''
	end) as Col3,

	dbo.DateOnlyDisplay(Doc_Allo.Date_Of_Allocation) as Col4,    
	Doc_Allo.Start_No as Col5,Doc_Allo.End_No as Col6,Doc_Allo.Balance as Col7,    
	'''' as Col8,'''' as Col9,'''' as Col10   
	,case Balance when 0 then 0 else 1 end as Can_Edit_Cancel 
	from EC_Opr_Document_Allocation as Doc_Allo    
	Inner Join EC_Master_Document as Doc    
	On  Doc_Allo.Document_Id=Doc.Document_Id  
	left outer Join Ec_Master_Branch as Branch    
	on Doc_Allo.Branch_Id=Branch.Branch_Id  
	left outer Join Ec_master_associates asso on
	Doc_Allo.va_id = asso.va_id
	left Join Ec_Master_Branch as assobranch    
	On  asso.branch_Id=assobranch.branch_Id  
	left outer Join	EC_Master_area
	on Doc_Allo.area_Id=EC_Master_area.area_Id
	left outer Join	EC_Master_region
	on Doc_Allo.region_Id=EC_Master_region.region_Id
	where Doc_Allo.Branch_Id = case when Doc_Allo.Document_ID in (1,2) then 0 else Doc_Allo.Branch_Id end 
	and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            
  
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=50     
  
--****************************** GC *******************************************  
set @HasParameter = 1  
  
if @MenuItemId = 30  or @MenuItemId = 188 or @MenuItemId = 213
 begin     
     
 if @IsPageLoad=1     
  begin        
     
   select @xml='     
   <root>     
   <row>     
   <id>GC.GC_Id</id>     
   <name>GC Id</name>     
   </row>  
     
   <row>     
   <id>GC.GC_No_For_Print</id>     
   <name>' + @GC_Caption + ' No</name>    
   </row>    
  
   <row>     
   <id>GC.GC_Date</id>     
   <name>' + @GC_Caption + ' Date</name>     
   </row>     
  
   <row>     
   <id>GC.Consignor_Name</id>     
   <name>Consignor Name</name>     
   </row>   
  
   <row>     
   <id>Bkg_Branch.Branch_Name</id>     
   <name>Bkg Branch</name>     
   </row>   
  
   <row>     
   <id>Dly_Branch.Branch_Name</id>     
   <name>Dly Branch</name>     
   </row>   
  
   <row>     
   <id>booking_type.booking_Type</id>     
   <name>Bkg Type</name>     
   </row>   
  
   <row>     
   <id>delivery_type.delivery_type</id>     
   <name>Dly Type</name>     
   </row>   
  
   <row>     
   <id>PaymentType.Payment_Type</id>     
   <name>Payment Type</name>     
   </row>   
  
   <row>     
   <id>GC.Total_GC_Amount</id>     
   <name>Total ' + @GC_Caption + ' Amt</name>     
   </row>    
   </root>'     
          
  end     
 else--if @Is_Page_Load=1     
  begin     
  
   select @SqlQuery='SELECT GC.GC_Id as Col1,  
 GC.GC_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(GC.GC_Date) as Col3,      
 GC.Consignor_Name as Col4,  
 Bkg_Branch.Branch_Name as Col5,  
 Dly_Branch.Branch_Name as Col6,  
 booking_type.booking_Type as Col7,  
 delivery_type.delivery_type as Col8,  
 
 PaymentType.Payment_Type as Col9,     
 GC.Total_GC_Amount as Col10,  
 Articles.status_id,  
 GC.Is_ReBooked,
 GC.Is_Attached, 
 dbo.Ec_Opr_Can_Edit_Cancel(''GC'',GC.GC_Id) as Can_Edit_Cancel  
 FROM  dbo.EC_Opr_VTrans_GC GC 
 inner join EC_Opr_VTrans_GC_Articles Articles on  
 GC.gc_id = Articles.gc_id  
--and ( Articles.status_id = 0 or Articles.status_id = 80 )   
--and Articles.articles =  Articles.actual_articles  
 inner join Ec_Master_Branch Bkg_Branch  
 on (GC.From_Branch_ID = Bkg_Branch.Branch_ID  ) 
 inner join Ec_Master_Area Bkg_Area  
 on Bkg_Branch.Area_ID = Bkg_Area.Area_ID  
 inner join Ec_Master_Region Bkg_Region  
 on Bkg_Branch.Region_ID = Bkg_Region.Region_ID  
  
 Left Outer join Ec_Master_Branch Dly_Branch  
 on GC.Delivery_Branch_ID = Dly_Branch.Branch_ID  
 Left Outer join ec_master_booking_type booking_type  
 on GC.Booking_Type_Id = booking_type.Booking_Type_Id  
 Left Outer join ec_master_delivery_type delivery_type  
 on GC.Delivery_Type_Id = delivery_type.Delivery_Type_Id  
 left Outer join EC_Master_Payment_Type PaymentType
 on GC.Payment_Type_Id=PaymentType.Payment_Type_Id
  
 where GC.is_cancelled = 0  
 and Is_Agency_Booking = 0
 and New_ReBook_GC_Id = 0
 and Articles.Status_Id in (0,80)
 and Is_Opening_Gc = 0
 and Division_ID = @Division_ID
 and Bkg_Branch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else Bkg_Branch.Region_Id end)  
 and Bkg_Branch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else Bkg_Branch.Area_Id end)  
 and Bkg_Branch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else Bkg_Branch.Branch_Id end)  
 and (cast(dbo.dateonly(GC.GC_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            


if (@MenuItemId = 188)
begin
	set @SqlQuery = @SqlQuery + 'and Is_DACC = 1'
end
else
begin
	set @SqlQuery = @SqlQuery + 'and Is_DACC = 0'
end

  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=30     
   
--****************************** Opening GC *******************************************  
  
if @MenuItemId = 200
 begin     
     
 if @IsPageLoad=1     
  begin        
     
   select @xml='     
   <root>     
   <row>     
   <id>GC.GC_Id</id>     
   <name>GC Id</name>     
   </row>  
     
   <row>     
   <id>GC.GC_No_For_Print</id>     
   <name>' + @GC_Caption + ' No</name>    
   </row>    
  
   <row>     
   <id>GC.GC_Date</id>     
   <name>' + @GC_Caption + ' Date</name>     
   </row>     
  
   <row>     
   <id>GC.Consignor_Name</id>     
   <name>Consignor Name</name>     
   </row>   
  
   <row>     
   <id>Bkg_Branch.Branch_Name</id>     
   <name>Bkg Branch</name>     
   </row>   
  
   <row>     
   <id>Dly_Branch.Branch_Name</id>     
   <name>Dly Branch</name>     
   </row>   
  
   <row>     
   <id>booking_type.booking_Type</id>     
   <name>Bkg Type</name>     
   </row>   
  
   <row>     
   <id>delivery_type.delivery_type</id>     
   <name>Dly Type</name>     
   </row>   
  
   <row>     
   <id>PaymentType.Payment_Type</id>     
   <name>Payment Type</name>     
   </row>   
  
   <row>     
   <id>GC.Total_GC_Amount</id>     
   <name>Total ' + @GC_Caption + ' Amt</name>     
   </row>    
   </root>'     
          
  end     
 else--if @Is_Page_Load=1     
  begin     
  
   select @SqlQuery='SELECT GC.GC_Id as Col1,  
 GC.GC_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(GC.GC_Date) as Col3,      
 GC.Consignor_Name as Col4,  
 Bkg_Branch.Branch_Name as Col5,  
 Dly_Branch.Branch_Name as Col6,  
 booking_type.booking_Type as Col7,  
 delivery_type.delivery_type as Col8,  
 
 PaymentType.Payment_Type as Col9,     
 GC.Total_GC_Amount as Col10,  
 Articles.status_id,  
 GC.Is_ReBooked,
 GC.Is_Attached, 
 dbo.Ec_Opr_Can_Edit_Cancel(''GC'',GC.GC_Id) as Can_Edit_Cancel  
 FROM  dbo.EC_Opr_VTrans_GC GC 
 inner join EC_Opr_VTrans_GC_Articles Articles on  
 GC.gc_id = Articles.gc_id and(Articles.status_id = 60) 
 inner join Ec_Master_Branch Bkg_Branch  
 on(GC.From_Branch_ID = Bkg_Branch.Branch_ID  ) 
 inner join Ec_Master_Area Bkg_Area  
 on Bkg_Branch.Area_ID = Bkg_Area.Area_ID  
 inner join Ec_Master_Region Bkg_Region  
 on Bkg_Branch.Region_ID = Bkg_Region.Region_ID  
  
 Left Outer join Ec_Master_Branch Dly_Branch  
 on GC.Delivery_Branch_ID = Dly_Branch.Branch_ID  
 Left Outer join ec_master_booking_type booking_type  
 on GC.Booking_Type_Id = booking_type.Booking_Type_Id  
 Left Outer join ec_master_delivery_type delivery_type  
 on GC.Delivery_Type_Id = delivery_type.Delivery_Type_Id  
 left Outer join EC_Master_Payment_Type PaymentType
 on GC.Payment_Type_Id=PaymentType.Payment_Type_Id
 inner join Ec_Master_Branch Current_Branch  
 on(Articles.Current_Branch_ID = Current_Branch.Branch_ID) 

 where GC.is_cancelled = 0  
 and Is_Agency_Booking = 0  
 and Is_Opening_Gc = 1
 and Is_DACC = 0
 and New_ReBook_GC_Id = 0
 and Division_ID = @Division_ID
 and Current_Branch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else Current_Branch.Region_Id end)  
 and Current_Branch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else Current_Branch.Area_Id end)  
 and Current_Branch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else Current_Branch.Branch_Id end)  
 and (cast(dbo.dateonly(GC.GC_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=200     
     
  
--******************************Other Agency GC *******************************************  
  
if @MenuItemId = 229
 begin     
     
 if @IsPageLoad=1     
  begin        
     
   select @xml='     
   <root>     
   <row>     
   <id>GC.GC_Id</id>     
   <name>GC Id</name>     
   </row>  
     
   <row>     
   <id>GC.GC_No_For_Print</id>     
   <name>' + @GC_Caption + ' No</name>    
   </row>    
  
   <row>     
   <id>GC.GC_Date</id>     
   <name>' + @GC_Caption + ' Date</name>     
   </row>     
  
   <row>     
   <id>GC.Consignor_Name</id>     
   <name>Consignor Name</name>     
   </row>   
  
   <row>     
   <id>Bkg_Branch.Branch_Name</id>     
   <name>Bkg Branch</name>
   </row>
  
   <row>     
   <id>Dly_Branch.Branch_Name</id>     
   <name>Dly Branch</name>     
   </row>   
  
   <row>     
   <id>booking_type.booking_Type</id>     
   <name>Bkg Type</name>     
   </row>   
  
   <row>     
   <id>Agency_Branch.Branch_Name</id>     
   <name>Agency Name</name>     
   </row>   
  
   <row>     
   <id>PaymentType.Payment_Type</id>     
   <name>Payment Type</name>     
   </row>   
  
   <row>     
   <id>GC.Total_GC_Amount</id>     
   <name>Total ' + @GC_Caption + ' Amt</name>     
   </row>    
   </root>'     
          
  end     
 else--if @Is_Page_Load=1     
  begin     
  
   select @SqlQuery='SELECT GC.GC_Id as Col1,  
 GC.GC_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(GC.GC_Date) as Col3,      
 GC.Consignor_Name as Col4,  
 Bkg_Branch.Branch_Name as Col5,  
 Dly_Branch.Branch_Name as Col6,  
 booking_type.booking_Type as Col7,  
 Agency_Branch.Branch_Name as Col8,  
 
 PaymentType.Payment_Type as Col9,     
 GC.Total_GC_Amount as Col10,  
 Articles.status_id,  
 GC.Is_ReBooked,
 GC.Is_Attached, 
 dbo.Ec_Opr_Can_Edit_Cancel(''GC'',GC.GC_Id) as Can_Edit_Cancel  
 FROM  dbo.EC_Opr_VTrans_GC GC 
 inner join EC_Opr_VTrans_GC_Articles Articles on  
 GC.gc_id = Articles.gc_id  
 inner join Ec_Master_Branch Bkg_Branch  
 on (GC.From_Branch_ID = Bkg_Branch.Branch_ID  ) 
 inner join Ec_Master_Area Bkg_Area  
 on Bkg_Branch.Area_ID = Bkg_Area.Area_ID  
 inner join Ec_Master_Region Bkg_Region  
 on Bkg_Branch.Region_ID = Bkg_Region.Region_ID  
 inner join Ec_Master_Branch Agency_Branch  
 on GC.Agency_Branch_ID = Agency_Branch.Branch_ID  
-- and Agency_Branch.Agency_Ledger_ID  > 0

 Left Outer join Ec_Master_Branch Dly_Branch  
 on GC.Delivery_Branch_ID = Dly_Branch.Branch_ID  
 Left Outer join ec_master_booking_type booking_type  
 on GC.Booking_Type_Id = booking_type.Booking_Type_Id  
-- Left Outer join ec_master_delivery_type delivery_type  
-- on GC.Delivery_Type_Id = delivery_type.Delivery_Type_Id  
 left Outer join EC_Master_Payment_Type PaymentType
 on GC.Payment_Type_Id=PaymentType.Payment_Type_Id
  
 where GC.is_cancelled = 0  
 and Is_Agency_Booking = 1
 and Articles.Status_Id = 9999
 and New_ReBook_GC_Id = 0
 and Is_DACC = 0
 and Is_Opening_Gc = 0
 and Division_ID = @Division_ID
 and Bkg_Branch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else Bkg_Branch.Region_Id end)  
 and Bkg_Branch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else Bkg_Branch.Area_Id end)  
 and Bkg_Branch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else Bkg_Branch.Branch_Id end)  
 and (cast(dbo.dateonly(GC.GC_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=30     
   

--****************************** Account Transfer *******************************************  
  
if @MenuItemId=38     
 begin     
     
 if @IsPageLoad=1     
  begin     
     
select @xml='  
<root>  
 <row>  
 <id>PS.Pickup_Sheet_Id</id>  
 <name>Pickup Sheet Id</name>  
 </row>  
  
 <row>  
 <id>PS.Pickup_Sheet_No_For_Print</id>  
 <name>AT No</name>  
 </row>  
  
 <row>  
 <id>PS.Pickup_Sheet_Date</id>  
 <name>AT Date</name>  
 </row>  
  
 <row>  
 <id>Bkg_Branch.Branch_Name</id>  
 <name>AT Branch</name>  
 </row>  
  
 <row>  
 <id>PS.Total_GC</id>  
 <name>Tot ' + @GC_Caption + '</name>  
 </row>  
  
 <row>  
 <id>PS.Total_Articles</id>  
 <name>Tot Articles</name>  
 </row>  
  
 <row>  
 <id>PS.Total_Basic_Freight</id>  
 <name>Tot Basic Freight</name>  
 </row>  
  
 <row>  
 <id>PS.Total_GC_Amount</id>  
 <name>Tot ' + @GC_Caption + ' Amt</name>  
 </row>  
</root>'  
          
  end     
 else--if @Is_Page_Load=1     
  begin     
  -- @Division_ID added Ankit : 11-02-09 : 6.00 pm
   select @SqlQuery='SELECT PS.Pickup_Sheet_Id as Col1,  
 PS.Pickup_Sheet_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(PS.Pickup_Sheet_Date) as Col3,  
 Bkg_Branch.Branch_Name as Col4,  
 PS.Total_GC as Col5,  
 PS.Total_Articles as Col6,  
 PS.Total_Basic_Freight as Col7,  
 PS.Total_GC_Amount as Col8,  
 '''' as Col9,'''' as Col10  
 ,dbo.Ec_Opr_Can_Edit_Cancel(''AT'',PS.Pickup_Sheet_Id) as Can_Edit_Cancel  
 FROM  dbo.EC_Opr_VTrans_Pickup_Sheet PS  
 inner join Ec_Master_Branch Bkg_Branch  
 on PS.Pickup_Sheet_Branch_Id = Bkg_Branch.Branch_ID  
 inner join Ec_Master_Area Bkg_Area  
 on Bkg_Branch.Area_ID = Bkg_Area.Area_ID  
 inner join Ec_Master_Region Bkg_Region  
 on Bkg_Branch.Region_ID = Bkg_Region.Region_ID  
 where is_cancelled = 0  
 and PS.Division_ID = @Division_ID  
 and Bkg_Branch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else Bkg_Branch.Region_Id end)  
 and Bkg_Branch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else Bkg_Branch.Area_Id end)  
 and Bkg_Branch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else Bkg_Branch.Branch_Id end)  
 and (cast(dbo.dateonly(PS.Pickup_Sheet_Date) as datetime) between @Fromdate and @Todate)   
and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            
  
  end --if @Is_Page_Load=1  
  
end  --if @Menu_Item_Id=38  
  
--****************************** ALS *******************************************  
  
if @MenuItemId=154  
 begin  
   
 if @IsPageLoad=1  
  begin  
 select @xml='  
 <root>  
 <row>  
 <id>ALS.ALS_Id</id>  
 <name>ALS Id</name>  
 </row>  
  
 <row>  
 <id>ALS.ALs_No_For_Print</id>  
 <name>ALS No</name>  
 </row>    
  
 <row>  
 <id>ALS.ALS_Date</id>  
 <name>ALS Date</name>  
 </row>  
  
 <row>  
 <id>ALSBranch.Branch_Name</id>  
 <name>ALS Branch</name>  
 </row>  
  
 <row>  
 <id>VCat.Vehicle_Category</id>  
 <name>Vehicle Category</name>  
 </row>  
  
 <row>  
 <id>Vehicle.Vehicle_No</id>  
 <name>Vehicle No</name>  
 </row>  
  
 <row>  
 <id>ALS.Total_No_Of_GC</id>  
 <name>Tot ' + @GC_Caption + '</name>  
 </row>  
  
 <row>  
 <id>ALS.Total_Loaded_Articles</id>  
 <name>Tot Lod Art</name>  
 </row>  
  
 <row>  
 <id>ALS.Total_Loaded_Weight</id>  
 <name>Tot Lod Wt</name>  
 </row>   
 </root>'    
     
  end     
 else--if @Is_Page_Load=1     
  begin     
  -- @Division_ID added by Ankit : 11-02-09 : 6.00 pm
   select @SqlQuery='select ALS.ALS_Id as Col1,    
 ALS.ALs_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(ALS.ALS_Date) as Col3,    
 ALSBranch.Branch_Name as Col4,  
 VCat.Vehicle_Category as Col5,  
 Vehicle.Vehicle_No as Col6,  
 ALS.Total_No_Of_GC as Col7,  
 ALS.Total_Loaded_Articles as Col8,  
 ALS.Total_Loaded_Weight as Col9,  
 '''' as Col10   
 ,dbo.Ec_Opr_Can_Edit_Cancel(''ALS'',ALS.ALS_Id) as Can_Edit_Cancel  
 from EC_Opr_VTrans_ALS ALS    
 Inner Join Ec_Master_Branch ALSBranch    
 on ALSBranch.Branch_Id=ALS.ALS_Branch_Id   
 inner join Ec_Master_Area ALSArea  
 on ALSBranch.Area_ID = ALSArea.Area_ID  
 inner join Ec_Master_Region ALSRegion  
 on ALSBranch.Region_ID = ALSRegion.Region_ID  
  
 left outer join EF_Master_Vehicle_Category VCat  
 on VCat.Vehicle_Category_ID=ALS.Vehicle_Category_ID   
 inner join EF_Master_Vehicle Vehicle  
 on ALS.Vehicle_ID = Vehicle.Vehicle_ID  
  
 where is_cancelled = 0  
 and ALS.Division_ID = @Division_ID
 and ALSBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else ALSBranch.Region_Id end)  
 and ALSBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else ALSBranch.Area_Id end)  
 and ALSBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else ALSBranch.Branch_Id end)  
 and (cast(dbo.dateonly(ALS.ALS_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1     
end  --if @Menu_Item_Id=154   
     

--****************************** Menifest *******************************************  
  
if @MenuItemId=51  
 begin  
   
 if @IsPageLoad=1  
  begin  
 select @xml='  
 <root>  
 <row>  
 <id>Memo.Memo_Id</id>  
 <name>Manifest Id</name>  
 </row>  
  
 <row>  
 <id>Memo.Memo_No_For_Print</id>  
 <name>Manifest No</name>  
 </row>    
  
 <row>  
 <id>Memo.Memo_Date</id>  
 <name>Manifest Date</name>  
 </row>  
  
 <row>  
 <id>MemoBranch.Branch_Name</id>  
 <name>Manifest Branch</name>  
 </row>  
  
 <row>  
 <id>MemoToBranch.Branch_Name</id>  
 <name>Manifest To</name>  
 </row>  
  
 <row>  
 <id>mtype.Memo_Type</id>  
 <name>Manifest Type</name>  
 </row> 

 <row>  
 <id>Vehicle.Vehicle_No</id>  
 <name>Vehicle No</name>  
 </row>  
  
 <row>  
 <id>Memo.Total_No_Of_GC</id>  
 <name>Tot ' + @GC_Caption + '</name>  
 </row>  
  
 <row>  
 <id>Memo.Total_Loaded_Articles</id>  
 <name>Tot Loaded Articles</name>  
 </row>  
  
 <row>  
 <id>Memo.Total_Loaded_Weight</id>  
 <name>Tot Loaded Weight</name>  
 </row>   
 </root>'    
     
  end     
 else--if @Is_Page_Load=1     
  begin     
  -- @Division_ID added Ankit : 11-02-09 : 6.10 pm
   select @SqlQuery='select Memo.Memo_Id as Col1,    
 Memo.Memo_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(Memo.Memo_Date) as Col3,    
 MemoBranch.Branch_Name as Col4,  
 case Memo.To_Branch_Id when 0 then To_Name else MemoToBranch.Branch_Name end as Col5,  
 mtype.Memo_Type as Col6,  
 Vehicle.Vehicle_No as Col7, 
 Memo.Total_No_Of_GC as Col8,  
 Memo.Total_Loaded_Articles as Col9,  
 Memo.Total_Loaded_Weight as Col10
 ,dbo.Ec_Opr_Can_Edit_Cancel(''Memo'',Memo.Memo_Id) as Can_Edit_Cancel  
 from EC_Opr_VTrans_Memo Memo    
 Inner Join Ec_Master_Branch MemoBranch    
 on MemoBranch.Branch_Id=Memo.Memo_Branch_Id   
 inner join Ec_Master_Area MemoArea  
 on MemoBranch.Area_ID = MemoArea.Area_ID  
 inner join Ec_Master_Region MemoRegion  
 on MemoBranch.Region_ID = MemoRegion.Region_ID  
  
 left outer join Ec_Master_Branch MemoToBranch  
 on MemoToBranch.Branch_Id=Memo.To_Branch_Id   
 inner join EF_Master_Vehicle Vehicle  
 on Memo.Vehicle_ID = Vehicle.Vehicle_ID  
 inner join ec_master_memo_type mtype  
 on Memo.Memo_Type_Id = mtype.Memo_Type_Id  

 where is_cancelled = 0  
 and Memo.Division_ID = @Division_ID
 and MemoBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else MemoBranch.Region_Id end)  
 and MemoBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else MemoBranch.Area_Id end)  
 and MemoBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else MemoBranch.Branch_Id end)  
 and (cast(dbo.dateonly(Memo.Memo_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1     
end  --if @Menu_Item_Id=51    
     
--****************************** LHPO*******************************************  
  
if @MenuItemId=73  or @MenuItemId=198    
 begin     
  
 if @IsPageLoad=1     
  begin     
        
 select @xml='  
 <root>  
 <row>  
 <id>LHPO.LHPO_ID</id>  
 <name>LHPO_ID</name>  
 </row>  
  
 <row>  
 <id>LHPO.LHPO_No_For_Print</id>  
 <name>' + @LHPO_Caption + ' No</name>  
 </row>    
  
 <row>  
 <id>LHPO.LHPO_Date</id>  
 <name>' + @LHPO_Caption + 'Date</name>  
 </row>  
  
 <row>  
 <id>LHPOBranch.Branch_Name</id>  
 <name>Branch Name</name>  
 </row>

 <row>  
 <id>FromServiceLocation.Service_Location_Name</id>  
 <name>From Branch</name>  
 </row>  

 <row>  
 <id>ServiceLocation.Service_Location_Name</id>  
 <name>To Branch</name>  
 </row>   
  
 <row>  
 <id>LHPO_Type.LHPO_Type</id>  
 <name>' + @LHPO_Caption + ' Type</name>  
 </row>  
  
 <row>  
 <id>Vehicle.Vehicle_No</id>  
 <name>Vehicle No</name>  
 </row>  
  
 <row>  
 <id>LHPO.Total_No_Of_Memo</id>  
 <name>Tot Manifest</name>  
 </row>  
  
 <row>  
 <id>LHPO.Total_No_Of_GCs</id>  
 <name>Tot '+ @GC_Caption + '</name>  
 </row>    

 </root>'    
       
  end     
 else--if @Is_Page_Load=1     
  begin     
  
   select @SqlQuery='select LHPO.LHPO_ID as Col1,  
 LHPO.LHPO_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(LHPO.LHPO_Date) as Col3,  
 LHPOBranch.Branch_Name as Col4,
 FromServiceLocation.Service_Location_Name as Col5,  
 ServiceLocation.Service_Location_Name as Col6, 
 LHPO_Type.LHPO_Type as Col7,    
 Vehicle.Vehicle_No as Col8,  
 LHPO.Total_No_Of_Memo as Col9,  
 LHPO.Total_No_Of_GCs as Col10,  
  
 dbo.Ec_Opr_Can_Edit_Cancel(''LHPO'',LHPO.LHPO_ID) as Can_Edit_Cancel  
 from EC_Opr_VTrans_LHPO as LHPO    
 Inner Join EC_master_Lhpo_Type as LHPO_Type    
 On LHPO_Type.LHPO_Type_ID=LHPO.LHPO_Type_ID    
 Inner Join Ec_Master_Branch LHPOBranch    
 on LHPOBranch.Branch_Id=LHPO.LHPO_Branch_ID   
 inner join Ec_Master_Area LHPOArea  
 on LHPOBranch.Area_ID = LHPOArea.Area_ID  
 inner join Ec_Master_Region LHPORegion  
 on LHPOBranch.Region_ID = LHPORegion.Region_ID  
 inner join EF_Master_Vehicle Vehicle  
 on LHPO.Vehicle_ID = Vehicle.Vehicle_ID

 inner join Ec_Master_Service_location FromServiceLocation
 on LHPO.From_Location_ID=FromServiceLocation.Service_Location_Id
 inner join Ec_Master_Service_location ServiceLocation
 on LHPO.To_Location_ID=ServiceLocation.Service_Location_Id

 where is_cancelled = 0  
 and LHPO.Division_Id = @Division_ID
 and LHPOBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else LHPOBranch.Region_Id end)  
 and LHPOBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else LHPOBranch.Area_Id end)  
 and LHPOBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else LHPOBranch.Branch_Id end)  
 and (cast(dbo.dateonly(LHPO.LHPO_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

     
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=73     
--****************************** LHPO RECTIFICATION*******************************************  
  
if  @MenuItemId=198    
 begin     
  
 if @IsPageLoad=1     
  begin     
        
 select @xml='  
 <root>  
 <row>  
 <id>LHPO.LHPO_ID</id>  
 <name>LHPO_ID</name>  
 </row>  
  
 <row>  
 <id>LHPO.LHPO_No_For_Print</id>  
 <name>' + @LHPO_Caption + ' No</name>  
 </row>    
  
 <row>  
 <id>LHPO.LHPO_Date</id>  
 <name>' + @LHPO_Caption + 'Date</name>  
 </row>  
  
 <row>  
 <id>LHPOBranch.Branch_Name</id>  
 <name>Branch Name</name>  
 </row>

 <row>  
 <id>LHPOToLocation.Branch_Name</id>  
 <name>To Branch</name>  
 </row>     
  
 <row>  
 <id>LHPO_Type.LHPO_Type</id>  
 <name>' + @LHPO_Caption + ' Type</name>  
 </row>  
  
 <row>  
 <id>Vehicle.Vehicle_No</id>  
 <name>Vehicle No</name>  
 </row>  
  
 <row>  
 <id>LHPO.Total_No_Of_Memo</id>  
 <name>Tot Manifest</name>  
 </row>  
  
 <row>  
 <id>LHPO.Total_No_Of_GCs</id>  
 <name>Tot '+ @GC_Caption + '</name>  
 </row>  
  
 <row>  
 <id>LHPO.Total_Articles</id>  
 <name>Tot Articles</name>  
 </row>  
 </root>'    
       
  end     
 else--if @Is_Page_Load=1     
  begin     
  
   select @SqlQuery='select LHPO.LHPO_ID as Col1,  
 LHPO.LHPO_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(LHPO.LHPO_Date) as Col3,  
 LHPOBranch.Branch_Name as Col4, 
 LHPOToLocation.Branch_Name as Col5, 
 LHPO_Type.LHPO_Type as Col6,    
 Vehicle.Vehicle_No as Col7,  
 LHPO.Total_No_Of_Memo as Col8,  
 LHPO.Total_No_Of_GCs as Col9,  
 LHPO.Total_Articles as Col10,  
  
 1 as Can_Edit_Cancel  
 from EC_Opr_VTrans_LHPO as LHPO    
 Inner Join EC_master_Lhpo_Type as LHPO_Type    
 On LHPO_Type.LHPO_Type_ID=LHPO.LHPO_Type_ID    
 Inner Join Ec_Master_Branch LHPOBranch    
 on LHPOBranch.Branch_Id=LHPO.LHPO_Branch_ID   
 inner join Ec_Master_Area LHPOArea  
 on LHPOBranch.Area_ID = LHPOArea.Area_ID  
 inner join Ec_Master_Region LHPORegion  
 on LHPOBranch.Region_ID = LHPORegion.Region_ID  
 inner join EF_Master_Vehicle Vehicle  
 on LHPO.Vehicle_ID = Vehicle.Vehicle_ID
 inner join Ec_Master_Service_location ServiceLocation
 on LHPO.To_Location_ID=ServiceLocation.Service_Location_Id
 inner join EC_Master_Branch LHPOToLocation
 on LHPOToLocation.Branch_Id=ServiceLocation.Branch_Id
 where is_cancelled = 0  
 and LHPO.Division_Id = @Division_ID
 and LHPOBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else LHPOBranch.Region_Id end)  
 and LHPOBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else LHPOBranch.Area_Id end)  
 and LHPOBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else LHPOBranch.Branch_Id end)  
 and (cast(dbo.dateonly(LHPO.LHPO_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

     
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=198  
     
     
--****************************** Acutal Unloading Sheet *******************************************  
  
if @MenuItemId=72   
 begin     
  
 if @IsPageLoad=1     
  begin     
 select @xml='  
 <root>  
 <row>  
 <id>AUS.Actual_Unloading_Sheet_ID</id>  
 <name>Actual_Unloading_Sheet_ID</name>  
 </row>  
  
 <row>  
 <id>AUS.Actual_Unloading_Sheet_No_For_Print</id>  
 <name>' + @AUS_Caption + ' No</name>  
 </row>    
  
 <row>  
 <id>AUS.Actual_Unloading_Sheet_Date</id>  
 <name>' + @AUS_Caption + ' Date</name>  
 </row>  
  
 <row>  
 <id>AUSBranch.Branch_Name</id>  
 <name>' + @AUS_Caption + ' Branch</name>  
 </row>  
  
 <row>  
 <id>Vehicle.Vehicle_No</id>  
 <name>Vehicle No</name>  
 </row>  
  
 <row>  
 <id>AUS.Total_Actual_GCs</id>  
 <name>Tot '+ @GC_Caption + '</name>  
 </row>  
  
 <row>  
 <id>AUS.Total_Received_Weight</id>  
 <name>Tot Rec Wt</name>  
 </row>  
  
 <row>  
 <id>AUS.Total_Received_Articles</id>  
 <name>Tot Rec Art</name>  
 </row>  
  
 <row>  
 <id>AUS.Total_Short_Articles</id>  
 <name>Tot Short Art</name>  
 </row>  
  
 <row>  
 <id>AUS.Total_Excess_Articles</id>  
 <name>Tot Excess Art</name>  
 </row>  
 </root>'  
     
  end     
 else--if @Is_Page_Load=1     
  begin     
  
 select @SqlQuery='select AUS.Actual_Unloading_Sheet_ID as Col1,  
 AUS.Actual_Unloading_Sheet_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(AUS.Actual_Unloading_Sheet_Date) as Col3,  
 AUSBranch.Branch_Name as Col4,  
 Vehicle.Vehicle_No as Col5,  
 AUS.Total_Actual_GCs as Col6,  
 AUS.Total_Received_Weight as Col7,  
 AUS.Total_Received_Articles as Col8,  
 AUS.Total_Short_Articles as Col9,  
 AUS.Total_Excess_Articles as Col10  
 ,dbo.Ec_Opr_Can_Edit_Cancel(''AUS'',AUS.Actual_Unloading_Sheet_ID) as Can_Edit_Cancel  
 from EC_Opr_VTrans_Actual_Unloading_Sheet as AUS   
 Inner Join EC_Opr_Vtrans_Lhpo as LHPO     
 On LHPO.LHPO_ID=AUS.LHPO_ID   
 Inner Join EF_master_Vehicle as Vehicle     
 On Vehicle.Vehicle_ID=AUS.Vehicle_ID  
 Inner Join Ec_Master_Branch AUSBranch    
 on AUSBranch.Branch_Id=AUS.Un_Loading_Branch_ID   
 inner join Ec_Master_Area AUSArea  
 on AUSBranch.Area_ID = AUSArea.Area_ID  
 inner join Ec_Master_Region AUSRegion  
 on AUSBranch.Region_ID = AUSRegion.Region_ID  
 where AUS.is_cancelled = 0  
 and AUS.Is_Entry_By_Opening_GC = 0
 and AUS.Division_ID = @Division_ID
 and AUSBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else AUSBranch.Region_Id end)  
 and AUSBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else AUSBranch.Area_Id end)  
 and AUSBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else AUSBranch.Branch_Id end)  
 and (cast(dbo.dateonly(AUS.Actual_Unloading_Sheet_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=72    
  
--****************************** Godown Delivery Confirmation *******************************************  
  
if @MenuItemId=80     
 begin  
  
 if @IsPageLoad=1  
  begin  
 select @xml='  
 <root>  
 <row>  
 <id>GDC.DDC_ID</id>  
 <name>DDC_ID</name>  
 </row>  
  
 <row>  
 <id>GDC.DDC_No_For_Print</id>  
 <name>GDC No</name>  
 </row>    
  
 <row>  
 <id>GDC.DDC_Date</id>  
 <name>GDC Date</name>  
 </row>  
  
 <row>  
 <id>GDSBranch.Branch_Name</id>  
 <name>Branch</name>  
 </row>  
  
 <row>  
 <id>GDC.Total_No_Of_GC</id>  
 <name>Tot '+ @GC_Caption + '</name>  
 </row>   
  
 <row>  
 <id>GDC.Total_DDC_Articles</id>  
 <name>Tot Articles</name>  
 </row>    
  
 <row>  
 <id>GDC.Total_DDC_Actual_Wt</id>  
 <name>Tot Actual Wt</name>  
 </row>    
 </root>'  
     
  end     
 else--if @Is_Page_Load=1     
  begin-- DDC_Type_ID = 1 means Godown Delivery    
  
 select @SqlQuery='select GDC.DDC_ID as Col1,  
 GDC.DDC_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(GDC.DDC_Date) as Col3,  
 GDSBranch.Branch_Name as Col4,  
 GDC.Total_No_Of_GC as Col5,  
 GDC.Total_DDC_Articles as Col6,    
 GDC.Total_DDC_Actual_Wt as Col7,     
 '''' as Col8,'''' as Col9,'''' as Col10    
 ,dbo.Ec_Opr_Can_Edit_Cancel(''GDC'',GDC.DDC_ID) as Can_Edit_Cancel  
 from EC_Opr_VTrans_Door_Delivery_Confirmation as GDC  
 Inner Join Ec_Master_Branch GDSBranch    
 on GDSBranch.Branch_Id=GDC.DDC_Branch_ID   
 inner join Ec_Master_Area GDSArea  
 on GDSBranch.Area_ID = GDSArea.Area_ID  
 inner join Ec_Master_Region GDSRegion  
 on GDSBranch.Region_ID = GDSRegion.Region_ID  
 where GDC.is_cancelled = 0  
 and GDC.Division_ID = @Division_ID
 and DDC_Type_ID = 1  
 and GDSBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else GDSBranch.Region_Id end)  
 and GDSBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else GDSBranch.Area_Id end)  
 and GDSBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else GDSBranch.Branch_Id end)  
 and (cast(dbo.dateonly(GDC.DDC_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=80   
        
--****************************** Pre Door Delivery Sheet *******************************************  
  
if @MenuItemId=77  
 begin  
  
 if @IsPageLoad=1  
  begin  
        
 select @xml='  
 <root>  
 <row>  
 <id>PDS.PDS_ID</id>  
 <name>PDS_ID</name>  
 </row>  
  
 <row>  
 <id>PDS.PDS_No_For_Print</id>  
 <name>PDS No</name>  
 </row>    
  
 <row>  
 <id>PDS.PDS_Date</id>  
 <name>PDS Date</name>  
 </row>  
  
 <row>  
 <id>PDSBranch.Branch_Name</id>  
 <name>Branch</name>  
 </row>  
  
 <row>  
 <id>delivery_mode.delivery_mode</id>  
 <name>Delivery Mode</name>  
 </row>  
  
 <row>  
 <id>PDS.Total_PDS_GC</id>  
 <name>Tot '+ @GC_Caption + '</name>  
 </row>  
  
 <row>  
 <id>PDS.Total_PDS_Articles</id>  
 <name>Tot Art</name>  
 </row>  
  
 <row>  
 <id>PDS.Total_PDS_Actual_Wt</id>  
 <name>Tot Act Wt</name>  
 </row>  
 </root>'   
     
  end     
 else--if @Is_Page_Load=1     
  begin     
  
 select @SqlQuery='select PDS.PDS_ID as Col1,  
 PDS.PDS_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(PDS.PDS_Date) as Col3,    
 PDSBranch.Branch_Name as Col4,  
 delivery_mode.delivery_mode as Col5,  
 PDS.Total_PDS_GC as Col6,  
 PDS.Total_PDS_Articles as Col7,  
 PDS.Total_PDS_Actual_Wt as Col8,  
 '''' as Col9,'''' as Col10    
 ,dbo.Ec_Opr_Can_Edit_Cancel(''PDS'',PDS.PDS_ID) as Can_Edit_Cancel  
 from EC_Opr_VTrans_Pre_Delivery_Sheet as PDS  
 Inner Join Ec_Master_Branch PDSBranch    
 on PDSBranch.Branch_Id=PDS.PDS_Branch_ID   
 inner join Ec_Master_Area PDSArea  
 on PDSBranch.Area_ID = PDSArea.Area_ID  
 inner join Ec_Master_Region PDSRegion  
 on PDSBranch.Region_ID = PDSRegion.Region_ID  
 inner join ec_master_delivery_mode delivery_mode  
 on delivery_mode.Delivery_Mode_ID = PDS.Delivery_Mode_ID  
 where PDS.is_cancelled = 0  
 and PDS.Division_ID = @Division_ID
 and PDSBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else PDSBranch.Region_Id end)  
 and PDSBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else PDSBranch.Area_Id end)  
 and PDSBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else PDSBranch.Branch_Id end)  
 and (cast(dbo.dateonly(PDS.PDS_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

     
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=77    
  
--****************************** Door Delivery Confirmation *******************************************  
  
if @MenuItemId=82    
 begin  
  
 if @IsPageLoad=1  
  begin  
 select @xml='  
 <root>  
 <row>  
 <id>DDC.DDC_ID</id>  
 <name>DDC_ID</name>  
 </row>  
  
 <row>  
 <id>DDC.DDC_No_For_Print</id>  
 <name>DDC No</name>  
 </row>    
  
 <row>  
 <id>DDC.DDC_Date</id>  
 <name>DDC Date</name>  
 </row>  
  
 <row>  
 <id>DDCBranch.Branch_Name</id>  
 <name>Branch</name>  
 </row>  
  
 <row>  
 <id>DDC.Total_No_Of_GC</id>  
 <name>Tot '+ @GC_Caption + '</name>  
 </row>   
  
 <row>  
 <id>DDC.Total_DDC_Articles</id>  
 <name>Tot Articles</name>  
 </row>    
  
 <row>  
 <id>DDC.Total_DDC_Actual_Wt</id>  
 <name>Tot Actual Wt</name>  
 </row>    
 </root>'  
  
  end    
 else--if @Is_Page_Load=1    
  begin -- DDC_Type_ID = 2 means Door Delivery    
     
 select @SqlQuery='select DDC.DDC_ID as Col1,    
 DDC.DDC_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(DDC.DDC_Date) as Col3,  
 DDCBranch.Branch_Name as Col4,  
 DDC.Total_No_Of_GC as Col5,  
 DDC.Total_DDC_Articles as Col6,    
 DDC.Total_DDC_Actual_Wt as Col7,     
 '''' as Col8,'''' as Col9,'''' as Col10    
 ,dbo.Ec_Opr_Can_Edit_Cancel(''DDC'',DDC.DDC_ID) as Can_Edit_Cancel  
 from EC_Opr_VTrans_Door_Delivery_Confirmation as DDC    
 Inner Join Ec_Master_Branch DDCBranch  
 on DDCBranch.Branch_Id=DDC.DDC_Branch_ID   
 inner join Ec_Master_Area DDCArea  
 on DDCBranch.Area_ID = DDCArea.Area_ID  
 inner join Ec_Master_Region DDCRegion  
 on DDCBranch.Region_ID = DDCRegion.Region_ID  
 where DDC.is_cancelled = 0  
 and DDC.Division_ID = @Division_ID
 and DDC_Type_ID = 2  
 and DDCBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else DDCBranch.Region_Id end)  
 and DDCBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else DDCBranch.Area_Id end)  
 and DDCBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else DDCBranch.Branch_Id end)  
 and (cast(dbo.dateonly(DDC.DDC_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=82    
     
  
--****************************** Direct Delivery Confirmation *******************************************  
  
if @MenuItemId=83    
 begin  
  
 if @IsPageLoad=1  
  begin  
        
 select @xml='  
 <root>  
 <row>  
 <id>DDC.DDC_ID</id>  
 <name>DDC_ID</name>  
 </row>  
  
 <row>  
 <id>DDC.DDC_No_For_Print</id>  
 <name>Direct Delivery</name>  
 </row>    
  
 <row>  
 <id>DDC.DDC_Date</id>  
 <name>DDC Date</name>  
 </row>  
  
 <row>  
 <id>DDBranch.Branch_Name</id>  
 <name>Branch</name>  
 </row>  
  
 <row>  
 <id>GC.Gc_No_For_Print</id>  
 <name>'+ @GC_Caption + ' No.</name>  
 </row>  
  
 <row>  
 <id>Vehicle.Vehicle_No</id>  
 <name>Vehicle No</name>  
 </row>  
  
 <row>  
 <id>DDC.Total_DDC_Articles</id>  
 <name>Total Articles</name>  
 </row>    
  
 <row>  
 <id>DDC.Total_DDC_Actual_Wt</id>  
 <name>Total Actual Wt</name>  
 </row>    
  
 </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin -- DDC_Type_ID = 2 means Door Delivery    
     
 select @SqlQuery='select DDC.DDC_ID as Col1,    
 DDC.DDC_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(DDC.DDC_Date) as Col3,  
 DDBranch.Branch_Name as Col4,  
 GC.Gc_No_For_Print as Col5,  
 Vehicle.Vehicle_No as Col6,  
 DDC.Total_DDC_Articles as Col7,  
 DDC.Total_DDC_Actual_Wt as Col8  
 ,'''' as Col9,'''' as Col10    
 ,dbo.Ec_Opr_Can_Edit_Cancel(''DD'',DDC.DDC_ID) as Can_Edit_Cancel  
 from EC_Opr_VTrans_Door_Delivery_Confirmation as DDC    
 Inner Join EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDCDet  
 on DDC.DDC_ID=DDCDet.DDC_ID   
 Inner Join EC_Opr_VTrans_GC GC  
 on DDCDet.GC_ID=GC.GC_ID   
 Inner Join Ec_Master_Branch DDBranch  
 on DDBranch.Branch_Id=DDC.DDC_Branch_ID   
 inner join Ec_Master_Area DDArea  
 on DDBranch.Area_ID = DDArea.Area_ID  
 inner join Ec_Master_Region DDRegion  
 on DDBranch.Region_ID = DDRegion.Region_ID  
 inner join EF_Master_Vehicle Vehicle  
 on DDCDet.Vehicle_ID = Vehicle.Vehicle_ID  
 where DDC.is_cancelled = 0  
 and DDC.Division_ID = @Division_ID
 and DDC_Type_ID = 3  
 and DDBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else DDBranch.Region_Id end)  
 and DDBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else DDBranch.Area_Id end) 
 and DDBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else DDBranch.Branch_Id end)  
 and (cast(dbo.dateonly(DDC.DDC_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=83    
  
--****************************** POD Cover Generation *******************************************  
  
if @MenuItemId=90    
 begin  
  
 if @IsPageLoad=1  
  begin  
        
   select @xml='  
   <root>  
   <row>  
   <id>PODC.Cover_ID</id>     
   <name>Cover ID</name>     
   </row>     
     
   <row>     
   <id>PODC.Cover_No_For_Print</id>     
   <name>POD Cover No</name>     
   </row>    
  
   <row>     
   <id>PODC.Cover_Date</id>     
   <name>POD Cover Date</name>     
   </row>     
  
   <row>     
   <id>PODC.Cover_Send_Hierarchy_Code</id>     
   <name>Send To</name>     
   </row>     
  
   <row>     
   <id>Cover_Sent_Type.Cover_Sent_Type</id>     
   <name>Sent Type</name>     
   </row>     
  
   <row>     
   <id>Cover_Sent_Type.Cover_Sent_Type</id>     
   <name>Sent By</name>     
   </row>     
  
   <row>     
   <id>PODC.Total_GC</id>     
   <name>Total '+ @GC_Caption + '</name>     
   </row>     
    
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin    
     
   select @SqlQuery='select PODC.Cover_ID as Col1,    
 PODC.Cover_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(PODC.Cover_Date) as Col3,    
  
 case Cover_Send_Hierarchy_Code  
  when ''HO'' then ''HO''  
  when ''RO'' then Region_Name + ''('' + Cover_Send_Hierarchy_Code + '')''  
  when ''AO'' then Area_Name + ''('' + Cover_Send_Hierarchy_Code + '')''  
  when ''BO'' then Branch_Name + ''('' + Cover_Send_Hierarchy_Code + '')''  
  end as Col4,  
  
 Cover_Sent_Type.Cover_Sent_Type as Col5,  
  
 case PODC.Cover_Sent_Type_ID  
 when 1 then Courier_Name  
 when 2 then First_Name  
 when 3 then Vehicle_No  
 end as Col6,  
  
 PODC.Total_GC as Col7  
 ,'''' as Col8,'''' as Col9,'''' as Col10    
 ,dbo.Ec_POD_Can_Edit_Cancel(''PODCG'',PODC.Cover_ID,@HierarchyCode,@MainId) as Can_Edit_Cancel  
 From EC_Opr_VTrans_POD_Cover_Generation PODC  
 left outer join ec_master_branch branch on   
 PODC.Cover_Sent_Main_ID = branch.branch_id  
 left outer join ec_master_area area on   
 PODC.Cover_Sent_Main_ID = area.area_id  
 left outer join ec_master_region region on   
 PODC.Cover_Sent_Main_ID = region.region_id  
 left outer join ef_master_vehicle vehicle on   
 PODC.vehicle_id = vehicle.vehicle_id  
 left outer join ec_master_employee employee on   
 PODC.emp_id = employee.emp_id  
 inner join EC_Master_POD_Cover_Sent_Type Cover_Sent_Type  
 on PODC.Cover_Sent_Type_ID = Cover_Sent_Type.Cover_Sent_Type_ID  
 where is_cancelled = 0  
 and PODC.Division_ID = @Division_ID
 and Cover_Received_ID = 0  
 and (cast(dbo.dateonly(PODC.Cover_Date) as datetime) between @Fromdate and @Todate)  
 and PODC.Cover_Maid_Main_ID =@MainId  
 and PODC.Cover_Made_Hierarchy_Code = @HierarchyCode   
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=90    
     
--****************************** POD Cover Receipt *******************************************  
  
if @MenuItemId=91    
 begin  
  
 if @IsPageLoad=1  
  begin     
     
   select @xml='  
   <root>  
   <row>  
   <id>PODCR.Cover_Received_ID</id>     
   <name>Cover_Received_ID</name>     
   </row>     
     
   <row>     
   <id>PODCR.Cover_Received_No_For_Print</id>     
   <name>POD Receipt No</name>     
   </row>    
  
   <row>     
   <id>PODCR.Cover_Received_Date</id>     
   <name>POD Receipt Date</name>     
   </row>     
  
   <row>     
   <id>PODCG.Cover_No_For_Print</id>     
   <name>POD Cover No</name>     
   </row>    
    
   <row>     
   <id>PODCG.Cover_Date</id>     
   <name>POD Cover Date</name>     
   </row>    
    
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin      
 select @SqlQuery='select PODCR.Cover_Received_ID as Col1,  
 PODCR.Cover_Received_No_For_Print as Col2,  
 dbo.dateonlydisplay(PODCR.Cover_Received_Date) as Col3,  
 PODCG.Cover_No_For_Print as Col4,  
 PODCG.Cover_Date as Col5,  
 '''' as Col6,'''' as Col7,  
 '''' as Col8,'''' as Col9,'''' as Col10  
 ,dbo.Ec_POD_Can_Edit_Cancel(''PODCR'',PODCR.Cover_Received_ID,@HierarchyCode,@MainId) as Can_Edit_Cancel  
 from EC_Opr_VTrans_POD_Cover_Received PODCR inner join  
 EC_Opr_VTrans_POD_Cover_Generation PODCG  
 on PODCR.Cover_ID=PODCG.Cover_ID  
 where PODCR.is_cancelled = 0  
 and PODCR.Division_ID = @Division_ID
 and (cast(dbo.dateonly(PODCR.Cover_Received_Date) as datetime) between @Fromdate and @Todate)  
 and PODCR.Cover_Received_Main_ID =@MainId  
 and PODCR.Cover_Received_Hierarchy_Code = @HierarchyCode   
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

    
  end --if @Is_Page_Load=1    
     
end  --if @Menu_Item_Id=91    
   
--****************************** POD Delivery Sheet *******************************************  
  
if @MenuItemId=101    
 begin  
  
 if @IsPageLoad=1  
  begin   
 select @xml='  
 <root>  
 <row>  
 <id>PODDS.POD_Delivery_Sheet_ID</id>     
 <name>POD Delivery Sheet ID</name>     
 </row>     
  
 <row>     
 <id>PODDS.POD_Delivery_Sheet_No_For_Print</id>     
 <name>POD Sheet No</name>     
 </row>    
  
 <row>  
 <id>PODDS.POD_Delivery_Sheet_Date</id>     
 <name>POD Sheet Date</name>     
 </row>     
  
   <row>     
   <id>Cover_Sent_Type.Cover_Sent_Type</id>     
   <name>Sent Type</name>     
   </row>     
  
   <row>     
   <id>Cover_Sent_Type.Cover_Sent_Type</id>     
   <name>Sent By</name>     
   </row>     
  
 <row>  
 <id>PODDS.Total_GC</id>     
 <name>Total '+ @GC_Caption + '</name>     
 </row>     
  
 </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin       
 select @SqlQuery='select PODDS.POD_Delivery_Sheet_ID as Col1,    
 PODDS.POD_Delivery_Sheet_No_For_Print as Col2,    
 dbo.DateOnlyDisplay(PODDS.POD_Delivery_Sheet_Date) as Col3,    
 Cover_Sent_Type.Cover_Sent_Type as Col4,  
  
 case PODDS.delivery_Sent_Type_ID  
 when 1 then Courier_Name  
 when 2 then First_Name  
 when 3 then Vehicle_No  
 end as Col5,  
  
 PODDS.Total_GC as Col6,  
 '''' as Col7,'''' as Col8,'''' as Col9,'''' as Col10  
 ,dbo.Ec_POD_Can_Edit_Cancel(''PODCD'',PODDS.POD_Delivery_Sheet_ID,@HierarchyCode,@MainId) as Can_Edit_Cancel  
 from  
 EC_Opr_VTrans_POD_Delivery_Sheet PODDS  
 left outer join ef_master_vehicle vehicle on   
 PODDS.vehicle_id = vehicle.vehicle_id  
 left outer join ec_master_employee employee on   
 PODDS.emp_id = employee.emp_id  
 inner join EC_Master_POD_Cover_Sent_Type Cover_Sent_Type  
 on PODDS.delivery_Sent_Type_ID = Cover_Sent_Type.Cover_Sent_Type_ID  
 where PODDS.is_cancelled = 0  
 and PODDS.Division_ID= @Division_ID
 and (cast(dbo.dateonly(PODDS.POD_Delivery_Sheet_Date) as datetime) between @Fromdate and @Todate)  
 and PODDS.Delivery_Maid_Main_ID =@MainId  
 and PODDS.Delivery_Made_Hierarchy_Code = @HierarchyCode   
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

   
  end --if @Is_Page_Load=1    
end  --if @Menu_Item_Id=101    
  
  
--****************************** POD Cover Receipt_DD *******************************************  
  
if @MenuItemId=109    
 begin  
  
 if @IsPageLoad=1  
  begin     
     
   select @xml='  
   <root>  
   <row>  
   <id>PODDDCR.Cover_Received_ID</id>     
   <name>Cover_Received_ID</name>     
   </row>     
   
   <row>  
   <id>PODDDCR.Cover_Received_No_For_Print</id>     
   <name>Cover Received No</name>     
   </row>    
   
   <row>     
   <id>PODDDCR.Cover_Received_Date</id>     
   <name>POD Receipt Date</name>     
   </row>     
   
    
   </root>'    
    
  end    
 else--if @Is_Page_Load=1    
  begin      
	 select @SqlQuery='select PODDDCR.Cover_Received_ID as Col1,  
	 PODDDCR.Cover_Received_No_For_Print as Col2,  
	 dbo.dateonlydisplay(PODDDCR.Cover_Received_Date) as Col3,  
	 '''' as Col4,  
	 '''' as Col5,  
	 '''' as Col6,'''' as Col7,  
	 '''' as Col8,'''' as Col9,'''' as Col10  
	 ,dbo.Ec_POD_Can_Edit_Cancel(''PODCRDD'',PODDDCR.Cover_Received_ID,@HierarchyCode,@MainId) as Can_Edit_Cancel  
	 from EC_Opr_VTrans_POD_Cover_Received PODDDCR   
	 where PODDDCR.is_cancelled = 0  
	 AND PODDDCR.Division_ID = @Division_ID
	 and (cast(dbo.dateonly(PODDDCR.Cover_Received_Date) as datetime) between @Fromdate and @Todate)  
	 and PODDDCR.Cover_Received_Main_ID =@MainId  
	 and PODDDCR.Cover_Received_Hierarchy_Code = @HierarchyCode   
	 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            
  end --if @Is_Page_Load=1    
     end  --if @Menu_Item_Id=109    
  
--****************************** POD Cover Generation List *******************************************  
  
   
--****************************** Acutal Unloading Sheet (Otehr Agency)*******************************************  
  
if @MenuItemId=115  
 begin     
  
 if @IsPageLoad=1     
  begin     
   select @xml='     
   <root>     
   <row>     
   <id>AUS.Actual_Unloading_Sheet_ID</id>     
   <name>Actual_Unloading_Sheet_ID</name>     
   </row>     
     
   <row>     
   <id>AUS.Actual_Unloading_Sheet_No_For_Print</id>     
   <name>' + @AUS_Caption + ' No</name>     
   </row>    
  
   <row>     
   <id>AUS.Actual_Unloading_Sheet_Date</id>     
   <name>' + @AUS_Caption + ' Date</name>     
   </row>     
     
   <row>     
   <id>AUSBranch.Branch_Name</id>     
   <name>' + @AUS_Caption + ' Branch</name>     
   </row> 

   <row>     
   <id>AgencyBranch.Branch_Name</id>
   <name>Agency Name</name>
   </row> 

   <row>     
   <id>Vehicle_No</id>     
   <name>Vehicle No</name>     
   </row>     
     
   <row>     
   <id>LHPO_No</id>     
   <name>' + @LHPO_Caption + ' No</name>     
   </row>     
   
   <row>     
   <id>Total_Actual_GCs</id>     
   <name>No. of ' + @GC_Caption + '</name>
   </row> 

   <row>     
   <id>Total_Received_Articles</id>     
   <name>Received Articles</name>
   </row> 

   </root>'     
     
  end     
 else--if @Is_Page_Load=1     
  begin     
  
 select @SqlQuery='select distinct AUS.Actual_Unloading_Sheet_ID as Col1,  
 AUS.Actual_Unloading_Sheet_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(AUS.Actual_Unloading_Sheet_Date) as Col3,  
 AUSBranch.Branch_Name as Col4,
 AgencyBranch.Branch_Name as Col5, 
 AUS.Vehicle_No as Col6,
 AUS.LHPO_No_For_Print as Col7,    
 Total_Actual_GCs as Col8,
 Total_Received_Articles as Col9,'''' as Col10    
    
  
 ,dbo.Ec_Opr_Can_Edit_Cancel(''AUS_OA'',AUS.Actual_Unloading_Sheet_ID) as Can_Edit_Cancel  
 from EC_Opr_VTrans_Actual_Unloading_Sheet as AUS   
 Inner Join EC_Opr_VTrans_Actual_Unloading_Sheet_Details as AUS_Det  
 On AUS_Det.Actual_Unloading_Sheet_ID=AUS.Actual_Unloading_Sheet_ID   
 Inner Join EC_Opr_VTrans_GC as GC  
 On GC.GC_ID=AUS_Det.GC_ID   
 Inner Join Ec_Master_Branch AgencyBranch
 on AUS.Agency_Branch_ID=AgencyBranch.Branch_Id   

 Inner Join Ec_Master_Branch AUSBranch    
 on AUSBranch.Branch_Id=AUS.Un_Loading_Branch_ID   
 inner join Ec_Master_Area AUSArea  
 on AUSBranch.Area_ID = AUSArea.Area_ID  
 inner join Ec_Master_Region AUSRegion  
 on AUSBranch.Region_ID = AUSRegion.Region_ID  

 where AUS.is_cancelled = 0  
 and Is_Agency_Booking = 1 
 AND AUS.Division_ID = @Division_ID
 and AUSBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else AUSBranch.Region_Id end)  
 and AUSBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else AUSBranch.Area_Id end)  
 and AUSBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else AUSBranch.Branch_Id end)  
 and (cast(dbo.dateonly(AUS.Actual_Unloading_Sheet_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=115 

--*************************************TAS**************************************
--Author : Anita Gupta
--Desc   : To fill datagrid for TAS Details
--Date	 : 19 Jan 2009

if @MenuItemId=158    
 begin     
     
 if @IsPageLoad=1     
  begin     

   select @xml='     
   <root>     
   <row>     
   <id>TAS.TAS_ID</id>     
   <name>TAS ID</name>     
   </row>     
     
   <row>     
   <id>TAS.TAS_No_For_Print</id>     
   <name>TAS No</name>     
   </row>     
     
   <row>     
   <id>dbo.DateOnlyDisplay(TAS.TAS_Date)+'' ''+TAS.TAS_TIME</id>     
   <name>TAS DateTime</name>     
   </row>     
   
    <row>  
	<id>TASBranch.Branch_Name</id>  
	<name>Branch</name>  
	</row>
	
	<row>  
	<id>TASVehicle.Vehicle_No</id>  
	<name>Vehicle No</name>  
	</row>

	<row>  
	<id>TAS.Total_Memos</id>  
	<name>Tot Memos</name>  
	</row>

	<row>  
	<id>TAS.Total_GCs</id>  
	<name>Tot GCs</name>  
	</row>
    
   </root>'  
       
  end     
 else--if @Is_Page_Load=1     
  begin     
 select @SqlQuery='select TAS.TAS_ID as Col1,   
 TAS.TAS_No_For_Print as Col2,   
 dbo.DateOnlyDisplay(TAS.TAS_Date)+'' ''+TAS.TAS_TIME as Col3,   
 TASBranch.Branch_Name as Col4,  
 TASVehicle.Vehicle_No as Col5,   
 TAS.Total_Memos as Col6,  
 TAS.Total_GCs as Col7,     
 '''' as Col8,'''' as Col9,'''' as Col10,
 dbo.Ec_Opr_Can_Edit_Cancel(''TAS'',TAS.TAS_ID) as Can_Edit_Cancel     
 from EC_Opr_VTrans_TAS as TAS 
 Inner Join EF_Master_Vehicle TASVehicle
 on TASVehicle.Vehicle_ID = TAS.Vehicle_ID
 Inner Join Ec_Master_Branch TASBranch  
 on TASBranch.Branch_Id=TAS.TAS_Branch_ID   
 inner join Ec_Master_Area TASArea  
 on TASBranch.Area_ID = TASArea.Area_ID  
 inner join Ec_Master_Region TASRegion  
 on TASBranch.Region_ID = TASRegion.Region_ID  
 where TAS.is_cancelled = 0  
 AND TAS.Division_ID=@Division_ID
 and TASBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else TASBranch.Region_Id end)  
 and TASBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else TASBranch.Area_Id end)  
 and TASBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else TASBranch.Branch_Id end)  
 and (cast(dbo.dateonly(TAS.TAS_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

 end --if @Is_Page_Load=1     
     
end  

--************************************Octroi Update******************************************************
if @MenuItemId=163   
 begin     
     
 if @IsPageLoad=1     
  begin     
     
   select @xml='     
   <root>     
   <row>     
   <id>Oct_Upd.Octroi_Update_Id</id>     
   <name>Octroi Update Id</name>     
   </row>     
     
   <row>     
   <id>Oct_Upd.Octroi_Update_No_For_Print</id>     
   <name>Transaction No</name>     
   </row>     
     
   <row>     
   <id>Oct_Upd.Octroi_Update_Date</id>     
   <name>Transaction Date</name>     
   </row>     
     
   <row>     
   <id>Ledger.Ledger_Name</id>     
   <name>Ledger Name</name>     
   </row>

   <row>     
   <id>Oct_Upd.Bill_No</id>     
   <name>Bill No</name>     
   </row>          
   
   <row>     
   <id>Oct_Upd.Total_GC</id>     
   <name>Total ' + @GC_Caption + '</name>     
   </row>

   <row>
   <id>Oct_Upd.Total_Amount</id>
   <name>Total Amt.</name>
   </row> 
   
   </root>'  
       
  end     
 else--if @Is_Page_Load=1     
  begin     
 select @SqlQuery='select Oct_Upd.Octroi_Update_Id as Col1,
 Oct_Upd.Octroi_Update_No_For_Print as Col2,
 dbo.DateOnlyDisplay(Oct_Upd.Octroi_Update_Date) as Col3,
 Ledger.Ledger_Name as Col4,
 Oct_Upd.Bill_No as Col5,
 Oct_Upd.Total_GC as Col6,
 Oct_Upd.Total_Amount as Col7,
 '''' as Col8,'''' as Col9,'''' as Col10,
 dbo.Ec_Opr_Can_Edit_Cancel(''Oct_Updt_Edit'',Oct_Upd.Octroi_Update_Id) as Can_Edit_Cancel,
 dbo.Ec_Opr_Can_Edit_Cancel(''Oct_Updt'',Oct_Upd.Octroi_Update_Id) as Can_Cancel    
 from EC_Opr_Octori_Update Oct_Upd inner join Fa_Master_Ledger Ledger on
 Oct_Upd.Ledger_ID= Ledger.ledger_Id
 where Oct_Upd.Main_Id =@MainId
 and Oct_Upd.Is_Cancelled=0
 AND Oct_Upd.Division_ID= @Division_ID
 and (cast(dbo.dateonly(Oct_Upd.Octroi_Update_Date) as datetime) between @Fromdate and @Todate)  
 and Oct_Upd.Hierarchy_Code = @HierarchyCode   
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            
     
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=163
--******************************Vehicle Hire Bill Details*******************************************  
  
if @MenuItemId=203 
 begin     
  
 if @IsPageLoad=1     
  begin     
        
 select @xml='  
 <root>  
 <row>  
 <id>HireBill.Hire_Bill_ID</id>  
 <name>.Hire_Bill_ID</name>  
 </row>  
  
 <row>  
 <id>HireBill.Hire_Bill_No_For_Print</id>  
 <name>Hire Bill No For Print</name>  
 </row>    
  
 <row>  
 <id>HireBill.Hire_Bill_Date</id>  
 <name>Hire Bill Date</name>  
 </row>  
  
 <row>  
 <id>FromServiceLocation.Service_Location_Name</id>  
 <name>From Location</name>  
 </row>

 <row>  
 <id>ToServiceLocation.Service_Location_Name</id>  
 <name>To Location</name>  
 </row>     
   
  
 <row>  
 <id>Vehicle.Vehicle_No</id>  
 <name>Vehicle No</name>  
 </row> 
     </root>'  
      
  end     
 else--if @Is_Page_Load=1     
  begin     
  

   select @SqlQuery='select HireBill.Hire_Bill_ID as Col1,  
 HireBill.Hire_Bill_No_For_Print as Col2,  
 dbo.DateOnlyDisplay(HireBill.Hire_Bill_Date) as Col3,  
 FromServiceLocation.Service_Location_Name as Col4, 
 ToServiceLocation.Service_Location_Name as Col5,   
 Vehicle.Vehicle_No as Col6, 
 '''' as Col7, 
 '''' as Col8,  
 '''' as Col9,  
 '''' as Col10,  
  1 as Can_Edit_Cancel 
 from EC_Opr_Hire_Bill as HireBill  
 Inner Join Ec_Master_Branch HireBillBranch    
 on HireBillBranch.Branch_Id=HireBill.Hire_Bill_Branch_ID   
 inner join Ec_Master_Area HireBillArea  
 on HireBillBranch.Area_ID = HireBillArea.Area_ID  
 inner join Ec_Master_Region HireBillRegion  
 on HireBillBranch.Region_ID = HireBillRegion.Region_ID  
 inner join EF_Master_Vehicle Vehicle  
 on HireBill.Vehicle_ID = Vehicle.Vehicle_ID
 inner join EC_Master_Service_Location FromServiceLocation 
 on HireBill.From_Location_Id=FromServiceLocation.Service_Location_Id
 inner join Ec_Master_Service_location ToServiceLocation
 on HireBill.To_Location_ID=ToServiceLocation.Service_Location_Id
 
 where is_cancelled = 0  
 and HireBill.Division_Id = @Division_ID
 and HireBillBranch.Region_Id = (case @HierarchyCode when ''RO'' then @MainId else HireBillBranch.Region_Id end)  
 and HireBillBranch.Area_Id = (case @HierarchyCode when ''AO'' then  @MainId else HireBillBranch.Area_Id end)  
 and HireBillBranch.Branch_Id = (case @HierarchyCode when ''BO'' then @MainId else HireBillBranch.Branch_Id end)  
 and (cast(dbo.dateonly(HireBill.Hire_Bill_Date) as datetime) between @Fromdate and @Todate)  
 and ' + @ColName + ' like ' + char(39) + '%' + @SearchText + '%' + char(39)            

     
  end --if @Is_Page_Load=1     
     
end  --if @Menu_Item_Id=203         
   
--------------------------------------------------------------------------------------     
--EXECUTE THE RESPECTIVE SQL QUERY GENERATED     
--------------------------------------------------------------------------------------     
  
if @IsPageLoad=1     
 begin     
   
  DECLARE @idoc int   
  EXEC sp_xml_preparedocument @idoc OUTPUT, @xml  
     
  (SELECT  id,name     
  from OPENXML (@idoc, '/root/row',2)   
  WITH (id varchar(100),name varchar(50)))     
     
  EXEC sp_xml_removedocument @idoc  
  --print @TableName     
 end     
else     
 begin    
-- if @HasParameter = 1  
--  begin  
   declare @params as nvarchar(4000)  
   SELECT @params = '@HierarchyCode varchar(5),@MainId int,@Fromdate datetime,@Todate datetime,@ColName varchar(100),@Division_ID int,@MenuItemId int'  
   EXEC sp_executesql @SqlQuery, @params,@HierarchyCode,@MainId,@Fromdate,@Todate,@ColName,@Division_ID,@MenuItemId
--  end  
-- else  
--  EXEC sp_executesql @SqlQuery  
  
-- EXECUTE (@SqlQuery)     
 end   
  
 EXITPROC:     
--------------------------------------------------------------------------------------  



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================                  
-- Author:  <Harshal A. Sapre>                  
-- Create date: <26-02-2009>                  
-- [dbo].[EC_RPT_Direct_Printing_MR_Excel] 106,11
-- 152                  
-- =============================================                  
                  
CREATE PROCEDURE [dbo].[EC_RPT_Direct_Printing_MR_Excel]
@Menu_Item_ID int,          
@Document_ID int                          
AS                  
BEGIN                  
SET NOCOUNT ON;     
       
Declare @Mr_Branch_Id int          
Declare @Current_Branch_Id int          
Declare @Gc_Id int          
Declare @Doc_ID int          
Declare @Arrival_date datetime          
Declare @Commodity_Name varchar(max)          
Declare @count int          
          
Select @Mr_Branch_Id=Mr_branch_id,@Gc_Id=Gc_Id          
from FA_Opr_MR          
where Mr_Id=@Document_ID          
          
select @Doc_ID=document_id           
from ec_opr_vtrans_gc_articles          
where gc_id=@Gc_Id and current_branch_id=@Mr_Branch_Id          
and status_id=60          
          
select @Arrival_date=Vehicle_Arrival_Date          
from ec_opr_vtrans_actual_unloading_sheet          
where Actual_Unloading_Sheet_ID=@Doc_ID          
          
select a.MR_ID,   

   bkg_br.Address_2 + ' ' + Branch_Off_City.City_Name + ' - ' + bkg_br.Pin_Code 
	+ '  ' + 'Phone : '+ '(' + bkg_br.Std_Code + ')'+ bkg_br.Phone_1 as [Address],
    
  a.MR_No_For_Print,      
  a.MR_Date,      
  b.Consignee_Name as Received_From,      
  [dbo].[Delivery_Taken_By](b.GC_ID) as Through_Mr,      
      
  b.GC_No_For_Print,      
  b.GC_date,      
  cast(b.Total_Articles as varchar(25)) + '  /  ' + cast(cast(round(b.charged_weight,0) as float) as varchar(25)) as Packages_Wt,          
      
  bkg_br.branch_name as From_Branch,          
        @Arrival_date as Arrival_Date,      
  '' as DRF_No,      

  b.Private_Mark as PM_No,      
  dbo.Multiple_Items(b.GC_ID) as Said_To_Contain
--  @Commodity_Name as Said_To_Contain

from dbo.FA_Opr_MR a          
Inner Join ec_opr_vtrans_gc b          
On b.Gc_Id=a.Gc_Id          
Inner Join ec_master_branch bkg_br          
On bkg_br.branch_id=b.From_Branch_ID   

 LEFT OUTER JOIN EC_MASTER_CITY Branch_Off_City
 ON bkg_br.City_ID = Branch_Off_City.City_ID

where a.Mr_Id=@Document_ID          

select a.MR_ID,    

(case when b.payment_type_id=1 then 
	(Case When a.Service_Tax_Payable_By <> 3 Then
		(cast(round(b.Sub_Total,0)as float)- cast(round(b.Advance_Amount,0)as float)) 
	else
		(cast(round(b.Sub_Total,0)as float)- cast(round(b.Advance_Amount,0)as float) + cast(round(b.Service_Tax_On_Advance,0)as float)) 
	End)
else 
	cast(round(Total_GC_Amount,0)as float)
end) as Freight_Amt,

cast(round(a.Hamali_Charges,0)as float) as Labour,
cast(round(a.GI_Charges,0) as float) as Godown_Ins,

(cast(round(a.Demurage_Charges,0) as float) + cast(round(a.Octroi_Form_Charges,0) as float) + 
cast(round(a.Octroi_Service_Charges,0) as float) + cast(round(a.Octroi_Amount,0) as float) )as Demurage_Charges, 

cast(round(a.Dly_Commision,0) as float) as Commission,        
(cast(round(a.Additional_Charges,0) as float) + cast(round(Detention_Charges,0) as float) + 
cast(round(a.Local_Charges,0) as float) + cast(round(a.Rebooked_Charges,0) as float)) as Others,  
cast(round(a.Service_Tax_Amount,0) as float) as [Service Tax],  
--cast(round(((case when b.payment_type_id=1 then cast(round(a.GC_Sub_Total,0)as float) else 0 end)      
--   + a.Hamali_Charges + a.GI_Charges + a.Demurage_Charges +       
--   0 + a.Additional_Charges),0) as float) as Total
cast(round(a.Total_MR_Amount,0) as float) as Total     
from fa_opr_mr a
Inner Join ec_opr_vtrans_gc b
on b.gc_id=a.gc_id
where MR_ID=@Document_ID
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE function [dbo].[AUS_OA_Dly_Rec_And_Pay](@GC_ID int,@AUS_Branch_ID int,@flag int)
RETURNS numeric(18,2)
AS
BEGIN
declare @Dly_rec_and_pay numeric(18,2)
declare @dly_branch_id int
declare @Payment_Type_ID int
declare @is_unloaded bit
declare @Crossing_Cost numeric(18,2)
declare @GC_Actual_Weight numeric(18,2)
declare @Standard_Freight_Rate_Per numeric(18,2)
declare @Delivery_Commission numeric(18,2)

set @is_unloaded = 0
set @Delivery_Commission = 0
set @Crossing_Cost = 0

select @Standard_Freight_Rate_Per = isnull(Standard_Freight_Rate_Per,1) from EC_Master_Company_Parameters

select @dly_branch_id = delivery_branch_id,
@Payment_Type_ID= Payment_Type_ID,
@Dly_rec_and_pay = Total_GC_Amount-Advance_Amount,
@GC_Actual_Weight = total_actual_weight
from Ec_Opr_Vtrans_GC
where gc_id = @GC_ID

select @Delivery_Commission = isnull(Delivery_Commission,0) from EC_Master_Branch_Rate_Card_VTrans
where branch_id = @dly_branch_id

select @Crossing_Cost = isnull((Total * @GC_Actual_Weight)/@Standard_Freight_Rate_Per,0)
from EC_Master_Vtrans_Standard_Crossing_Rate
where From_Branch_Id = @AUS_Branch_ID and To_Branch_Id = @dly_Branch_ID

select @is_unloaded = 1 from EC_Opr_VTrans_Actual_Unloading_Sheet AUS
inner join EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUSD
on AUS.Actual_Unloading_Sheet_ID = AUSD.Actual_Unloading_Sheet_ID
where AUSD.gc_id = @gc_id
and AUS.Un_Loading_Branch_ID = @AUS_Branch_ID
and AUS.Is_Cancelled = 0

if @flag = 3
	set @Dly_rec_and_pay = (@GC_Actual_Weight * @Delivery_Commission)/@Standard_Freight_Rate_Per
else if @flag = 4
	set @Dly_rec_and_pay = @Crossing_Cost

if @flag = 1 and (@is_unloaded = 1 or @dly_branch_id <> @AUS_Branch_ID or @Payment_Type_ID <> 1)
	set @Dly_rec_and_pay = 0
else if @flag = 2 and (@is_unloaded = 1 or @dly_branch_id = @AUS_Branch_ID or @Payment_Type_ID <> 1)
	set @Dly_rec_and_pay = 0
else if @flag = 3 and (@is_unloaded = 1 or @dly_branch_id <> @AUS_Branch_ID)
	set @Dly_rec_and_pay = 0
else if @flag = 4 and (@is_unloaded = 1 or @dly_branch_id = @AUS_Branch_ID)
	set @Dly_rec_and_pay = 0

RETURN round(@Dly_rec_and_pay,0)
end






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 19 Feb 2009 >
-- Description:	<EC_FA_Opr_Credit_MemoAccountEffects>
-- =============================================

CREATE Proc [dbo].[EC_FA_Opr_CreditMemoAccountEffects]
(
@Year_Code int,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@Credit_Memo_ID int,
@User_Id int,
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)
As
BEGIN

BEGIN TRY
BEGIN TRAN

SET NOCOUNT ON;
set @Error_Code = 0;
set @ERROR_DESC = '';

Declare @Document_ID intset @Document_ID =8--FA_Opr_Credit_Memo
--EC_Opr_VTrans_GC			
----Reverse Account Effect--------EXEC	[dbo].[EC_FA_Opr_ReverseAccountEffects]
		@Document_Id = @Document_ID,
		@Transaction_ID = @Credit_Memo_ID
------------------------------------FA_Master_GC_Accounting_ParametersDeclare
------Credit_Memo Values-----------
@Credit_Memo_Branch int,
@Credit_Memo_No varchar(50),@Credit_Memo_Date DateTime,@GC_ID int,
@GC_Sub_Total numeric(18,2),@Octroi_Form_Charges numeric(18,2),
@Octroi_Service_Charges numeric(18,2),@GI_Charges numeric(18,2),
@Detention_Charges numeric(18,2),@Hamali_Charges numeric(18,2),
@Local_Charges numeric(18,2),@Demurage_Days  numeric(18,2),
@Demurage_Charges numeric(18,2),@Additional_Charges numeric(18,2),
@Discount_Amount numeric(18,2),@Service_Tax_Amount numeric(18,2),
@Service_Tax_Payable_By int,@Octroi_Amount numeric(18,2),
@Total_Credit_Memo_Amount numeric(18,2),@Debit_To_Ledger Int,@Debit_To_Branch int,
@Delivery_Income_Amount numeric(18,2),@Payment_Type_Id int,@Booking_Type_Id int,
@GC_Delivery_Branch int,@GC_Delivery_Branch_Ledger int,@Tax_Payable_By int,
@Octroi_Paid_By_ID int,@GC_Booking_Branch int,
----FA GC Credit_Memo Ledgers---------@GenVoucherId intselect @Credit_Memo_Branch=Credit_Memo_Branch_ID,
@Credit_Memo_Date=Credit_Memo_Date,
@Credit_Memo_No=Credit_Memo_No_For_Print,
@GC_ID=GC_ID,@GC_Sub_Total=Isnull(GC_Sub_Total,0),
@Octroi_Form_Charges=Isnull(Octroi_Form_Charges,0),
@Octroi_Service_Charges=Isnull(Octroi_Service_Charges,0),
@GI_Charges=Isnull(GI_Charges,0),
@Detention_Charges=Isnull(Detention_Charges,0),
@Hamali_Charges=Isnull(Hamali_Charges,0),
@Local_Charges=Isnull(Local_Charges,0),
@Demurage_Charges=Isnull(Demurage_Charges,0),
@Additional_Charges=Isnull(Additional_Charges,0),
@Discount_Amount=Isnull(Discount_Amount,0),
@Service_Tax_Amount=Isnull(Service_Tax_Amount,0),
@Service_Tax_Payable_By=Isnull(Service_Tax_Payable_By,0),
@Octroi_Amount=Isnull(Octroi_Amount,0),
@Total_Credit_Memo_Amount=Isnull(Total_MR_Amount,0),
@Octroi_Paid_By_ID=Octroi_Paid_By_ID,
@Debit_To_Ledger=Debit_To_Ledger_Id,
@Debit_To_Branch=Debit_To_Branch_Id
From FA_Opr_Credit_Memowhere Credit_Memo_Id=@Credit_Memo_IDSelect@Booking_Type_Id=Booking_Type_Id,@GC_Delivery_Branch=Delivery_Branch_Id,@GC_Booking_Branch=From_Branch_ID,@Payment_Type_Id=Payment_Type_Id,@Tax_Payable_By=Tax_Payable_ByFrom EC_Opr_VTrans_GC where GC_Id=@GC_IdSet @Delivery_Income_Amount = @Octroi_Form_Charges + @Octroi_Service_Charges + @GI_Charges + @Detention_Charges            + @Hamali_Charges + @Local_Charges + @Demurage_Charges + @Additional_Charges - @Discount_AmountDeclare
		@Credit_Memo_Branch_Ledger int,@Voucher_Type_Id int,@GC_Booking_Branch_ToPayRecoveryLedger int,		@Service_Tax_Ledger int,@Octroi_Ledger int ,@Delivery_Income_Legder int,@Credit_Memo_Books_Voucher_XML XML,@Credit_Memo_Books_Bill_XML XML,		@GC_Delivery_Branch_Voucher_XML XML,@GC_Delivery_Branch_Bill_XML XML		Set @Credit_Memo_Books_Voucher_XML='' Set @Credit_Memo_Books_Bill_XML=''		Set @GC_Delivery_Branch_Voucher_XML='' Set @GC_Delivery_Branch_Bill_XML=''		set @Credit_Memo_Branch_Ledger=dbo.GetBranchLedger(@Credit_Memo_Branch)		set @GC_Delivery_Branch_Ledger=dbo.GetBranchLedger(@GC_Delivery_Branch)		set @GC_Booking_Branch_ToPayRecoveryLedger=dbo.GetBranchToPayRecoveryLedger(@GC_Booking_Branch)		set @Delivery_Income_Legder=dbo.Get_Ledger_Id1(@Division_Id,4001,@Booking_Type_Id,0)		set @Octroi_Ledger=dbo.Get_Ledger_Id1(@Division_Id,4003,@Booking_Type_Id,0)		if(@Tax_Payable_By=3)---tax payabel By transporter				select @Service_Tax_Ledger = dbo.Get_Ledger_Id1(@Division_Id,1003,@Booking_Type_Id, @Payment_Type_Id)		else			Begin				Set @Service_Tax_Ledger =Null				Set @Service_Tax_Amount=0			End		if(@Octroi_Paid_By_ID=3)---Octroi_Paid_By transporter		      set @Octroi_Ledger=dbo.Get_Ledger_Id1(@Division_Id,4003,@Booking_Type_Id,0)		else			Begin				Set @Octroi_Ledger =Null				Set @Octroi_Amount=0			End---------------IN BOOKS Credit_Memo BRANCH------------------------------
		set @Credit_Memo_Books_Voucher_XML=        dbo.GetVoucherDetailsXML(@Debit_To_Ledger,@Total_Credit_Memo_Amount,0,'',0,GetDate())---Debit_To_Ledger DR		+        dbo.GetVoucherDetailsXML(@Delivery_Income_Legder,0,@Delivery_Income_Amount,'',0,GetDate())---Delivery_Income_Legder CR		+        dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_Amount,'',0,GetDate())---Service_Tax_Ledger CR		+        dbo.GetVoucherDetailsXML(@Octroi_Ledger,0,@Octroi_Amount,'',0,GetDate())---Octroi_Ledger CR				if(@Payment_Type_Id = 1)---TO PAY		Begin			if(@GC_Delivery_Branch = @Credit_Memo_Branch)				set @Credit_Memo_Books_Voucher_XML=Cast(@Credit_Memo_Books_Voucher_XML as varchar(2000))----Common Ledgers Vouchers				+				dbo.GetVoucherDetailsXML(@GC_Booking_Branch_ToPayRecoveryLedger,0,@GC_Sub_Total,'',0,GetDate())---GC_Delivery_Branch_ToPayRecoveryLedger CR			Else				set @Credit_Memo_Books_Voucher_XML=Cast(@Credit_Memo_Books_Voucher_XML as varchar(2000))----Common Ledgers Vouchers				+				dbo.GetVoucherDetailsXML(@GC_Delivery_Branch_Ledger,0,@GC_Sub_Total,'',0,GetDate())---GC_Delivery_Branch_ToPayRecoveryLedger CR		End				set @Credit_Memo_Books_Voucher_XML='<NewDataSet>'+Cast(@Credit_Memo_Books_Voucher_XML as Varchar(2000))+'</NewDataSet>'        		set @Credit_Memo_Books_Bill_XML='<NewDataSet>'+dbo.GetVoucherBillXML(@Debit_To_Ledger,0,@Credit_Memo_No,1,0,@Total_Credit_Memo_Amount*-1,@Credit_Memo_Date)+'</NewDataSet>'     Set @Voucher_Type_Id=43   ------Credit_Memo	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Credit_Memo_Branch,---Credit_Memo BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@Credit_Memo_Date,
			@Ref_No = @Credit_Memo_No,
			@Ledger_Id =@Delivery_Income_Legder,
			@Total_Debit = @Total_Credit_Memo_Amount,
			@Total_Credit = @Total_Credit_Memo_Amount,
			@Narration = 'Credit_Memo BRANCH BOOK',
			@Is_Manual_Entry=0,
			@VoucherXML = @Credit_Memo_Books_Voucher_XML,
			@VoucherBillByBillXML =@Credit_Memo_Books_Bill_XML,
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@Credit_Memo_ID,@GenVoucherId	if(@GC_Delivery_Branch <> @Credit_Memo_Branch)	Begin  -------IN BOOKS OF GC DELIVERY BRANCH-------		set @GC_Delivery_Branch_Voucher_XML =        dbo.GetVoucherDetailsXML(@Credit_Memo_Branch_Ledger,@GC_Sub_Total,0,'',0,GetDate())---@Credit_Memo_Branch_Ledger DR		+		dbo.GetVoucherDetailsXML(@GC_Booking_Branch_ToPayRecoveryLedger,0,@GC_Sub_Total,'',0,GetDate())---GC_Delivery_Branch_ToPayRecoveryLedger CR        		set @GC_Delivery_Branch_Voucher_XML='<NewDataSet>'+Cast(@GC_Delivery_Branch_Voucher_XML as Varchar(2000))+'</NewDataSet>'		set @GC_Delivery_Branch_Bill_XML='<NewDataSet></NewDataSet>' DECLARE @narration varchar(100)SET @narration = dbo.Get_Caption_Company_Parameter(1) + ' DELIVERY BRANCH'		Set @Voucher_Type_Id=2   ------Credit Not		EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
				@Year_Code = @Year_Code,
				@Hierarchy_Code =@Hierarchy_Code,
				@Main_Id = @GC_Delivery_Branch,---GC DELIVERY BRANCH
				@Division_Id = @Division_Id,
				@User_Id = @User_Id,
				@Voucher_Id = -1,--For Add
				@Voucher_No = '',
				@Voucher_Type_Id = @Voucher_Type_Id,
				@Voucher_Type_Id_Main = 0,
				@Voucher_Date =@Credit_Memo_Date,
				@Ref_No = @Credit_Memo_No,
				@Ledger_Id =@Credit_Memo_Branch_Ledger,
				@Total_Debit = @GC_Sub_Total,
				@Total_Credit = @GC_Sub_Total,
				@Narration = @narration,
				@Is_Manual_Entry=0,
				@VoucherXML = @GC_Delivery_Branch_Voucher_XML,
				@VoucherBillByBillXML =@GC_Delivery_Branch_Bill_XML,
				@Gen_Voucher_Id = @GenVoucherId OUTPUT

				EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@Credit_Memo_ID,@GenVoucherId
	End---if(@GC_Delivery_Branch<>@Credit_Memo_Branch)
COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
select @ERROR_DESC
END CATCH
END





































GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- =============================================      
-- Author:  <Harshal A. Sapre>      
-- Create date: <Create Date,,>      
-- dbo.[EC_RPT_Direct_Printing_Transport_Bill_Nandwana] 143, 16
-- =============================================      
CREATE PROCEDURE [dbo].[EC_RPT_Direct_Printing_Transport_Bill_Nandwana]      
@Menu_Item_ID int,      
@Document_Id int      
AS      
BEGIN      
SET NOCOUNT ON;      

select  b.Bill_ID, a.GC_ID, 
		UPPER(c.Billing_Name) as Client_Name,    
--		UPPER(d.Client_Name) as Client_Name,   
--		UPPER(d.Address1 + ', ' + d.Address2 + ', ' + e.City_Name + ', ' +       
--		f.State_Name + ', ' + g.Country_Name + '. Pin : ' +  d.Pin_Code) as [Address],
		UPPER(C.Billing_Address) as [Address],
		c.Bill_No_For_Print, c.Bill_Date, a.GC_Date, a.GC_No_For_Print, 
		UPPER(a.Consignor_Name) as Consignor_Name, 
		UPPER(a.Consignee_Name) as Consignee_Name,           
		UPPER(BookingBranch.Branch_Code) as From_Branch, 
		UPPER(DeliveryBranch.Branch_Code) as To_Branch,      
		a.Total_Actual_Weight, a.Total_Articles, b.GC_Sub_Total,
 
--		case when a.Tax_Payable_By = 3 Then b.GC_Service_Tax_Amount	Else 0 End as GC_Service_Tax_Amount, 
		b.GC_Service_Tax_Amount as GC_Service_Tax_Amount,
		b.Total_Amount, UPPER([dbo].[Multiple_Packing_Type](a.GC_ID)) as [Packing_Type], 
		UPPER(b.GC_Remarks) as GC_Remarks, 

		a.Booking_Type_Id,
		case when a.Booking_Type_Id = 5 Then a.Vehicle_No Else '' End as Vehicle_No,
		case when a.Booking_Type_Id = 5 Then a.ContainerNo1 + '-' + a.ContainerNo2 Else '' End as Container_No,

		case when a.Booking_Type_Id = 5 Then c.Less_Amount else 0 End as [Less_Advance],
		c.Bill_Total_Amount,
		case when a.Booking_Type_Id = 5 Then (c.Bill_Total_Amount - c.Less_Amount) else c.Bill_Total_Amount End as [Grand_Total]
      
From EC_OPR_VTRANS_GC a      
INNER JOIN dbo.FA_Opr_Bill_GC_Details b      
ON a.GC_ID = b.GC_ID      
INNER JOIN dbo.FA_Opr_Bill c      
ON b.Bill_ID = c.Bill_ID      
    
INNER JOIN dbo.EC_MASTER_CLIENT_VTrans d      
ON d.Client_Id = c.Client_Id      
    
INNER JOIN dbo.EC_MASTER_CITY e      
ON d.City_Id = e.City_Id      
INNER JOIN dbo.EC_MASTER_STATE f  
ON d.State_Id = f.State_Id      
INNER JOIN dbo.EC_MASTER_COUNTRY g      
ON d.Country_Id = g.Country_Id      
  
INNER JOIN EC_MASTER_BRANCH BookingBranch      
ON a.From_Branch_ID = BookingBranch.Branch_ID      
INNER JOIN EC_MASTER_BRANCH DeliveryBranch      
ON a.Delivery_Branch_Id = DeliveryBranch.Branch_ID      
      
Where b.Bill_ID = @Document_Id      
Order by a.GC_ID      
      
select	b.Bill_ID, b.GC_ID, 
		UPPER(c.GC_Other_Charge_Head) as GC_Other_Charge_Head, 
		UPPER(b.Description) as Description, 
		b.Amount      
      
From EC_OPR_VTRANS_GC a      
INNER JOIN dbo.FA_Opr_Bill_Other_Charges_Details b      
ON a.GC_ID = b.GC_ID      
INNER JOIN dbo.EC_Master_GC_Other_Charge_Head c      
ON b.GC_Other_Charge_Head_ID = c.GC_Other_Charge_Head_ID      
      
Where b.Bill_ID = @Document_Id      
Order by a.GC_ID      
      
END      









GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 19 Jan 2009 >
-- Description:	<EC_FA_Opr_GcEffects>
-- =============================================
--Declare @Error_Code int,@ERROR_DESC AS VARCHAR(4000); EXEC EC_FA_Opr_GcAccountEffects 8,'BO',2,1,18,1,2,@Error_Code,@ERROR_DESC ; print @ERROR_DESC
CREATE Proc [dbo].[EC_FA_Opr_MRBookingAccountEffects]
(
@MR_Id int=0,
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)
As
BEGIN

BEGIN TRY
BEGIN TRAN

SET NOCOUNT ON;
set @Error_Code = 0;
set @ERROR_DESC = '';
Declare @Document_ID int,@Narration Varchar(1000)--FA_Master_GC_Accounting_ParametersDeclare 
------GC Param------
@Is_Treat_Booking_Income_As_Advance_Income as bit,
@Is_To_Be_Billed_Accounting_GC_Wise as bit,
@Is_Bookking_Money_Receipt_Required as bit,@Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking bit,------GC Values------
@Booking_Mode_Id as int,@Booking_Type_Id as int,@Payment_Type_Id as int,@Bank_Name varchar(50),@Cash_Amount numeric(18,2),@Cheque_Amount numeric(18,2),@Total_GC_Amount numeric(18,2),@Sub_Total numeric(18,2),@Service_Tax_Amount numeric(18,2),@GC_No varchar(20),@GC_Date dateTime, @Booking_Branch_Id int ,@Delivery_Branch_Id int,@Cheque_No int,@Cheque_Date dateTime,@Tax_Payable_By int,@Service_Tax_Percent numeric(18,2),@MRBankXML XML,@Advance_Amount numeric(18,2),@Service_Tax_On_Advance numeric(18,2),@CreateBillXML XML,@CreditDaysShortTermLedger INT,@GC_Id int,@Year_Code int,@Hierarchy_Code varchar(2),
@Main_Id int,@Division_Id int,@User_Id int,@MR_No varchar(50),@MR_Date datetime,----FA Ledgers-------@GenVoucherId intDeclare @UnBilled_GCAc int,@Booking_Income_Ledger int,@Service_Tax_Ledger int,        @Booking_Branch_Cash_Ledger int,@Booking_Branch_Bank_Ledger int,@Booking_Branch_Ledger int,		@Delivery_Branch_Ledger int,@ToPayRecovery_Booking_Branch_Ledger int,@ToPayRecovery_Delivery_Branch_Ledger int,
        @CreateVoucherXML XML,@Voucher_Type_Id int,@Delivery_Branch_Cash_Ledger int,@Delivery_Branch_Bank_Ledger int,
		@Short_Term_Bill_Ledger int,@StrChequeNo Varchar(800)
select @Is_Treat_Booking_Income_As_Advance_Income=Is_Treat_Booking_Income_As_Advance_Income,
@Is_To_Be_Billed_Accounting_GC_Wise=Is_To_Be_Billed_Accounting_GC_Wise,
@Is_Bookking_Money_Receipt_Required=Is_Bookking_Money_Receipt_RequiredFrom FA_Master_GC_Accounting_Parameters set @Document_ID =3---MR	EXEC	[dbo].[EC_FA_Opr_ReverseAccountEffects]
			@Document_Id = @Document_ID,
			@Transaction_ID = @MR_Id--------------------------------------select @Year_Code=Year_Code,
@Hierarchy_Code='BO',
@Main_Id=MR_Branch_ID,
@Division_Id=Division_Id,@User_Id=Created_By,@MR_No=MR_No_For_Print,@GC_Id=GC_Id,@MR_Date=MR_Date,@Cash_Amount=Isnull(Cash_Amount,0),
@Cheque_Amount=IsNull(Cheque_Amount,0),@Booking_Branch_Cash_Ledger=Cash_Ledger_IDFrom dbo.FA_Opr_MRwhere MR_Id=@MR_Idselect @Booking_Mode_Id=Booking_Mode_Id,
@Booking_Type_Id=Booking_Type_Id,
@Payment_Type_Id=Payment_Type_Id,
@Booking_Branch_Id =From_Branch_Id,@Delivery_Branch_Id =Delivery_Branch_Id,
@Bank_Name=Isnull(Bank_Name,''),
@Total_GC_Amount=IsNull(Total_GC_Amount,0),@Sub_Total=IsNull(Sub_Total,0),@Service_Tax_Amount=IsNull(Service_Tax_Amount,0),@GC_No=GC_No_For_Print,@GC_Date=GC_Date,@Tax_Payable_By=Tax_Payable_By,@Service_Tax_Percent=IsNull(Service_Tax_Percent,0),@Advance_Amount=Advance_Amount,@Service_Tax_On_Advance=Service_Tax_On_AdvanceFrom dbo.EC_Opr_VTrans_GCwhere GC_Id=@GC_Id set @StrChequeNo=''	if(@Is_Treat_Booking_Income_As_Advance_Income=1)	Begin		select @Booking_Income_Ledger=dbo.Get_Ledger_Id1(@Division_Id,1001,@Booking_Type_Id,@Payment_Type_Id)	End	else	Begin		select @Booking_Income_Ledger=dbo.Get_Ledger_Id1(@Division_Id,1002,@Booking_Type_Id, @Payment_Type_Id)	End	if(@Tax_Payable_By=3)---tax payabel By transporter			select @Service_Tax_Ledger = dbo.Get_Ledger_Id1(@Division_Id,1003,@Booking_Type_Id, @Payment_Type_Id)	else		Begin			Set @Service_Tax_Ledger =Null			Set @Service_Tax_Amount=0		End    Select            @ToPayRecovery_Booking_Branch_Ledger = To_Pay_Recovery_Ledger_Id,           @Booking_Branch_Ledger = Branch_Ledger_Id,           @Booking_Branch_Bank_Ledger=Bank_Ledger_Id    from EC_Master_Branch where Branch_Id=@Booking_Branch_Id    Select            @ToPayRecovery_Delivery_Branch_Ledger = To_Pay_Recovery_Ledger_Id,           @Delivery_Branch_Ledger = Branch_Ledger_Id,           @Delivery_Branch_Cash_Ledger=Cash_Ledger_Id,           @Delivery_Branch_Bank_Ledger=Bank_Ledger_Id    from EC_Master_Branch where Branch_Id=@Delivery_Branch_Id----------------------- To Bank Details XML-		set @MRBankXML=''	    		Declare @Temp_MRBankDetails as Table(Sr_No int identity,Bank_Ledger_ID int,Cheque_Amount numeric(18,2),Cheque_Bank_Name varchar(100),Cheque_No varchar(15))		insert into @Temp_MRBankDetails(Bank_Ledger_ID,Cheque_Amount,Cheque_Bank_Name,Cheque_No)		Select Bank_Ledger_ID,Cheque_Amount,Cheque_Bank_Name,Cheque_No		From FA_Opr_MR_Bank_Details		where MR_Id=@MR_Id		Declare @MR_Count int,@MR_Sr_No int,@MR_Bank_Ledger_ID int,@MR_Cheque_Amount numeric(18,2),@MR_Cheque_Bank_Name varchar(100),@MR_Cheque_No varchar(15)		select @MR_Count=Count(*) From @Temp_MRBankDetails		Select @MR_Sr_No=1		while @MR_Sr_No<=@MR_Count		Begin					select @MR_Bank_Ledger_ID=Bank_Ledger_ID,@MR_Cheque_Amount=Cheque_Amount,@MR_Cheque_No=Cheque_No from @Temp_MRBankDetails			where Sr_No=@MR_Sr_No			set @StrChequeNo=@StrChequeNo+','+@MR_Cheque_No		----------Bank Ledger CR-------------------
			set @MRBankXML=Cast(@MRBankXML as Varchar(max))
			+
			dbo.GetVoucherDetailsXML(@MR_Bank_Ledger_ID,@MR_Cheque_Amount,0,@MR_Cheque_Bank_Name,@MR_Cheque_No,Getdate())			Set @MR_Sr_No=@MR_Sr_No+1		End-----------------------End To Bank Details XMLselect Cast(@MRBankXML as Varchar(max))--------------------------------------------Payment Type PAID---------------------------------------	if(@Payment_Type_Id = 2)---Paid	Begin

	set @CreateVoucherXML=
	'<NewDataSet>'
	+
	dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@Booking_Branch_Cash_Ledger,@Cash_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	Cast(@MRBankXML as varchar(max))
	+
	'</NewDataSet>'

     Set @Voucher_Type_Id=23 --MR Booking  select cast(@CreateVoucherXML as Varchar(max))SET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + 
' PAID BOOKING BRANCH,' + dbo.Get_Caption_Company_Parameter(1) + 
' No : ' + @GC_No + ' ,Cheque No : ' + @StrChequeNo	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Booking_Branch_Id,---BOOKING BRANCH BOOK  
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@MR_Date,
			@Ref_No = @MR_No,
			@Ledger_Id =@Booking_Income_Ledger,
			@Total_Debit = @Total_GC_Amount,
			@Total_Credit = @Total_GC_Amount,
			@Narration = @Narration,--'GC PAID BOOKING',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @CreateVoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = '<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

	    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@MR_Id,@GenVoucherId

     End --if(@Payment_Type_Id = 2)--------------------------------------------Payment Type TO PAY-----------------------------------------------------------------------------------Short Term Bill---------------------------------------Else if(@Payment_Type_Id = 4)---Short Term Bill	Begin				set @Short_Term_Bill_Ledger=dbo.Get_Ledger_Id1(@Division_Id,750,0,0)	set @CreateVoucherXML=
	'<NewDataSet>'
	+
	dbo.GetVoucherDetailsXML(@Short_Term_Bill_Ledger,0,@Total_GC_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@Booking_Branch_Cash_Ledger,@Cash_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	Cast(@MRBankXML as varchar(max))
	+
	'</NewDataSet>'
Set @Voucher_Type_Id=23 --Booking   SET @CreateBillXML = '<NewDataSet></NewDataSet>'
IF((SELECT Maintain_Bill_By_Bill FROM FA_Master_Ledger WHERE Ledger_Id = @Short_Term_Bill_Ledger) = 1)
BEGIN

SELECT @CreditDaysShortTermLedger = Default_Credit_Period FROM FA_Master_Ledger WHERE Ledger_Id = @Short_Term_Bill_Ledger

SET @CreateBillXML =  '<NewDataSet>'
						+
						dbo.GetVoucherBillXML(@Short_Term_Bill_Ledger,0,@GC_No,1,@CreditDaysShortTermLedger,@Total_GC_Amount,@GC_Date)
						+
					   '</NewDataSet>'

END
SET @Narration = 'MR Booking Voucher In ' + dbo.Get_Caption_Company_Parameter(1) + ' SHORT TERM BILL BOOKING BRANCH,' + dbo.Get_Caption_Company_Parameter(1) + ' No : ' + @GC_No + ' ,Cheque No : '+@StrChequeNo	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Booking_Branch_Id,---BOOKING BRANCH BOOK  
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@MR_Date,
			@Ref_No = @MR_No,
			@Ledger_Id =@Short_Term_Bill_Ledger,
			@Total_Debit = @Total_GC_Amount,
			@Total_Credit = @Total_GC_Amount,
			@Narration = @Narration,--'GC SHORT TERM BILL BOOKING',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @CreateVoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = @CreateBillXML,
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@MR_Id,@GenVoucherId

     End --	if(@Payment_Type_Id = 4)---Short Term Bill--------------------------------------------Short Term Bill--------------------------------------select @Error_Code
COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
select @ERROR_DESC
END CATCH
END




















































GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:  <shiv >
-- Create date: <21/03/2009>
-- Description: <Fill From Service Location Name of that Branch For LHPO Operation> 
-- =============================================

CREATE Proc [dbo].[EC_Opr_FromServiceLocationLHPO_Search]  
(
@SearchFor as varchar(50),  
@Branch_Id int
)
as  
set nocount on;

Begin
Declare @Region_id int,@From_Loc_To_Be_Filled_ID int

Select @From_Loc_To_Be_Filled_ID = isnull(From_Loc_To_Be_Filled_ID,3)
from EC_Master_Company_LHPO_Parameters

Select @Region_id = Region_id from Ec_Master_Branch
Where Branch_ID = @Branch_Id


--@From_Loc_To_Be_Filled_ID 
-- = 1 means Branch
-- = 2 means Service Location
-- = 3 means Both

if(@From_Loc_To_Be_Filled_ID = 1) --// Fill Branch
	begin
		Select Service_Location_Name,Service_Location_ID  
		From EC_Master_Service_Location Location
		left outer JOIN  EC_Master_Branch Branch
		ON Branch.Branch_Id=Location.Branch_ID  
		Where Service_Location_Name like @SearchFor + '%' 
		and Location.Is_Active = 1
		and Is_Branch = 1
		and Branch.Region_id = @Region_id
	end
else if(@From_Loc_To_Be_Filled_ID = 2) --// Fill Service Location
	begin
		Select Service_Location_Name,Service_Location_ID  
		From EC_Master_Service_Location Location
		left outer JOIN  EC_Master_Branch  Branch
		ON Branch.Branch_Id=Location.Branch_ID  
		Where Location.Service_Location_Name like @SearchFor + '%' 
		and Location.Is_Active = 1   
		and Is_Branch = 0
		and Branch.Region_id = @Region_id

	end
else     --// Fill Both(Branch and Service Location)
	begin

		select Service_Location_Name,Service_Location_ID 
		from  EC_Master_Service_Location
		Where Is_Active = 1
		      and Service_Location_Name like @SearchFor + '%' 

	end
End  




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- =============================================                    
-- Author:  <Harshal A. Sapre>                    
-- Create date: <26-02-2009>                    
-- [dbo].[EC_RPT_Direct_Printing_MR_Nandwana] 106,33   
-- 152                    
-- =============================================                 
CREATE PROCEDURE [dbo].[EC_RPT_Direct_Printing_MR_Nandwana]                   
@Menu_Item_ID int,            
@Document_ID int                            
AS                    
BEGIN                    
 SET NOCOUNT ON;     
    
IF @Menu_Item_ID = 195    
BEGIN    
    
select distinct A.Credit_Memo_ID as [mr_id],          
  (MR.Branch_Code + '-' +  A.Credit_Memo_no_for_print) as Invoice_No,          
  A.Credit_Memo_date as mr_date,          
  C.Branch_name as [Booking Branch],          
  B.gc_date,          
  case Is_Credit_For_Consignee when 1 then B.Consignee_Name when 0 then B.Consignor_Name End as Client_Name,          
  B.gc_no_for_print as [Reciept No],          
--  cast(round((case when B.payment_type_id=1 then B.sub_total          
--  else B.total_gc_amount end),0) as float) as [Amount],  
        
  (B.sub_total + A.Octroi_Form_Charges + A.Detention_Charges + A.GI_Charges 
	+ A.Local_Charges + A.Demurage_Charges + A.Additional_Charges 
	- A.Discount_Amount) as [Amount], 

  isnull(A.Octroi_Receipt_No,'') as Oct_Receipt_No,          
  A.Hamali_Charges as Unloading_Charge,          
  A.Octroi_Amount as Octroi,          
          
  case when a.Service_Tax_Payable_By = 3 Then
  A.Service_Tax_Amount
  Else 0 End as [Service Tax],          
            
  A.Octroi_Service_Charges as Octroi_Service_Charge,          
          
--  ((case when B.payment_type_id=1 then B.sub_total          
--  else B.total_gc_amount end) +
--  cast(round((
--		case when a.Service_Tax_Payable_By = 3 Then	cast(round(A.Service_Tax_Amount,0) as float) Else 0 End  
--		+ A.Octroi_Amount + A.Hamali_Charges + A.Octroi_Service_Charges),0) as float)) 
	Total_MR_Amount as Total,      
      
  '( ' + f.First_Name + ' ' + f.Middle_Name + ' ' + f.Last_Name + ' )' as [Created_By]                  
         
from  dbo.FA_Opr_Credit_Memo A          
 Inner Join ec_opr_vtrans_gc B          
  On B.Gc_Id=A.Gc_Id          
 Inner Join ec_master_branch C          
  On C.branch_id=B.From_Branch_ID          
 Inner Join EC_Master_Payment_Type          
  On EC_Master_Payment_Type.payment_type_id=B.payment_type_id          
 Inner Join EC_Opr_VTrans_GC_Commodity_Details D          
  On d.gc_id=a.gc_id       
      
INNER JOIN dbo.COM_Adm_User e                  
ON a.Created_By = e.User_Id                  
INNER JOIN EC_MASTER_EMPLOYEE f                  
ON e.Employee_Id = f.Emp_ID       
    
Inner Join ec_master_branch MR          
On A.Credit_Memo_Branch_ID =MR.branch_id    
          
Where A.Is_Cancelled=0 and B.Is_Cancelled=0          
and A.Credit_Memo_ID=@Document_ID          
          
select  A.Credit_Memo_ID as [mr_id],
d.articles as cases,
-- Case when d.Item_ID = 0 Then       
--  g.packing_type + ' - ' + e.Commodity_Name 
-- else      
--  g.packing_type + ' - ' + e.Commodity_Name + ' - ' + f.Item_Name    
-- End 
g.packing_type as Particulars          
from FA_Opr_Credit_Memo A          
Inner Join ec_opr_vtrans_gc B          
  On B.Gc_Id=A.Gc_Id          
Inner Join EC_Opr_VTrans_GC_Commodity_Details D          
  On d.gc_id=a.gc_id          
--LEFT OUTER JOIN ec_master_commodity e             
--  ON d.Commodity_ID = e.Commodity_ID             
--LEFT OUTER JOIN ec_master_Item f              
--  ON d.Item_ID = f.Item_ID               
LEFT OUTER JOIN dbo.EC_Master_Packing g               
  ON d.Packing_ID = g.Packing_ID          
          
Where A.Is_Cancelled=0 and B.Is_Cancelled=0          
and A.Credit_Memo_ID=@Document_ID    

Select a.MR_ID, NULL as Cheque_No, '' as Cheque_Bank_Name, NULL as Cheque_Amount 
from FA_Opr_MR a
Where A.Is_Cancelled=0 and A.mr_id=@Document_ID    
 
END    
Else    
BEGIN    
select distinct A.mr_id,          
  (MR.Branch_Code + '-' + A.mr_no_for_print) as Invoice_No,          
  A.mr_date as mr_date,          
  C.Branch_name as [Booking Branch],          
  B.gc_date,
  case @Menu_Item_ID when 106 then B.Consignor_Name else B.Consignee_Name end as Client_Name,          
  B.gc_no_for_print as [Reciept No],          
--  cast(round((case when B.payment_type_id=1 then B.sub_total          
--  else B.total_gc_amount end),0) as float) as [Amount],      
    
  (B.sub_total + A.Octroi_Form_Charges + A.Detention_Charges) as [Amount], 
  isnull(A.Octroi_Receipt_No,'') as Oct_Receipt_No,          
  A.Hamali_Charges as Unloading_Charge,          
  A.Octroi_Amount as Octroi,          
          
  case @Menu_Item_ID when 106 then 
	case when b.Tax_Payable_By = 3 Then A.Service_Tax_Amount Else 0 End 
  else
	case when a.Service_Tax_Payable_By = 3 Then A.Service_Tax_Amount Else 0 End 
  End as [Service Tax],         
            
  A.Octroi_Service_Charges as Octroi_Service_Charge,          
          
--  ((case when B.payment_type_id=1 then B.sub_total          
--  else B.total_gc_amount end) +
--  cast(round((
--		case when a.Service_Tax_Payable_By = 3 Then	cast(round(A.Service_Tax_Amount,0) as float) Else 0 End  
--		+ A.Octroi_Form_Charges + A.Detention_Charges + A.Octroi_Amount + A.Hamali_Charges + A.Octroi_Service_Charges),0) as float)) 
	Total_MR_Amount as Total,      
      
  '( ' + f.First_Name + ' ' + f.Middle_Name + ' ' + f.Last_Name + ' )' as [Created_By]                  
         
from  dbo.FA_Opr_MR A          
 Inner Join ec_opr_vtrans_gc B          
  On B.Gc_Id=A.Gc_Id          
 Inner Join ec_master_branch C          
  On C.branch_id=B.From_Branch_ID          
 Inner Join EC_Master_Payment_Type          
  On EC_Master_Payment_Type.payment_type_id=B.payment_type_id          
 Inner Join EC_Opr_VTrans_GC_Commodity_Details D          
  On d.gc_id=a.gc_id       
      
INNER JOIN dbo.COM_Adm_User e                  
ON a.Created_By = e.User_Id                  
INNER JOIN EC_MASTER_EMPLOYEE f                  
ON e.Employee_Id = f.Emp_ID           
         
Inner Join ec_master_branch MR          
On A.MR_Branch_ID =MR.branch_id    
          
Where A.Is_Cancelled=0 and B.Is_Cancelled=0          
and A.mr_id=@Document_ID          
          
select  a.MR_Id,
d.articles as cases,
-- Case when d.Item_ID = 0 Then       
--  g.packing_type + ' - ' + e.Commodity_Name 
-- else      
--  g.packing_type + ' - ' + e.Commodity_Name + ' - ' + f.Item_Name    
-- End 
g.packing_type as Particulars          
from FA_Opr_MR A          
Inner Join ec_opr_vtrans_gc B          
  On B.Gc_Id=A.Gc_Id          
Inner Join EC_Opr_VTrans_GC_Commodity_Details D          
  On d.gc_id=a.gc_id          
--LEFT OUTER JOIN ec_master_commodity e             
--  ON d.Commodity_ID = e.Commodity_ID             
--LEFT OUTER JOIN ec_master_Item f              
--  ON d.Item_ID = f.Item_ID               
LEFT OUTER JOIN dbo.EC_Master_Packing g               
  ON d.Packing_ID = g.Packing_ID          
          
Where A.Is_Cancelled=0 and B.Is_Cancelled=0          
and A.mr_id=@Document_ID          
    

Select a.MR_ID, b.Cheque_No, b.Cheque_Bank_Name, b.Cheque_Amount 
from FA_Opr_MR a
LEFT OUTER JOIN FA_Opr_MR_Bank_Details b
ON a.MR_ID = b.MR_ID
Where A.Is_Cancelled=0 and A.mr_id=@Document_ID      

END    
          
select ec_master_company.Address_Line_1 + ', ' + ec_master_company.Address_Line_2+ '  ' + cast(ec_master_city.City_Name as varchar(20)) +''+ cast(Pin_Code as varchar(10))           
as [Company]          
from ec_master_company           
Inner Join ec_master_city           
On ec_master_city.city_id=ec_master_company.city_id          
End














GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--select dbo.EC_RPT_Incoming_Trucks_Has_Memo_For_Me ('hO',0,8)

CREATE Function [dbo].[EC_RPT_Incoming_Trucks_Has_Memo_For_Me]
(
@Hierarchy_Code varchar(5),
@Main_ID int,
@Lhpo_ID int
)

RETURNS bit
AS  

BEGIN
declare @Has_Memo_For_Me bit
set @Has_Memo_For_Me = 0

--select @Has_Memo_For_Me = 1 from ec_opr_vtrans_lhpo_memo_Details lhpo_details
--inner join ec_opr_vtrans_memo memo
--on lhpo_details.memo_id = memo.memo_id
--inner join ec_master_branch memo_to_branch
--on memo.memo_to_branch_Id = memo_to_branch.branch_id

select @Has_Memo_For_Me = 1 from ec_opr_vtrans_memo memo
inner join ec_master_branch memo_to_branch
on memo.To_Branch_Id = memo_to_branch.branch_id
where
lhpo_id = LHPO_ID
and memo.AUS_ID = 0
and Memo_Type_Id = 1
and
((memo_to_branch.branch_id = @Main_ID and @Hierarchy_Code = 'BO') or
(memo_to_branch.area_id = @Main_ID and @Hierarchy_Code = 'AO') or
(memo_to_branch.region_id = @Main_ID and @Hierarchy_Code = 'RO') or
(@Hierarchy_Code in ('HO','AO')))

RETURN @Has_Memo_For_Me

END



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE proc [dbo].[EC_Opr_AUS_Other_Agency_GC_Agency_Search]
@SearchFor varchar(20)
as
BEGIN
	select upper(Branch_Name) as Agency_Name,branch_id as Agency_Id
	from EC_Master_branch
	where Agency_Ledger_Id > 0	and Is_Active=1
	and Branch_Name like @SearchFor
	order by Branch_Name 
END




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





  
CREATE proc [dbo].[EC_Opr_GC_Other_Agency_Get_Ledger]
@Agency_Id int = 0
as
BEGIN
	declare @LedgerId int ; set @LedgerId = 0 

	set @LedgerId = (select isnull(Agency_Ledger_ID,0) from ec_master_branch where Branch_Id = @Agency_Id)

	select upper(Ledger_Name) as Agency_Ledger_Name,
			Ledger_Id as Agency_Ledger_Id
	from FA_Master_Ledger
	where Ledger_Id = @LedgerId
END



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









-- =============================================
-- Author:		<Sunil Bhoyar>
-- Create date: < 19 Jan 2009 >
-- Description:	<EC_FA_Opr_GcEffects>
-- =============================================
--Declare @Error_Code int,@ERROR_DESC AS VARCHAR(4000); EXEC EC_FA_Opr_GcAccountEffects 8,'BO',2,1,18,1,2,@Error_Code,@ERROR_DESC ; print @ERROR_DESC
CREATE Proc [dbo].[EC_FA_Opr_GcAccountEffects]
(
@Year_Code int,
@Hierarchy_Code varchar(2),
@Main_Id int,
@Division_Id int,
@GC_Id int,
@MR_Id int=0,
@User_Id int,
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)
As
BEGIN

--BEGIN TRY
--BEGIN TRAN
--
SET NOCOUNT ON;
set @Error_Code = 0;
set @ERROR_DESC = '';
Declare @Document_ID int,@Narration Varchar(1000)--FA_Master_GC_Accounting_ParametersDeclare 
------GC Param------
@Is_Treat_Booking_Income_As_Advance_Income as bit,
@Is_To_Be_Billed_Accounting_GC_Wise as bit,
@Is_Bookking_Money_Receipt_Required as bit,@Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking bit,@Is_Auto_Booking_MR_For_Paid_Booking bit,------GC Values------
@Booking_Mode_Id as int,@Booking_Type_Id as int,@Payment_Type_Id as int,@Bank_Name varchar(50),@Cash_Amount numeric(18,2),@Cheque_Amount numeric(18,2),@Total_GC_Amount numeric(18,2),@Sub_Total numeric(18,2),@Service_Tax_Amount numeric(18,2),@GC_No varchar(20),@GC_Date dateTime, @Booking_Branch_Id int ,@Delivery_Branch_Id int,@Cheque_No int,@Cheque_Date dateTime,@Tax_Payable_By int,@Service_Tax_Percent numeric(18,2),@MRBankXML XML,@Advance_Amount numeric(18,2),@Service_Tax_On_Advance numeric(18,2),@CreateBillXML XML,@CreditDaysShortTermLedger INT,----FA Ledgers-------@GenVoucherId intselect @Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking =  Isnull(Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking,0)From dbo.EC_Master_Company_Parametersselect @Is_Treat_Booking_Income_As_Advance_Income=Is_Treat_Booking_Income_As_Advance_Income,
@Is_To_Be_Billed_Accounting_GC_Wise=Is_To_Be_Billed_Accounting_GC_Wise,
@Is_Bookking_Money_Receipt_Required=Is_Bookking_Money_Receipt_RequiredFrom FA_Master_GC_Accounting_Parametersselect @Is_Auto_Booking_MR_For_Paid_Booking=Isnull(Is_Auto_Booking_MR_For_Paid_Booking,0)From EC_Master_Company_GC_Parameter----Reverse Account Effect--------			set @Document_ID =2---GC	EXEC	[dbo].[EC_FA_Opr_ReverseAccountEffects]
			@Document_Id = @Document_ID,
			@Transaction_ID = @GC_Id--------------------------------------select @Booking_Mode_Id=Booking_Mode_Id,
@Booking_Type_Id=Booking_Type_Id,
@Payment_Type_Id=Payment_Type_Id,
@Booking_Branch_Id =From_Branch_Id,@Delivery_Branch_Id =Delivery_Branch_Id,
@Cheque_No=IsNull(Cheque_No,0),
@Cheque_Date=IsNull(Cheque_Date,Getdate()),
@Bank_Name=Isnull(Bank_Name,''),
@Cash_Amount=IsNull(Cash_Amount,0),
@Cheque_Amount=IsNull(Cheque_Amount,0),@Total_GC_Amount=IsNull(Total_GC_Amount,0),@Sub_Total=IsNull(Sub_Total,0),@Service_Tax_Amount=IsNull(Service_Tax_Amount,0),@GC_No=GC_No_For_Print,@GC_Date=GC_Date,@Tax_Payable_By=Tax_Payable_By,@Service_Tax_Percent=IsNull(Service_Tax_Percent,0),@Advance_Amount=Advance_Amount,@Service_Tax_On_Advance=Service_Tax_On_AdvanceFrom dbo.EC_Opr_VTrans_GCwhere GC_Id=@GC_IdDeclare @UnBilled_GCAc int,@Booking_Income_Ledger int,@Service_Tax_Ledger int,        @Booking_Branch_Cash_Ledger int,@Booking_Branch_Bank_Ledger int,@Booking_Branch_Ledger int,		@Delivery_Branch_Ledger int,@ToPayRecovery_Booking_Branch_Ledger int,@ToPayRecovery_Delivery_Branch_Ledger int,
        @CreateVoucherXML XML,@Voucher_Type_Id int,@Delivery_Branch_Cash_Ledger int,@Delivery_Branch_Bank_Ledger int,
		@Short_Term_Bill_Ledger int
 	if(@Is_Treat_Booking_Income_As_Advance_Income=1)	Begin		select @Booking_Income_Ledger=dbo.Get_Ledger_Id1(@Division_Id,1001,@Booking_Type_Id,@Payment_Type_Id)	End	else	Begin		select @Booking_Income_Ledger=dbo.Get_Ledger_Id1(@Division_Id,1002,@Booking_Type_Id, @Payment_Type_Id)	End	if(@Tax_Payable_By=3)---tax payabel By transporter			select @Service_Tax_Ledger = dbo.Get_Ledger_Id1(@Division_Id,1003,@Booking_Type_Id, @Payment_Type_Id)	else		Begin			Set @Service_Tax_Ledger =Null			Set @Service_Tax_Amount=0		End    Select            @ToPayRecovery_Booking_Branch_Ledger = To_Pay_Recovery_Ledger_Id,           @Booking_Branch_Ledger = Branch_Ledger_Id,           @Booking_Branch_Cash_Ledger=Cash_Ledger_Id,           @Booking_Branch_Bank_Ledger=Bank_Ledger_Id    from EC_Master_Branch where Branch_Id=@Booking_Branch_Id    Select            @ToPayRecovery_Delivery_Branch_Ledger = To_Pay_Recovery_Ledger_Id,           @Delivery_Branch_Ledger = Branch_Ledger_Id,           @Delivery_Branch_Cash_Ledger=Cash_Ledger_Id,           @Delivery_Branch_Bank_Ledger=Bank_Ledger_Id    from EC_Master_Branch where Branch_Id=@Delivery_Branch_Id--------------------------------------------Payment Type PAID---------------------------------------	if(@Payment_Type_Id = 2 And @Is_Auto_Booking_MR_For_Paid_Booking=0)---Paid	Begin
		set @CreateVoucherXML=
		'<NewDataSet>'
		+
		dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Booking_Branch_Cash_Ledger,@Cash_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		'</NewDataSet>'

            Set @Voucher_Type_Id=23 --Booking  SET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + 
' PAID BOOKING BRANCH,' + dbo.Get_Caption_Company_Parameter(1) + 
' No : ' + @GC_No + ' ,Cheque No : ' + cast(@Cheque_No as varchar(10)) + ',Cheque Date : ' + case when @Cheque_No = 0 then '' else dbo.DateOnlyDisplay(@Cheque_Date) end	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Booking_Branch_Id,---BOOKING BRANCH BOOK  
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@GC_Date,
			@Ref_No = @GC_No,
			@Ledger_Id =@Booking_Income_Ledger,
			@Total_Debit = @Total_GC_Amount,
			@Total_Credit = @Total_GC_Amount,
			@Narration = @Narration,--'GC PAID BOOKING',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @CreateVoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = '<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

	        EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@GC_Id,@GenVoucherId

     End --if(@Payment_Type_Id = 2)--------------------------------------------Payment Type TO PAY-----------------------------------------------------------------------------------Short Term Bill---------------------------------------	else if(@Payment_Type_Id = 4)---Short Term Bill	Begin				set @Short_Term_Bill_Ledger=dbo.Get_Ledger_Id1(@Division_Id,750,0,0)	set @CreateVoucherXML=
	'<NewDataSet>'
	+
	dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@Short_Term_Bill_Ledger,@Total_GC_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	'</NewDataSet>'

            Set @Voucher_Type_Id=23 --Booking   SET @CreateBillXML = '<NewDataSet></NewDataSet>'
IF((SELECT Maintain_Bill_By_Bill FROM FA_Master_Ledger WHERE Ledger_Id = @Short_Term_Bill_Ledger) = 1)
BEGIN

SELECT @CreditDaysShortTermLedger = Default_Credit_Period FROM FA_Master_Ledger WHERE Ledger_Id = @Short_Term_Bill_Ledger

SET @CreateBillXML =  '<NewDataSet>'
						+
						dbo.GetVoucherBillXML(@Short_Term_Bill_Ledger,0,@GC_No,1,@CreditDaysShortTermLedger,-1*@Total_GC_Amount,@GC_Date)
						+
					   '</NewDataSet>'

END
SET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + ' SHORT TERM BILL BOOKING BRANCH,' + dbo.Get_Caption_Company_Parameter(1) + ' No : ' + @GC_No + ' ,Cheque No : ' + cast(@Cheque_No as varchar(10)) + ',Cheque Date : ' + case when @Cheque_No = 0 then '' else dbo.DateOnlyDisplay(@Cheque_Date) end	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Booking_Branch_Id,---BOOKING BRANCH BOOK  
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@GC_Date,
			@Ref_No = @GC_No,
			@Ledger_Id =@Short_Term_Bill_Ledger,
			@Total_Debit = @Total_GC_Amount,
			@Total_Credit = @Total_GC_Amount,
			@Narration = @Narration,--'GC SHORT TERM BILL BOOKING',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @CreateVoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = @CreateBillXML,
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@GC_Id,@GenVoucherId

     End --	if(@Payment_Type_Id = 4)---Short Term Bill--------------------------------------------Short Term Bill---------------------------------------Else if(@Payment_Type_Id = 1 And @Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking = 1)---To PayBegin------------------------------------------------------------------BOOKING BRANCH BOOK--------------------------------------------------------------    Set @Voucher_Type_Id=23--Booking if(@Advance_Amount > 0)BeginDECLARE @Amount numeric(18,2)SET @Amount = @Sub_Total - @Advance_AmountIF @Tax_Payable_By = 3 --TransporterBEGINSET @Amount = @Amount + @Service_Tax_On_AdvanceEND	IF (@Cash_Amount > 0 AND @Cheque_Amount > 0)	BEGIN		set @CreateVoucherXML=
		'<NewDataSet>'
		+
		dbo.GetVoucherDetailsXML(@Booking_Branch_Cash_Ledger,@Cash_Amount,0,'',0,getdate())
		+
		dbo.GetVoucherDetailsXML(@Booking_Branch_Bank_Ledger,@Cheque_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Delivery_Branch_Ledger,@Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_On_Advance,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		'</NewDataSet>'
	END
	ELSE
	BEGIN		set @CreateVoucherXML=
		'<NewDataSet>'
		+
		dbo.GetVoucherDetailsXML(CASE WHEN @Cash_Amount > 0 THEN @Booking_Branch_Cash_Ledger ELSE @Booking_Branch_Bank_Ledger END,@Advance_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Delivery_Branch_Ledger,@Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_On_Advance,@Bank_Name,@Cheque_No,@Cheque_Date)
		+
		'</NewDataSet>'
	ENDEndElseBegin	set @CreateVoucherXML=
	'<NewDataSet>'
	+
	dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@Delivery_Branch_Ledger,@Sub_Total,0,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	'</NewDataSet>'EndSET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + ' To Pay BOOKING BRANCH,' + dbo.Get_Caption_Company_Parameter(1) + ' No : ' + @GC_No + ' ,Cheque No : ' + cast(@Cheque_No as varchar(10)) + ',Cheque Date : ' + case when @Cheque_No = 0 then '' else dbo.DateOnlyDisplay(@Cheque_Date) end	

	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Booking_Branch_Id,---BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@GC_Date,
			@Ref_No = @GC_No,
			@Ledger_Id =@Booking_Income_Ledger,
			@Total_Debit = @Sub_Total,
			@Total_Credit = @Sub_Total,
			@Narration = @Narration,--'GC To Pay BOOKING BRANCH BOOK',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @CreateVoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = '<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@GC_Id,@GenVoucherId

--------------------------------------------------------------------------------------------------------------------------------DELIVERY BRANCH BOOK--------------------------------------------------------------

    Set @Voucher_Type_Id=23--Booking 	set @CreateVoucherXML=
	'<NewDataSet>'
	+
	dbo.GetVoucherDetailsXML(@Booking_Branch_Ledger,0,CASE WHEN @Advance_Amount > 0 THEN @Amount ELSE @Sub_Total END,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@ToPayRecovery_Delivery_Branch_Ledger,CASE WHEN @Advance_Amount > 0 THEN @Amount ELSE @Sub_Total END,0,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	'</NewDataSet>'SET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + ' To Pay DELIVERY BRANCH,'+ dbo.Get_Caption_Company_Parameter(1) + ' No : ' + @GC_No + ' ,Cheque No : ' + cast(@Cheque_No as varchar(10)) + ',Cheque Date : ' + case when @Cheque_No = 0 then '' else dbo.DateOnlyDisplay(@Cheque_Date) end	
	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Delivery_Branch_Id,---DELIVERY BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@GC_Date,
			@Ref_No = @GC_No,
			@Ledger_Id =@Booking_Branch_Ledger,
			@Total_Debit = @Sub_Total,
			@Total_Credit = @Sub_Total,
			@Narration = @Narration,--'GC To Pay DELIVERY BRANCH BOOK',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @CreateVoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = '<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT
		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@GC_Id,@GenVoucherId

--------------------------------------------------------------   End--if(@Payment_Type_Id = 1)--To Pay
--------------------------------------------Payment Type TO BE BILLED GC WISE ---------------------------Else if(@Payment_Type_Id = 1 And @Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking = 0)---To Pay For ExcelBegin------------------------------------------------------------------BOOKING BRANCH BOOK--------------------------------------------------------------	Declare @To_Pay_Recovery_Ledger_For_Booking_Branch_Id int	set @To_Pay_Recovery_Ledger_For_Booking_Branch_Id=dbo.Get_Ledger_Id1(0,1300,0,0)    Set @Voucher_Type_Id=23--Booking 	set @CreateVoucherXML=
	'<NewDataSet>'
	+
	dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	dbo.GetVoucherDetailsXML(@To_Pay_Recovery_Ledger_For_Booking_Branch_Id,@Sub_Total,0,@Bank_Name,@Cheque_No,@Cheque_Date)
	+
	'</NewDataSet>'

SET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + ' To Pay BOOKING BRANCH,'+ dbo.Get_Caption_Company_Parameter(1) + ' No : ' + @GC_No + ' ,Cheque No : ' + cast(@Cheque_No as varchar(10)) + ',Cheque Date : ' + case when @Cheque_No = 0 then '' else dbo.DateOnlyDisplay(@Cheque_Date) end
	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code =@Hierarchy_Code,
			@Main_Id = @Booking_Branch_Id,---BOOKING BRANCH BOOK
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date =@GC_Date,
			@Ref_No = @GC_No,
			@Ledger_Id =@Booking_Income_Ledger,
			@Total_Debit = @Sub_Total,
			@Total_Credit = @Sub_Total,
			@Narration = @Narration,--'GC To Pay BOOKING BRANCH BOOK',
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @CreateVoucherXML,
			@VoucherCostCentreXML = '<NewDataSet></NewDataSet>',
			@VoucherBillByBillXML = '<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@GC_Id,@GenVoucherId--------------------------------------------------------------  End--Else if(@Payment_Type_Id = 1 And @Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking = 0)---To Pay For Excel
--------------------------------------------Payment Type TO BE BILLED GC WISE ---------------------------Else if(@Payment_Type_Id = 3 And @Is_To_Be_Billed_Accounting_GC_Wise=1)---TO BE BILLEDBeginDeclare @Count int,@Sr_No int,        @Billing_Client_ID int,@Billing_Branch_ID int,@Bill_Ratio numeric(18,2),        @Billing_Client_Ledger int,@Billing_Branch_Ledger int,@Bill_Amount numeric(18,2),        @BillingBranch_Voucher_XML xml,@BookingBranch_Voucher_XML Xml,@BillingBranch_Bill_XML Xml,        @CreditDays int,@BookingBranch_Bill_XML Xml,@BookingBranch_TotalAmount numeric(18,2),		@BillingBranch_TotalAmount numeric(18,2),@Billing_Hierarchy_Code varchar(2)Declare @Table_GCBillingDetails as Table(Sr_No int Identity, GC_ID int,Billing_Client_ID int,Billing_Branch_ID int,Bill_Ratio numeric(18,2),Billing_Hierarchy_Code varchar(2))Insert Into @Table_GCBillingDetails(GC_ID,Billing_Client_ID,Billing_Branch_ID,Bill_Ratio,Billing_Hierarchy_Code)Select GC_ID,Billing_Client_ID,Billing_Branch_ID,Bill_Ratio,Billing_HierarchyFrom dbo.EC_Opr_Vtrans_GC_Billing_Details where GC_ID=@GC_Idselect @Count= Count(*) From @Table_GCBillingDetailsselect @Sr_No=1set @BookingBranch_Voucher_XML=''set @BookingBranch_Bill_XML=''----@Booking_Income_Ledger Cr	 Set @BookingBranch_Voucher_XML =dbo.GetVoucherDetailsXML(@Booking_Income_Ledger,0,@Sub_Total,@Bank_Name,@Cheque_No,@Cheque_Date)
--select @Booking_Income_Ledgerwhile @Sr_No<=@CountBegin		Select @Billing_Client_ID=Billing_Client_ID,@Billing_Branch_ID=Billing_Branch_ID,@Bill_Ratio=Bill_Ratio,@Billing_Hierarchy_Code=Billing_Hierarchy_Code		From @Table_GCBillingDetails where Sr_No=@Sr_No		set @Billing_Client_Ledger=dbo.GetClientLedger(@Billing_Client_ID)		set @Billing_Branch_Ledger=dbo.GetLocationLedger(@Billing_Hierarchy_Code,@Billing_Branch_ID)		set @Bill_Amount=@Bill_Ratio/100 * @Sub_Total			set @BillingBranch_Voucher_XML=''		set @BillingBranch_Bill_XML=''		if(@Billing_Hierarchy_Code='BO' And @Billing_Branch_ID=@Booking_Branch_Id) 		Begin		---Billing_Client_Ledger  Dr			Set @BookingBranch_Voucher_XML = cast(@BookingBranch_Voucher_XML as Varchar(2000))
			+
			dbo.GetVoucherDetailsXML(@Billing_Client_Ledger,@Bill_Amount+@Service_Tax_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)			 + 			dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)		    select @CreditDays=Default_Credit_Period From FA_Master_Ledger where Ledger_Id=@Billing_Client_Ledger			Set @BookingBranch_Bill_XML = dbo.GetVoucherBillXML(@Billing_Client_Ledger,0,@Gc_No,1,@CreditDays,@Bill_Amount+@Service_Tax_Amount,@Gc_Date)		 End----------------BILLING BRANCH BOOKS---------------------------------------	if(@Billing_Hierarchy_Code='BO' And @Billing_Branch_ID<>@Booking_Branch_Id) 		Begin		---Billing_Client_Ledger  Dr			Set @BillingBranch_Voucher_XML = 
			'<NewDataSet>'
			 +
			 dbo.GetVoucherDetailsXML(@Billing_Client_Ledger,@Bill_Amount+@Service_Tax_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)			 + 			 dbo.GetVoucherDetailsXML(@Service_Tax_Ledger,0,@Service_Tax_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)             +			 dbo.GetVoucherDetailsXML(@Booking_Branch_Ledger,0,@Bill_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)             +			'</NewDataSet>'select @Billing_Client_Ledger,@Service_Tax_Ledger,@Booking_Branch_Ledger		    select @CreditDays=Default_Credit_Period From FA_Master_Ledger where Ledger_Id=@Billing_Client_Ledger			Set @BillingBranch_Bill_XML = 				'<NewDataSet>'
				+
				dbo.GetVoucherBillXML(@Billing_Client_Ledger,0,@Gc_No,1,@CreditDays,(@Bill_Amount+@Service_Tax_Amount),@Gc_Date)
				+
				'</NewDataSet>'                set @BillingBranch_TotalAmount=(@Bill_Amount+@Service_Tax_Amount)				set @Voucher_Type_Id=36				select cast(@BillingBranch_Voucher_XML as Varchar(2000)) as 'A1'				select cast(@BillingBranch_Bill_XML as Varchar(2000)) as 'A2'SET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + ' TO BE BILLED BILLING BRANCH BOOKS,' + dbo.Get_Caption_Company_Parameter(1) + ' No : ' + @GC_No + ' ,Cheque No : ' + cast(@Cheque_No as varchar(10)) + ',Cheque Date : ' + case when @Cheque_No = 0 then '' else dbo.DateOnlyDisplay(@Cheque_Date) end				EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
						@Year_Code = @Year_Code,
						@Hierarchy_Code =@Billing_Hierarchy_Code,
						@Main_Id = @Billing_Branch_Id,
						@Division_Id = @Division_Id,
						@User_Id = @User_Id,
						@Voucher_Id = -1,--For Add
						@Voucher_No = '',
						@Voucher_Type_Id = @Voucher_Type_Id,
						@Voucher_Type_Id_Main = 0,
						@Voucher_Date =@GC_Date,
						@Ref_No = @GC_No,
						@Ledger_Id =@Billing_Client_Ledger,
						@Total_Debit =@BillingBranch_TotalAmount,
						@Total_Credit = @BillingBranch_TotalAmount,
						@Narration = @Narration,--'',
						@FBT_Payment_Type = '',
						@Is_Manual_Entry=0,
						@VoucherXML = @BillingBranch_Voucher_XML,
						@VoucherBillByBillXML = @BillingBranch_Bill_XML,
						@Gen_Voucher_Id = @GenVoucherId OUTPUT		                EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@GC_Id,@GenVoucherId
		 End---if(@Billing_Branch_ID<>@Booking_Branch_Id) -----------------------END BILLING BRANCH BOOKS---------------------------------------		if(@Billing_Hierarchy_Code='BO' And @Billing_Branch_ID<>@Booking_Branch_Id)		   Set @BookingBranch_Voucher_XML = Cast(@BookingBranch_Voucher_XML as Varchar(2000)) + 			   dbo.GetVoucherDetailsXML(@Billing_Branch_Ledger,@Bill_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)----To Get Store Total_Credit,Total_Debit For Booking Branch Voucher          set @BookingBranch_TotalAmount=Isnull(@BookingBranch_TotalAmount,0)+(@Bill_Amount+@Service_Tax_Amount)	Set @Sr_No=@Sr_No + 1End--while @Sr_No<=@Count-----------------------BOOKING BRANCH--------------------------------------------------
	 Set @BookingBranch_Voucher_XML='<NewDataSet>'+ Cast(@BookingBranch_Voucher_XML as Varchar(2000)) + '</NewDataSet>'
	 Set @BookingBranch_Bill_XML='<NewDataSet>'+ Cast(@BookingBranch_Bill_XML as Varchar(2000)) + '</NewDataSet>'
--select cast(@BookingBranch_Voucher_XML as Varchar(2000))select cast(@BookingBranch_Bill_XML as Varchar(2000)) as 'A3'select cast(@BookingBranch_Voucher_XML as Varchar(2000)) as 'A4'	 set @Voucher_Type_Id=23SET @Narration = 'In ' + dbo.Get_Caption_Company_Parameter(1) + ' TO BE BILLED BOOKING BRANCH BOOKS,' + dbo.Get_Caption_Company_Parameter(1) + ' No : ' + @GC_No + ' ,Cheque No : ' + cast(@Cheque_No as varchar(10)) + ',Cheque Date : ' + case when @Cheque_No = 0 then '' else dbo.DateOnlyDisplay(@Cheque_Date) endEXEC	[dbo].[EC_FA_Mst_Voucher_Save]
		@Year_Code = @Year_Code,
		@Hierarchy_Code =@Hierarchy_Code,
		@Main_Id = @Booking_Branch_Id,
		@Division_Id = @Division_Id,
		@User_Id = @User_Id,
		@Voucher_Id = -1,--For Add
		@Voucher_No = '',
		@Voucher_Type_Id = @Voucher_Type_Id,
		@Voucher_Type_Id_Main = 0,
		@Voucher_Date =@GC_Date,
		@Ref_No = @GC_No,
		@Ledger_Id =@Booking_Income_Ledger,
		@Total_Debit = @BookingBranch_TotalAmount,
		@Total_Credit = @BookingBranch_TotalAmount,
		@Narration = @Narration,--'',
		@FBT_Payment_Type = '',
		@Is_Manual_Entry=0,
		@VoucherXML = @BookingBranch_Voucher_XML,
		@VoucherBillByBillXML = @BookingBranch_Bill_XML,
		@Gen_Voucher_Id = @GenVoucherId OUTPUT


		EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@GC_Id,@GenVoucherId

-----------------------------END BOOKING BRANCH-------------------------------------End--select @BookingBranch_Voucher_XML-----FA_Opr_Operational_Vouchers_Details----dbo.GetClientLedger()----dbo.GetFixedLedger()----dbo.GetOprLedger()----dbo.GetBranchLedger()----dbo.GetBranchCashLedger()----dbo.GetBranchToPayRecoveryLedger()----dbo.GetBranchBankLedger()--select @Error_Code--
--COMMIT TRAN
--END TRY
--BEGIN CATCH
-- ROLLBACK TRAN
-- SELECT @ERROR_CODE=ERROR_NUMBER()
-- SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
-- CAST(ERROR_MESSAGE() as VARCHAR(4000))
--select @ERROR_DESC
--END CATCH
END
















































GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



  
	CREATE PROCEDURE [dbo].[EC_Opr_GC_Allow_To_Rectify]
	(
		@GC_No_For_Print varchar(10),
		@Branch_Id int =0 ,
		@Hierarchy_Code varchar(5)='BO',
		@Is_Allow_To_Rectify bit output,
		@Rectification_GC_Id int output,
		@year_code int = 0,
		@division_id int = 0 ,
		@Error_Desc varchar(100) output,
		@Is_Octroi_Updated bit output,
		@Is_Octroi_Applicable bit output
	)
	AS
	BEGIN

		declare @GC_Status_Id_At_Current_Branch int,@At_Booking_Stage int,
				@ReBook_Against_GC_Id int ,@New_ReBook_GC_Id int ,@Is_Agency_Booking  bit,
		        @Is_Billed bit,@Is_Attached_To_This_Gc  bit,@Is_Delivered bit,
		--      @Is_Octroi_Updated  bit
				@Is_Cancelled bit,@Is_Attached bit,@Is_ReBooked bit,@Is_Opening_GC bit	

		set @Is_Allow_To_Rectify = 0
		set @Rectification_GC_Id = 0
		set @GC_Status_Id_At_Current_Branch = 0
		set @Is_Octroi_Updated = 0
		set @Is_Octroi_Applicable = 0
		set @Is_Cancelled = 0
		set @Is_Billed = 0
		set @Is_Attached_To_This_Gc = 0
		set @Is_Agency_Booking = 0 

		select @Rectification_GC_Id = GC_ID,
			@Is_Allow_To_Rectify = 1,
			@Is_Octroi_Updated = Is_Octroi_Updated ,
			@Is_Cancelled = Is_Cancelled,
			@Is_ReBooked = Is_ReBooked ,
			@Is_Agency_Booking = Is_Agency_Booking,
			@Is_Opening_GC = Is_Opening_GC ,
			@New_ReBook_GC_Id = New_ReBook_GC_Id,
			@ReBook_Against_GC_Id = ReBook_Against_GC_Id,
			@Is_Octroi_Applicable = Is_Octroi_Applicable
		from EC_Opr_VTrans_GC 
		where Division_ID = @division_id
			and Year_Code = @year_code 
			-- and GC_No_For_Print = @GC_No_For_Print
			and GC_No = @GC_No_For_Print
--			and Is_Agency_Booking = 0
			and Total_Articles > 0
			and Is_Opening_GC = 0

		select @Is_Allow_To_Rectify = 0 from EC_Opr_VTrans_GC_Articles
		where GC_Id = @Rectification_GC_Id
			and Articles > 0 and Is_Cancelled = 0

		select @Is_Allow_To_Rectify = 0,@At_Booking_Stage = 1
		from EC_Opr_VTrans_GC_Articles
		where GC_Id = @Rectification_GC_Id 
			and Status_id = case when @Is_Agency_Booking = 0 then 0 else 9999 end
			and Articles = Actual_Articles 
			and Is_Cancelled = 0

		if @New_ReBook_GC_Id > 0
			set @Is_ReBooked = 1

		select @Is_Delivered = 1
		from EC_Opr_VTrans_Door_Delivery_Confirmation DDC_Details inner join 
			dbo.EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDC on
			DDC_Details.DDC_Id = DDC.ddc_Id and Is_Cancelled = 0
		where GC_Id = @Rectification_GC_Id

		select @Is_Billed = 1 from EC_Opr_VTrans_GC_Billing_Details
		where Is_Billed = 1 and GC_Id = @Rectification_GC_Id
	
		select top 1 @Is_Attached_To_This_Gc = 1 from EC_Opr_VTrans_GC
		where gc_id = Attached_GC_Id and Is_Cancelled = 0
		
		set @Is_Allow_To_Rectify = 0

		declare @Error_Message as varchar(4000)
		set @Error_Message = 'Can''t Rectify'

		set @Error_Desc = ''

		if @Rectification_GC_Id = 0	and @Is_Cancelled = 0
			set @Error_Desc = @Error_Message + ' (InValid No.)'
		else if @At_Booking_Stage = 1 and @Is_Cancelled = 0	and @Is_Attached_To_This_Gc = 0	
			set @Error_Desc = @Error_Message + ' (At Booking Stage)'
--		else if @Is_Octroi_Updated = 1 	and @Is_Cancelled = 0		
--			set @Error_Desc = @Error_Message + ' (Octroi Updated)'
		else if @Is_Cancelled = 1
			set @Error_Desc = @Error_Message + ' (Cancelled)'
		else if @Is_Attached_To_This_Gc = 1	
			set @Error_Desc = @Error_Message + ' (Attached)'
		else if @Is_ReBooked = 1
			set @Error_Desc = @Error_Message + ' (Rebooked)'
--		else if @Is_Opening_GC = 1
--			set @Error_Desc = @Error_Message + ' (Opening)'
		else if @Is_Delivered = 1
			set @Error_Desc = @Error_Message + ' (Delivered)'
		else if @Is_Billed = 1
			set @Error_Desc = @Error_Message + ' (Bill Prepared)'
		else if upper(@Hierarchy_Code) not in ('AO','RO','HO')
			set @Error_Desc = @Error_Message + ' (Branch User Not Authorized)'
		else
			set @Is_Allow_To_Rectify = 1
	end



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Amol>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[EC_FA_Opr_GcDeliveryAccountEffects]
(
@DDC_ID int,	
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)
AS
SET NOCOUNT ON;
BEGIN
	

--BEGIN TRY
--BEGIN TRAN
set @Error_Code = 0;
set @ERROR_DESC = '';


Declare @Is_Treat_Booking_Income_As_Advance_Income bit
select @Is_Treat_Booking_Income_As_Advance_Income=Isnull(Is_Treat_Booking_Income_As_Advance_Income,0)
From FA_Master_GC_Accounting_Parameters

if(@Is_Treat_Booking_Income_As_Advance_Income=0)
 GOTO EXIT_PROC



Declare @Document_ID intset @Document_ID = 16

----Reverse Account Effect--------EXEC	[dbo].[EC_FA_Opr_ReverseAccountEffects]
		@Document_Id = @Document_ID,
		@Transaction_ID = @DDC_ID
---------------------------------- 	

Declare 
@DDC_Date DateTime,@DDC_Branch_Id int,@User_Id int,
@Year_Code int,
@Hierarchy_Code varchar(2),
@Division_Id int,
@DDC_Voucher_No Varchar(50),
@IncomeFrieght_Ledger_Id int,@AdvanceFrieght_Ledger_Id int,@Total_Amount numeric(18,2),@VoucherDetailXML xml,@BillByBillXML xml,@Bank_Name varchar(100),@Cheque_No int,@Cheque_Date datetime,@GenVoucherId int,@Voucher_Type_Id int,
@GC_No varchar(20)



SELECT @Bank_Name = '',
	   @Cheque_No = 0,
	   @Cheque_Date = getdate()

----------------Selecting Values From Door Delivery Voucher---------------
select @Year_Code=Year_Code,
@Hierarchy_Code = 'BO',
@Division_Id = Division_ID,
@User_Id=Created_By,@DDC_Date = DDC_Date,
@DDC_Voucher_No = DDC_No_For_Print
From dbo.EC_Opr_VTrans_Door_Delivery_Confirmationwhere DDC_ID = @DDC_ID
---------------------------------------------------------------------------

Declare @Temp_Table Table(Sr_No int identity,GC_Id int,Total_Amount numeric(18,2),						  Booking_Type_Id int,Payment_Type_Id int,From_Branch_ID int,GC_No_For_Print varchar(20))INSERT INTO @Temp_Table(GC_Id,Total_Amount,Booking_Type_Id,Payment_Type_Id,From_Branch_ID,GC_No_For_Print)SELECT Distinct DDC.GC_ID,GC.Sub_Total,GC.Booking_Type_Id,GC.Payment_Type_Id,GC.From_Branch_ID,GC.GC_No_For_PrintFROM EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDC inner Join EC_Opr_VTrans_Door_Delivery_Confirmation MDDON DDC.DDC_ID=MDD.DDC_IDINNER JOIN EC_Opr_Vtrans_Gc GC  ON DDC.GC_ID = GC.GC_IDWHERE MDD.DDC_ID = @DDC_ID and MDD.Is_Cancelled=0 and  Payment_Type_Id <> 3 --TBBAnd Not Exists(select * From dbo.EC_Opr_VTrans_GC_Articles where GC_ID=GC.GC_Id ANd Status_ID=200  and Is_Cancelled=0)
Declare @Count int,@Sr_No int,@GC_Booking_Type_Id int,@GC_Payment_Type_Id intselect @Count=Count(*) From @Temp_TableSelect @Sr_No=1select @Sr_No+66while @Sr_No<=@CountBeginselect @Sr_No		select @DDC_Branch_Id = From_Branch_ID,			   @GC_Booking_Type_Id = Booking_Type_Id,			   @GC_Payment_Type_Id = Payment_Type_Id,			   @Total_Amount = Total_Amount,			   @GC_No = GC_No_For_Print		from @Temp_Table		where Sr_No = @Sr_No		select @IncomeFrieght_Ledger_Id = dbo.Get_Ledger_Id1(@Division_Id,1002,@GC_Booking_Type_Id,@GC_Payment_Type_Id)
		select @AdvanceFrieght_Ledger_Id = dbo.Get_Ledger_Id1(@Division_Id,1001,@GC_Booking_Type_Id,@GC_Payment_Type_Id)


		set @VoucherDetailXML=
		+
		dbo.GetVoucherDetailsXML(@IncomeFrieght_Ledger_Id,0,@Total_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)		+
		dbo.GetVoucherDetailsXML(@AdvanceFrieght_Ledger_Id,@Total_Amount,0,@Bank_Name,@Cheque_No,@Cheque_Date)		Set @VoucherDetailXML='<NewDataSet>'+cast(@VoucherDetailXML as Varchar(2000))+'</NewDataSet>'		Set @Voucher_Type_Id = 40    ----DDCdeclare @narration varchar(max)set @narration = 'IN BOOKS OF ' + dbo.Get_Caption_Company_Parameter(1) +
' BOOKING BRANCH Advance To Income Frieght On Delivery,' + dbo.Get_Caption_Company_Parameter(1) + ' No :' + @GC_No	   EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code = @Hierarchy_Code,
			@Main_Id = @DDC_Branch_Id,
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date = @DDC_Date,
			@Ref_No = @DDC_Voucher_No,
			@Ledger_Id = @IncomeFrieght_Ledger_Id,
			@Total_Debit = @Total_Amount,
			@Total_Credit = @Total_Amount,
			@Narration = @narration,
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @VoucherDetailXML,
			@VoucherBillByBillXML = '<NewDataSet></NewDataSet>',
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

			EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@DDC_ID,@GenVoucherId

	 set @Sr_No = @Sr_No + 1
end


EXIT_PROC:

--COMMIT TRAN
--END TRY
--BEGIN CATCH
-- ROLLBACK TRAN
-- SELECT @ERROR_CODE=ERROR_NUMBER()
-- SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
-- CAST(ERROR_MESSAGE() as VARCHAR(4000))
--
--END CATCH
--
END

















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:  <shiv >
-- Create date: <21/03/2009>
-- Description: <Fill From Service Location Name of that Branch For LHPO Operation> 
-- =============================================

CREATE Proc [dbo].[EC_Opr_ToServiceLocationLHPO_Search]  
(
@SearchFor as varchar(50),  
@Branch_Id int
)
as  
set nocount on;

Begin
Declare @To_Loc_To_Be_Filled_ID int

Select @To_Loc_To_Be_Filled_ID = isnull(To_Loc_To_Be_Filled_ID,3)
from EC_Master_Company_LHPO_Parameters

--@To_Loc_To_Be_Filled_ID 
-- = 1 means Branch
-- = 2 means Service Location
-- = 3 means Both

if(@To_Loc_To_Be_Filled_ID = 1) --// Fill Branch
	begin
		Select Service_Location_Name,Service_Location_ID  
		From EC_Master_Service_Location 
		Where Service_Location_Name like @SearchFor + '%' 
		and Is_Active = 1
		and Is_Branch = 1
	end
else if(@To_Loc_To_Be_Filled_ID = 2) --// Fill Service Location
	begin
		Select Service_Location_Name,Service_Location_ID  
		From EC_Master_Service_Location Location
		Where Location.Service_Location_Name like @SearchFor + '%' 
		and Location.Is_Active = 1  
		and Is_Branch = 0 
	end
else     --// Fill Both(Branch and Service Location)
	begin

		Select Service_Location_Name,Service_Location_ID  
		From EC_Master_Service_Location Location
		Where Location.Service_Location_Name like @SearchFor + '%' 
		and Location.Is_Active = 1
	end
End  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




  
            
            
-- =============================================            
-- Author:  <Harshal Sapre>            
-- Create date: <2009-01-21>            
-- Description: <Reserved GC>           
-- [dbo].[EC_RPT_Reserved_GC]  0,0,0,'2008-06-018','2009-06-18' ,0,0,100        
-- =============================================            
CREATE PROCEDURE [dbo].[EC_RPT_Reserved_GC]            
(            
 @Region_id int,                
 @Area_id int,                
 @Branch_id int,                
 @From_Date as datetime,            
 @To_Date as datetime,        
 @Division_Id int,    
 @PageIndex int,     
 @PageSize int,

 @calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1                    
)            
AS            
BEGIN            
             
 SET NOCOUNT ON; 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

        insert into @Dropdown_Search values ('Consignor Name','s,1')
		insert into @Dropdown_Search values ('Reserved Date','d,2')
		select  *From @Dropdown_Search

		return
	end;
--------------------------------------Filter-----------------------------------------   
  
-------------------------------STEP 1--------------------------------------------------------------    
WITH Reserved_GC AS    
(    
select     
  ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',             
  BookingRegion.Region_Name as [Booking Region],           
  BookingArea.Area_Name as [Booking Area],           
  BookingBranch.Branch_Name as [Booking Branch],           
  a.GC_No_For_Print as [gc_caption No],             
  dbo.dateonlydisplay(a.GC_Date) as [Reserved Date] ,
a.consignor_name as [Consignor Name]            
--  b.Document_No_For_Print as [Current Document No],             
--  b.Document_Date as [Current Document Date]            
            
FROM dbo.EC_Opr_VTrans_GC a            
 INNER JOIN dbo.EC_Opr_VTrans_GC_Articles B            
 ON B.GC_Id = a.GC_Id            
 INNER JOIN dbo.EC_Master_Branch BookingBranch            
 ON a.From_Branch_Id = BookingBranch.Branch_Id             
 INNER JOIN dbo.EC_Master_Area BookingArea            
 ON BookingBranch.Area_Id = BookingArea.Area_Id             
 INNER JOIN dbo.EC_Master_Region BookingRegion            
 ON BookingBranch.Region_Id = BookingRegion.Region_Id            
            
WHERE a.Status_Id = 80 and a.Is_Cancelled = 0           
AND BookingBranch.Region_ID = (select case @Region_ID when 0 then BookingBranch.Region_ID else @Region_ID end)           
AND BookingBranch.Area_ID = (select case @Area_ID when 0 then BookingBranch.Area_ID else @Area_ID end )           
AND BookingBranch.branch_Id = (select case @Branch_ID when 0 then BookingBranch.branch_Id else @Branch_ID end)            
AND (dbo.dateonly(a.GC_Date) BETWEEN dbo.dateonly(@From_Date)  AND dbo.dateonly(@To_Date))      
and A.Booking_Type_id=(select case @Division_Id when 0 then A.Booking_Type_id else @Division_Id end)          
 and 
(@criteria_id = 0

or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and a.consignor_name = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and a.consignor_name like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and a.consignor_name like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and a.consignor_name like '%' + @Filtered_Text + '%')

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 4 and dbo.dateonlydisplay(a.GC_Date) = @Filtered_Date)
or (@colid = 2 and @criteria_id = 2 and @datatype_id = 4 and dbo.dateonlydisplay(a.GC_Date) >= @Filtered_Date)
or (@colid = 2 and @criteria_id = 3 and @datatype_id = 4 and dbo.dateonlydisplay(a.GC_Date) <= @Filtered_Date)
or (@colid = 2 and @criteria_id = 4 and @datatype_id = 4 and dbo.dateonlydisplay(a.GC_Date) > @Filtered_Date)
or (@colid = 2 and @criteria_id = 5 and @datatype_id = 4 and dbo.dateonlydisplay(a.GC_Date) < @Filtered_Date)
)                
)    
    
-------------------------------STEP 2--------------------------------------------------------------    
SELECT * into #ReservedGC FROM Reserved_GC    
-------------------------------STEP 3--------------------------------------------------------------    
    
select * From #ReservedGC    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
----------------------------------STEP 4-------------------------------------------------------------    
--    
--select  sum([Charged Weight]) as Total_Charged_Wt,    
--sum([Actual Weight]) as Total_Actual_Wt,    
--sum([Articles]) as Total_Articles,    
--sum([Basic Freight]) as Total_Basic_Freight,    
--sum([FOV Charges]) as Total_Fov_Charge,    
--sum([ODA Charges]) as Total_ODA_Charge,    
--sum([Other Charges]) as Total_Other_Charge,    
--sum([Sub Freight]) as Total_Sub_Freight,    
--sum([STax Amt]) as Total_Service_Tax,    
--sum([Total Freight]) as Total_Freight,    
--sum([Invoice Value]) as Total_Invoice_Value,    
--sum([Hamali Charge]) as Total_Hamali_Charge,    
--sum([DD Charge]) as Total_DD_Charge,    
--sum([Bilti Charges]) as Total_Bilti_Charges    
--from #ReservedGC    
--    
--------------------------------STEP 5-------------------------------------------------------------    
select count(*) From #ReservedGC    
---------------------------------------------------------------------------------------------                
END  
  
----706--------------------------------------------------------------------------------  
  
  
  
----255--------------------------------------------------------------------------------  
  






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function is_transport_bill_for_octroi_prepared(@gc_id int)
returns bit
as
begin
declare @is_transport_bill_for_octroi_prepared bit
set @is_transport_bill_for_octroi_prepared = 0

select @is_transport_bill_for_octroi_prepared = 1 from
EC_Opr_VTrans_GC_Billing_Details where gc_id = @gc_id
and Bill_Octroi_ID > 0

return @is_transport_bill_for_octroi_prepared
end

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Amol>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[EC_FA_Opr_LocalCartageAccountEffects] 
(
@LocalCartage_ID int,
@Error_Code int=0 output,
@ERROR_DESC AS VARCHAR(4000)='' OUTPUT
)	
AS
SET NOCOUNT ON;
BEGIN
	
BEGIN TRY
BEGIN TRAN
set @Error_Code = 0;
set @ERROR_DESC = '';	


Declare @Document_ID intset @Document_ID = 13

----Reverse Account Effect--------EXEC	[dbo].[EC_FA_Opr_ReverseAccountEffects]
		@Document_Id = @Document_ID,
		@Transaction_ID = @LocalCartage_ID
----------------------------------


Declare 
@LocalCartage_Date DateTime,
@LocalCartage_Branch_Id int,
@User_Id int,
@Year_Code int,
@Hierarchy_Code varchar(2),
@Division_Id int,
@LocalCartage_Voucher_No Varchar(50),
@Total_Amount numeric(18,2),@Is_Cash bit,@Is_Cheque bit,@Credit_To_Ledger_Id int,@Cash_Branch_Ledger_Id int,@Bank_Branch_Ledger_Id int,@CreditLedgerId int, @Cheque_No int,@Cheque_Date DateTime,@GenVoucherId int,@Voucher_Type_Id int,
@ref_No varchar(20),
@remarks varchar(250)


----------------Selecting Values From Local Cartage Voucher---------------
select @Year_Code=Year_Code,
@Hierarchy_Code=Hierarchy_Code,
@LocalCartage_Branch_Id=Main_Id,
@Division_Id=Division_Id,@User_Id=Created_By,@LocalCartage_Date = Local_Cartage_Date,
@LocalCartage_Voucher_No = Local_Cartage_No_For_Print,
@Total_Amount = IsNUll(Total_Amount,0),
@Is_Cash = Is_Cash,
@Is_Cheque = Is_Cheque,
@Credit_To_Ledger_Id = Credit_To_Ledger_ID,
@Cheque_No =IsNull(Cheque_No,0),
@Cheque_Date=IsNull(Cheque_Date,Getdate()),
@ref_No = isnull(Ref_No,''),
@remarks = isnull(Remark,'')
From dbo.FA_Opr_Local_Cartagewhere Local_Cartage_Id = @LocalCartage_ID
---------------------------------------------------------------------------


Declare @Expense_Ledger_Id int,@VoucherDetailXML XML,@BillByBillXML XML,@Bank_Name varchar(100), @CreditDays int

Set @VoucherDetailXML = ''Set @BillByBillXML = ''Set @Bank_Name = ''


Declare @Temp_Table Table(Sr_No int identity,GC_Booking_Type_Id int,Amount_Spent numeric(18,2))insert into @Temp_Table(GC_Booking_Type_Id,Amount_Spent)Select  OprGc.Booking_Type_Id,Sum(LCD.Amount_Spent)From FA_Opr_Local_Cartage_Details as [LCD]Inner Join EC_Opr_Vtrans_GC as [OprGc]ON  LCD.GC_ID=OprGc.Gc_Idwhere Local_Cartage_Id = @LocalCartage_IDGroup by OprGc.Booking_Type_Id


Declare @Count int,@Sr_No int,@GC_Booking_Type_Id int,@Amount_Spent numeric(18,2)   select @Count=Count(*) From @Temp_TableSelect @Sr_No=1while @Sr_No<=@CountBegin

select @GC_Booking_Type_Id = GC_Booking_Type_Id,       @Amount_Spent = Amount_Spentfrom @Temp_Tablewhere Sr_No = @Sr_No

select @Expense_Ledger_Id = dbo.Get_Ledger_Id1(@Division_Id,6001,@GC_Booking_Type_Id,0)

set @VoucherDetailXML=Cast(@VoucherDetailXML as Varchar(2000))
+
dbo.GetVoucherDetailsXML(@Expense_Ledger_Id,@Amount_Spent,0,@Bank_Name,@Cheque_No,@Cheque_Date)

set @Sr_No = @Sr_No + 1

end

------------------------------CREDIT LEDGER-----------------------------
if @Is_Cash = 1
	set @CreditLedgerId=dbo.GetBranchCashLedger(@LocalCartage_Branch_Id)
Else if @Is_Cheque = 1
	set @CreditLedgerId=dbo.GetBranchBankLedger(@LocalCartage_Branch_Id)
Else 
	set	@CreditLedgerId=@Credit_To_Ledger_Id


set @VoucherDetailXML=Cast(@VoucherDetailXML as Varchar(2000))
+
dbo.GetVoucherDetailsXML(@CreditLedgerId,0,@Total_Amount,@Bank_Name,@Cheque_No,@Cheque_Date)


if @Credit_To_Ledger_Id > 0
begin

	if((select Maintain_Bill_By_Bill from fa_master_Ledger where Ledger_Id = @CreditLedgerId) = 1)
	select @CreditDays = Default_Credit_Period from fa_master_Ledger where Ledger_Id = @CreditLedgerId

	set @BillByBillXML = dbo.GetVoucherBillXML(@CreditLedgerId,0,@LocalCartage_Voucher_No,1,@CreditDays,@Total_Amount,@LocalCartage_Date)
end

	Set @VoucherDetailXML='<NewDataSet>'+cast(@VoucherDetailXML as Varchar(2000))+'</NewDataSet>'	Set @BillByBillXML='<NewDataSet>'+cast(@BillByBillXML as Varchar(2000))+'</NewDataSet>'declare @narration varchar(1000)set @narration = 'IN BOOKS OF LOCAL CARTAGE BRANCH REF NO :' + @ref_No +' REMARKS :' + @remarks
    Set @Voucher_Type_Id=39    ----Local Cartage Voucher	EXEC	[dbo].[EC_FA_Mst_Voucher_Save]
			@Year_Code = @Year_Code,
			@Hierarchy_Code = @Hierarchy_Code,
			@Main_Id = @LocalCartage_Branch_Id,
			@Division_Id = @Division_Id,
			@User_Id = @User_Id,
			@Voucher_Id = -1,--For Add
			@Voucher_No = '',
			@Voucher_Type_Id = @Voucher_Type_Id,
			@Voucher_Type_Id_Main = 0,
			@Voucher_Date = @LocalCartage_Date,
			@Ref_No = @LocalCartage_Voucher_No,
			@Ledger_Id = @CreditLedgerId,
			@Total_Debit = @Total_Amount,
			@Total_Credit = @Total_Amount,
			@Narration = @narration,
			@FBT_Payment_Type = '',
			@UnApproved_Voucher_Id = 0,
			@Is_Manual_Entry=0,
			@VoucherXML = @VoucherDetailXML,
			@VoucherBillByBillXML = @BillByBillXML,
			@Gen_Voucher_Id = @GenVoucherId OUTPUT

		    EXEC EC_FA_Opr_DocumentVoucherId_Save @Document_ID,@LocalCartage_ID,@GenVoucherId


COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))

END CATCH

END





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>    
-- EXEC [dbo].[EC_RPT_Vehicle_Monitor]  0,0,0,'2008-07-01','2009-02-01','',0,0,0    
-- =============================================    
CREATE PROCEDURE [dbo].[EC_RPT_Vehicle_Monitor]      
 @Region_ID as int,      
 @Area_ID as int,          
 @Branch_ID as int,      
 @From_Date as Datetime,          
 @To_Date as Datetime,      
 @Vehicle_No as varchar(50),    
 @Division_Id  as int,  
@PageIndex int,   
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1            
    
AS    
BEGIN    
    
 SET NOCOUNT ON; 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('Vehicle No','s,1')
        insert into @Dropdown_Search values ('Vehicle Type','s,2')
        insert into @Dropdown_Search values ('Vehicle Capacity','n,3')
        insert into @Dropdown_Search values ('Total Received Weight','n,4')        
        insert into @Dropdown_Search values ('AUS No','s,5')                                
        insert into @Dropdown_Search values ('Vehicle Arrival Date','d,6')                        
		insert into @Dropdown_Search values ('LHC Date','d,7')
        	
		select  *From @Dropdown_Search

		return
	end;
--------------------------------------Filter-----------------------------------------   
WITH VehicleMonitor AS  
(   
 Select ROW_NUMBER() OVER(ORDER BY a.[lhpo_caption No]) AS 'Sr No.', * from   
(  
Select distinct   
  lhpo.lhpo_no_for_print as [lhpo_caption No],      
  Vehicle.Vehicle_no as [Vehicle No],  
  Veh_type.vehicle_type as [Vehicle Type],    
  lhpo_br.branch_name as [lhpo_caption Branch Name],    
  dbo.Dateonlydisplay(lhpo.lhpo_date) as [lhpo_caption Date],     
  lhpo.vehicle_departure_time as [Vehicle Departure Time],    
  dbo.dateonlydisplay(aus.Vehicle_Arrival_Date) as [Vehicle Arrival Date],      
  aus.Vehicle_Arrival_Time as [Vehicle Arrival Time],      
  dbo.dateonlydisplay(aus.Actual_Unloading_Sheet_Date) as [AUS Date],      
  aus.Truck_Unloaded_Time as [Vehicle Unloaded Time],    
  ISNULL(Cast(round(Vehicle.Vehicle_capacity, 0) as float),0) as [Vehicle Capacity],    
  ISNULL(Cast(round(aus.Total_Received_Weight, 0) as float),0) as [Total Received Weight],    
  dbo.TimeSpan(Convert(varchar(10),lhpo.lhpo_date,112) +' '+vehicle_departure_time,      
  Convert(Varchar(10),aus.Actual_unloading_sheet_date,112) + ' '+ aus.vehicle_arrival_time) As [Transit Difference],    
  dbo.TimeSpan(CONVERT(varchar(10),aus.Actual_unloading_sheet_date,112) + ' '+ aus.vehicle_arrival_time,      
  CONVERT(varchar(10),aus.Actual_unloading_sheet_date,112) + ' '+ aus.truck_unloaded_time) As [Unloading Difference],     
  aus.Actual_unloading_sheet_no_for_print as [AUS No],    
  lhpo.LHPO_Id  
  
From Ec_Opr_VTrans_lhpo lhpo    
Inner Join EF_Master_Vehicle Vehicle    
On Vehicle.Vehicle_Id=lhpo.Vehicle_Id    
Inner join EF_Master_Vehicle_Type Veh_type    
On Veh_type.vehicle_type_id=Vehicle.vehicle_type_id    
Inner join EC_master_branch lhpo_br    
On lhpo_br.Branch_id = lhpo.LHPO_Branch_ID     
Inner join EC_Opr_VTrans_actual_Unloading_Sheet aus    
On aus.LHPO_id = lhpo.LHPO_id     
Inner join ec_Master_branch as EC_MB     
On aus.un_loading_branch_Id = EC_MB.Branch_Id    
inner join EC_Opr_VTrans_LHPO_GC_Details lhpod    
on lhpod.lhpo_id=lhpo.lhpo_id    
inner join ec_opr_vtrans_gc gc    
on gc.gc_id=lhpod.gc_id    
  
where aus.Actual_unloading_sheet_date BETWEEN (@From_Date) And (@To_Date)    
and EC_MB.Region_ID = (select case @Region_ID when 0 then EC_MB.Region_ID else @Region_ID end)       
and EC_MB.Area_ID = (select case @Area_ID when 0 then EC_MB.Area_ID else @Area_ID end )       
and EC_MB.branch_Id = (select case @Branch_ID when 0 then EC_MB.branch_Id else @Branch_ID end)     
and vehicle.vehicle_No like (select case @vehicle_No when '' then vehicle.vehicle_No else @vehicle_No end)       
and gc.Division_ID=(select case @Division_Id when 0 then gc.Division_ID else @Division_Id end) 
and 
(@criteria_id = 0

or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and Vehicle.Vehicle_No = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and Vehicle.Vehicle_No like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and Vehicle.Vehicle_No like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and Vehicle.Vehicle_No like '%' + @Filtered_Text + '%')

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Veh_type.vehicle_type = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Veh_type.vehicle_type like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Veh_type.vehicle_type like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Veh_type.vehicle_type like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 2 and Vehicle.Vehicle_capacity = @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 2 and @datatype_id = 2 and Vehicle.Vehicle_capacity >= @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 3 and @datatype_id = 2 and Vehicle.Vehicle_capacity <= @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 4 and @datatype_id = 2 and Vehicle.Vehicle_capacity > @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 5 and @datatype_id = 2 and Vehicle.Vehicle_capacity < @Filtered_Text_int)

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 2 and aus.Total_Received_Weight = @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 2 and @datatype_id = 2 and aus.Total_Received_Weight >= @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 3 and @datatype_id = 2 and aus.Total_Received_Weight <= @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 4 and @datatype_id = 2 and aus.Total_Received_Weight > @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 5 and @datatype_id = 2 and aus.Total_Received_Weight < @Filtered_Text_int)

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and aus.Actual_unloading_sheet_no_for_print = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and aus.Actual_unloading_sheet_no_for_print like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and aus.Actual_unloading_sheet_no_for_print like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and aus.Actual_unloading_sheet_no_for_print like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 4 and aus.Vehicle_Arrival_Date = @Filtered_Date)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 4 and aus.Vehicle_Arrival_Date >= @Filtered_Date)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 4 and aus.Vehicle_Arrival_Date <= @Filtered_Date)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 4 and aus.Vehicle_Arrival_Date > @Filtered_Date)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 4 and aus.Vehicle_Arrival_Date < @Filtered_Date) 


or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and lhpo.lhpo_date = @Filtered_Date)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and lhpo.lhpo_date >= @Filtered_Date)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and lhpo.lhpo_date <= @Filtered_Date)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and lhpo.lhpo_date > @Filtered_Date)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and lhpo.lhpo_date < @Filtered_Date) 
 )                                          
   
)a  
)  
  
  
SELECT * into #VehMon FROM VehicleMonitor  
  
select * From #VehMon  
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
  
Select   
   
 sum([vehicle Capacity]) as [Vehicle Capacity],  
 sum([Total Received Weight]) as [Total Received Weight]  
   
From #VehMon  
  
select count(*) From #VehMon  
END    
    
    
    
  
  
  
  
----708--------------------------------------------------------------------------------  
  
  
  
----256--------------------------------------------------------------------------------  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================  
-- Author:  <Kanuga Vajiha I>  
-- Create date: 1/07/09  
-- Description: <Proc To Fill MRDeliveryDetails Dropdown>  
-- =============================================  
CREATE Proc [dbo].[EC_FA_MRDeliveryDetails_FillDropdown]  
As  
Begin  
select Delivery_To_ID,Delivery_To  
from dbo.EC_Master_Delivery_To  
where Is_Active=1  
  
  
select Delivery_Against_Id,Delivery_Against,  
case when Delivery_Against_Id=1 then 2 else 1 end as Delivery_To_ID  
from dbo.EC_Master_Delivery_Against  
where Is_Active=1  
End

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE proc [dbo].[EC_FA_Transport_Bill_Fill_GCDetails_On_ClientSelection]
@Client_ID int,
@Bill_ID int,
@Branch_id int =0,
@Division_Id int =0,
@Hierarchy_Code varchar(5) = 'BO',
@transport_bill_type_id int

as
set nocount on;
BEGIN

declare @TempTable table
(
	gc_id int
)

if @Client_ID < 0 set @Client_ID = 0

declare @Contact_Person varchar(100),@Billing_Name varchar(100),
        @Billing_Address varchar(100),@Contact_No varchar(100),
        @Email varchar(100),@City_Id int,@City_Name varchar(100)

set @Contact_Person = '';set @Billing_Name = '';set @Billing_Address = ''
set @Contact_No  = '';set @Email = '' 

declare @Found bit
set @Found = 0

select @Found = 1
from EC_Master_Client_VTrans_Billing_Details
where Client_Id = @Client_ID and Billing_Branch_Id = @Branch_id

if(@Bill_Id <= 0)
begin
	if @Found = 1
	begin
		select @Contact_Person = Contact_Person ,
			@Billing_Name = Billing_Name , 
			@Billing_Address = Billing_Address + ' ' + City_Name , 
			@Contact_No  = Contact_No , 
			@Email = email
		from EC_Master_Client_VTrans_Billing_Details Billing_Details
			inner join EC_Master_City on
			Billing_Details.City_ID =  EC_Master_City.City_ID
			inner join EC_Master_State on
			EC_Master_City.State_ID =  EC_Master_State.State_ID
		where Billing_Details.Client_Id = @Client_ID and Billing_Details.Billing_Branch_Id = @Branch_id
	end
	else	
	begin
		select 
			@Contact_Person = Contact_Person ,
			@Billing_Name = Client_Name , 
			@Billing_Address = Rtrim(cast(Address1 as varchar(50))) + ' ' + Rtrim(cast(Address2 as varchar(50))) + ' ' + 
			Rtrim(cast(City_Name as varchar(50)))  + ' ' + 
			Rtrim(cast(Pin_Code as varchar(50))) + ' ' + Rtrim(cast(State_Name as varchar(50)))  , 
			@Contact_No  = Phone1 , 
			@Email = Email_ID 			
		from EC_Master_Client_VTrans inner join EC_Master_City on
			EC_Master_Client_VTrans.City_ID =  EC_Master_City.City_ID
			inner join EC_Master_State on
			EC_Master_City.State_ID =  EC_Master_State.State_ID
		where Client_Id = @Client_ID -- and Branch_ID = @Branch_id
	end
end
else
begin
	select @Contact_Person = Contact_Person ,
			@Billing_Name = Billing_Name , 
			@Billing_Address = Billing_Address, 			
			@Contact_No  = Contact_No , 
			@Email = email 
		from FA_Opr_Bill 
		where FA_Opr_Bill.Bill_ID =  @Bill_ID and FA_Opr_Bill.Client_Id = @Client_ID 
			and FA_Opr_Bill.Bill_Main_ID = @Branch_id

end

if(@Bill_Id <= 0)
begin
	select 'false' as Att,GCBillDet.Billing_Client_ID,GC.GC_ID,GC_No_For_Print,
		dbo.dateonlydisplay(GC_Date) as GC_Date,dbo.gc_get_delivery_date(GC.GC_ID)as Dly_Date,
		FromBranch.Branch_Name as Booking_Branch_Name,  
		DelBranch.Branch_Name as Delivery_Branch_Name,  
		GC.Booking_Type_Id,Booking_Type,Delivery_Type,gc.Delivery_Type_Id,
		Sub_Total as Actual_Sub_Total, 
		GC.Total_Articles as Articles,
		GC.Charged_Weight as Charged_Wt,  
		0.00 as FA_Other_Charges,
		GC.Other_Charges as GC_Other_Charges,
		0 as Service_Tax_Amount,
		0 as GC_Service_Tax_Amount,
		isnull(oct_details.Oct_Amount,0) as Oct_Amount,
		dbo.Ec_Opr_Is_Service_Tax_Applicable_GC(GC.GC_ID,@Client_ID) as Is_Service_Tax_Applicable_GC,
		0 as Bill_GC_Amt,
		0 as Total_GC_Amount,
		Freight_Amt,gc.Local_Charges,Hamali_Charges,
		Bilti_Charges,FOV,TP_Charges,DD_Charges,
		Is_Multiple_Billing,GCBillDet.Bill_Ratio,
		GC.Service_Tax_Percent,Tax_Payable_By,
		Is_DACC,gc.DACC_Charges,Length_Charge,'' as GC_Remarks,

--------------------------pankaj---------------------------------------
cast(round(((Sub_Total * GCBillDet.Bill_Ratio) /100),0) as numeric(18,2)) as Sub_Total,
isnull(Octroi_Form_Charges,0) as Octroi_Form_Charges,
cast(round((isnull(Octroi_Form_Charges,0) + isnull(oct_details.Oct_Amount,0))
* (Octroi_Service_Charges/100),0) as numeric(18,2)) as Octroi_Service_Charges
--------------------------pankaj---------------------------------------

	From EC_Opr_Vtrans_GC GC
		inner join EC_Opr_VTrans_GC_Billing_Details  GCBillDet
		on GC.GC_ID = GCBillDet.GC_ID
		inner join EC_Master_Branch FromBranch
		on GC.From_Branch_ID = FromBranch.Branch_Id
		inner join EC_Master_Branch DelBranch
		on GC.Delivery_Branch_ID = DelBranch.Branch_Id
		inner join EC_Master_Booking_Type Booktype
		on GC.Booking_Type_Id = Booktype.Booking_Type_Id
		inner join EC_Master_Delivery_Type Deltype
		on GC.Delivery_Type_Id = Deltype.Delivery_Type_Id 	  

--------------------------pankaj---------------------------------------
left outer join EC_Master_Branch_Rate_Card_VTrans brc
on brc.Branch_Id = GC.Delivery_Branch_ID
left outer join VW_MR_Delivery_Octroi_Details oct_details
on GC.GC_ID = oct_details.GC_ID
--------------------------pankaj---------------------------------------

	where Payment_Type_Id = 3  --3 means To be billed				
		and GCBillDet.Billing_Client_ID = @Client_ID
		and GCBillDet.Billing_Branch_ID  = @Branch_id
		and GCBillDet.Billing_Hierarchy  = @Hierarchy_Code
		and GCBillDet.Billing_Client_ID > 0
		and GC.Is_Cancelled=0 	
		and GC.Division_Id = @Division_Id		
		and GC.Is_Attached = 0
--------------------------pankaj---------------------------------------
and ((@transport_bill_type_id = 1 and bill_freight_id = 0)
or (@transport_bill_type_id = 2 and bill_octroi_id = 0 and oct_details.Octroi_Paid_By_ID = 3)
or (@transport_bill_type_id = 3 and bill_freight_id = 0 AND bill_octroi_id = 0 and oct_details.Octroi_Paid_By_ID = 3))
--------------------------pankaj---------------------------------------
	order by GC_No_For_Print



	insert into @TempTable
	select GC.GC_ID
	From EC_Opr_Vtrans_GC GC
		inner join EC_Opr_VTrans_GC_Billing_Details  GCBillDet
		on GC.GC_ID = GCBillDet.GC_ID
		left outer join VW_MR_Delivery_Octroi_Details oct_details
		on GC.GC_ID = oct_details.GC_ID
	where Payment_Type_Id = 3  --3 means To be billed
		and GCBillDet.Billing_Client_ID = @Client_ID
		and GCBillDet.Billing_Branch_ID  = @Branch_id
		and GCBillDet.Billing_Hierarchy  = @Hierarchy_Code
		and GC.Is_Cancelled=0 	
		and GC.Division_Id = @Division_Id			
		and GC.Is_Attached = 0
		and ((@transport_bill_type_id = 1 and bill_freight_id = 0)
		or (@transport_bill_type_id = 2 and bill_octroi_id = 0 and oct_details.Octroi_Paid_By_ID = 3)
		or (@transport_bill_type_id = 3 and bill_freight_id = 0 AND bill_octroi_id = 0 and oct_details.Octroi_Paid_By_ID = 3))
end
else
begin
	select 
		'true' as Att,FAGC.GC_ID,GC_No_For_Print,
		dbo.dateonlydisplay(GC_Date)as GC_Date,dbo.gc_get_delivery_date(GC.GC_ID) as Dly_Date,
		FromBranch.Branch_Name as Booking_Branch_Name,  
		DelBranch.Branch_Name as Delivery_Branch_Name,  
		GC.Booking_Type_Id,Booking_Type,Delivery_Type,gc.Delivery_Type_Id,
		GC_Sub_Total as Sub_Total,
		GC.Total_Articles as Articles,
		GC.Charged_Weight as Charged_Wt,
		FAGC.Other_Charges as FA_Other_Charges,GC.Other_Charges as GC_Other_Charges,
		GC_Service_Tax_Amount as Service_Tax_Amount,
		0 as GC_Service_Tax_Amount,
		Octroi_Amount as Oct_Amount,
		Total_Amount as Bill_GC_Amt,
		0 as Total_GC_Amount,
		Freight_Amt,Local_Charges,Hamali_Charges,
		Bilti_Charges,FOV,TP_Charges,DD_Charges,
		Is_Multiple_Billing,
		GCBillDet.Bill_Ratio,
		Sub_Total as Actual_Sub_Total,
		[dbo].[Ec_Opr_Is_Service_Tax_Applicable_GC](GC.GC_ID,@Client_ID) as Is_Service_Tax_Applicable_GC,
		GC.Service_Tax_Percent,Tax_Payable_By,
		Is_DACC,DACC_Charges,Length_Charge,FAGC.GC_Remarks,
		FAGC.Oct_Form_Charges as Octroi_Form_Charges
		,FAGC.Oct_Service_Charges as Octroi_Service_Charges
	From EC_Opr_Vtrans_GC GC
		inner join EC_Opr_VTrans_GC_Billing_Details  GCBillDet
		on GC.GC_ID = GCBillDet.GC_ID
		inner join FA_Opr_Bill_GC_Details FAGC   
		on GC.GC_Id = FAGC.GC_Id  
		inner join EC_Master_Branch FromBranch   
		on GC.From_Branch_ID = FromBranch.Branch_Id  
		inner join EC_Master_Branch DelBranch   
		on GC.Delivery_Branch_ID = DelBranch.Branch_Id 
		inner join EC_Master_Booking_Type Booktype   
		on GC.Booking_Type_Id = Booktype.Booking_Type_Id  
		inner join EC_Master_Delivery_Type Deltype   
		on GC.Delivery_Type_Id = Deltype.Delivery_Type_Id 
	where FAGC.Bill_Id = @Bill_Id
		and GCBillDet.Billing_Client_ID = @Client_ID
		and GCBillDet.Billing_Branch_ID  = @Branch_id
		and GCBillDet.Billing_Hierarchy  = @Hierarchy_Code
	order by GC_No_For_Print

	insert into @TempTable
	select FAGC.GC_ID
	From EC_Opr_Vtrans_GC GC inner join FA_Opr_Bill_GC_Details FAGC   
		on GC.GC_Id = FAGC.GC_Id 
		inner join EC_Opr_VTrans_GC_Billing_Details  GCBillDet
		on GC.GC_ID = GCBillDet.GC_ID
	where FAGC.Bill_Id = @Bill_Id
		and GCBillDet.Billing_Client_ID = @Client_ID
		and GCBillDet.Billing_Branch_ID  = @Branch_id
		and GCBillDet.Billing_Hierarchy  = @Hierarchy_Code
end
--------------------------For Other Charge------------------------

select FADet.GC_ID,FADet.GC_Other_Charge_Head_ID,
	GC_Other_Charge_Head,Description,Amount,0 as Sr_No,
	0 as Is_GC_Other_Charge
from FA_Opr_Bill_Other_Charges_Details FADet 
	inner join @TempTable temp
	on FADet.GC_ID = temp.GC_ID
	inner join EC_Master_GC_Other_Charge_Head Head
	on FADet.GC_Other_Charge_Head_ID = Head.GC_Other_Charge_Head_ID
where FADet.Bill_id = @Bill_Id

UNION

select GCDet.GC_ID,GCDet.GC_Other_Charge_Head_ID,
	GC_Other_Charge_Head,Description,Amount,0 as Sr_No,
	1 as Is_GC_Other_Charge
from dbo.EC_Opr_VTrans_GC_Other_Charges GCDet 
	inner join @TempTable temp
	on GCDet.GC_ID = temp.GC_ID
	inner join EC_Master_GC_Other_Charge_Head Head
	on GCDet.GC_Other_Charge_Head_ID = Head.GC_Other_Charge_Head_ID

select @Contact_Person as Contact_Person ,
	@Billing_Name as Billing_Name , 
	@Billing_Address as  Billing_Address , 	
	@Contact_No   as  Contact_No , 
	@Email  as  email , 
	@City_Id  as City_Id , 
	@City_Name  as  City_Name 
END






















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE proc [dbo].[EC_Opr_TrackNTrace_Attached_LHPO_Details]
@Year_Code int,
@LHPO_Id int
as
set nocount on;
begin

declare @AUS_Caption as varchar(20)

select @AUS_Caption = AUS_Caption from EC_Master_Company_Parameters


select lhpo_memo_details.Memo_Id,Memo_No_For_Print as 'Memo No',memo_details.Loaded_Articles as 'Loaded Articles',
memo_details.Loaded_Actual_Wt as 'Loaded Weight',memo.Memo_Type_Id as 'Memo Type Id',
memotype.Memo_Type as 'Memo Type',isnull(DDC.DDC_Type_ID,0) as 'DDC Type ID',
case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then 0
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then memo_details.Actual_Unloading_Sheet_ID
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then memo_details.DDC_ID
end as 'AUS_DDC_Id',
case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then Actual_Unloading_Sheet_No_For_Print
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDC_No_For_Print
end as 'AUS/DDC No',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then AUS_Branch.Branch_Name
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDC_Branch.Branch_Name
end as 'Unloaded/Deliverd At',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then dbo.dateonlydisplay(Actual_Unloading_Sheet_Date)
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then dbo.dateonlydisplay(DDC_Date)
end as 'AUS/DDC Date',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then AUSD.Received_Articles
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDCD.Delivered_Articles
end as 'Received/Deliverd Articles',@AUS_Caption as 'AUSCaption',
User_Name as 'Memo Updated By',memo.Updated_By as 'memo_UpdatedBy_id'

from ec_opr_vtrans_lhpo lhpo
inner join ec_opr_vtrans_lhpo_memo_details lhpo_memo_details
on lhpo.lhpo_id = lhpo_memo_details.lhpo_id
inner join ec_opr_vtrans_memo memo
on lhpo_memo_details.memo_id = memo.memo_id
inner join ec_opr_vtrans_memo_details memo_details
on memo.memo_id = memo_details.memo_id
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet AUS
on memo_details.Actual_Unloading_Sheet_ID = AUS.Actual_Unloading_Sheet_ID
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUSD
on AUS.Actual_Unloading_Sheet_ID = AUSD.Actual_Unloading_Sheet_ID
and memo_details.gc_id = AUSD.gc_id
left outer join EC_Opr_VTrans_Door_Delivery_Confirmation DDC
on memo_details.DDC_ID = DDC.DDC_ID
left outer join EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDCD
on DDC.DDC_ID = DDCD.DDC_ID
left outer join Ec_master_branch as AUS_Branch
on AUS.Un_Loading_Branch_ID = AUS_Branch.branch_id
left outer join Ec_master_branch as DDC_Branch
on DDC.DDC_Branch_ID = DDC_Branch.branch_id
inner join Ec_opr_vtrans_gc gc
on memo_details.gc_id = gc.gc_id
left outer join Ec_master_memo_type memotype
on memo.memo_type_id = memotype.memo_type_id
inner join Com_Adm_User user1
on memo.Updated_By = user1.User_ID

where	lhpo.Main_lhpo_id = @LHPO_Id
		and lhpo.lhpo_Type_id = 2		-- 2 means Attached LHPO
		and lhpo.lhpo_id <> @LHPO_Id
		and LHPO.Year_Code=@Year_Code
		and lhpo.is_cancelled = 0

order by memo.Memo_Id

end





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO











CREATE PROCEDURE [dbo].[EC_Opr_AUS_Other_Agency_ReadValues]
@Actual_Unloading_Sheet_ID int,
@Agency_Id int,
@Agency_Ledger_Id int,
@Branch_Id int,
@Arrival_Date_From_Agency datetime

AS
BEGIN

if(@Actual_Unloading_Sheet_ID <= 0)
begin
	select	'false' as Att,gc.GC_Id,Article_Id,
			GC_No_For_Print,Agency_GC_No,GC_Date,
			dbo.DateOnlyDisplay(GC_Date) as GC_Date1,
--			gc.From_Branch_ID as Booking_Branch_Id,
--			From_Branch.Branch_Name as Booking_Branch,
--			To_Location_ID as Delivery_Location_Id,
			From_loc.Service_Location_Name as From_Location, 
			To_loc.Service_Location_Name as To_Location,   
			gc.Delivery_Type_Id,Delivery_Type,
			gc.Total_Articles as Booking_Article,
			gc.Total_Actual_Weight as Booking_Article_Wt,
			dbo.Ec_Opr_GetBalanceArticles(@Branch_Id,gc.GC_Id,0,9999) as Balance_Articles ,
			dbo.Ec_Opr_GetBalanceActualWeight(@Branch_Id,gc.GC_Id,0,9999) as Balance_Articles_Wt ,
			dbo.Ec_Opr_GetBalanceArticles(@Branch_Id,gc.GC_Id,0,9999) as Loaded_Articles ,
			dbo.Ec_Opr_GetBalanceActualWeight(@Branch_Id,gc.GC_Id,0,9999) as Loaded_Actual_Wt ,
			dbo.Ec_Opr_GetBalanceArticles(@Branch_Id,gc.GC_Id,0,9999) as Received_Articles ,
			dbo.Ec_Opr_GetBalanceActualWeight(@Branch_Id,gc.GC_Id,0,9999) as Received_Wt ,
			0 as damaged_articles,0 as Damaged_Value,
			dbo.AUS_OA_Dly_Rec_And_Pay(gc.GC_Id,@Branch_Id,1) as Goods_Dly_Rec,
			dbo.AUS_OA_Dly_Rec_And_Pay(gc.GC_Id,@Branch_Id,2) as Upcountry_Rec,
			dbo.AUS_OA_Dly_Rec_And_Pay(gc.GC_Id,@Branch_Id,3) as Service_charge_Payable,
			dbo.AUS_OA_Dly_Rec_And_Pay(gc.GC_Id,@Branch_Id,4) as Upcountry_Crossing_Cost_Payable,
			0 as Received_Condition_ID,
			Articles.article_id as Previous_Article_Id,
			Articles.Status_ID as Previous_Status_ID,
			Articles.Current_Branch_ID as Previous_Branch_ID,
			Articles.Document_ID as Previous_Document_ID,
			Articles.Document_No_For_Print as Previous_Document_No_For_Print,
			Articles.Document_Date as Previous_Document_Date

	from	EC_Opr_VTrans_GC gc	
			inner join EC_Opr_VTrans_GC_Articles Articles 
	on   	gc.GC_id = Articles.GC_id
--			inner join ec_Master_Branch From_Branch 
--	on		gc.From_Branch_ID = From_Branch.Branch_id    
			left join ec_master_service_location To_loc 
	on      gc.To_Location_ID = To_loc.Service_Location_ID 
			left join ec_master_service_location From_loc 
	on      gc.From_Location_ID = From_loc.Service_Location_ID 

			inner join ec_master_delivery_type 
	on   	ec_master_delivery_type.Delivery_Type_Id = gc.Delivery_Type_Id        
	where	Articles.Status_Id = 9999 and gc.Is_Cancelled = 0 
			and gc.From_Branch_ID = @Branch_Id
			and gc.Agency_Branch_ID = @Agency_Id
			and gc.Agency_Ledger_ID = @Agency_Ledger_Id
			and Articles.Articles > 0 
			and GC.Is_Agency_Booking = 1
			and cast(dbo.DateOnly(Document_Date)as Datetime) <= cast(dbo.DateOnly(@Arrival_Date_From_Agency)as Datetime)
end
else
begin
	select	'true' as Att,gc.GC_Id,Article_Id,
			GC_No_For_Print,Agency_GC_No,GC_Date,
			dbo.DateOnlyDisplay(GC_Date) as GC_Date1,
--			GC.From_Branch_ID as Booking_Branch_Id,
--			From_Branch.Branch_Name as Booking_Branch,   
--			To_Location_ID as Delivery_Location_Id ,
			From_loc.Service_Location_Name as From_Location, 
			To_loc.Service_Location_Name as To_Location,   
			GC.Delivery_Type_Id,Delivery_Type,   
			GC.Total_Articles as Booking_Article,   
			GC.Total_Actual_Weight as Booking_Article_Wt,   
			dbo.Ec_Opr_GetBalanceArticles(@Branch_Id,gc.GC_Id,AUS_Details.Received_Articles,9999) as Balance_Articles ,
			dbo.Ec_Opr_GetBalanceActualWeight(@Branch_Id,gc.GC_Id,AUS_Details.Received_Weight,9999) as Balance_Articles_Wt ,
			AUS_Details.Loaded_Articles,
			AUS_Details.Loaded_Weight as Loaded_Actual_Wt,
			AUS_Details.Received_Articles,
			AUS_Details.Received_Weight as Received_Wt,
			Received_Condition_ID,
			damaged_articles,Damaged_Value ,
			Goods_Dly_Rec,
			Upcountry_Rec,
			Service_charge_Payable,
			Upcountry_Crossing_Cost_Payable,
			AUS_Details.Previous_Article_Id,
			AUS_Details.Previous_Status_ID,
			AUS_Details.Previous_Branch_ID,
			AUS_Details.Previous_Document_ID,
			AUS_Details.Previous_Document_No_For_Print,
			AUS_Details.Previous_Document_Date

	from	EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUS_Details
			inner join EC_Opr_VTrans_GC GC 
	on		GC.GC_id = AUS_Details.GC_id and GC.Is_Cancelled = 0 
--			inner join ec_Master_Branch From_Branch 
--	on		GC.From_Branch_ID = From_Branch.Branch_id    
			left outer join ec_master_service_location To_loc 
	on      GC.To_Location_ID = To_loc.Service_Location_ID 
			left join ec_master_service_location From_loc 
	on      gc.From_Location_ID = From_loc.Service_Location_ID 
			inner join ec_master_delivery_type 
	on   	ec_master_delivery_type.Delivery_Type_Id = GC.Delivery_Type_Id   
     
	where	AUS_Details.Actual_Unloading_Sheet_ID=@Actual_Unloading_Sheet_ID  

end
-------------------------- aus Details ------------------------------------
select  Actual_Unloading_Sheet_No_For_Print,
		Actual_Unloading_Sheet_Date,Agency_Ledger_ID,Agency_Branch_ID,
		Vehicle_No,LHPO_No_For_Print,LHPO_Date,Total_Actual_GCs,        
		Total_Actual_Articles,Total_Actual_Weight,
		Total_Received_Articles,Total_Received_Weight, 
		Total_Loaded_Articles,Total_Loaded_Weight,
		Lorry_Hire,Other_Payable_Charges,Total_To_Pay_Collection,
		UpCountry_Receivable,Total_Receable,Total_Delivery_Commision,
		UpCountry_Crossing_Cost,Total_Payable,
		dbo.DateOnlyDisplay(Scheduled_Arrival_Date) as Scheduled_Arrival_Date ,
		Scheduled_Arrival_Time,Vehicle_Arrival_Date,
		Vehicle_Arrival_Time,Truck_Unloaded_Time,
		Reason_For_Late_Unloading_ID,Total_Damaged_Leakage_Articles,
		Total_Damaged_Leakage_Value,Remarks,Unloaded_Supervisor_ID,
		First_Name +' '+ Middle_Name +' '+ Last_Name as Unloaded_Supervisor_Name ,
		Arrived_From_Branch_Id,
		Arrived_From_Location_Id,SERLOC.Service_Location_Name as Arrvied_From_Service_Location_Name, 
		Ledger.Ledger_Name as Agency_Ledger_Name,AUS.Agency_Ledger_ID    

from	EC_Opr_VTrans_Actual_Unloading_Sheet AUS 
		left outer join ec_master_Employee 
on      AUS.Unloaded_Supervisor_ID =ec_master_Employee.Emp_ID
		left outer join ec_Master_Service_Location SERLOC 
on		AUS.Arrived_From_Location_Id = SERLOC.Service_Location_ID  
		left outer join fa_Master_Ledger Ledger 
on		AUS.Agency_Ledger_ID = Ledger.Ledger_ID   
 
where	Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID

END 

















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:  <Harshal A. Sapre>                          
-- Create date: <26-02-2009>                          
-- [dbo].[EC_RPT_Direct_Printing_LHPO_Reach] 73,302
-- =============================================

CREATE PROCEDURE [dbo].[EC_RPT_Direct_Printing_LHPO_Reach]          

@Menu_Item_ID int,                                  
@Document_ID int          

AS                          
BEGIN                          

SET NOCOUNT ON;         

Declare @Company_Name as varchar(50)    
Select @Company_Name = Company_Name from ec_master_company        

Declare @Address as varchar(max)    
Select @Address = address_line_1+ ', '+address_line_2 + ', ' + city_name + ' ' + cast(ec_master_company.Pin_Code as varchar(10))    
from ec_master_company        
left outer join ec_master_city on ec_master_city.city_id=ec_master_company.city_id  

Declare @Penalty as int
Select @Penalty = ISNULL(Sum(Penalty.Amount),0)
from EC_Opr_VTrans_LHPO LHPO
Left Outer JOIN EC_Opr_VTrans_LHPO_Incentives_Penalties Penalty
ON LHPO.LHPO_ID = Penalty.LHPO_ID
and Penalty.Is_Incentive = 0
where LHPO.LHPO_ID = @Document_ID
    
Declare @Total_Loaded_Weight int
Select @Total_Loaded_Weight = sum(Total_Loaded_Weight)
from EC_Opr_VTrans_LHPO LHPO
INNER JOIN EC_Opr_VTrans_LHPO_Memo_Details LHPO_MEMO
ON LHPO.LHPO_ID = LHPO_MEMO.LHPO_ID 
INNER JOIN EC_Opr_VTrans_Memo Memo
ON Memo.Memo_ID = LHPO_MEMO.Memo_ID
where LHPO.LHPO_ID = @Document_ID

SELECT  Lhpo.Lhpo_ID,
		Lhpo.Lhpo_no_for_print as [Challan No],
		Lhpo.Lhpo_date as [Challan Date],
		From_Location.Service_Location_Name as [From],          
		To_Location.Service_Location_Name as [Destination],          

------------ Vehicle Particulars  --------------          
		Vehicle.Vehicle_no as [Vehicle No],
		Vehicle.Engine_No as [Engine No],          
		Vehicle.Chasis_No as [Chasis No],          

-----------Owner's Particulars---------------------------          
		Case Vehicle.Vehicle_Category_ID 
		when 1 Then @Company_Name    
		when 5 Then Vehicle.Market_Owener     
		Else Vendor.Vendor_Name end as [Owner Name],    

		Case Vehicle.Vehicle_Category_ID
		when 1 Then @Address    
		when 5 Then Vehicle.Market_Address_1 + ' ' + Vehicle.MarketAddress_2 + ' ' +     
					Owner_City.City_Name + ' ' + Vehicle.Market_Pin_Code       
		Else	Vendor.Address_1 + ' ' + Vendor.Address_2 + ' ' +     
				Vendor_City.City_Name + ' ' + Vendor.Pin_Code    
		end as [Owner Address],    

-----------Drivers's  Particulars--------------------------          
		Driver.Driver_Name as [Driver Name],          
		Driver.Driver_License_No as [License No],          

-----------Broker's  Particulars--------------------------          
		ISNULL(Vendor.Vendor_Name, '-') as [Broker Name],        
		ISNULL((Vendor.Address_1 + ' ' + Vendor.Address_2 + ' ' +     
			Vendor_City.City_Name + ' ' + Vendor.Pin_Code), '-')  as [Broker Address],

-------------Amount Details-------------------------- 
		@Total_Loaded_Weight as [Charged Weight],
		Lhpo_Basis.LHPO_Freight_Basis, 
		
		case Lhpo.LHPO_Freight_Basis_ID 
		When 2 then Lhpo.Truck_Hire_Charge 
		else Lhpo.Rate end as [LHPO_Freight_Basis_Amt],
		
		@Penalty as [Penalty Amount],

		ISNULL((Case Balance_Payable_Hierarchy_Code 
		When 'RO' Then UPPER(LHPO.Balance_Payable_Hierarchy_Code) + ' - ' + Region.Region_Name
		When 'AO' Then UPPER(LHPO.Balance_Payable_Hierarchy_Code) + ' - ' + Area.Area_Name
		When 'BO' Then UPPER(LHPO.Balance_Payable_Hierarchy_Code) + ' - ' + Branch.Branch_Name
		else UPPER(LHPO.Balance_Payable_Hierarchy_Code) END),'-') as [Balance Payable At],        

		dbo.Multiple_Attached_Branches_For_LHPO_Printing_Reach(LHPO.LHPO_ID) as [Attached LHS Branches],

		ISNULL(Truck_Hire_Charge,0) as [Total Lorry Hire],        
		ISNULL(Other_Charges,0) as [Other Charges],
		(ISNULL(Truck_Hire_Charge,0) + ISNULL(Other_Charges,0)) as [Net Lorry hire],

		ISNULL(TDS_Amount,0) as [Total TDS Amount],
		ISNULL(Charity_Amt,0) as [Charity Expences],

		((ISNULL(Truck_Hire_Charge,0) + ISNULL(Other_Charges,0))-
		(ISNULL(TDS_Amount,0) + ISNULL(Charity_Amt,0))) as [Total Truck Hire],

		ISNULL(Total_Advance_To_Be_Paid,0) as [Total Advance],
		(((ISNULL(Truck_Hire_Charge,0) + ISNULL(Other_Charges,0))-
		(ISNULL(TDS_Amount,0) + ISNULL(Charity_Amt,0)))
		- ISNULL(Total_Advance_To_Be_Paid,0)) as [Net Balance Amt Payable],

		LHPO.Remarks,
		Emp.First_Name + ' ' + Emp.Middle_Name + ' ' + Emp.Last_Name as [Loaded By]
		
        
  FROM EC_opr_vtrans_lhpo Lhpo   
       
  INNER JOIN dbo.EC_Master_LHPO_Freight_Basis Lhpo_Basis
  ON Lhpo.LHPO_Freight_Basis_ID = Lhpo_Basis.LHPO_Freight_Basis_ID

  LEFT OUTER JOIN Ec_master_service_location From_Location          
  ON lhpo.from_location_id = From_Location.Service_Location_id           
  LEFT OUTER JOIN Ec_master_service_location To_Location      
  ON lhpo.To_location_id = To_Location.Service_Location_id       

  LEFT OUTER JOIN ef_master_vehicle Vehicle          
  ON Vehicle.Vehicle_id = Lhpo.Vehicle_id       

  LEFT OUTER JOIN dbo.EF_Master_Vendor Vendor    
  ON Vendor.Vendor_ID = LHPO.Broker_ID    
  LEFT OUTER JOIN dbo.EC_Master_City Vendor_City    
  ON Vendor.City_ID = Vendor_City.City_ID    

  LEFT OUTER JOIN Ec_master_City Owner_City          
  ON vehicle.Market_City_ID = Owner_City.City_ID      
  LEFT OUTER JOIN EF_Master_Driver Driver          
  ON lhpo.Driver1_Id = Driver.Driver_ID

  LEFT OUTER JOIN EC_MASTER_EMPLOYEE EMP
  ON EMP.Emp_ID = LHPO.Loading_Supervisor_ID

  LEFT OUTER JOIN EC_MASTER_REGION Region
  ON LHPO.Balance_Payable_Main_ID = Region.Region_ID
  LEFT OUTER JOIN EC_MASTER_AREA Area
  ON LHPO.Balance_Payable_Main_ID = Area.Area_ID
  LEFT OUTER JOIN EC_MASTER_BRANCH Branch
  ON LHPO.Balance_Payable_Main_ID = Branch.Branch_ID

Where Lhpo.Lhpo_ID = @Document_ID          

----------Manifest Deatils---------------------------------          
select	a.LHPO_ID,

		case ATH_Payable_Hierarchy_Code 
		when 'RO' then UPPER(ATH_Payable_Hierarchy_Code) + ' - ' + Region.Region_Name
		when 'AO' then UPPER(ATH_Payable_Hierarchy_Code) + ' - ' + Area.Area_Name
		when 'BO' then UPPER(ATH_Payable_Hierarchy_Code) + ' - ' + Branch.Branch_Name
		else UPPER(ATH_Payable_Hierarchy_Code) END as [Payable At],

		Advance_Amount

from dbo.EC_Opr_VTrans_LHPO_ATH_Payable_Details a
LEFT OUTER JOIN EC_MASTER_REGION Region ON Region.Region_ID = a.ATH_Payable_Main_ID
LEFT OUTER JOIN EC_MASTER_AREA Area ON Area.Area_ID = a.ATH_Payable_Main_ID
LEFT OUTER JOIN EC_MASTER_BRANCH Branch ON Branch.Branch_ID = a.ATH_Payable_Main_ID
where a.LHPO_ID = @Document_ID

----------Manifest Deatils---------------------------------          
Select  LHPO.LHPO_ID,
		MEMO.MEMO_NO_FOR_PRINT as [Manifest No], 
		MEMO.MEMO_DATE as [Manifest Date],
		GC.GC_ID,
		GC.GC_NO_FOR_PRINT as [GC No],
		GC.GC_DATE as [GC Date],
		MEMO_DTLS.Loaded_Articles as [Despatched], 
		MEMO_DTLS.Balance_Articles as [Out Of], 
		dbo.Multiple_Packing_Type(GC.GC_ID) as [Packing Type],
		dbo.Multiple_Items(GC.GC_ID) as [Items],
		FromBranch.Branch_Name as [From Branch],
		ToBranch.Branch_Name as [To Branch],
		GC.Total_Actual_Weight as [Actual Weight]
FROM EC_OPR_VTRANS_LHPO LHPO
INNER JOIN EC_OPR_VTRANS_MEMO MEMO ON MEMO.LHPO_ID = LHPO.LHPO_ID
INNER JOIN EC_OPR_VTRANS_MEMO_DETAILS MEMO_DTLS ON MEMO.MEMO_ID = MEMO_DTLS.MEMO_ID
INNER JOIN EC_OPR_VTRANS_GC GC ON MEMO_DTLS.GC_ID = GC.GC_ID
INNER JOIN EC_MASTER_BRANCH FromBranch ON FromBranch.Branch_ID = GC.From_Branch_ID
INNER JOIN EC_MASTER_BRANCH ToBranch ON ToBranch.Branch_ID = GC.Delivery_Branch_ID

Where Lhpo.Lhpo_ID = @Document_ID          

----------Manifest Deatils---------------------------------          
Select  Count(GC.GC_ID) as [Total GC],
		Sum(MEMO_DTLS.Balance_Articles) as [Total Despatched], 
		Sum(MEMO_DTLS.Loaded_Articles) as [Total Out Of], 
		Sum(GC.Total_Actual_Weight) as [Total Actual Weight]
FROM EC_OPR_VTRANS_LHPO LHPO
INNER JOIN EC_OPR_VTRANS_MEMO MEMO ON MEMO.LHPO_ID = LHPO.LHPO_ID
INNER JOIN EC_OPR_VTRANS_MEMO_DETAILS MEMO_DTLS ON MEMO.MEMO_ID = MEMO_DTLS.MEMO_ID
INNER JOIN EC_OPR_VTRANS_GC GC ON MEMO_DTLS.GC_ID = GC.GC_ID
INNER JOIN EC_MASTER_BRANCH FromBranch ON FromBranch.Branch_ID = GC.From_Branch_ID
INNER JOIN EC_MASTER_BRANCH ToBranch ON ToBranch.Branch_ID = GC.Delivery_Branch_ID

Where Lhpo.Lhpo_ID = @Document_ID          

----------Company Address Deatils---------------------------------          
Select Company.Company_Name,  
Company.Address_Line_1 + ', ' + Company.Address_Line_2 + ', ' + City.City_Name + ', ' + State.State_Name
+ ' Pin : - ' + cast(Company.Pin_Code as varchar(20)) as [Address],
Case when Phone_2 = '' then Phone_1 else Phone_1 + ', ' + Phone_2 end as [Phone_No],
Fax as [Fax], email as [Email]
from dbo.EC_Master_Company Company
INNER JOIN EC_Master_City City
ON Company.City_ID = City.City_ID
INNER JOIN EC_Master_State State
ON Company.State_ID = State.State_ID
End 



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





	CREATE Proc [dbo].[EC_Opr_AUS_Other_Agency_Save]  
	(  
		@Division_ID int,
		@Year_Code int,  
		@Un_Loading_Branch_ID int,  
		@Actual_Unloading_Sheet_ID int,  
		@Actual_Unloading_Sheet_No int,  
		@Actual_Unloading_Sheet_No_For_Print varchar(20),  
		@Actual_Unloading_Sheet_Date datetime,  
		@Agency_Branch_ID int =0,
		@Agency_Ledger_ID int =0,
		@Arrived_From_Branch_ID int =0,
		@Arrived_From_Location_ID int =0,
		@Vehicle_No nvarchar(50) = '',  
		@LHPO_No_For_Print nvarchar(50) = '',  
		@LHPO_Date datetime = getdate,
		@Total_Actual_GCs int =0 ,  
		@Total_Actual_Articles int = 0, 
		@Total_Actual_Weight numeric(18,2) = 0,  
		@Total_Received_Articles int = 0,
		@Total_Received_Weight numeric(18,2) = 0,  
		@Total_Loaded_Articles  int = 0,
		@Total_Loaded_Weight numeric(18,2)= 0 ,
		@Lorry_Hire numeric(18,2)= 0 ,
		@Other_Payable  numeric(18,2)= 0 ,
		@Scheduled_Arrival_Date datetime,  
		@Scheduled_Arrival_Time  VarChar(8),
		@Vehicle_Arrival_Date datetime,  
		@Vehicle_Arrival_Time VarChar(8),  
		@Truck_Unloaded_Time  VarChar(8),
		@Reason_For_Late_Unloading_ID int,
		@Total_Damaged_Leakage_Articles int = 0,
		@Total_Damaged_Leakage_Value numeric(18,2) = 0,
		@Unloaded_Supervisor_ID int,
		@Remarks varchar(250),
		@Created_By int,
		@Unloading_Details_Xml xml  ='<doc></doc>',  
		@Error_Code int output,
		@ERROR_DESC AS VARCHAR(4000) OUTPUT  ,
		@Print_Doc_ID int OUTPUT,

		@Hierarchy_Code varchar(2) = 'BO',
		@Menu_Item_ID int = 72 --
	)

	As  

	set @Error_Code = 0;  
	set @ERROR_DESC = '';  
   set @Print_Doc_ID = 0;      

	BEGIN TRY  
	BEGIN TRAN  
	BEGIN  
	SET NOCOUNT ON;  

--	declare @Agency_Ledger_ID int
--	set @Agency_Ledger_ID = 0
--	select @Agency_Ledger_ID = Agency_Ledger_ID from ec_master_branch
--	where branch_id = @Agency_branch_ID

	declare @Goods_Dly_Rec numeric(18,2),@Upcountry_Rec numeric(18,2),@Service_charge_Payable numeric(18,2)
	declare	@Upcountry_Crossing_Cost_Payable numeric(18,2),@Total_Receivable numeric(18,2),@Total_Payable numeric(18,2)

	set @Goods_Dly_Rec = 0; set @Upcountry_Rec = 0; set @Service_charge_Payable = 0
	set	@Upcountry_Crossing_Cost_Payable = 0; set @Total_Receivable = 0; set @Total_Payable = 0

	DECLARE @idoc int
	EXEC sp_xml_Preparedocument @idoc output,@Unloading_Details_Xml        

	 select @Total_Actual_GCs = count(*),@Total_Loaded_Articles = sum(loaded_articles),  
			@Total_Loaded_Weight = sum(loaded_actual_wt),
			@Total_Received_Articles = sum(received_articles),
			@Total_Received_Weight = sum(received_wt),
			@Total_Actual_Articles = sum(booking_article),
			@Total_Actual_Weight = sum(booking_article_wt),
			@Total_Damaged_Leakage_Articles = sum(damaged_articles),
			@Total_Damaged_Leakage_Value = sum(damaged_value),
			@Goods_Dly_Rec = sum(goods_dly_rec),
			@Upcountry_Rec = sum(upcountry_rec),
			@Service_charge_Payable = sum(service_charge_payable),
			@Upcountry_Crossing_Cost_Payable = sum(upcountry_crossing_cost_payable),
			@Total_Receivable = @Goods_Dly_Rec + @Upcountry_Rec,
			@Total_Payable = @Service_charge_Payable + @Upcountry_Crossing_Cost_Payable + @Lorry_Hire + @Other_Payable
	from openXml(@idoc,'/newdataset/unloading_details',2)        
		With(booking_article int,booking_article_wt numeric(18,2),
			loaded_articles int,loaded_actual_wt numeric(18,2),
			received_articles int,received_wt numeric(18,2),  
			damaged_articles int,damaged_value numeric(18,2),
			goods_dly_rec numeric(18,2),
			upcountry_rec numeric(18,2),service_charge_payable numeric(18,2),
			upcountry_crossing_cost_payable numeric(18,2)
			)

	if @Actual_Unloading_Sheet_ID <= 0 -- add  
	Begin  

		exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@Un_Loading_Branch_ID,
		@Division_ID,72 ,0,@Actual_Unloading_Sheet_No output,@Actual_Unloading_Sheet_No_For_Print output  


		insert into EC_Opr_VTrans_Actual_Unloading_Sheet  
		(  
			Division_ID,Year_Code,Un_Loading_Branch_ID,  
			Actual_Unloading_Sheet_No,Actual_Unloading_Sheet_No_For_Print,  
			Actual_Unloading_Sheet_Date,Agency_branch_ID,Agency_Ledger_ID,
			Arrived_From_Branch_ID,Arrived_From_Location_Id,
			Manual_TUR_No,Vehicle_ID,Vehicle_No,Vehicle_Type_ID,  
			LHPO_ID,LHPO_No_For_Print,LHPO_Date ,Total_Actual_GCs,  
			Total_Actual_Articles,Total_Actual_Weight,
			Total_Loaded_Articles,Total_Loaded_Weight,			
			Total_Received_Articles,Total_Received_Weight,
			Scheduled_Arrival_Date,Scheduled_Arrival_Time,
			Vehicle_Arrival_Date,Vehicle_Arrival_Time,
			Truck_Unloaded_Time,  
			Reason_For_Late_Arrival_ID,Reason_For_Late_Unloading_ID,      
			Total_Short_Articles,Total_Excess_Articles,  
			Total_Damaged_Leakage_Articles,Total_Damaged_Leakage_Value,  
			Unloaded_Supervisor_ID,Remarks,Is_Cancelled,  
			Created_By,Created_On,Updated_By,Updated_On,
			Lorry_Hire,Other_Payable_Charges,
			Total_To_Pay_Collection,UpCountry_Receivable,Total_Receable,
			Total_Delivery_Commision,UpCountry_Crossing_Cost,Total_Payable
		)  
		values 
		(  
			@Division_ID,@Year_Code,@Un_Loading_Branch_ID,  
			@Actual_Unloading_Sheet_No,@Actual_Unloading_Sheet_No_For_Print,  
			@Actual_Unloading_Sheet_Date,@Agency_branch_ID,@Agency_Ledger_ID ,
			@Arrived_From_Branch_ID ,@Arrived_From_Location_ID ,
			0,0,@Vehicle_No ,0,
			0,@LHPO_No_For_Print,@LHPO_Date ,@Total_Actual_GCs,  
			@Total_Actual_Articles,@Total_Actual_Weight,
			@Total_Loaded_Articles,@Total_Loaded_Weight,
			@Total_Received_Articles,@Total_Received_Weight,			 
			@Scheduled_Arrival_Date,@Scheduled_Arrival_Time,
			@Vehicle_Arrival_Date,@Vehicle_Arrival_Time,
			@Truck_Unloaded_Time,  
			0,@Reason_For_Late_Unloading_ID,  
			0,0,  
			@Total_Damaged_Leakage_Articles,@Total_Damaged_Leakage_Value,  
			@Unloaded_Supervisor_ID,@Remarks,0,
			@Created_By,getdate(),@Created_By,getdate(),
			@Lorry_Hire ,@Other_Payable,
			@Goods_Dly_Rec,@Upcountry_Rec,@Total_Receivable,
			@Service_charge_Payable,@Upcountry_Crossing_Cost_Payable,@Total_Payable
		)  

		Set @Actual_Unloading_Sheet_ID =@@Identity  
		set @Print_Doc_ID = @@Identity 
	End  
	Else
	Begin

		 exec EC_Opr_Set_Article_Reverse_Effects 'AUS_OA',@Actual_Unloading_Sheet_ID    

		Update	EC_Opr_VTrans_Actual_Unloading_Sheet 
		set		Actual_Unloading_Sheet_Date = @Actual_Unloading_Sheet_Date,  
--				Agency_Ledger_ID  = @Agency_Ledger_ID ,
				Arrived_From_Branch_ID = @Arrived_From_Branch_ID ,
				Arrived_From_Location_Id = @Arrived_From_Location_ID,
				Vehicle_No = @Vehicle_No ,
				LHPO_No_For_Print = @LHPO_No_For_Print ,
				LHPO_Date = @LHPO_Date ,
				Total_Actual_GCs = @Total_Actual_GCs,  
				Total_Actual_Articles = @Total_Actual_Articles,  
				Total_Actual_Weight = @Total_Actual_Weight,  
				Total_Loaded_Articles   = @Total_Loaded_Articles  ,
				Total_Loaded_Weight   = @Total_Loaded_Weight  ,
				Total_Received_Articles = @Total_Received_Articles,  
				Total_Received_Weight = @Total_Received_Weight,  
				Scheduled_Arrival_Date = @Scheduled_Arrival_Date,  
				Scheduled_Arrival_Time = @Scheduled_Arrival_Time,  
				Vehicle_Arrival_Date = @Vehicle_Arrival_Date,  
				Vehicle_Arrival_Time = @Vehicle_Arrival_Time,  
				Truck_Unloaded_Time = @Truck_Unloaded_Time,  
				Reason_For_Late_Unloading_ID = @Reason_For_Late_Unloading_ID,  
				Total_Damaged_Leakage_Articles = @Total_Damaged_Leakage_Articles,  
				Total_Damaged_Leakage_Value = @Total_Damaged_Leakage_Value,  
				Unloaded_Supervisor_ID = @Unloaded_Supervisor_ID,  
				Remarks = @Remarks,  
				Lorry_Hire = @Lorry_Hire,
				Other_Payable_Charges = @Other_Payable,
				Total_To_Pay_Collection = @Goods_Dly_Rec,
				UpCountry_Receivable = @Upcountry_Rec,
				Total_Receable = @Total_Receivable,
				Total_Delivery_Commision = @Service_charge_Payable,
				UpCountry_Crossing_Cost = @Upcountry_Crossing_Cost_Payable,
				Total_Payable = @Total_Payable,
				Updated_By = @Created_By,  
				Updated_On = getdate()  
		where	Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID 
		set @Print_Doc_ID = @Actual_Unloading_Sheet_ID 

		delete EC_Opr_VTrans_Actual_Unloading_Sheet_Details  
		where Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID  

	End


	insert into EC_Opr_VTrans_Actual_Unloading_Sheet_Details  
	(
		Year_Code,Actual_Unloading_Sheet_ID,Memo_ID,
		GC_ID,Article_ID,Loaded_Articles,Loaded_Weight,
		Received_Articles,Received_Weight,Received_Condition_ID,
		Damaged_Articles,Damaged_Value,Previous_Article_ID,Previous_Status_ID, 
		Previous_Branch_ID,Previous_Document_ID,Previous_Document_No_For_Print,  
		Previous_Document_Date,Found_ID,Is_Existing,
		Goods_Dly_Rec,Upcountry_Rec,Service_charge_Payable,
		Upcountry_Crossing_Cost_Payable
	)  
	SELECT 
		@Year_Code,@Actual_Unloading_Sheet_ID,0,
		gc_id,article_id,loaded_articles,loaded_actual_wt,
		received_articles,received_wt,received_condition_id,
		damaged_articles,damaged_value,Previous_Article_ID,9999,
		previous_branch_id ,gc_id ,gc_no_for_print ,--Previous_Document_No_For_Print,        
		cast(gc_date as datetime),0,is_existing,
		goods_dly_rec,upcountry_rec,service_charge_payable,
		upcountry_crossing_cost_payable
		from openXml(@idoc,'/newdataset/unloading_details',2)        
		With(gc_id int,article_id int,loaded_articles int,loaded_actual_wt numeric(18,2),
			received_articles int,received_wt numeric(18,2),  
			received_condition_id int,damaged_articles int,  
			damaged_value  numeric(18,2),previous_article_id int ,         
			previous_branch_id int,gc_no_for_print varchar(20),  --previous_document_no_for_print varchar(20),  
			gc_date varchar(10),is_existing bit,goods_dly_rec numeric(18,2),
			upcountry_rec numeric(18,2),service_charge_payable numeric(18,2),
			upcountry_crossing_cost_payable numeric(18,2))

   exec EC_Opr_Set_Article_Effects @Un_Loading_Branch_ID,'AUS_OA',@Actual_Unloading_Sheet_ID ,0    

	END 
 
COMMIT TRAN  
END TRY  
BEGIN CATCH  
ROLLBACK TRAN  
SELECT @ERROR_CODE=ERROR_NUMBER()  
SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
CAST(ERROR_MESSAGE() as VARCHAR(4000))  
END CATCH  












GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
-- Select dbo.[Multiple_Attached_Branches_For_LHPO_Printing_Reach] (297)      
      
CREATE FUNCTION [dbo].[Multiple_Attached_Branches_For_LHPO_Printing_Reach](@LHPO_ID int)      
RETURNS varchar(8000)      
AS      
BEGIN      
      
 declare @Branch_Name varchar(8000)      
 set @Branch_Name = ''         
      
 select  @Branch_Name =      
 case @Branch_Name when '' then ATT_BR.Branch_Name  
 else @Branch_Name + ',' + ATT_BR.Branch_Name end      
  
From EC_Opr_VTrans_LHPO LHPO  
LEFT OUTER JOIN dbo.EC_Opr_VTrans_LHPO_Attached_Loading_Branches ATT  
ON LHPO.LHPO_ID = ATT.LHPO_ID  
INNER JOIN EC_MASTER_BRANCH ATT_BR  
ON ATT.BRANCH_ID = ATT_BR.BRANCH_ID  
Where LHPO.LHPO_ID = @LHPO_ID  
        
 RETURN @Branch_Name      
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
-- Select dbo.[Delivery_Taken_By] (105)      
      
CREATE FUNCTION [dbo].[Delivery_Taken_By](@GC_ID int)      
RETURNS varchar(8000)      
AS      
BEGIN      
      
declare @Delivery_Taken_By varchar(8000)      
set @Delivery_Taken_By = ''         
  
Declare @Temp as Table (Delivery_Taken_By varchar(8000))  
Insert into @Temp  
Select top 1 Delivery_Taken_By   
from dbo.EC_Opr_VTrans_Door_Delivery_Confirmation_Details a  
INNER JOIN dbo.EC_Opr_VTrans_Door_Delivery_Confirmation b ON a.DDC_ID = b.DDC_ID  
where a.GC_ID = @GC_ID and b.Is_Cancelled = 0  
order by a.DDC_ID  
  
select @Delivery_Taken_By = Upper(d.Delivery_Taken_By)  
From @Temp d  
  
RETURN @Delivery_Taken_By      
END      


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- Author: <Ankit champaneriya> 
-- Create date: 05-01-09 2008 5:13PM 
-- Description: <Delivery Branch UPDATE Readvalues> 
-- ============================================= 

CREATE proc [dbo].[EC_Opr_DeliveryBranchUpdate_ReadValues] 
( 
@Branch_Id int, 
@Division_ID int,
@BranchXML xml,
@New_Dly_Branch_ID int,
@ServiceLocation_Id int,
@Year_Code int
)
as 
BEGIN 

set nocount on;

DECLARE @idoc int 
EXEC sp_xml_preparedocument @idoc OUTPUT, @BranchXML 

select	gc.gc_id,gc_no_for_print AS [gc_caption no],
		dbo.dateonlydisplay(gc.GC_Date) as [gc_caption date],
		dly_branch.branch_name as dly_branch,
		booking_branch.branch_name as Booking_branch,
		gc.Delivery_Branch_Id as branch_id,gc.To_Location_ID as location_id,
		dbo.dateonlydisplay(AUS.Actual_Unloading_Sheet_Date) AS AUS_Date,
		gc.GC_No_For_print as Item_No
from	ec_opr_vtrans_gc gc
		inner join ec_opr_vtrans_gc_articles gc_articles
on		gc.gc_id = gc_articles.gc_id
		inner join ec_master_branch dly_branch
on		gc.delivery_branch_id = dly_branch.branch_id 
		inner join ec_master_branch booking_branch
on		gc.from_branch_id = booking_branch.branch_id 
		inner join EC_Opr_VTrans_Actual_Unloading_Sheet AUS
on		gc_articles.Document_ID = AUS.Actual_Unloading_Sheet_ID 
where	gc.year_code in (0,@Year_Code)
		and gc.Division_ID = @Division_ID
		and gc_articles.status_id = 60
		and gc_articles.current_branch_id = @Branch_Id
		and gc.To_Location_ID <> @ServiceLocation_Id
		and gc.delivery_branch_id <>  @New_Dly_Branch_ID
		and gc_articles.is_cancelled = 0
		and gc_articles.articles > 0
		and gc_articles.articles = gc.Total_Articles 
		and dbo.Is_Delivery_Done(gc.gc_id) = 0
		and gc.GC_No_For_print in (SELECT item from OPENXML (@idoc, '/parentroot/root',2) 
						WITH (item varchar(20))) 

EXEC sp_xml_removedocument @idoc 
END 





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:<Kanuga Vajiha>
-- Create date:19 jan 09
-- Description: <Proc To Save Octroi Update>
-- =============================================
CREATE Proc [dbo].[EC_Opr_OctroiUpdate_Save]
(
 @Year_Code int,
 @Division_ID int,
 @Hierarchy_Code varchar(5),
 @MainId int,
 @UserId int,
 @OctroiUpdateId int,
 @OctroiUpdateDate datetime,
 @BillNo varchar(20),
 @BillDate Datetime,
 @LedgerId int,
 @TotalGC int,
 @TotalAmount decimal,
 @Remarks varchar(250),
 @OctroiUpdateDetailsXML Xml,
 @ChequeNo nvarchar(10),
 @ChequeDate datetime,
 @BankName varchar(100),
 @OtherChargeDetailsXML xml,
 @Grand_Total numeric(18,2),
 @TotalOtherChargeAmount numeric(18,2),
 @Error_Code int output,
 @Error_Desc AS VARCHAR(4000) OUTPUT
)

As
 DECLARE @OctroiUpdate int
 EXEC sp_xml_preparedocument @OctroiUpdate OUTPUT,@OctroiUpdateDetailsXML

if(@OctroiUpdateId <= 0) -- added by pankaj 23 jan 08 
 begin 
	declare @can_add bit
	set @can_add = 1
	select @can_add = 0 from ec_opr_vtrans_gc where gc_id in 
	(select gc_id From Openxml(@OctroiUpdate,'/newdataset/octroiupdatedetails',2) with
	(gc_id int)) and Is_Octroi_Updated = 1

	if @can_add = 0 return 
end
else if dbo.Ec_Opr_Can_Edit_Cancel ('Oct_Updt_Edit',@OctroiUpdateId) = 0
	begin
		set @Error_Code = 1012;
		set @ERROR_DESC = ''; 
		return; 
	end

set @Error_Code = 0;
set @ERROR_DESC = '';

BEGIN TRY
BEGIN TRAN
BEGIN
SET NOCOUNT ON;

declare @OctroiUpdate_No int
declare @OctroiUpdate_No_For_Print varchar(20)
declare @Menu_Item_ID int
set @Menu_Item_ID=163

--***********Insert into Master Table********************

Update EC_Opr_VTrans_GC set
Is_Octroi_Updated=0,
Oct_Bill_No=0,
Oct_Bill_Date=getdate(),
Oct_Form_Type='', 
Octroi_Form_Type_ID=0,
Octroi_Paid_By_ID=0,
Oct_Receipt_no=0,
Oct_Amount=0,
Oct_Remark=''
where gc_id in
(select GC_ID From EC_Opr_Octroi_Update_Details
where Octroi_Update_Id = @OctroiUpdateId)

----------------------------------------------------------------------------------

if(@OctroiUpdateId <= 0) -- add
	Begin
		exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@MainId,
		@Division_ID,@Menu_Item_ID,0,@OctroiUpdate_No output,@OctroiUpdate_No_For_Print OUTPUT


		INSERT INTO EC_Opr_Octori_Update
		(Year_Code,Hierarchy_Code,Main_Id,Division_Id
		,Octroi_Update_No,Octroi_Update_No_For_Print,Octroi_Update_Date
		,Bill_No,Bill_Date,Ledger_ID,Total_GC,Total_Amount,Remark
		,Is_Cancelled,Created_On,Created_By,Updated_On,Updated_By,Chq_No,Chq_Date,Bank_Name
		,Total_Octroi_Amount,Total_Other_Charge_Amount)
		VALUES
		(@Year_Code,@Hierarchy_Code,@MainId,@Division_ID
		,@OctroiUpdate_No,@OctroiUpdate_No_For_Print,@OctroiUpdateDate
		,@BillNo,@BillDate,@LedgerId,@TotalGC,@Grand_Total,@Remarks
		,0,getdate(),@UserId,getdate(),@UserId,@ChequeNo,@ChequeDate,@BankName
		,@TotalAmount,@TotalOtherChargeAmount)

		set @OctroiUpdateId=@@identity
	end
else---Edit
	Begin
		Update EC_Opr_Octori_Update set
		Octroi_Update_Date=@OctroiUpdateDate
		,Bill_No=@BillNo
		,Bill_Date=@BillDate
		,Ledger_ID=@LedgerId
		,Total_GC=@TotalGC
		,Total_Amount=@Grand_Total 
		,Remark=@Remarks 
		,Updated_On=getdate()
		,Updated_By=@UserId 
		,Chq_No=@ChequeNo
		,Chq_Date=@ChequeDate
		,Bank_Name=@BankName
		,Total_Octroi_Amount = @TotalAmount 
		,Total_Other_Charge_Amount = @TotalOtherChargeAmount
		Where Octroi_Update_Id=@OctroiUpdateId
	End
-----------------------------------------------------------------------------------
-- Execution Of XML Irrespective Of Add Or Edit
-----------------------------------------------------------------------------------

delete from EC_Opr_Octroi_Update_Details
where Octroi_Update_Id = @OctroiUpdateId

Insert into EC_Opr_Octroi_Update_Details
 (Octroi_Update_Id,GC_Id,
 Octroi_Form_Type_ID,Octroi_Paid_By_ID,
 Oct_Receipt_No,Oct_Amount,Oct_Remark)
select @OctroiUpdateId,gc_id,octroi_form_type_id,
 octroi_paid_by_id,oct_receipt_no,oct_amount,
 oct_remark
From Openxml(@OctroiUpdate,'/newdataset/octroiupdatedetails',2) with
 (gc_id int,octroi_form_type_id int,
 octroi_paid_by_id int,oct_receipt_no varchar(15),
 oct_amount numeric(18,2),oct_remark varchar(200))

EXEC sp_xml_removedocument @OctroiUpdate
----------------------------------------------------------------------------------

update GC set
GC.Is_Octroi_Updated = 1,
GC.Oct_Bill_No = @BillNo, 
GC.Oct_Bill_Date = @BillDate,
GC.Octroi_Form_Type_ID = Octroi_Details.Octroi_Form_Type_Id, 
GC.Octroi_Paid_By_ID = Octroi_Details.Octroi_Paid_By_ID,
GC.Oct_Receipt_no = Octroi_Details.Oct_Receipt_No,
GC.Oct_Amount = Octroi_Details.Oct_Amount, 
GC.Oct_Remark = Octroi_Details.Oct_Remark 
from EC_Opr_VTrans_GC GC
inner join EC_Opr_Octroi_Update_Details Octroi_Details
on GC.GC_ID = Octroi_Details.GC_ID 
where Octroi_Update_Id = @OctroiUpdateId
----------------------------------------------------------------------------------

delete from EC_Opr_Octroi_Update_OtherChargeDetails
where Octroi_Update_Id = @OctroiUpdateId

DECLARE @OtherDetail intEXEC sp_xml_preparedocument @OtherDetail OUTPUT,@OtherChargeDetailsXML

insert into EC_Opr_Octroi_Update_OtherChargeDetails
		(Year_Code,Octroi_Update_Id,Is_Add,Ledger_ID,Amount)
Select	@Year_Code,@OctroiUpdateId,is_add,ledger_id,amount
from openxml (@OtherDetail,'/newdataset/otherdetails',2)
		with(is_add bit,ledger_id int,amount numeric(18,2))
EXEC sp_xml_removedocument @OtherDetail 

-----------Octroi Update Account Effects----------------------
-- if (select Isnull(Sum(Oct_Amount),0) from EC_Opr_Octroi_Update_Details where Octroi_Update_ID = @OctroiUpdateId And Octroi_Paid_By_ID=3) > 0
-- Begin
EXEC [dbo].[EC_FA_Opr_OctroiUpdateAccountEffects]
 @Octroi_Update_ID = @OctroiUpdateId
-- End
--------------------------------------------------------------

END
COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
END CATCH



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--exec EC_Opr_TrackNTrace_Billing_Details 09,9
CREATE proc [dbo].[EC_Opr_TrackNTrace_Billing_Details]
@Year_Code int,
@Bill_Id int
as
set nocount on;
begin

select	Bill_No_For_Print as 'Bill No',dbo.dateonlydisplay(Bill_Date) as 'Bill Date',
		Bill_Type,Client_Name,Hierarchy_Name,Credit_Memo_For as 'Bill_For',
		isnull(transport_bill_type_id,3)as bill_type_id,
		Bill_Ref_No,Billing_Name,Bill.Contact_Person,Total_GC,
        Bill_Sub_Total,Bill_Other_Charges_Total,Bill_Service_Tax_Amount,
		Bill_Octroi_Amount,Bill_Total_Amount,Less_Amount,
		isnull(Total_Oct_Form_Charges,0)as Total_Oct_Form_Charges,
		isnull(Total_Oct_Service_Charges,0) as Total_Oct_Service_Charges,
		Case Bill_Hierarchy_Code 
			When 'AO' then Area.Area_Name
			When 'BO' then Billing_Branch.Branch_Name 
		    When 'RO' then Region.Region_Name
			When 'HO' then 'HEAD OFFICE'
		  End as Billing_Location,
		User_Name as 'Bill_Updated_By',Bill.Updated_By as 'Bill_UpdatedBy_id',
		case Is_Cancelled when 1 then 'Cancelled BILL' else '' end as 'CancelledText'

from	FA_Opr_Bill Bill 
		inner join fa_master_Bill_Type billtype
		on Bill.Bill_Type_ID = billtype.bill_Type_ID
		inner join ec_master_Client_Vtrans client
		on Bill.Client_Id = client.client_Id
		Left Join Ec_Master_Hierarchy Hierarchy      
		On Hierarchy.Hierarchy_Code=Bill.Bill_Hierarchy_Code
		left join EC_Master_Branch Billing_Branch on  
		Bill.Bill_Main_ID = Billing_Branch.Branch_Id 
		left join EC_Master_Area Area on  
		Bill.Bill_Main_ID = Area.Area_Id  
		left join EC_Master_Region Region on  
		Bill.Bill_Main_ID = Region.Region_Id 
		left join EC_Master_Credit_Memo_For billFor
		on Bill.transport_bill_type_id = billFor.Credit_Memo_For_ID

		inner join Com_Adm_User user1
		on Bill.Updated_By = user1.User_ID

where	bill_ID = @Bill_Id 
		and bill.Year_Code=@Year_Code

      --------------------  // For GC Details // ---------------
--
select	gc.GC_ID,GC_No_For_Print as GC_NO,dbo.dateonlydisplay(GC_Date) as GC_Date,
		Total_Articles,Charged_Weight,GC_Sub_Total,billdetails.Other_Charges,
		isnull(Oct_Form_Charges,0)as Oct_Form_Charges,
		isnull(Oct_Service_Charges,0) as Oct_Service_Charges,GC_Service_Tax_Amount,
		Octroi_Amount,Total_Amount
from	FA_Opr_Bill_GC_Details billdetails
		inner join EC_Opr_Vtrans_GC gc
		on billdetails.gc_ID = gc.gc_Id

where	billdetails.bill_ID = @Bill_Id 
end






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================    
-- Author:  <Dinesh Mahajan>    
-- Create date: Nov  5 2008 12:29PM    
-- Description: < Save Actual Unloading Sheet >    
-- =============================================    
     
CREATE Proc [dbo].[EC_Opr_AUS_Save]    
(    
  @Division_ID int= 0,    
  @Year_Code int= 0,    
  @Un_Loading_Branch_ID int= 0,  
  @Actual_Unloading_Sheet_ID int= 0,    
  @Actual_Unloading_Sheet_No int= 0,    
  @Actual_Unloading_Sheet_No_For_Print varchar(20)='',  
  @Actual_Unloading_Sheet_Date datetime = getdate,    
  @Manual_TUR_No nvarchar(40)='',  
  @Vehicle_ID int= 0,    
  @Vehicle_Type_ID int= 0,    
  @LHPO_ID int= 0,    
  @Total_Actual_GCs int= 0,    
  @Total_Actual_Weight numeric(18,2)= 0,    
  @Total_Received_Weight numeric(18,2)= 0,   
  @Total_Actual_Articles int= 0,  
  @Total_Received_Articles int= 0,   
  @Scheduled_Arrival_Date datetime = getdate,    
  @Scheduled_Arrival_Time  VarChar(8)= '',  
  @Vehicle_Arrival_Date datetime = getdate,    
  @Vehicle_Arrival_Time VarChar(8)='',  
  @Truck_Unloaded_Time  VarChar(8)='',  
  @Reason_For_Late_Arrival_ID int= 0,  
  @Reason_For_Late_Unloading_ID int= 0,  
  @Total_Short_Articles int= 0,  
  @Total_Excess_Articles int= 0,  
  @Total_Damaged_Leakage_Articles int= 0,  
  @Total_Damaged_Leakage_Value numeric(18,2)= 0,  
  
 @Total_Additional_Freight  numeric(18,2) = 0,  
 @Total_Delivery_Commision numeric(18,2) = 0,  
 @Total_To_Pay_Collection numeric(18,2)= 0,  
 @Lorry_Hire numeric(18,2)= 0,  
 @Other_Receavable_Charges numeric(18,2)= 0,  
 @Other_Payable_Charges numeric(18,2)= 0,  
 @Total_Receable numeric(18,2)= 0,  
 @Total_Payable numeric(18,2)= 0,  
  
  @Unloaded_Supervisor_ID int= 0,  
  @Remarks varchar(250)= '',  
  @Is_Cancelled bit=0,  
  @Created_By int=0,  
  
  @Unloading_Details_Xml xml ='<doc></doc>',    
  @Excess_Details_Xml xml ='<doc></doc>',    
  @Error_Code int = 0 output ,  
  @ERROR_DESC AS VARCHAR(4000) = '' OUTPUT  ,  
  @Hierarchy_Code varchar(2) = 'BO',  
  @Menu_Item_ID int = 72,  
  @TAS_ID int,  
     @Print_Doc_ID int = 0 output,  
     @UpCountry_Receivable numeric(18,2),  
     @UpCountry_Crossing_Cost numeric(18,2)  
       
   
)  
  
As    
  
 set @Error_Code = 0;    
 set @ERROR_DESC = '';    
 set @Print_Doc_ID = 0;      
  
if @Actual_Unloading_Sheet_ID <= 0     
 begin    
  declare @Can_Add bit    
  
  exec Ec_Opr_Can_Add @Unloading_Details_Xml,'newdataset','unloading_details',@Can_Add output    
  if @Can_Add = 0 return;    
 end    
  
if @Actual_Unloading_Sheet_ID > 0 and dbo.Ec_Opr_Can_Edit_Cancel ('AUS',@Actual_Unloading_Sheet_ID) = 0    
 begin  
  set @Error_Code = 1012;  
  set @ERROR_DESC = '';    
  return;    
 end  
   
  
  
 BEGIN TRY    
 BEGIN TRAN    
 BEGIN    
 SET NOCOUNT ON;    
  
  
  
 DECLARE @idoc int     
     
EXEC sp_xml_Preparedocument @idoc output,@Unloading_Details_Xml     
  
-- ====================================================================  
-- Update Actual_Unloading_Sheet_ID = 0 Of "EC_Opr_VTrans_LHPO_GC_Details" Table  
-- --------------------------------------------------------------------  
  
 update LHPO_GC_Details  
 set LHPO_GC_Details.Actual_Unloading_Sheet_ID = 0  
 from EC_Opr_VTrans_LHPO_GC_Details LHPO_GC_Details  
 inner join  
 (SELECT lhpo_id,memo_id,gc_id  
 from openXml(@idoc,'/newdataset/unloading_details',2)     
 With(lhpo_id int,memo_id int,gc_id int)) as memogcdetails  
 on LHPO_GC_Details.lhpo_id = memogcdetails.LHPO_ID  
 and LHPO_GC_Details.memo_id = memogcdetails.memo_id  
 and LHPO_GC_Details.gc_id = memogcdetails.gc_id  
  
-- ====================================================================  
-- Update Actual_Unloading_Sheet_ID = 0 Of "EC_Opr_VTrans_Memo_Details" Table  
-- --------------------------------------------------------------------  
  
  update  EC_Opr_VTrans_Memo  
  set  AUS_ID = 0    
  where memo_id in (SELECT memo_id    
      from openXml(@idoc,'/newdataset/unloading_details',2)     
      With (memo_id int))     
  
  update  EC_Opr_VTrans_Memo_Details    
  set  Actual_Unloading_Sheet_ID = 0    
  where memo_id in (SELECT memo_id    
      from openXml(@idoc,'/newdataset/unloading_details',2)     
      With (memo_id int))     
  and gc_id in ( SELECT  gc_id    
      from openXml(@idoc,'/newdataset/unloading_details',2)     
      With(gc_id  int))     
  
 if @Actual_Unloading_Sheet_ID <= 0 -- add    
   Begin
		declare @is_duplicate bit
		set @is_duplicate = 1

		while @is_duplicate = 1
			begin 
				exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@Un_Loading_Branch_ID,    
				@Division_ID,@Menu_Item_ID,0,@Actual_Unloading_Sheet_No output,    
				@Actual_Unloading_Sheet_No_For_Print output  

				set @is_duplicate = null

				select @is_duplicate = 1 From dbo.EC_Opr_VTrans_Actual_Unloading_Sheet
				where Un_Loading_Branch_ID = @Un_Loading_Branch_ID
				and Actual_Unloading_Sheet_No = @Actual_Unloading_Sheet_No
				and year_code = @Year_Code
				and division_id = @Division_ID

				if @is_duplicate is null set @is_duplicate = 0
			end

-- ====================================================================  
-- Insert Into  "EC_Opr_VTrans_Actual_Unloading_Sheet" Table  
-- --------------------------------------------------------------------  
  
  insert into EC_Opr_VTrans_Actual_Unloading_Sheet    
  (    
   Division_ID,    
   Year_Code,    
   Un_Loading_Branch_ID,    
   Actual_Unloading_Sheet_No,    
   Actual_Unloading_Sheet_No_For_Print,    
   Actual_Unloading_Sheet_Date,    
   Manual_TUR_No,    
   Vehicle_ID,    
   Vehicle_Type_ID,    
   LHPO_ID,    
   Total_Actual_GCs,    
   Total_Actual_Weight,    
   Total_Received_Weight,    
   Total_Actual_Articles,    
   Total_Received_Articles,    
   Scheduled_Arrival_Date,    
   Scheduled_Arrival_Time,    
   Vehicle_Arrival_Date,    
   Vehicle_Arrival_Time,    
   Truck_Unloaded_Time,    
   Reason_For_Late_Arrival_ID,    
   Reason_For_Late_Unloading_ID,   
   Total_Short_Articles,    
   Total_Excess_Articles,    
   Total_Damaged_Leakage_Articles,    
   Total_Damaged_Leakage_Value,    
  
   Total_Additional_Freight,  
   Total_Delivery_Commision,  
   Total_To_Pay_Collection,  
   Lorry_Hire,  
   Other_Receavable_Charges,  
   Other_Payable_Charges,  
   Total_Receable,  
   Total_Payable,  
  
   Unloaded_Supervisor_ID,    
   Remarks,    
   Is_Cancelled,    
   Created_By,    
   Created_On,    
   Updated_By,    
   Updated_On,  
   TAS_ID,  
            UpCountry_Receivable,  
            UpCountry_Crossing_Cost  
               
  )    
  values    
  (    
   @Division_ID,    
   @Year_Code,    
   @Un_Loading_Branch_ID,    
   @Actual_Unloading_Sheet_No,    
   @Actual_Unloading_Sheet_No_For_Print,    
   @Actual_Unloading_Sheet_Date,    
   @Manual_TUR_No,    
   @Vehicle_ID,    
   @Vehicle_Type_ID,    
   @LHPO_ID,    
   @Total_Actual_GCs,    
   @Total_Actual_Weight,    
   @Total_Received_Weight,    
   @Total_Actual_Articles,    
   @Total_Received_Articles,    
   @Scheduled_Arrival_Date,    
   @Scheduled_Arrival_Time,    
   @Vehicle_Arrival_Date,    
   @Vehicle_Arrival_Time,    
   @Truck_Unloaded_Time,    
   @Reason_For_Late_Arrival_ID,    
   @Reason_For_Late_Unloading_ID,    
   @Total_Short_Articles,    
   @Total_Excess_Articles,    
   @Total_Damaged_Leakage_Articles,    
   @Total_Damaged_Leakage_Value,    
  
   @Total_Additional_Freight,  
   @Total_Delivery_Commision,  
   @Total_To_Pay_Collection,  
   @Lorry_Hire,  
   @Other_Receavable_Charges,  
   @Other_Payable_Charges,  
   @Total_Receable,  
   @Total_Payable,  
  
   @Unloaded_Supervisor_ID,    
   @Remarks,    
   0,  
   @Created_By,    
   getdate(),    
   @Created_By,    
   getdate(),  
   @TAS_ID ,  
            @UpCountry_Receivable ,  
            @UpCountry_Crossing_Cost    
  )    
  
  Set @Actual_Unloading_Sheet_ID =@@Identity    
        set @Print_Doc_ID = @@identity        
  
  -- added: Anita On:23 Jan 09  
  update EC_Opr_VTrans_TAS  
  set AUS_ID=@Actual_Unloading_Sheet_ID  
  where TAS_ID=@TAS_Id  
   End    
 Else -- Edit    
   Begin    
    
  exec EC_Opr_Set_Article_Reverse_Effects 'AUS',@Actual_Unloading_Sheet_ID    
  
  
-- ====================================================================  
-- Update "EC_Opr_VTrans_Actual_Unloading_Sheet" Table  
-- --------------------------------------------------------------------  
    
  Update EC_Opr_VTrans_Actual_Unloading_Sheet   
  set  Actual_Unloading_Sheet_Date = @Actual_Unloading_Sheet_Date,    
   Total_Actual_GCs = @Total_Actual_GCs,    
   Total_Actual_Weight = @Total_Actual_Weight,    
   Total_Received_Weight = @Total_Received_Weight,    
   Total_Actual_Articles = @Total_Actual_Articles,    
   Total_Received_Articles = @Total_Received_Articles,    
   Scheduled_Arrival_Date = @Scheduled_Arrival_Date,    
   Scheduled_Arrival_Time = @Scheduled_Arrival_Time,    
   Vehicle_Arrival_Date = @Vehicle_Arrival_Date,    
   Vehicle_Arrival_Time = @Vehicle_Arrival_Time,    
   Truck_Unloaded_Time = @Truck_Unloaded_Time,    
   Reason_For_Late_Arrival_ID = @Reason_For_Late_Arrival_ID,    
   Reason_For_Late_Unloading_ID = @Reason_For_Late_Unloading_ID,    
   Total_Short_Articles = @Total_Short_Articles,    
   Total_Excess_Articles = @Total_Excess_Articles,    
   Total_Damaged_Leakage_Articles = @Total_Damaged_Leakage_Articles,    
   Total_Damaged_Leakage_Value = @Total_Damaged_Leakage_Value,    
  
   Total_Additional_Freight = @Total_Additional_Freight,  
   Total_Delivery_Commision = @Total_Delivery_Commision,  
   Total_To_Pay_Collection = @Total_To_Pay_Collection,  
   Lorry_Hire = @Lorry_Hire,  
   Other_Receavable_Charges = @Other_Receavable_Charges,  
   Other_Payable_Charges = @Other_Payable_Charges,  
   Total_Receable = @Total_Receable,  
   Total_Payable = @Total_Payable,  
  
  
   Unloaded_Supervisor_ID = @Unloaded_Supervisor_ID,    
   Remarks = @Remarks,    
   Updated_By = @Created_By,    
   Updated_On = getdate(),    
   Manual_TUR_No=@Manual_TUR_No,  
            UpCountry_Receivable=@UpCountry_Receivable ,             
            UpCountry_Crossing_Cost= @UpCountry_Crossing_Cost   
  
  where Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID   
        set @Print_Doc_ID = @Actual_Unloading_Sheet_ID   
  
   delete from EC_Opr_VTrans_GC_Articles_Unknown    
   where Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID    
     
   delete EC_Opr_VTrans_Actual_Unloading_Sheet_Details    
   where Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID    
   
   delete EC_Opr_VTrans_Actual_Unloading_Sheet_Excess_Details    
   where Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID    
   
   End    
  
-- ====================================================================  
-- Insert Into  "EC_Opr_VTrans_Actual_Unloading_Sheet_Details" Table  
-- --------------------------------------------------------------------  
  
 insert into EC_Opr_VTrans_Actual_Unloading_Sheet_Details    
 (    
  Year_Code,   
  Actual_Unloading_Sheet_ID,  
  Memo_ID,  
  GC_ID,  
  Article_ID,  
  Loaded_Articles,  
  Received_Articles,  
  Received_Weight,  
  Received_Condition_ID,  
  Damaged_Articles,  
  Damaged_Value,  
  Additional_Freight,  
  Previous_Article_ID,    
  Previous_Status_ID,    
  Previous_Branch_ID,    
  Previous_Document_ID,    
  Previous_Document_No_For_Print,    
  Previous_Document_Date,    
  Found_ID    
 )    
 SELECT     
  @Year_Code,     
  @Actual_Unloading_Sheet_ID,    
  memo_id,    
  gc_id,    
  article_id,    
  loaded_articles ,  
  received_articles,    
  received_wt,    
  received_condition_id,    
  damaged_articles,    
  damaged_value,    
  additional_freight,  
  Previous_Article_ID,    
  Previous_Status_ID,    
  Previous_Branch_ID,    
  Previous_Document_ID,    
  Previous_Document_No_For_Print,     
  cast(Previous_Document_Date as datetime),    
  0   --Found_ID    
 from openXml(@idoc,'/newdataset/unloading_details',2)     
 With(     
  memo_id int,    
  gc_id int,    
  article_id int,    
  loaded_articles int,    
  received_articles int,    
  received_wt numeric(18,2),    
  received_condition_id int,    
  damaged_articles int,    
  damaged_value  numeric(18,2),    
  additional_freight numeric(18,2),    
  previous_article_id int ,  
  previous_status_id int ,    
  previous_branch_id int ,    
  previous_document_id int ,    
  previous_document_no_for_print varchar(20),    
  previous_document_date varchar(10)  
 )  
-- ====================================================================  
-- Update Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID   
-- Of "EC_Opr_VTrans_LHPO_GC_Details" Table  
-- --------------------------------------------------------------------  
  
 update LHPO_GC_Details  
 set LHPO_GC_Details.Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID  
 from EC_Opr_VTrans_LHPO_GC_Details LHPO_GC_Details  
 inner join  
 (SELECT lhpo_id,memo_id,gc_id  
 from openXml(@idoc,'/newdataset/unloading_details',2)     
 With(lhpo_id int,memo_id int,gc_id int)) as memogcdetails  
 on LHPO_GC_Details.lhpo_id = memogcdetails.LHPO_ID  
 and LHPO_GC_Details.memo_id = memogcdetails.memo_id  
 and LHPO_GC_Details.gc_id = memogcdetails.gc_id  
  
-- ====================================================================  
-- Update Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID   
-- Of "EC_Opr_VTrans_Memo_Details" Table  
-- --------------------------------------------------------------------  
  
  update  EC_Opr_VTrans_Memo  
  set  AUS_ID = @Actual_Unloading_Sheet_ID    
  where memo_id in (SELECT memo_id    
      from openXml(@idoc,'/newdataset/unloading_details',2)     
      With (memo_id int))     
  
   update EC_Opr_VTrans_Memo_Details    
   set  Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID    
   where memo_id in (SELECT memo_id    
       from openXml(@idoc,'/newdataset/unloading_details',2)     
       With ( memo_id int  ))  
    and gc_id in (SELECT gc_id     
       from openXml(@idoc,'/newdataset/unloading_details',2)     
       With ( gc_id  int))  
  
-- ====================================================================  
-- Insert Short Articles Details Into  "EC_Opr_VTrans_GC_Articles_Unknown" Table  
-- --------------------------------------------------------------------  
  
  insert into EC_Opr_VTrans_GC_Articles_Unknown    
  (     
   Updated_Date,    
   Article_ID,    
   GC_ID,  
   GC_No,  
   Actual_Unloading_Sheet_ID,    
   DDC_ID,    
   LHPO_ID,    
   Memo_ID,    
   Flag_ID,    
   Articles,    
   Articles_Actual_Wt,    
   Packing_Type_ID,    
   Commodity_ID,    
   Item_ID,    
   Remarks,    
   Found_Articles,    
   Missing_Articles ,  
   Short_Excess_Branch_Id   
  )    
  SELECT     
   @Actual_Unloading_Sheet_Date,    
   Article_ID,    
   GC_ID,  
   0,  
   @Actual_Unloading_Sheet_ID,    
   0 , --DDC_ID,    
   @LHPO_ID,    
   Memo_ID,  
   50 , --Flag_ID,  for short  
   loaded_articles - received_articles,    
   loaded_actual_wt - received_wt,    
   0 , --Packing_Type_ID,    
   0 , --Commodity_ID,    
   0 , --Item_ID,    
   '' , --Remarks,    
   0 , --Found_Articles,    
   0,   --Missing_Articles,  
   @Un_Loading_Branch_ID    
  from openXml(@idoc,'/newdataset/unloading_details',2)     
  With     
  (  
   memo_id int,    
   gc_id int,  
   article_id int,    
   loaded_articles int,    
   loaded_actual_wt  numeric(18,2),    
   received_articles int,    
   received_wt  numeric(18,2),    
   received_condition_id int,    
   damaged_articles int,    
   damaged_value  numeric(18,2)   
  )     
  where loaded_articles > received_articles    
     
   EXEC sp_xml_removedocument @idoc  
  
   EXEC sp_xml_Preparedocument @idoc output,@Excess_Details_Xml  
    
-- ====================================================================  
-- Insert Excess Articles Details Into  "EC_Opr_VTrans_GC_Articles_Unknown" Table  
-- --------------------------------------------------------------------  
  insert into EC_Opr_VTrans_GC_Articles_Unknown    
  (   Updated_Date,Article_ID,GC_ID,  
   GC_No,Actual_Unloading_Sheet_ID,DDC_ID,    
   LHPO_ID,Memo_ID,Flag_ID,    
   Articles,Articles_Actual_Wt,Packing_Type_ID,    
   Commodity_ID,Item_ID,Remarks,    
   Found_Articles,Missing_Articles,Short_Excess_Branch_Id   
  )  
  select @Actual_Unloading_Sheet_Date,0,0,  
   gc_no,@Actual_Unloading_Sheet_ID,0,  
   @LHPO_ID,0,70,  
   Excess_Articles,0,Packing_Type_ID,    
   Commodity_ID,Item_ID,Remarks,  
   0,0,@Un_Loading_Branch_ID   
  from openXml(@idoc,'/newdataset/excess_details',2)     
  With(gc_no varchar(10),excess_articles int,excess_articles_wt int,    
   marking_on_package  varchar(10),packing_type_id int,commodity_id int,    
   item_id int,remarks  varchar(100))  
  
-- ====================================================================  
-- Insert Excess Articles Details Into  "EC_Opr_VTrans_Actual_Unloading_Sheet_Excess_Details" Table  
-- --------------------------------------------------------------------  
  
  insert into EC_Opr_VTrans_Actual_Unloading_Sheet_Excess_Details    
  (  Year_Code,Actual_Unloading_Sheet_ID,GC_No,    
   Excess_Articles,Excess_Articles_Wt,Marking_On_Package,    
   Packing_Type_ID,Commodity_ID,Item_ID,    
   Remarks,GC_Unknown_ID   
  )    
  select @Year_Code,@Actual_Unloading_Sheet_ID,GC_No,  
   Excess_Articles,0,Marking_On_Package,  
   Packing_Type_ID,Commodity_ID,Item_ID,  
   Remarks,0    
  from openXml(@idoc,'/newdataset/excess_details',2)     
  With(gc_no varchar(10),excess_articles int,excess_articles_wt int,  
   marking_on_package varchar(10),packing_type_id int,commodity_id int,    
   item_id int,remarks varchar(100))     
  
 EXEC sp_xml_removedocument @idoc  
  
 exec EC_Opr_Set_Article_Effects @Un_Loading_Branch_ID,'AUS',@Actual_Unloading_Sheet_ID ,0    
  
-- ====================================================================  
-- Update Article_ID  "EC_Opr_VTrans_GC_Articles_Unknown" Table  
-- --------------------------------------------------------------------  
  
 update EC_Opr_VTrans_GC_Articles_Unknown    
 set EC_Opr_VTrans_GC_Articles_Unknown.Article_ID = AUSDet.Article_ID   
 from EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUSDet  
 where AUSDet.Previous_Article_ID = EC_Opr_VTrans_GC_Articles_Unknown.Article_ID  
 and EC_Opr_VTrans_GC_Articles_Unknown.Actual_Unloading_Sheet_ID = @Actual_Unloading_Sheet_ID  
  


--------------------------AUS Accounting Effect-----------------------------
EXEC	[dbo].[EC_FA_Opr_LHPOCrossingAccountEffects]
		@LHPO_Id = @LHPO_Id,
		@AUS_Id = @Actual_Unloading_Sheet_ID,
		@IsFromLHPO = 0
--------------------------AUS Accounting Effect-----------------------------

  
 END    
 COMMIT TRAN    
 END TRY    
 BEGIN CATCH    
  ROLLBACK TRAN    
  SELECT @ERROR_CODE=ERROR_NUMBER()    
  SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +    
  CAST(ERROR_MESSAGE() as VARCHAR(4000))    
 END CATCH    
  
  
  
  
  
  
  
  
  
  
  
  




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE proc [dbo].[EC_Opr_TrackNTrace_Fill_GC_No]
@Doc_No_for varchar(20),
@Call_From varchar(20),
@Doc_Id int,
@YearCode int
as
set nocount on;

declare @gc_maxlength int
select @gc_maxlength = GC_No_Length from ec_master_Company_gc_parameter

declare @gc_no varchar(20)
select @gc_no = case charindex('-',@Doc_No_for) when 0 then dbo.Get_No_To_Print(@Doc_No_for,@gc_maxlength) else @Doc_No_for end


if(@Doc_Id = 0) --For GC
begin
	if(@Call_From = 'Out')
	begin
--		select GC_ID as 'Doc_ID',
--			 (case Is_Opening_Gc when 1 then GC_No_For_Print +' (Opening GC)'
--			  else GC_No_For_Print +' - (0'+ cast(year_Code as varchar(2)) +')' end) as 'Doc_No'
--		from ec_opr_vtrans_gc
--		where gc_id = cast(@Doc_No_for as int)

		select GC_ID as 'Doc_ID',GC_No_For_Print as 'Doc_No'
		from ec_opr_vtrans_gc
		where gc_id = cast(@Doc_No_for as int)
	end
	else
	begin
		select GC_ID as 'Doc_ID',
			 (case Is_Opening_Gc when 1 then GC_No_For_Print +' (Opening GC)'
			  else GC_No_For_Print +' - (0'+ cast(year_Code as varchar(2)) +')' end) as 'Doc_No'
		from ec_opr_vtrans_gc
		where GC_No_For_Print = @gc_no  --gc_no = cast(@Doc_No_for as int)
--			and ec_opr_vtrans_gc.year_Code in(0,@YearCode)
--			and status_id <> 80
				
	end
end
Else if(@Doc_Id = 1) --For Manifest
begin
	if(@Call_From = 'Out')
	begin
		select Memo_Id as 'Doc_ID',Memo_No_For_Print as 'Doc_No'
		from ec_opr_vtrans_Memo
		where memo_id = cast(@Doc_No_for as int)
	end
	else
	begin
		select Memo_Id as 'Doc_ID',Memo_No_For_Print as 'Doc_No'
		from ec_opr_vtrans_Memo
		where memo_no_for_print = @Doc_No_for
		and ec_opr_vtrans_Memo.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 2) --For LHPO
begin
	if(@Call_From = 'Out')
	begin
		select Main_LHPO_ID as 'Doc_ID',LHPO_No_For_Print as 'Doc_No'
		from ec_opr_vtrans_lhpo
		where LHPO_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select Main_LHPO_ID as 'Doc_ID',LHPO_No_For_Print as 'Doc_No'
		from ec_opr_vtrans_lhpo
		where LHPO_No_For_Print = @Doc_No_for
		and ec_opr_vtrans_lhpo.year_Code in(0,@YearCode)
		and lhpo_type_id =1
	end
end
Else if(@Doc_Id = 3) --For AUs
begin
	if(@Call_From = 'Out')
	begin
		select Actual_Unloading_Sheet_ID as 'Doc_ID',Actual_Unloading_Sheet_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_Actual_Unloading_Sheet
		where Actual_Unloading_Sheet_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select Actual_Unloading_Sheet_ID as 'Doc_ID',Actual_Unloading_Sheet_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_Actual_Unloading_Sheet
		where Actual_Unloading_Sheet_No_For_Print = @Doc_No_for
		and EC_Opr_VTrans_Actual_Unloading_Sheet.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 4) --For Delivery
begin
	if(@Call_From = 'Out')
	begin
		select DDC_ID as 'Doc_ID',DDC_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_Door_Delivery_Confirmation
		where DDC_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select DDC_ID as 'Doc_ID',DDC_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_Door_Delivery_Confirmation
		where DDC_No_For_Print = @Doc_No_for
		and EC_Opr_VTrans_Door_Delivery_Confirmation.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 5) --For Booking MR
begin
	if(@Call_From = 'Out')
	begin
		select MR_ID as 'Doc_ID',MR_No_For_Print as 'Doc_No'
		from fa_opr_mr
		where MR_ID = cast(@Doc_No_for as int)
			  and MR_Type_ID = 1 --1 means booking mr
	end
	else
	begin
		select MR_ID as 'Doc_ID',MR_No_For_Print as 'Doc_No'
		from fa_opr_mr
		where MR_No_For_Print = cast(@Doc_No_for as int)
			  and MR_Type_ID = 1 --1 means booking mr
			  and fa_opr_mr.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 6) --For Delivery MR
begin
	if(@Call_From = 'Out')
	begin
		select MR_ID as 'Doc_ID',MR_No_For_Print as 'Doc_No'
		from fa_opr_mr
		where MR_ID = cast(@Doc_No_for as int)
			  and MR_Type_ID = 2 --2 means delivery mr
	end
	else
	begin
		select MR_ID as 'Doc_ID',MR_No_For_Print as 'Doc_No'
		from fa_opr_mr
		where MR_No_For_Print = cast(@Doc_No_for as int)
			  and MR_Type_ID = 2 --2 means delivery mr
			  and fa_opr_mr.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 7) --For Credit Memo
begin
	if(@Call_From = 'Out')
	begin
		select Credit_Memo_ID as 'Doc_ID',Credit_Memo_No_For_Print as 'Doc_No'
		from FA_Opr_Credit_Memo
		where Credit_Memo_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select Credit_Memo_ID as 'Doc_ID',Credit_Memo_No_For_Print as 'Doc_No'
		from FA_Opr_Credit_Memo
		where Credit_Memo_No_For_Print = cast(@Doc_No_for as int)
			  and FA_Opr_Credit_Memo.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 8) --For Transport Bill
begin
	if(@Call_From = 'Out')
	begin
		select Bill_ID as 'Doc_ID',Bill_No_For_Print as 'Doc_No'
		from FA_Opr_Bill
		where Bill_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select Bill_ID as 'Doc_ID',Bill_No_For_Print as 'Doc_No'
		from FA_Opr_Bill
		where Bill_No_For_Print = @Doc_No_for
			  and FA_Opr_Bill.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 15) --For Private Mark
begin	
		select GC_ID as 'Doc_ID',
			 GC_No_For_Print as 'Doc_No'
		from ec_opr_vtrans_gc
		where Private_Mark = @Doc_No_for
			and ec_opr_vtrans_gc.year_Code in(0,@YearCode)
			and status_id <> 80
end
Else if(@Doc_Id = 16) --For POD Cover Gen
begin
	if(@Call_From = 'Out')
	begin
		select Cover_ID as 'Doc_ID',Cover_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_POD_Cover_Generation
		where Cover_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select Cover_ID as 'Doc_ID',Cover_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_POD_Cover_Generation
		where Cover_No_For_Print = @Doc_No_for
		and EC_Opr_VTrans_POD_Cover_Generation.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 17) --for POD Cover Recieved
begin
	if(@Call_From = 'Out')
	begin
		select Cover_Received_ID as 'Doc_ID',Cover_Received_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_POD_Cover_Received
		where Cover_Received_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select Cover_Received_ID as 'Doc_ID',Cover_Received_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_POD_Cover_Received
		where Cover_Received_No_For_Print = @Doc_No_for
		and EC_Opr_VTrans_POD_Cover_Received.year_Code in(0,@YearCode)
	end
end
Else if(@Doc_Id = 18) --For POD Delivery
begin
	if(@Call_From = 'Out')
	begin
		select POD_Delivery_Sheet_ID as 'Doc_ID',POD_Delivery_Sheet_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_POD_Delivery_Sheet
		where POD_Delivery_Sheet_ID = cast(@Doc_No_for as int)
	end
	else
	begin
		select POD_Delivery_Sheet_ID as 'Doc_ID',POD_Delivery_Sheet_No_For_Print as 'Doc_No'
		from EC_Opr_VTrans_POD_Delivery_Sheet
		where POD_Delivery_Sheet_No_For_Print = @Doc_No_for
		and EC_Opr_VTrans_POD_Delivery_Sheet.year_Code in(0,@YearCode)
	end
end
















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE proc [dbo].[EC_Opr_TrackNTrace_Finance_Details]
@Year_Code int,
@Transaction_Id int,
@Document_Id int
as
set nocount on;
begin

select distinct Voucher.Voucher_Id,Voucher.Voucher_No,
dbo.dateonlydisplay(Voucher.Voucher_Date) as Voucher_Date,
Ref_No,Ledger_Name,Voucher_Name as Voucher_Type,
Total_Debit,Total_Credit,Narration,
user1.User_Name as 'Updated_By',Voucher.Updated_By as 'UpdatedBy_Id'

from FA_Opr_Operational_Vouchers_Details Vou_Det
inner join fa_opr_voucher Voucher
on Vou_Det.Voucher_id = Voucher.Voucher_id --and Voucher.Is_Cancelled = 0
inner join fa_master_voucher_type VoucherType
on Voucher.Voucher_Type_Id = VoucherType.Voucher_Type_Id
inner join FA_Master_Ledger Ledger
on Voucher.Ledger_id = Ledger.Ledger_id
inner join Com_Adm_User user1
on Voucher.Updated_By = user1.User_ID

where	Vou_Det.Transaction_id = @Transaction_Id
		and Document_Id = @Document_Id
--		and Voucher.Year_Code =  @Year_Code

order by Voucher.Voucher_Id

if(@Document_Id = 7)
begin

	select Voucher.Voucher_Id,Voucher.Voucher_No,
	dbo.dateonlydisplay(Voucher.Voucher_Date) as Voucher_Date,
	Ref_No,Ledger_Name,Voucher_Name as Voucher_Type,
	Total_Debit,Total_Credit,Narration,
	user1.User_Name as 'Updated_By',Voucher.Updated_By as 'UpdatedBy_Id'

	from fa_opr_voucher Voucher
	inner join fa_master_voucher_type VoucherType
	on Voucher.Voucher_Type_Id = VoucherType.Voucher_Type_Id
	inner join FA_Master_Ledger Ledger
	on Voucher.Ledger_id = Ledger.Ledger_id
	inner join Com_Adm_User user1
	on Voucher.Updated_By = user1.User_ID

	where Voucher_Id in 
		(
		select Bill.Voucher_Id from  FA_Opr_Bill  OprBill
		inner join FA_Bill_Wise_Details Bill
		on 
		OprBill.Bill_No_For_Print=Bill.Ref_No
		and OprBill.Bill_Hierarchy_Code=Bill.Hierarchy_Code
		and OprBill.Bill_Main_ID=Bill.Main_Id
		and OprBill.Division_Id=Bill.Division_Id

		inner Join EC_Master_Client_Vtrans On EC_Master_Client_Vtrans.Client_Id=OprBill.Client_Id
		and EC_Master_Client_Vtrans.Ledger_Id=Bill.Ledger_Id

		where	OprBill.Bill_ID = @Transaction_Id
				and Bill.Voucher_Type_Id=14 
				and Bill.Ref_Type_Id=2
		)
	order by Voucher_Date,Voucher_Id
end
else if (@Document_Id = 8)
begin

	select Voucher.Voucher_Id,Voucher.Voucher_No,
	dbo.dateonlydisplay(Voucher.Voucher_Date) as Voucher_Date,
	Ref_No,Ledger_Name,Voucher_Name as Voucher_Type,
	Total_Debit,Total_Credit,Narration,
	user1.User_Name as 'Updated_By',Voucher.Updated_By as 'UpdatedBy_Id'

	from fa_opr_voucher Voucher
	inner join fa_master_voucher_type VoucherType
	on Voucher.Voucher_Type_Id = VoucherType.Voucher_Type_Id
	inner join FA_Master_Ledger Ledger
	on Voucher.Ledger_id = Ledger.Ledger_id
	inner join Com_Adm_User user1
	on Voucher.Updated_By = user1.User_ID

	where Voucher_Id in 
		(
		select Bill.Voucher_Id from  FA_Opr_Credit_Memo  CreditMemo
		inner join FA_Bill_Wise_Details Bill
		on 
		CreditMemo.Credit_Memo_No_For_print=Bill.Ref_No
		and CreditMemo.Debit_To_ledger_Id=Bill.Ledger_Id
		and Bill.Hierarchy_Code='BO'
		and CreditMemo.Credit_Memo_Branch_ID=Bill.Main_Id
		and CreditMemo.Division_Id=Bill.Division_Id
		where 
		CreditMemo.Credit_Memo_id = @Transaction_Id
		and Bill.Voucher_Type_Id=14 and Bill.Ref_Type_Id=2
		)
end

end










GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:<Lad Ashish>
-- Create date: <25th October 2008>
-- Description: <Fill Grid On Vehicle Changed For LHPO Hire Details Tab of LHPO Operation Form>
-- EXEC EC_Opr_LHPOHireDetails_FillGrid 3,4,9,'1 dec 2008','21 nov 2008',true
-- =============================================

CREATE PROCEDURE [dbo].[EC_Opr_LHPOHireDetails_FillGrid] 
(
@Vehicle_ID int,
@Branch_ID int,
@LHPO_ID int,
@LHPO_Date datetime,
@Attached_LHPODate datetime,
@Is_Add bit,
@DivisionId int 
)
AS 
set nocount on 
BEGIN

if @Is_Add=1
	Begin
		if @LHPO_ID<=0-- new trip
			Begin
				Select 'false' as IsTrue, Memo.Memo_Id,Memo_No_For_Print,Memo_Date,MemoType.Memo_Type,
				case when Memo.To_Branch_Id=0 then Memo.To_Name else Branch.Branch_Name
				end as 'Branch_Name',Total_No_Of_GC as Total_GC,Total_Loaded_Articles,
				Memo.Total_Loaded_Weight,
				dbo.LHPO_Memo_Get_Crossing_Cost(Memo.Memo_Id,@LHPO_ID,@Branch_ID) as Crossing_Cost,
				dbo.LHPO_Memo_Get_Delivery_Commision (Memo.Memo_Id,@LHPO_ID,@Branch_ID) as Delivery_Commision,
				dbo.LHPO_Memo_Get_ToPay_Collection (Memo.Memo_Id,0,@Branch_ID) as ToPay_Collection
				from EC_Opr_VTrans_Memo as Memo
				Inner Join EC_Master_Memo_Type as MemoType
				On MemoType.Memo_Type_Id=Memo.Memo_Type_Id
				left outer Join EC_Master_Branch as Branch
				On Branch.Branch_Id=Memo.To_Branch_Id
				Where MEMO.Memo_Branch_Id=@Branch_ID
				and Memo.Vehicle_ID=@Vehicle_ID
				and Memo.LHPO_ID=0
				and Memo.Memo_Date<=@LHPO_Date
				and dbo.Is_Memo_Prepared_For_All_GC_Of_ALS (Memo.ALS_ID) = 1
				and Memo.Is_Cancelled=0
            and Memo.Division_ID=@DivisionId
			End
	Else-- attached trip
		Begin
			Select 'false' as IsTrue, Memo.Memo_Id,Memo_No_For_Print,Memo_Date,MemoType.Memo_Type,
			case when Memo.To_Branch_Id=0
			then 
			Memo.To_Name
			else		
			Branch.Branch_Name
			end as 'Branch_Name',Total_No_Of_GC as Total_GC,Total_Loaded_Articles,
			Memo.Total_Loaded_Weight,
			dbo.LHPO_Memo_Get_Crossing_Cost(Memo.Memo_Id,@LHPO_ID,@Branch_ID) as Crossing_Cost,
			dbo.LHPO_Memo_Get_Delivery_Commision (Memo.Memo_Id,@LHPO_ID,@Branch_ID) as Delivery_Commision,
			dbo.LHPO_Memo_Get_ToPay_Collection (Memo.Memo_Id,0,@Branch_ID) as ToPay_Collection

			from EC_Opr_VTrans_Memo as Memo
			Inner Join EC_Master_Memo_Type as MemoType
			On MemoType.Memo_Type_Id=Memo.Memo_Type_Id
			left outer Join EC_Master_Branch as Branch
			On Branch.Branch_Id=Memo.To_Branch_Id
			Where MEMO.Memo_Branch_Id=@Branch_ID
			and Memo.Vehicle_ID=@Vehicle_ID
			and Memo.LHPO_ID=0
			and Memo.Memo_Date>=@Attached_LHPODate
			and Memo.Memo_Date<=@LHPO_Date
			and dbo.Is_Memo_Prepared_For_All_GC_Of_ALS (Memo.ALS_ID) = 1
			and Memo.Is_Cancelled=0
         and Memo.Division_ID=@DivisionId
		End
	End
Else
	Begin
		Select 'true' as IsTrue, Memo.Memo_Id,Memo_No_For_Print,Memo_Date,MemoType.Memo_Type,
				case when Memo.To_Branch_Id=0
				then 
				Memo.To_Name
				else		
				Branch.Branch_Name
				end as 'Branch_Name',
				Total_No_Of_GC as Total_GC,Total_Loaded_Articles,Memo.Total_Loaded_Weight,
				dbo.LHPO_Memo_Get_Crossing_Cost(Memo.Memo_Id,@LHPO_ID,@Branch_ID) as Crossing_Cost,
				dbo.LHPO_Memo_Get_Delivery_Commision (Memo.Memo_Id,@LHPO_ID,@Branch_ID) as Delivery_Commision,
				dbo.LHPO_Memo_Get_ToPay_Collection (Memo.Memo_Id,@LHPO_ID,@Branch_ID) as ToPay_Collection
		From EC_Opr_VTrans_LHPO LHPO
		Inner Join EC_Opr_VTrans_LHPO_Memo_Details LHPOMEMO 
		On LHPO.LHPO_ID=LHPOMEMO.LHPO_ID
		Inner Join EC_Opr_VTrans_Memo as Memo
		On Memo.Memo_Id=LHPOMEMO.Memo_Id
		Inner Join EC_Master_Memo_Type as MemoType
		On MemoType.Memo_Type_Id=Memo.Memo_Type_Id
		left outer Join EC_Master_Branch as Branch
		On Branch.Branch_Id=Memo.To_Branch_Id
		Where
		LHPOMEMO.LHPO_ID=@LHPO_ID and
		Memo.Memo_Date<=@LHPO_Date 
		and Memo.Is_Cancelled=0
        
	End
End
















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================  
-- Author:		<Harshal Sapre>
-- Create date: <2009-07-01>
-- Description:	<Description>
-- [dbo].[EC_RPT_BOOKING_BRANCHWISE_DAILY_COLLECTION_NANDWANA] 0, '2009-04-01', '2009-07-01',0,100
-- =============================================  

CREATE PROCEDURE [dbo].[EC_RPT_BOOKING_BRANCHWISE_DAILY_COLLECTION_NANDWANA]  
@Branch_ID int,  
@From_Date datetime,  
@To_Date datetime,
@PageIndex int, 
@PageSize int                   

AS  
BEGIN  

SET NOCOUNT ON;  

----------------------------------------Booking--------------------------------------------  
DECLARE @Temp AS TABLE
(
	MR_Date datetime, gc_caption_No varchar(50), MR_No varchar(50), 
	Cash_Amount int, Cheque_No varchar(50), Cheque_Amount int
)
INSERT INTO @Temp 

	SELECT  --a.MR_ID,     
			a.MR_Date as [MR Date],  
			b.GC_No_For_Print as [gc_caption No],  
			a.MR_No_For_Print as [MR No],  
			a.Cash_Amount as [Cash Amount],  
			'' as [Cheque No],  
			0  as [Cheque Amount]  
	FROM FA_OPR_MR a  
	INNER JOIN EC_OPR_VTRANS_GC b ON a.GC_ID = b.GC_ID  
	WHERE a.Is_Cancelled=0 and a.MR_Type_ID = 1 and a.Cash_Amount <> 0  
	and a.MR_Branch_ID = (case @Branch_ID when 0 then a.MR_Branch_ID else @Branch_ID End)  
	and (a.MR_Date between @From_Date and @To_Date)  
	--and a.MR_No_For_Print = 0000005  
	  
	UNION  
	  
	SELECT  --a.MR_ID,   
			a.MR_Date as [MR Date],   
			b.GC_No_For_Print as [gc_caption No],   
			a.MR_No_For_Print as [MR No],  
			0 as [Cash Amount],   
			c.Cheque_No as [Cheque No],   
			c.Cheque_Amount as [Cheque Amount]  
	FROM FA_OPR_MR a  
	INNER JOIN EC_OPR_VTRANS_GC b ON a.GC_ID = b.GC_ID  
	LEFT OUTER JOIN FA_Opr_MR_Bank_Details c ON a.MR_ID = c.MR_ID  
	WHERE a.Is_Cancelled=0 and a.MR_Type_ID = 1 and a.Cheque_Amount <> 0  
	and a.MR_Branch_ID = (case @Branch_ID when 0 then a.MR_Branch_ID else @Branch_ID End)  
	and (a.MR_Date between @From_Date and @To_Date)  
	--and a.MR_No_For_Print = 0000005  
	  
	Order BY a.MR_Date, a.MR_No_For_Print, [Cash Amount] desc, [Cheque Amount] desc;

WITH BookingWise AS
( 
	Select	ROW_NUMBER() OVER(ORDER BY MR_Date) AS 'Sr No.',
			dbo.DateOnlyDisplay(MR_Date) as [MR Date], 
			gc_caption_No as [gc_caption No], 
			MR_No as [MR No], 
			Cash_Amount as [Cash Amount], 
			Cheque_No as [Cheque No], 
			Cheque_Amount as [Cheque Amount]
	from @Temp 
)   
    
SELECT * into #Bkg FROM BookingWise

select * From #Bkg
 WHERE 
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)
or
(@PageSize = 0)

select	ISNULL(Sum([Cash Amount]),0) as [Cash Amount], 
		ISNULL(Sum([Cheque Amount]),0) as [Cheque Amount]

from #Bkg

select count(*) From #Bkg

END  





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE proc [dbo].[EC_Opr_TrackNTrace_General_Details]
@Year_Code int,
@GC_Id int
as
set nocount on;
begin

declare @Is_Division_Req bit,@GC_Caption varchar(100),
		@ReguClient_Caption varchar(50),@Client_Code varchar(50)

select @Is_Division_Req = Is_Activate_Divisions ,@GC_Caption = GC_Caption,
@ReguClient_Caption = Regular_Client_Caption
from EC_Master_Company_Parameters

select @Client_Code = Client_Code
from EC_Master_Company

select distinct gc.GC_ID as 'GC_ID',
(case @Is_Division_Req 
when 1 then GC_No_For_Print + ' <i>('+ Division.Division_Name +')</i>'
else GC_No_For_Print end) as 'GC No',
GC_No_For_Print as 'GC_No_For_View',
dbo.dateonlydisplay(gc_Date) as 'GC Date',
Total_Articles as 'Actual Articles',
from_branch.branch_name as 'Booking Branch',to_branch.branch_name as 'Delivery Branch',
Total_Actual_Weight as 'Actual Weight',
from_location.Service_Location_Name as 'From Location',
upper(to_location.Service_Location_Name) as 'To Location',
book_type.Booking_Type as 'Booking Type',del_type.Delivery_Type as 'Delivery Type',
book_mode.Booking_Mode as 'Booking Mode',Payment_Type as 'Payment Type',
case when gc.Is_Cheque = 1 then 'Yes' else 'No' end as 'Is_ChequeText', 
case when gc.Acknowledge = 1 then 'Yes' else 'No' end as 'Is POD',
case when gc.IS_DACC = 1 then 'Yes' else 'No' end as 'Is DACC', 
Cheque_No as 'Cheque No',gc.Bank_Name as 'Bank Name',GC_Remarks as 'GC Remarks',
gc.Cash_Amount as 'Cash Amount',GC.Cheque_Amount as 'Cheque Amount',
GC.Consignor_Name as 'Consignor Name',GC.Consignee_Name as 'Consignee Name',
gc.Freight_Amt as 'Freight Amt',gc.Local_Charges as 'Local Charges',gc.FOV,
gc.Total_Invoice_Value as 'Invoice Value',RiskType.Risk_Type as 'Risk Type',
gc.Hamali_Charges as 'Hamali Charges',gc.Bilti_charges as 'Bilti charges',
case @Client_Code when lower('excel') then 'Statistic Charges' 
else 'Bilty Charges' end as 'BiltiChargesText',
Charged_Weight as 'Charged Weight',GC.Total_GC_Amount as 'Total GC Amount',
gc.DD_Charges as 'DD Charges',gc.Other_Charges as 'Other Charges',
TP_Charges as 'TP Charges',consign_type.Consignment_Type as 'Consignment Type',
gc.Sub_Total as 'Sub Total',gc.Tax_Abate as 'Tax Abate',gc.Amt_Taxable as 'Amt Taxable',
gc.Advance_Amount as 'Advance Amount',ReBook_Charges as 'ReBook Charges',
gc.Service_Tax_Amount as 'Service Tax Amount',
Private_Mark as 'Private Mark',
case when gc.Tax_Payable_By = 3 then  'Red'  else 'Black' end as STA_Color,
case gc.Tax_Payable_By  when 1 then 'Consignor'
						when 2 then 'Consignee'
						when 3 then 'Transporter' 
						else '' end as 'Tax Payable By',
GC.Consignee_Tel_No + '/' + GC.Consignee_Mobile_No AS 'Consignee Tel No',
GC.Consignor_Tel_No+ '/'+ GC.Consignor_Mobile_No as 'Consignor Tel No',

case when gc.Is_ReBooked = 1 then 'Yes' else 'No' end as 'Is ReBooked',
case when gc.Is_Attached = 1 then 'Yes' else 'No' end as 'Is Attached',
case when gc.Is_Billed = 1 then 'Yes' else 'No' end as 'Is Billed',
case when gc.Is_ODA = 1 then 'Yes' else 'No' end as 'Is ODA',
case when gc.Is_Octroi_Applicable = 1 then 'Yes' else 'No' end as 'Is Octroi Applicable',
case when gc.Is_Octroi_Updated = 1 then 'Yes' else 'No' end as 'Is Octroi Updated',
case when gc.Is_Multiple_Billing = 1 then 'Yes' else 'No' end as 'Is Multiple Billing',
case when gc.Contract_ID > 0 then 'Yes' else 'No' end as 'Is Contractual',
'Is '+ @ReguClient_Caption as 'Consignor_Is_Regular_Text',
'Is '+ @ReguClient_Caption as 'Consignee_Is_Regular_Text',
case when gc.Is_Consignor_Regular_Client = 1 then 'Yes' else 'No' end as 'Consignor Is Regular',
case when gc.Is_Consignee_Regular_Client = 1 then 'Yes' else 'No' end as 'Consignee Is Regular',
case when gc.Booking_MR_ID > 0 then 'Yes' else 'No' end as 'Is Booking MR',
case when gc.Delivery_MR_ID > 0 then 'Yes' else 'No' end as 'Is Delivery MR',
case when gc.Credit_Memo_Freight_ID = 0 and gc.Credit_Memo_Octroi_ID = 0 then 'No' else 'Yes' end as 'Is Credit Memo',

user_name as 'created by',gc.updated_by as 'GC_Emp_id',
isnull(users.Employee_id,0) as GC_Emp_id,GC.Updated_On as 'Updated On',
GC.Is_Opening_GC,'<b>'+ Octroi_Update_No_For_Print +'</b>' as 'Octroi No',
dbo.dateonlydisplay(Octroi_Update_Date) as 'Octroi Date',

case	when GC.Is_Cancelled = 1 and GC.Is_Opening_GC = 0 then 'Cancelled ' + @GC_Caption
		when GC.Is_Cancelled = 0 and GC.Is_Opening_GC = 1 then 'Opening ' + @GC_Caption
		when GC.Is_Cancelled = 0 and GC.Is_Agency_Booking = 1 then 'Agency ' + @GC_Caption
		when GC.Is_Cancelled = 1 and GC.Is_Opening_GC = 1 then 'Cancelled Opening ' + @GC_Caption
		when GC.Is_Cancelled = 1 and GC.Is_Agency_Booking = 1 then 'Cancelled Agency ' + @GC_Caption
		when GC.Is_Cancelled = 0 and GC.Is_Opening_GC = 0 then ''
end as 'CancelledText'

from ec_opr_vtrans_gc gc
inner join Ec_master_branch from_branch
on gc.From_Branch_ID = from_branch.branch_id
inner join Ec_master_branch to_branch
on gc.Delivery_Branch_Id = to_branch.branch_id
inner join Ec_master_service_location from_location
on gc.From_Location_ID = from_location.Service_Location_ID
inner join Ec_master_service_location to_location
on gc.To_Location_ID = to_location.Service_Location_ID
inner join EC_master_booking_type book_type
on gc.Booking_Type_Id = book_type.Booking_Type_Id
inner join EC_master_delivery_type del_type
on gc.Delivery_Type_Id = del_type.Delivery_Type_Id
inner join EC_master_booking_Mode book_mode
on gc.Booking_Mode_Id = book_mode.Booking_Mode_Id
inner join EC_master_payment_type pay_type
on gc.Payment_Type_Id = pay_type.Payment_Type_Id
inner join ec_master_consignment_type consign_type
on gc.Consignment_Type_Id = consign_type.Consignment_Type_Id
inner join EC_Master_GC_Risk_Type RiskType
on gc.Risk_Type_ID = RiskType.Risk_Type_ID
inner join ec_master_division division
on gc.division_Id = division.division_Id

left outer join com_adm_user users 
on users.user_id = GC.updated_by 
left outer join EC_Opr_Octroi_Update_Details OctDet 
on GC.GC_Id = OctDet.GC_Id 
left outer join EC_Opr_Octori_Update Octroi 
on OctDet.Octroi_Update_Id = Octroi.Octroi_Update_Id 
and Octroi.Is_Cancelled = 0
where	gc.gc_id =  @GC_Id

--		and gc.Year_Code = case GC.Is_Opening_Gc when 1 then 0 else @Year_Code end


------ Booking MR Details-------------

select MR.MR_Id,MR.MR_No_For_Print as 'MR No',dbo.dateonlydisplay(MR_Date) as 'MR Date',
isnull(Total_MR_Amount,0) as 'MR Amount',mr_branch.Branch_Name as 'MR Branch',
User_Name as 'MR Updated By',MR.Updated_By as 'MR_Updated_By_ID'
from dbo.FA_Opr_MR MR
inner join Ec_master_branch mr_branch
on mr.MR_Branch_ID = mr_branch.branch_ID
inner join Com_Adm_User user1
on mr.Updated_By = user1.User_ID

where	gc_id = @GC_Id
		and MR.Year_Code=@Year_Code
		and mr_type_id =1 --// 1 = booking MR
		and Is_Cancelled = 0

------ Commodity Details-------------

select distinct Commodity_Name as 'Commodity',Item_Name as 'Item',
Packing_Type as 'Packing',Articles as 'Articles',
Weight as 'Weight',Width as 'Width',Length as 'Length',Height as 'Height'

from dbo.EC_Opr_VTrans_GC_Commodity_Details Comm_Det
inner join EC_Master_Commodity Commo
on Comm_Det.Commodity_ID = Commo.Commodity_ID
inner join EC_Master_Item Item
on Comm_Det.Item_ID = Item.Item_ID
inner join EC_Master_Packing Packing
on Comm_Det.Packing_Id = Packing.Packing_ID
inner join EC_Opr_Vtrans_Gc GC
on Comm_Det.GC_ID = GC.GC_ID

where gc.gc_id = @GC_Id
--	  and gc.Year_Code = case GC.Is_Opening_Gc when 1 then 0 else @Year_Code end


------ Billing Party Details-------------

select distinct 
isnull(OctroiBill.Bill_No_For_Print,'') as Octroi_Bill_No,
isnull(Bill_Octroi_ID,0) as Bill_Octroi_ID,

isnull(FreightBill.Bill_No_For_Print,'') as Freight_Bill_No,
isnull(Bill_Freight_ID,0) as Bill_Freight_ID,
Bill_Ratio,
Billing_Client.Client_Name,Hierarchy.Hierarchy_Name as 'Hierarchy_Name',
Case GC_Billing_Details.Billing_Hierarchy 
			When 'AO' then Area.Area_Name
			When 'BO' then Billing_Branch.Branch_Name 
		    When 'RO' then Region.Region_Name
			When 'HO' then 'HEAD OFFICE'
		  End as Billing_Location

from EC_Opr_Vtrans_GC_Billing_Details GC_Billing_Details
	left join EC_Master_Client_VTrans Billing_Client on  
	GC_Billing_Details.Billing_Client_ID = Billing_Client.Client_ID  
	Left Join Ec_Master_Hierarchy Hierarchy      
	On Hierarchy.Hierarchy_Code=GC_Billing_Details.Billing_Hierarchy

	left join EC_Master_Branch Billing_Branch on  
	GC_Billing_Details.Billing_Branch_Id = Billing_Branch.Branch_Id 
	left join EC_Master_Area Area on  
	GC_Billing_Details.Billing_Branch_Id = Area.Area_Id  
	left join EC_Master_Region Region on  
	GC_Billing_Details.Billing_Branch_Id = Region.Region_Id  
	left join FA_OPR_BILL OctroiBill on  
	GC_Billing_Details.Bill_Octroi_ID = OctroiBill.Bill_Id  
	left join FA_OPR_BILL FreightBill on  
	GC_Billing_Details.Bill_Freight_ID = FreightBill.Bill_Id  

where GC_ID=@GC_ID

end















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE proc [dbo].[EC_Opr_TrackNTrace_LHPO_Details]
@Year_Code int,
@LHPO_Id int
as
set nocount on;
begin

declare @Is_Division_Req bit,@lhpo_Caption varchar(20),@AUS_Caption as varchar(20)

select @Is_Division_Req = Is_Activate_Divisions,
@lhpo_Caption = LHPO_Caption,
@AUS_Caption = AUS_Caption from EC_Master_Company_Parameters

select 
		case @Is_Division_Req 
		when 1 then LHPO_No_For_Print + ' <i>('+ Division.Division_Name +')</i>'
		else LHPO_No_For_Print end as 'LHPO No',
		dbo.dateonlydisplay(LHPO_Date) as 'LHPO Date',
		LHPO_Type as 'LHPO Type',
        upper(lhpobranch.Branch_Name) as 'LHPO Branch',
		upper(fromloc.Service_Location_Name) as 'LHPO From',
		upper(toloc.Service_Location_Name) as 'LHPO To',
		(Vehicle_No + ' ('+ upper(Vehicle_Category) + ')') as 'Vehicle No',
		cast(Vehicle_Capacity as varchar(30))+ ' Kg' as 'Vehicle Capacity',
        Total_No_Of_Memo as 'Total No Of Memo',Total_No_Of_GCs as 'Total No Of GC',
		Total_Articles as 'Total Articles',
		Total_Actual_Weight as 'Total Weight',
        (First_Name +' '+Middle_Name+' '+Last_Name) as 'Loading Supervisior',
		Vehicle_Departure_Time as 'Departure Time',
		driver1.Driver_name as 'Driver1',
		(case lhpo.Driver2_Id when 0 then '' else driver2.Driver_name end) as 'Driver2',
		(case lhpo.Cleaner_ID when 0 then '' else cleaner.Driver_name end) as 'Cleaner',
		(case Broker_ID when 0 then '' else vendor.Vendor_Name end) as 'Vendor',
		Truck_Hire_Charge,Other_Charges,Loading_Charges,TDS_Percent,TDS_Amount,
		Total_Truck_Hire_Payable,Total_Advance_To_Be_Paid,Balance_Payble_Amount,
		User_Name as 'LHPO Updated By',lhpo.Updated_By as 'LHPO_UpdatedBy_Id',
		case lhpo.Is_Cancelled when 1 then 'Cancelled '+ @lhpo_Caption  else '' end as 'CancelledText'

from	EC_Opr_Vtrans_LHPO lhpo 
		inner join ec_master_LHPO_Type Ltype
		on lhpo.LHPO_Type_ID = Ltype.LHPO_Type_ID --and LHPO.lhpo_type_id =1
		inner join ec_master_branch lhpobranch
		on lhpo.LHPO_Branch_ID = lhpobranch.Branch_Id
		inner join ef_master_vehicle_category vcategory
		on lhpo.Vehicle_Category_ID = vcategory.Vehicle_Category_ID
		inner join ef_master_vehicle vehicle
		on lhpo.Vehicle_ID = vehicle.Vehicle_ID
		inner join ec_master_service_location fromloc
		on lhpo.From_Location_ID = fromloc.Service_Location_ID
		inner join ec_master_service_location toloc
		on lhpo.To_Location_ID = toloc.Service_Location_ID
		inner join ec_master_employee employee
		on lhpo.Loading_Supervisor_ID = employee.emp_ID
		inner join ef_master_driver driver1
		on lhpo.Driver1_Id = driver1.driver_ID
		left outer join ef_master_driver driver2
		on lhpo.Driver2_Id = driver2.driver_ID
		left outer join ef_master_driver cleaner
		on lhpo.Cleaner_ID = cleaner.driver_ID
		left outer join Ef_master_vendor vendor
		on lhpo.Broker_ID = vendor.Vendor_ID
		inner join Com_Adm_User user1
		on lhpo.Updated_By = user1.User_ID
		inner join ec_master_division division
		on lhpo.division_Id = division.division_Id

where	main_LHPO_Id = @LHPO_Id
		and LHPO.Year_Code=@Year_Code
		and LHPO.lhpo_type_id =1

select distinct lhpo_memo_details.Memo_ID,Memo_No_For_Print as 'Memo No',memo.Total_Loaded_Articles as 'Loaded Articles',
memo.Total_Loaded_Weight as 'Loaded Weight',memo.Memo_Type_Id as 'Memo Type Id',
memotype.Memo_Type as 'Memo Type',isnull(DDC.DDC_Type_ID,0) as 'DDC Type ID',
case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then 0
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then memo_details.Actual_Unloading_Sheet_ID
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then memo_details.DDC_ID
end as 'AUS_DDC_Id',
case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then Actual_Unloading_Sheet_No_For_Print
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDC_No_For_Print
end as 'AUS/DDC No',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then AUS_Branch.Branch_Name
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDC_Branch.Branch_Name
end as 'Unloaded/Deliverd At',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then dbo.dateonlydisplay(Actual_Unloading_Sheet_Date)
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then dbo.dateonlydisplay(DDC_Date)
end as 'AUS/DDC Date',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then AUS.Total_Received_Articles
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDC.Total_DDC_Articles
end as 'Received/Deliverd Articles',@AUS_Caption as 'AUSCaption',
User_Name as 'Memo Updated By',memo.Updated_By as 'memo_UpdatedBy_id'

from ec_opr_vtrans_lhpo lhpo
inner join ec_opr_vtrans_lhpo_memo_details lhpo_memo_details
on lhpo.lhpo_id = lhpo_memo_details.lhpo_id
inner join ec_opr_vtrans_memo memo
on lhpo_memo_details.memo_id = memo.memo_id
inner join ec_opr_vtrans_memo_details memo_details
on memo.memo_id = memo_details.memo_id
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet AUS
on memo_details.Actual_Unloading_Sheet_ID = AUS.Actual_Unloading_Sheet_ID
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUSD
on AUS.Actual_Unloading_Sheet_ID = AUSD.Actual_Unloading_Sheet_ID
and memo_details.gc_id = AUSD.gc_id
left outer join EC_Opr_VTrans_Door_Delivery_Confirmation DDC
on memo_details.DDC_ID = DDC.DDC_ID
left outer join EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDCD
on DDC.DDC_ID = DDCD.DDC_ID
left outer join Ec_master_branch as AUS_Branch
on AUS.Un_Loading_Branch_ID = AUS_Branch.branch_id
left outer join Ec_master_branch as DDC_Branch
on DDC.DDC_Branch_ID = DDC_Branch.branch_id
inner join Ec_opr_vtrans_gc gc
on memo_details.gc_id = gc.gc_id
left outer join Ec_master_memo_type memotype
on memo.memo_type_id = memotype.memo_type_id
inner join Com_Adm_User user1
on memo.Updated_By = user1.User_ID

where	lhpo.lhpo_id = @LHPO_Id
		and LHPO.Year_Code=@Year_Code
--order by memo.Memo_id

end





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
    
-- =============================================      
-- Author:  <Harshal Sapre>    
-- Create date: <2009-07-01>    
-- Description: <Description>    
-- [dbo].[EC_RPT_DELIVERY_BRANCHWISE_DAILY_COLLECTION_NANDWANA] 0, '2009-04-01', '2009-04-30',0,100    
-- =============================================    
      
CREATE PROCEDURE [dbo].[EC_RPT_DELIVERY_BRANCHWISE_DAILY_COLLECTION_NANDWANA]      
@Branch_ID int,      
@From_Date datetime,      
@To_Date datetime,    
@PageIndex int,     
@PageSize int      
      
AS      
BEGIN      
      
SET NOCOUNT ON;      
    
----------------------------------------Delivery--------------------------------------------      
DECLARE @Temp AS TABLE    
(    
 MR_Date datetime, gc_Caption_No varchar(50), From_Branch varchar(100), Payment_Type varchar(50),     
 Ref_No varchar(50), Cash_Amount int, Cheque_No varchar(50), Cheque_Amount int    
)    
INSERT INTO @Temp     
    
 Select --a.MR_ID,       
   a.MR_Date as [MR Date],      
   b.GC_No_For_Print as [gc_Caption No],      
   From_Branch.Branch_Name as [From Branch],      
   PMT_TYPE.Payment_Type as [Payment Type],      
   a.MR_No_For_Print as [Ref No],      
   a.Cash_Amount as [Cash Amount],      
   '' as [Cheque No],      
   0 as [Cheque Amount]      
 from FA_OPR_MR a      
 INNER JOIN EC_OPR_VTRANS_GC b ON a.GC_ID = b.GC_ID      
 INNER JOIN EC_MASTER_PAYMENT_TYPE PMT_TYPE ON b.Payment_Type_ID = PMT_TYPE.Payment_Type_ID      
 LEFT OUTER JOIN EC_MASTER_BRANCH From_Branch ON b.From_Branch_ID = From_Branch.Branch_ID      
 Where a.Is_Cancelled=0 and a.MR_Type_ID = 2 and a.Cash_Amount <> 0 --and a.MR_No_For_Print = 0000005      
 and a.MR_Branch_ID = (case @Branch_ID when 0 then a.MR_Branch_ID else @Branch_ID End)    
 and (a.MR_Date between @From_Date and @To_Date)    

 Union      
    
 Select --a.MR_ID,       
   a.MR_Date as [MR Date],       
   b.GC_No_For_Print as [gc_Caption No],       
   From_Branch.Branch_Name as [From Branch],      
   PMT_TYPE.Payment_Type as [Payment Type],      
   a.MR_No_For_Print as [MR No],      
   0 as [Cash Amount],       
   c.Cheque_No as [Cheque No],       
   c.Cheque_Amount as [Cheque Amount]      
 from FA_OPR_MR a      
 INNER JOIN EC_OPR_VTRANS_GC b ON a.GC_ID = b.GC_ID      
 LEFT OUTER JOIN FA_Opr_MR_Bank_Details c ON a.MR_ID = c.MR_ID      
 INNER JOIN EC_MASTER_PAYMENT_TYPE PMT_TYPE ON b.Payment_Type_ID = PMT_TYPE.Payment_Type_ID      
 LEFT OUTER JOIN EC_MASTER_BRANCH From_Branch ON b.From_Branch_ID = From_Branch.Branch_ID      
    
 Where a.Is_Cancelled=0 and a.MR_Type_ID = 2 and a.Cheque_Amount <> 0 --and a.MR_No_For_Print = 0000005      
 and a.MR_Branch_ID = (case @Branch_ID when 0 then a.MR_Branch_ID else @Branch_ID End)    
 and (a.MR_Date between @From_Date and @To_Date)    

 Order BY a.MR_Date, a.MR_No_For_Print, [Cash Amount] desc, [Cheque Amount] desc;    
    
WITH DeliveryWise AS    
(     
 Select ROW_NUMBER() OVER(ORDER BY MR_Date) AS 'Sr No.',    
   dbo.DateOnlyDisplay(MR_Date) as [MR Date],     
   gc_Caption_No as [gc_caption No],    
   From_Branch as [From Branch],      
   Payment_Type as [Payment Type],    
   Ref_No as [Ref No],     
   Cash_Amount as [Cash Amount],     
   Cheque_No as [Cheque No],     
   Cheque_Amount as [Cheque Amount]    
 from @Temp     
)       
        
SELECT * into #Dly FROM DeliveryWise    
    
select * From #Dly    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
select ISNULL(Sum([Cash Amount]),0) as [Cash Amount],     
	   ISNULL(Sum([Cheque Amount]),0) as [Cheque Amount]    
from #Dly    
    
select count(*) From #Dly    
    
END   


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
  
  
  
-- Author: <Shiv kumar mishra>  
-- Create date: Nov  10 2008  2:13PM  
-- Description: <Door Delivery Confirmation(DDC) Readvalues>  
-- =============================================  
CREATE proc [dbo].[EC_Opr_DDC_ReadValues]  
(  
 @DDC_Id int,  
 @PDS_ID int,  
 @Division_ID int  
)  
as  
BEGIN  
  
if @PDS_ID < 0 set @PDS_ID = 0  
  
declare @CompParameterId bit  
set @CompParameterId = 0  
  
select @CompParameterId = Is_Dly_Details_Req   
from dbo.EC_Master_Company_Parameters  
  
IF(@DDC_Id <= 0)  ---For ADD  
 begin  
 select distinct   
   'false' as Att,  
   Articles.GC_ID,  
   Articles.Article_Id,  
   GC.GC_No_For_Print,  
   dbo.DateOnlyDisplay(Committed_Del_Date)as Committed_Del_Date,  
   dbo.DateOnlyDisplay(PDS.PDS_Date) as PDS_Date,  
   Branch.Branch_Name as Booking_Branch_Name,  
            SerLoc.Service_Location_Name as Delivery_Location_Name,  
   PDSDet.Balance_Articles,  
   PDSDet.Balance_Actual_Wt,  
   PDSDet.Delivery_Articles,  
   PDSDet.Delivery_Actual_Wt,  
   0 as UnDelivered_Reason_Id,  
   '' as Delivery_Taken_By, 
   '' as Contact_No, 
    0 as Delivery_Mode_ID,
   '' as Delivery_Mode_Description, 
   getdate() as Delivery_Date,  
   convert(varchar(5),getdate(),108) as Delivery_Time,  
   Articles.Article_ID as Previous_Article_ID,  
   Articles.Status_ID as Previous_Status_ID,  
   Articles.Document_ID as Previous_Document_ID,  
   Articles.Document_No_For_Print as Previous_Document_No_For_Print,  
   Articles.Document_Date as Previous_Document_Date,  
   '300' AS Actual_Status_ID,  
   'UnDelivered' AS Actual_Status,   
   CASE WHEN GC.Committed_Del_Date >= PDS.PDS_Date THEN '200' ELSE '250' END AS Status_ID,    
   CASE WHEN GC.Committed_Del_Date >= PDS.PDS_Date THEN 'Delivered' ELSE 'Late' END AS Status,  
  
   PDSDet.Previous_Article_ID as AUS_Article_ID,  
   PDSDet.Previous_Document_ID as AUS_ID,  
   PDSDet.Previous_Document_No_For_Print as AUS_No_For_Print,  
   convert(varchar(10),AUS_Date,103) as AUS_Date,AUS_Time,AUS_Date as AUS_Date1,  
   0 as is_updated,  
   0 as Cne_Copy_Status_ID,  
   0 as Delivery_Against_ID,  
   0 as Delivery_To_ID,  
   @CompParameterId as IsDelDetailsReq  
  
 From EC_Opr_VTrans_Pre_Delivery_Sheet_Details PDSDet  
   inner join EC_Opr_Vtrans_GC_Articles Articles  
   on PDSDet.Article_Id = Articles.Article_Id  
   inner join EC_Opr_Vtrans_GC GC  
   on Articles.GC_ID=GC.GC_ID  
   inner join EC_Master_Branch Branch  
   on GC.From_Branch_ID = Branch.Branch_Id  
            inner join EC_Opr_VTrans_Pre_Delivery_Sheet PDS   
   on PDS.PDS_ID = PDSDet.PDS_Id  
   inner join EC_Master_Service_Location SerLoc   
   on GC.To_Location_ID = SerLoc.Service_Location_ID  
 where PDS.PDS_ID = @PDS_ID  
   and PDS.Division_ID = @Division_ID  
 end  
  
ELSE      ---For EDIT  
 begin  
  
  select distinct   
    case when Delivery_Status_ID = 300 then 'false' else 'true' end as Att,  
    Article.GC_ID,  
    dbo.DateOnlyDisplay(Committed_Del_Date)as Committed_Del_Date,  
                dbo.DateOnlyDisplay(PDS.PDS_Date) as PDS_Date,  
    Article.Article_Id,  
    GC_No_For_Print,  
    Branch.Branch_Name as Booking_Branch_Name,  
                SerLoc.Service_Location_Name as Delivery_Location_Name,  
    DDCDet.Delivered_Articles as Delivery_Articles,  
    DDCDet.Delivered_Actual_Wt as Delivery_Actual_Wt,  
    DDCDet.Balance_Articles,  
    DDCDet.Balance_Actual_Wt,  
    Reason_Id as UnDelivered_Reason_Id,  
    DDCDet.Delivery_Taken_By,  
    DDCDet.Delivery_Mode_ID,
    DDCDet.Delivery_Mode_Description, 
    Delivery_Date, 
    DDCDet.Contact_No,     
    DDCDet.Delivery_Time,  
    DDCDet.Previous_Article_ID,  
    DDCDet.Previous_Status_ID,  
    DDCDet.Previous_Document_ID,  
    DDCDet.Previous_Document_No_For_Print,  
    DDCDet.Previous_Document_Date,  
    DDCDet.Delivery_Status_ID AS Actual_Status_ID,  
    CASE DDCDet.Delivery_Status_ID   
    WHEN 300 THEN 'UnDelivered'   
    WHEN 200 THEN 'Delivered'   
    ELSE 'Late' END AS Actual_Status,  
  
     CASE WHEN GC.Committed_Del_Date >= PDS.PDS_Date THEN '200' ELSE '250' END AS Status_ID,    
     CASE WHEN GC.Committed_Del_Date >= PDS.PDS_Date THEN 'Delivered' ELSE 'Late' END AS Status,  
  
    AUS_Article_ID,  
    AUS_ID,  
    AUS_No_For_Print,  
    convert(varchar(10),AUS_Date,103) as AUS_Date,AUS_Time,AUS_Date as AUS_Date1,  
    1 as is_updated,  
    Cne_Copy_Status_ID,  
       Delivery_Against_ID,  
       Delivery_To_ID,  
    @CompParameterId as IsDelDetailsReq  
  
  From EC_Opr_Vtrans_GC_Articles Article   
    inner join EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDCDet  
    on Article.Article_Id = DDCDet.Article_Id  
                inner join EC_Opr_VTrans_Door_Delivery_Confirmation DDC   
    on DDC.DDC_ID=DDCDet.DDC_ID  
    inner join EC_Opr_Vtrans_GC GC   
    on Article.GC_ID=GC.GC_ID  
    inner join EC_Master_Branch Branch   
    on GC.From_Branch_ID = Branch.Branch_Id  
       inner join EC_Master_Service_Location SerLoc   
       on GC.To_Location_ID = SerLoc.Service_Location_ID  
    inner join EC_Opr_VTrans_Pre_Delivery_Sheet PDS  
    on DDC.PDS_ID = PDS.PDS_ID  
  
  where DDCDet.DDC_ID = @DDC_Id  
    and PDS.PDS_ID = @PDS_ID  
  
  -------------Master Details --------------------  
  
  select DDC_No_For_Print,  
    DDC_Date,  
    Remarks,  
    Total_No_Of_GC,  
    Total_DDC_Articles,  
    Total_DDC_Actual_Wt     
  From EC_Opr_VTrans_Door_Delivery_Confirmation  
  where DDC_ID = @DDC_Id  
    and Is_Cancelled = 0  
  
 End  
END  
  
  
  
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE proc [dbo].[EC_Opr_TrackNTrace_Memo_Details]
@Year_Code int,
@Memo_Id int
as
set nocount on;
begin

declare @Is_Division_Req bit,@AUS_Caption as varchar(20)

select @Is_Division_Req = Is_Activate_Divisions,@AUS_Caption = AUS_Caption
from EC_Master_Company_Parameters


select	(case @Is_Division_Req 
		when 1 then Memo_No_For_Print + ' <i>('+ Division.Division_Name +')</i>'
		else Memo_No_For_Print end) as 'Memo No',
		dbo.dateonlydisplay(Memo_Date) as 'Memo Date',
		Memo_Type as 'Memo Type',
        frombranch.Branch_Name as 'Memo From',
		(case To_Branch_Id when 0 then To_Name else Tobranch.Branch_Name end) as 'Memo To',
		(Vehicle_No + ' ('+ upper(Vehicle_Category) + ')') as 'Vehicle No',
        Total_No_Of_GC as 'Total GC',Total_Loaded_Articles as 'Tot Load Art',
		Total_Loaded_Weight as 'Tot Load Wt',
        dbo.dateonlydisplay(Schedule_Arrival_Delivery_Date) as 'Arrival Date',
		Schedule_Arrival_Delivery_Time as 'Arrival Time',
		case memo.LHPO_ID when 0 then 0 else lhpo.LHPO_ID end as 'LHPO_ID',
		case memo.LHPO_ID when 0 then '' else lhpo.LHPO_No_For_Print end as 'LHPO No',
		case memo.LHPO_ID when 0 then '' else dbo.dateonlydisplay(lhpo.LHPO_Date)end as 'LHPO Date',
		User_Name as 'Memo Updated By',memo.Updated_By as 'Memo_UpdatedBy_Id',
		case memo.Is_Cancelled when 1 then 'Cancelled Manifest' else '' end as 'CancelledText'

from	ec_opr_vtrans_Memo memo 
		inner join ec_master_Memo_Type mtype
		on memo.Memo_Type_Id = mtype.Memo_Type_Id
		left outer join ec_master_branch Tobranch
		on memo.To_Branch_Id = Tobranch.Branch_Id
		inner join ec_master_branch frombranch
		on memo.Memo_Branch_Id = frombranch.Branch_Id
		inner join ef_master_vehicle_category vcategory
		on memo.Vehicle_Category_ID = vcategory.Vehicle_Category_ID
		inner join ef_master_vehicle vehicle
		on memo.Vehicle_ID = vehicle.Vehicle_ID
		left outer join ec_opr_vtrans_LHPO lhpo
		on memo.LHPO_ID = lhpo.LHPO_ID
		inner join Com_Adm_User user1
		on memo.Updated_By = user1.User_ID
		inner join ec_master_division division
		on memo.division_Id = division.division_Id

where	Memo_Id = @Memo_Id
		and memo.Year_Code=@Year_Code


select distinct memo_details.GC_Id,GC_No_For_Print as 'GC No',memo_details.Loaded_Articles as 'Loaded Articles',
memo_details.Loaded_Actual_Wt as 'Loaded Weight',memo.Memo_Type_Id as 'Memo Type Id',
isnull(DDC.DDC_Type_ID,0) as 'DDC Type ID',
case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then 0
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then memo_details.Actual_Unloading_Sheet_ID
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then memo_details.DDC_ID
end as 'AUS_DDC_ID',
case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then Actual_Unloading_Sheet_No_For_Print
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDC_No_For_Print
end as 'AUS/DDC No',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then AUS_Branch.Branch_Name
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDC_Branch.Branch_Name
end as 'Unloaded/Deliverd At',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then dbo.dateonlydisplay(Actual_Unloading_Sheet_Date)
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then dbo.dateonlydisplay(DDC_Date)
end as 'AUS/DDC Date',

case
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID = 0 then ''
when memo_details.Actual_Unloading_Sheet_ID > 0 and memo_details.DDC_ID = 0 then AUSD.Received_Articles
when memo_details.Actual_Unloading_Sheet_ID = 0 and memo_details.DDC_ID > 0 then DDCD.Delivered_Articles
end as 'Received/Deliverd Articles',@AUS_Caption as 'AUSCaption',
User_Name as 'GC Updated By',GC.Updated_By as 'GC_UpdatedBy_id'

from ec_opr_vtrans_memo memo
inner join ec_opr_vtrans_memo_details memo_details
on memo.memo_id = memo_details.memo_id
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet AUS
on memo_details.Actual_Unloading_Sheet_ID = AUS.Actual_Unloading_Sheet_ID
left outer join EC_Opr_VTrans_Actual_Unloading_Sheet_Details AUSD
on AUS.Actual_Unloading_Sheet_ID = AUSD.Actual_Unloading_Sheet_ID
and memo_details.gc_id = AUSD.gc_id
left outer join EC_Opr_VTrans_Door_Delivery_Confirmation DDC
on memo_details.DDC_ID = DDC.DDC_ID
left outer join EC_Opr_VTrans_Door_Delivery_Confirmation_Details DDCD
on DDC.DDC_ID = DDCD.DDC_ID
left outer join Ec_master_branch as AUS_Branch
on AUS.Un_Loading_Branch_ID = AUS_Branch.branch_id
left outer join Ec_master_branch as DDC_Branch
on DDC.DDC_Branch_ID = DDC_Branch.branch_id
left outer join ec_opr_vtrans_LHPO LHPO
on memo.lhpo_id = LHPO.LHPO_ID
inner join Ec_opr_vtrans_gc gc
on memo_details.gc_id = gc.gc_id
inner join Com_Adm_User user1
on gc.Updated_By = user1.User_ID

where memo.memo_id = @memo_Id
	and memo.Year_Code=@Year_Code

end





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





  
-- =============================================  
-- Author:  <Harshal Sapre>  
-- Create date: <2009-07-01>  
-- Description: <Description>  
-- [dbo].[EC_RPT_EXPENSES_BRANCHWISE_DAILY_COLLECTION_NANDWANA] 0, '2009-04-01', '2009-07-01',0,100
-- =============================================  
  
CREATE PROCEDURE [dbo].[EC_RPT_EXPENSES_BRANCHWISE_DAILY_COLLECTION_NANDWANA]  
@Branch_ID int,  
@From_Date datetime,  
@To_Date datetime,  
@PageIndex int,   
@PageSize int    
  
AS  
BEGIN  
  
SET NOCOUNT ON;  
  
  
----------------------------------------Expenses--------------------------------------------  
DECLARE @Temp AS TABLE  
(  
 Date datetime, Voucher_No varchar(50), Ledger_Name varchar(100), Amount int  
)  
INSERT INTO @Temp   
  
 SELECT  a.Voucher_date as [Date],  
   a.Voucher_no as [Voucher No],  
   b.Ledger_Name as [Ledger Name],  
   a.Total_Debit as [Amount]  
  
 FROM dbo.FA_Opr_Voucher a  
 INNER JOIN dbo.FA_Master_Ledger b ON a.Ledger_Id = b.Ledger_Id  
 WHERE a.Is_Cancelled = 0 and a.Voucher_Type_Id = 8  
 and a.Hierarchy_Code = 'BO'   
 and a.Main_ID = (case @Branch_ID when 0 then a.Main_ID else @Branch_ID end)  
 and (a.Voucher_date between @From_Date and @To_Date)  
  
 Order BY a.Voucher_date, a.Voucher_no;  
  
  
WITH ExpenseWise AS  
(   
 Select ROW_NUMBER() OVER(ORDER BY Date) AS 'Sr No.',  
    dbo.DateOnlyDisplay(Date) as [Date],   
   Voucher_No as [Voucher No],  
   Ledger_Name as [Ledger Name],    
   Amount as [Amount]  
 from @Temp   
)     
      
SELECT * into #Exp FROM ExpenseWise  
  
select * From #Exp  
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
  
select  ISNULL(sum(Amount),0) as [Amount]  
from #Exp  
  
select count(*) From #Exp  
  
END    






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









-- =============================================              
-- Author:  <Krutarth>              
-- Create date: '2009-01-21'            
-- Description: <Common Procedure For Direct Report Printing>              
-- exec [dbo].[EC_RPT_Direct_Printing_AUS_Excel] 115,74  
-- =============================================              

CREATE Proc [dbo].[EC_RPT_Direct_Printing_AUS_Excel]      

@Menu_Item_ID int,            
@Document_ID int            

as  
BEGIN    

Declare @Recd_Pkgs int
Select @Recd_Pkgs = Sum(b.Received_Articles)
FROM  dbo.EC_Opr_VTrans_Actual_Unloading_Sheet a    
INNER JOIN dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details b
ON b.Actual_Unloading_Sheet_Id = a.Actual_Unloading_Sheet_Id   
Where a.Actual_Unloading_Sheet_Id = @Document_ID   
and a.Is_Cancelled = 0

Declare @Pkgs int
Declare @Total_GCs int
Select @Pkgs = Sum(c.Total_Articles), @Total_GCs = count(distinct c.GC_ID)
FROM  dbo.EC_Opr_VTrans_Actual_Unloading_Sheet a    
INNER JOIN dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details b
ON b.Actual_Unloading_Sheet_Id = a.Actual_Unloading_Sheet_Id
INNER JOIN dbo.EC_Opr_VTrans_GC c
ON c.GC_Id  = b.GC_Id
and c.Is_Cancelled = 0
Where a.Actual_Unloading_Sheet_Id = @Document_ID   
and a.Is_Cancelled = 0

SELECT  distinct
Case When @Menu_Item_ID = 115 Then 'GAS (OTHER AGENCY)' Else 'GOODS ARRIVAL SUMMARY' End as [Heading],  
  
a.Actual_Unloading_Sheet_ID,  

Unloading_Branch.Address_2  + ' ' + Unloading_City.City_Name + ' - ' + Unloading_Branch.Pin_Code   
+ '  ' + 'Phone : '+ '(' + Unloading_Branch.Std_Code + ')'+ Unloading_Branch.Phone_1 as [Branch Office],      

---------------------------------------------------------------  
Case When @Menu_Item_ID = 115 Then Arrived_From_Branch.Branch_Name Else LHPO_Branch.Branch_Name End as [Goods Received from Ms],  
@Total_GCs as [Total GC Note],  
Case When @Menu_Item_ID = 115 Then a.LHPO_No_For_Print  Else c.LHPO_No_For_Print End as [Vide Challan No],  
Case When @Menu_Item_ID = 115 Then a.LHPO_Date  Else c.LHPO_Date End as [Dt],  
@Pkgs as [Pkgs],
@Recd_Pkgs  as [Pkgs Received],  
--d.Total_Articles as [Pkgs],  
--b.Received_Articles as [Pkgs Received],  
Case When @Menu_Item_ID = 115 Then a.Vehicle_No  Else e.Vehicle_No End  as [Lorry No],  
Driver_1.Driver_Name as [Driver Name],  
a.Actual_Unloading_Sheet_No_For_Print as [AUS No],      
a.Actual_Unloading_Sheet_Date as [AUS Date],  

---------------------------------------------------------------  
ISNULL(a.Total_To_Pay_Collection,0) as [Goods Delivery],  
ISNULL(a.UpCountry_Receivable,0) as [Upcountry Receivable],  
(ISNULL(a.Total_To_Pay_Collection,0) + ISNULL(a.UpCountry_Receivable,0)) as [Total A],  

---------------------------------------------------------------  
0 as [Balance],  
'' as [In Account Of],  

---------------------------------------------------------------  
ISNULL(a.Total_Delivery_Commision,0) as [Service Charge],  
ISNULL(a.UpCountry_Crossing_Cost,0) as [Upcountry Crossing Cost],  
ISNULL(a.Lorry_Hire,0) as [Truck Hire Freight],  
Case When @Menu_Item_ID = 115 Then ISNULL(a.Other_Payable_Charges,0) else ISNULL(a.Other_Receavable_Charges,0) End as [Other Charges],  
(ISNULL(a.Total_Delivery_Commision,0) + ISNULL(a.UpCountry_Crossing_Cost,0)
+ ISNULL(a.Lorry_Hire,0) + 
(Case When @Menu_Item_ID = 115 Then ISNULL(a.Other_Payable_Charges,0) else ISNULL(a.Other_Receavable_Charges,0) End)) as [Total B],  

---------------------------------------------------------------  
a.Remarks,
d.First_Name + ' ' + d.Last_Name as [Created_by]      

FROM  dbo.EC_Opr_VTrans_Actual_Unloading_Sheet a
INNER JOIN dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details b
ON b.Actual_Unloading_Sheet_Id = a.Actual_Unloading_Sheet_Id   

LEFT OUTER JOIN dbo.EC_Opr_VTrans_LHPO c  
ON a.LHPO_Id = c.LHPO_Id

INNER JOIN dbo.COM_Adm_User CreatedUser
ON CreatedUser.User_ID = a.Created_BY  
LEFT OUTER JOIN dbo.EC_Master_Employee d
ON CreatedUser.Employee_Id = d.Emp_ID


LEFT OUTER JOIN EC_Master_Branch Arrived_From_Branch      
on a.Arrived_From_Branch_ID = Arrived_From_Branch.Branch_ID  


LEFT OUTER JOIN EC_Master_Branch LHPO_Branch      
on c.LHPO_Branch_ID = LHPO_Branch.Branch_ID  

LEFT OUTER JOIN EF_Master_Vehicle e
ON e.Vehicle_Id= a.Vehicle_Id 
LEFT OUTER JOIN dbo.EF_Master_Driver Driver_1      
on Driver_1.Driver_ID = c.Driver1_ID  

LEFT OUTER JOIN EC_Master_Branch Unloading_Branch      
on a.Un_Loading_Branch_ID = Unloading_Branch.Branch_ID   
LEFT OUTER JOIN EC_Master_City Unloading_City  
on Unloading_City.City_ID = Unloading_Branch.City_ID   
LEFT OUTER JOIN EC_Master_State Unloading_State  
on Unloading_State.State_ID = Unloading_Branch.State_ID   
LEFT OUTER JOIN EC_Master_Country Unloading_Country  
on Unloading_Country.Country_ID = Unloading_Branch.Country_ID  

--LEFT OUTER JOIN dbo.EF_Master_Received_Condition      
--ON dbo.EF_Master_Received_Condition.EF_Master_Received_Condition_ID = dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details.Received_Condition_ID      
--LEFT OUTER JOIN dbo.EC_Master_Employee       
--ON dbo.EC_Opr_VTrans_Actual_Unloading_Sheet.Unloaded_Supervisor_ID = dbo.EC_Master_Employee.Emp_ID                
--INNER JOIN dbo.EC_Opr_VTrans_Memo       
--ON dbo.EC_Opr_VTrans_Memo.Memo_Id = dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details.Memo_ID       


WHERE b.GC_Id<>0                 
and a.Actual_Unloading_Sheet_Id = @Document_ID   
and a.Is_Cancelled=0  

Select  EC_Opr_VTrans_Actual_Unloading_Sheet.Actual_Unloading_Sheet_ID,  
  '' as [Destination],  
  0 as [Pkgs],  
  0 as [Weight],  
  0 as [Rate],  
  0 as [Amount]  

FROM  dbo.EC_Opr_VTrans_Actual_Unloading_Sheet       
INNER JOIN dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details
ON dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details.Actual_Unloading_Sheet_Id = dbo.EC_Opr_VTrans_Actual_Unloading_Sheet.Actual_Unloading_Sheet_Id                
INNER JOIN dbo.EC_Opr_VTrans_GC       
ON dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details.GC_Id = dbo.EC_Opr_VTrans_GC.GC_Id    

--INNER JOIN EF_Master_Vehicle  
--ON EF_Master_Vehicle.Vehicle_Id= EC_Opr_VTrans_Actual_Unloading_Sheet.Vehicle_Id  

WHERE dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details.GC_Id<>0                 
and dbo.EC_Opr_VTrans_Actual_Unloading_Sheet.Actual_Unloading_Sheet_Id = @Document_ID   
and dbo.EC_Opr_VTrans_Actual_Unloading_Sheet.Is_Cancelled=0  

End














GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE proc [dbo].[EC_FA_Transport_Bill_FillValues]
as
set nocount on;

begin
select * from FA_Master_Bill_Type
order by Bill_Type_ID

select * from EC_Master_Credit_Memo_For
order by Credit_Memo_For_ID

end



----272--------------------------------------------------------------------------------






GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [dbo].[EC_FA_Transport_Bill_ReadValues]
@Bill_Id int
as
set nocount on;

BEGIN
	Select	Bill_No_For_Print,Bill_Date,FA_Opr_Bill.Client_Id,
			Client_Name,Bill_Type_ID,Bill_Ref_No,Remarks ,
			Total_GC,Bill_Sub_Total,Bill_Other_Charges_Total,
			Bill_Service_Tax_Amount,Bill_Octroi_Amount,Bill_Total_Amount,
			Less_Amount,transport_bill_type_id,Total_Oct_Form_Charges,Total_Oct_Service_Charges
	From FA_Opr_Bill 
		inner join EC_Master_Client_Vtrans Client
	on	FA_Opr_Bill.Client_Id = Client.Client_Id
	where Bill_Id = @Bill_Id
		  and Is_Cancelled = 0
		  and Voucher_ID = 0
END



----273--------------------------------------------------------------------------------








GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetVoucherBillXML] 
(
  @Ledger_Id int,     
  @TDS_Ledger_Id int,                 
  @Ref_No varchar(100),                  
  @Ref_Type_Id varchar(100),                  
  @Credit_Days int,                  
  @Amount numeric(18, 2),
  @Bill_Date DateTime
)

RETURNS varchar(2000)
AS
BEGIN
Declare @CreatedXML varchar(2000)

if((@Ledger_Id Is Null) OR (@Amount=0))
 set @CreatedXML=''
Else
set @CreatedXML=
'
   <BillByBill>
		<Ledger_Id>'+Cast(IsNull(@Ledger_Id,0) as varchar(20))+'</Ledger_Id>
		<TDS_Ledger_Id>'+Cast(IsNUll(@TDS_Ledger_Id,0) as varchar(20))+'</TDS_Ledger_Id>
		<Ref_No>'+Cast(IsNull(@Ref_No,'') as varchar(200))+'</Ref_No>
		<Ref_Type_Id>'+Cast(IsNull(@Ref_Type_Id,0) as varchar(200))+'</Ref_Type_Id>
		<Credit_Days>'+Cast(IsNull(@Credit_Days,0) as varchar(20))+'</Credit_Days>
		<Amount>'+Cast(IsNull(@Amount,0) as varchar(20))+'</Amount>
		<Bill_Date>'+dbo.DateOnly_M_D_Y(IsNull(@Bill_Date,Getdate()))+'</Bill_Date>
   </BillByBill>
'

RETURN(@CreatedXML)
END
	













GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




  
-- =============================================  
-- Author:  <Harshal Sapre>  
-- Create date: <2009-07-01>  
-- Description: <Description>  
-- [dbo].[EC_RPT_INCOME_BRANCHWISE_DAILY_COLLECTION_NANDWANA] 0, '2009-04-03', '2009-07-03',0,100
-- =============================================  
  
CREATE PROCEDURE [dbo].[EC_RPT_INCOME_BRANCHWISE_DAILY_COLLECTION_NANDWANA]  
@Branch_ID int,  
@From_Date datetime,  
@To_Date datetime,  
@PageIndex int,   
@PageSize int    
  
AS  
BEGIN  
  
SET NOCOUNT ON;  
  
  
----------------------------------------Income--------------------------------------------  
DECLARE @Temp AS TABLE  
(  
 Date datetime, Voucher_No varchar(50), Ledger_Name varchar(100), Amount int  
)  
INSERT INTO @Temp  
 
select  a.Voucher_Date as [Date],
		a.Voucher_No as [Voucher No],
		b.Ledger_Name as [Ledger Name],
        a.Total_Debit as [Amount]

From dbo.FA_Opr_Voucher a
INNER JOIN FA_Master_Ledger b on a.Ledger_id = b.Ledger_id

where	A.voucher_type_id=14 and A.is_cancelled=0

 and a.Hierarchy_Code = 'BO'   
 and a.Main_ID = (case @Branch_ID when 0 then a.Main_ID else @Branch_ID end)  
 and (a.Voucher_date between @From_Date and @To_Date)  
  
 Order BY a.Voucher_date, a.Voucher_no;  
  
  
WITH ExpenseWise AS  
(   
 Select ROW_NUMBER() OVER(ORDER BY Date) AS 'Sr No.',  
    dbo.DateOnlyDisplay(Date) as [Date],   
   Voucher_No as [Voucher No],  
   Ledger_Name as [Ledger Name],    
   Amount as [Amount]  
 from @Temp   
)     
      
SELECT * into #Exp FROM ExpenseWise  
  
select * From #Exp  
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
  
select  ISNULL(sum(Amount),0) as [Amount]  
from #Exp  
  
select count(*) From #Exp  
  
END    





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		<shiv kumar mishra>
-- Create date: Dec 31 2008  6:54PM
-- Description:	<save finance Bill>
-- =============================================

CREATE Proc [dbo].[EC_FA_Transport_Bill_Save]
(
@Year_Code int,
@Division_ID int,
@Hierarchy_Code varchar(2) = 'BO',
@Main_ID int =0,
@Menu_Item_ID int,
@Bill_Type_ID int,
@Bill_ID int,
@Bill_No int,  
@Bill_No_For_Print varchar(20),
@Client_ID int,
@Bill_Date datetime,
@Bill_Ref_No nvarchar(50),
@Remarks varchar(250),
@Created_By int,
@BillDetailsXML xml,
@BillOtherChargeGridXML xml,
@Error_Code int output,
@ERROR_DESC AS VARCHAR(4000) OUTPUT,@Print_Doc_ID int output,@Contact_Person varchar(50),
@Billing_Name varchar(50),
@Billing_Address varchar(1000),
@Contact_No varchar(50),
@Email varchar(50),@Less_Amount numeric(18,2) = 0,@Document_Allocation_ID int = 0,@Trans_Bill_Type_Id int)
As
DECLARE @GCDetails int
DECLARE @OtherChargeDetails int
EXEC sp_xml_preparedocument @GCDetails OUTPUT,@BillDetailsXML   
EXEC sp_xml_preparedocument @OtherChargeDetails OUTPUT,@BillOtherChargeGridXML   

------*********************************************************-----------

declare @GCTempTable table
(
	sr_no int identity,
	gc_id int,
	sub_total numeric(18,2),
	fa_other_charges numeric(18,2),
	gc_other_charges numeric(18,2),
	service_tax_amount numeric(18,2),
	GC_Service_Tax_Amount numeric(18,2),
	oct_amount numeric(18,2),
	Bill_GC_Amt numeric(18,2),
	total_gc_amount numeric(18,2),
	freight_amt numeric(18,2),
	local_charges numeric(18,2),
	hamali_charges numeric(18,2),
	bilti_charges numeric(18,2),
	fov numeric(18,2),
	tp_charges numeric(18,2),
	dd_charges numeric(18,2),
	gc_remarks varchar(50),
	Octroi_Form_Charge numeric(18,2),
	Octroi_Service_Charge numeric(18,2)
)


insert into @GCTempTable
select	GC_ID,Sub_Total,FA_Other_Charges,
		GC_Other_Charges,Service_Tax_Amount,GC_Service_Tax_Amount,
		Oct_Amount,Bill_GC_Amt,Total_GC_Amount,
		Freight_Amt,Local_Charges,Hamali_Charges,
		Bilti_Charges,FOV,TP_Charges,DD_Charges,
		GC_Remarks,Octroi_Form_Charges,Octroi_Service_Charges
from openxml (@GCDetails,'/newdataset/billgriddetails',2)
		with(gc_id int,sub_total numeric(18,2),fa_other_charges numeric(18,2),
		gc_other_charges numeric(18,2),service_tax_amount numeric(18,2),gc_service_tax_amount numeric(18,2),
		oct_amount numeric(18,2),bill_gc_amt numeric(18,2),total_gc_amount numeric(18,2),
		freight_amt numeric(18,2),local_charges numeric(18,2),hamali_charges numeric(18,2),
		bilti_charges numeric(18,2),fov numeric(18,2),tp_charges numeric(18,2),dd_charges numeric(18,2),
		gc_remarks varchar(50),octroi_form_charges numeric(18,2),octroi_service_charges numeric(18,2))

declare @can_add bit
set @can_add = 1

select @can_add = 0 from EC_Opr_VTrans_GC_Billing_Details
where gc_id in (select GC_ID from @GCTempTable)
AND Billing_Client_ID = @Client_ID
AND	Bill_Freight_ID > case when (@Trans_Bill_Type_Id = 1 or @Trans_Bill_Type_Id = 3) then 0 else Bill_Freight_ID end
AND	Bill_octroi_ID > case when (@Trans_Bill_Type_Id = 2 or @Trans_Bill_Type_Id = 3) then 0 else Bill_octroi_ID end


set @Error_Code = 0;
set @ERROR_DESC = '';

if @can_add = 0 and @Bill_ID <= 0 return;


declare @Is_Transport_Bill_Series_Required bit
select @Is_Transport_Bill_Series_Required = Is_Transport_Bill_Series_Required
from EC_Master_Company_Parameters

if @Is_Transport_Bill_Series_Required = 1 and @Bill_ID<=0
	begin
		declare @is_duplicate bit
		set @is_duplicate = 0
		select @is_duplicate = 1 from FA_Opr_Bill where year_code = @year_code and
		Bill_No = @Bill_No

		if @is_duplicate = 1
			begin
			set @Error_Code = 2627;
			set @ERROR_DESC = 'Duplcate Record Found!';
			return;
			end
	end

BEGIN TRY
BEGIN TRAN
BEGIN
SET NOCOUNT ON; 
declare @Total_GC int
declare @Bill_Sub_Total numeric(18,2)
declare @Bill_Other_Charges_Total numeric(18,2)
declare @Bill_Service_Tax_Amount numeric(18,2)
declare @Bill_Octroi_Amount numeric(18,2)
declare @Bill_Total_Amount numeric(18,2)
declare @Total_Octroi_Form_Charge numeric(18,2)
declare @Total_Octroi_Service_Charge numeric(18,2)

if @Less_Amount < 0  set @Less_Amount = 0

set @Total_GC = 0
set @Bill_Sub_Total = 0 
set @Bill_Other_Charges_Total =0
set @Bill_Service_Tax_Amount =0
set @Bill_Octroi_Amount =0
set @Bill_Total_Amount =0
set @Total_Octroi_Form_Charge = 0
set @Total_Octroi_Service_Charge = 0

select	@Total_GC = Count(*),
		@Bill_Sub_Total = case when @Trans_Bill_Type_Id = 2 then 0 else sum(Sub_Total) end,
		@Bill_Other_Charges_Total = case when @Trans_Bill_Type_Id = 2 then 0 else sum(FA_Other_Charges) end,
		@Bill_Service_Tax_Amount = sum(Service_Tax_Amount),
		@Bill_Octroi_Amount = case when @Trans_Bill_Type_Id = 1 then 0 else sum(Oct_Amount) end,
		@Bill_Total_Amount = sum(bill_gc_amt),
		@Total_Octroi_Form_Charge = case when @Trans_Bill_Type_Id = 1 then 0 else sum(Octroi_Form_Charge) end,
		@Total_Octroi_Service_Charge = case when @Trans_Bill_Type_Id = 1 then 0 else sum(Octroi_Service_Charge) end
from @GCTempTable


EXEC sp_xml_removedocument @GCDetails 

------*********************************************************-----------

if(@Bill_ID <= 0) -- add
  Begin

	if @Is_Transport_Bill_Series_Required = 0
		begin
			exec EC_Opr_Generate_Next_No @Year_Code,@Hierarchy_Code,@Main_ID,
			@Division_ID,@Menu_Item_ID,0,@Bill_No output,@Bill_No_For_Print OUTPUT
		end
	else
		BEGIN
			 update EC_Opr_Document_Allocation set
			 next_no = @Bill_No + 1,
			 Balance = Balance - 1
			 where Document_Series_Allocation_ID = @Document_Allocation_ID

			declare @GC_No_Length int
			select @GC_No_Length = GC_No_Length from EC_Master_Company_GC_Parameter

			set @Bill_No_For_Print = dbo.get_no_to_print(@Bill_No,@GC_No_Length)
		END

    insert into FA_Opr_Bill(
    Year_Code,Division_ID,Bill_Hierarchy_Code,
    Document_Series_Allocation_ID,Bill_Main_ID,Bill_Type_ID,Client_ID,
    Bill_No,Bill_No_For_Print,Bill_Date,
    Bill_Ref_No,Total_GC,Bill_Sub_Total,Bill_Other_Charges_Total,
    Bill_Service_Tax_Amount,Bill_Octroi_Amount,Bill_Total_Amount,
    Remarks,Is_Cancelled,Voucher_ID,
    Created_By,Created_On,Updated_By,Updated_On,
	Contact_Person,Billing_Name,Billing_Address,
	Contact_No,Email,Less_Amount,transport_bill_type_id,
	Total_Oct_Form_Charges,Total_Oct_Service_Charges)
    values(
    @Year_Code,@Division_ID,@Hierarchy_Code,
    @Document_Allocation_ID,@Main_ID,@Bill_Type_ID,@Client_ID,
    @Bill_No,@Bill_No_For_Print,@Bill_Date,
    @Bill_Ref_No,@Total_GC,@Bill_Sub_Total,@Bill_Other_Charges_Total,
    @Bill_Service_Tax_Amount,@Bill_Octroi_Amount,@Bill_Total_Amount,
    @Remarks,0,0,
    @Created_By,getdate(),@Created_By,getdate(),
	@Contact_Person,@Billing_Name,@Billing_Address,
	@Contact_No,@Email,@Less_Amount,@Trans_Bill_Type_Id,
	@Total_Octroi_Form_Charge,@Total_Octroi_Service_Charge)

	set @Bill_ID = @@identity
  End
Else -- Edit
  Begin
    Update FA_Opr_Bill set
    Bill_Type_ID = @Bill_Type_ID,
    Bill_Date = @Bill_Date,
    Bill_Ref_No = @Bill_Ref_No,
	Total_GC = @Total_GC,
    Bill_Sub_Total = @Bill_Sub_Total,
    Bill_Other_Charges_Total = @Bill_Other_Charges_Total,
    Bill_Service_Tax_Amount = @Bill_Service_Tax_Amount,
    Bill_Octroi_Amount = @Bill_Octroi_Amount,
    Bill_Total_Amount = @Bill_Total_Amount,
    Remarks = @Remarks,
    Updated_By = @Created_By,
    Updated_On = getdate(),
	Contact_Person = @Contact_Person,
	Billing_Name = @Billing_Name,
	Billing_Address = @Billing_Address, 
	Contact_No = @Contact_No,
	Email = @Email,
	Less_Amount = @Less_Amount,
	transport_bill_type_id = @Trans_Bill_Type_Id,
	Total_Oct_Form_Charges = @Total_Octroi_Form_Charge,
	Total_Oct_Service_Charges = @Total_Octroi_Service_Charge

    where Bill_ID = @Bill_ID

	update EC_Opr_Vtrans_GC set Is_Billed = 0
	where GC_ID in (Select GC_Id From FA_Opr_Bill_GC_Details where Bill_ID = @Bill_ID)

	update EC_Opr_VTrans_GC_Billing_Details set Is_Billed = 0,
	Bill_Freight_ID = case when (@Trans_Bill_Type_Id = 1 or @Trans_Bill_Type_Id = 3) then 0 else Bill_Freight_ID end,
	Bill_octroi_ID = case when (@Trans_Bill_Type_Id = 2 or @Trans_Bill_Type_Id = 3) then 0 else Bill_octroi_ID end
	where GC_ID in (Select GC_Id From FA_Opr_Bill_GC_Details where Bill_ID = @Bill_ID)

	delete from FA_Opr_Bill_GC_Details where Bill_ID = @Bill_ID
	delete from FA_Opr_Bill_Other_Charges_Details where Bill_ID = @Bill_ID
  End
------*********************************************************-----------
insert into FA_Opr_Bill_GC_Details
	(Year_Code,Bill_ID,GC_ID,
	GC_Sub_Total,
	Other_Charges,
	Octroi_Amount,
	Oct_Form_Charges,
	Oct_Service_Charges,
	GC_Service_Tax_Amount,Total_Amount,GC_Remarks)
select
	@Year_Code,@Bill_ID,GC_ID,
	case @Trans_Bill_Type_Id when 2 then 0 else Sub_Total end,
	case @Trans_Bill_Type_Id when 2 then 0 else FA_Other_Charges end,
	case @Trans_Bill_Type_Id when 1 then 0 else Oct_Amount end,
	case @Trans_Bill_Type_Id when 1 then 0 else Octroi_Form_Charge end,
	case @Trans_Bill_Type_Id when 1 then 0 else Octroi_Service_Charge end,
	Service_Tax_Amount,bill_gc_amt,upper(GC_Remarks)
from @GCTempTable

------*********************************************************-----------

delete from EC_Opr_VTrans_GC_Other_Charges 
where GC_ID in (select gc_id from @GCTempTable)
and GC_ID not in (select gc_id from EC_Opr_VTrans_GC 
				where EC_Opr_VTrans_GC.Is_Multiple_Billing  = 1 )

insert into EC_Opr_VTrans_GC_Other_Charges
		(GC_ID,GC_Other_Charge_Head_ID,Description,Amount)
(select	GC_ID,GC_Other_Charge_Head_ID,Description,Amount
from openxml (@OtherChargeDetails,'/newdataset/billotherchargegrid',2)
		with(gc_id int,gc_other_charge_head_id int,
		description varchar(100),amount numeric(18,2),is_gc_other_charge bit)
		where is_gc_other_charge = 1 and gc_id in(select gc_id from @GCTempTable)
			  and GC_ID not in (select gc_id from EC_Opr_VTrans_GC 
				where EC_Opr_VTrans_GC.Is_Multiple_Billing  = 1 ))

------*********************************************************-----------

insert into FA_Opr_Bill_Other_Charges_Details
		(Bill_ID,Year_Code,Bill_Details_ID,GC_ID,
		GC_Other_Charge_Head_ID,Description,Amount)
(select	@Bill_ID,@Year_Code,0,GC_ID,
		GC_Other_Charge_Head_ID,Description,Amount
from openxml (@OtherChargeDetails,'/newdataset/billotherchargegrid',2)
		with(gc_id int,gc_other_charge_head_id int,
		description varchar(100),amount numeric(18,2),is_gc_other_charge bit)
		where is_gc_other_charge = 0 and gc_id in(select gc_id from @GCTempTable))

------*********************************************************-----------

update FA_OtherCharge
set FA_OtherCharge.Bill_Details_ID = GCDet.Bill_Details_ID
from FA_Opr_Bill_Other_Charges_Details FA_OtherCharge
inner join FA_Opr_Bill_GC_Details GCDet
on FA_OtherCharge.GC_Id = GCDet.GC_Id
where FA_OtherCharge.Bill_ID = @Bill_ID

------*********************************************************-----------

if (@Trans_Bill_Type_Id in (1,3))
	begin
		update GC set 
		GC.Service_Tax_Amount = GridDet.gc_service_tax_amount,
		GC.Total_GC_Amount = GridDet.Total_GC_Amount,
		GC.Freight_Amt = GridDet.Freight_Amt,
		GC.Local_Charges = GridDet.Local_Charges,
		GC.Hamali_Charges = GridDet.Hamali_Charges,
		GC.Bilti_Charges = GridDet.Bilti_Charges,
		GC.FOV = GridDet.FOV,
		GC.TP_Charges = GridDet.TP_Charges,
		GC.DD_Charges = GridDet.DD_Charges,
		GC.Sub_Total = GridDet.Sub_Total,
		GC.Other_Charges = GridDet.GC_Other_Charges
		from EC_Opr_Vtrans_GC GC
		inner join @GCTempTable GridDet
		on GC.GC_Id = GridDet.GC_Id
		and GC.Is_Multiple_Billing  = 0
	end

update GC set
GC.Is_Billed = 1,
GC.Is_billed_All = dbo.Is_Bill_Prepared_For_Every_client_For_GC(GridDet.GC_Id,@Client_ID)
from EC_Opr_Vtrans_GC GC
inner join @GCTempTable GridDet
on GC.GC_Id = GridDet.GC_Id


update EC_Opr_VTrans_GC_Billing_Details set
Bill_Freight_ID = case when (@Trans_Bill_Type_Id = 1 or @Trans_Bill_Type_Id = 3) then @bill_id else Bill_Freight_ID end,
Bill_octroi_ID = case when (@Trans_Bill_Type_Id = 2 or @Trans_Bill_Type_Id = 3) then @bill_id else Bill_octroi_ID end,
Is_Billed = 1  ,
Billed_date = @Bill_Date
from EC_Opr_VTrans_GC_Billing_Details  
inner join @GCTempTable GridDet
on EC_Opr_VTrans_GC_Billing_Details.GC_Id = GridDet.GC_Id
and EC_Opr_VTrans_GC_Billing_Details.Billing_Client_ID  = @Client_ID
and EC_Opr_VTrans_GC_Billing_Details.Billing_Branch_ID = @Main_ID

EXEC sp_xml_removedocument @OtherChargeDetails 

set @Print_Doc_ID = @Bill_ID

------===========GcTransBillAccountEffects=============
EXEC	[dbo].[EC_FA_Opr_GcTransBillAccountEffects]
		@Year_Code = @Year_Code,
		@Hierarchy_Code = @Hierarchy_Code,
		@Main_Id = @Main_Id,
		@Division_Id = @Division_Id,
		@Bill_ID = @Bill_ID,
		@User_Id = @Created_By

--=====================================================
END
COMMIT TRAN
END TRY
BEGIN CATCH
 ROLLBACK TRAN
 SELECT @ERROR_CODE=ERROR_NUMBER()
 SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +
 CAST(ERROR_MESSAGE() as VARCHAR(4000))
END CATCH






















GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================  
-- Author:  <Ankit champaneriya>  
-- Create date: 06-01-09 1.30 pm
-- Description: <Insert the Record For EC_Opr_VTrans_GC_Delivery_Branch_Update_History>  
-- =============================================  

CREATE Proc [dbo].[EC_Opr_DeliveryBranchUpdate_Save]  
(
@TransactionDate datetime,
@xmldata xml,
@Current_Branch_Id int,
@New_Dly_Branch_Id int,  
@ServiceLocation_Id int,
@Reason varchar(250),
@Created_By int,  
@Error_Code int output,  
@Error_Desc AS VARCHAR(4000) OUTPUT)  
As  

DECLARE @idoc intEXEC sp_xml_preparedocument @idoc OUTPUT,@xmldata

declare @can_update bit
set @can_update = 1

select @can_update = 0 from ec_opr_vtrans_gc_articles articles
where 1=1
and articles.gc_id in
(Select gc_id from openxml (@idoc,'/NewDataSet/Table',2)
	with(gc_id int))
and status_id = 60
and is_cancelled = 0
and Current_Branch_ID = @Current_Branch_Id
and (articles <= 0 or dbo.Is_Delivery_Done(articles.gc_id) = 1)


if @can_update = 0 return

BEGIN TRY  
BEGIN TRAN  
BEGIN  
SET NOCOUNT ON;  
set @Error_Code = 0;  
set @ERROR_DESC = '';  

Begin
insert into EC_Opr_VTrans_GC_Delivery_Branch_Update_History  
	(Transaction_Date,GC_ID,Old_Dly_Branch_Id,New_Dly_Branch_Id,
	Old_To_Location_Id,New_To_Location_Id,
	Reason,Created_By,Created_On)
Select @TransactionDate,gc_id,branch_id,@New_Dly_Branch_Id,
	location_id,@ServiceLocation_Id,
	@Reason,@Created_By,getdate()
from openxml (@idoc,'/NewDataSet/Table',2)
with(gc_id int,branch_id int,location_id int)

declare @temp table(sr_no int identity(1,1), gc_id int)
insert into @temp
Select gc_id from openxml (@idoc,'/NewDataSet/Table',2)
with(gc_id int)

declare @gc_id int, @sr_no int, @count int,@is_octroi_applicable bit

set @sr_no = 1
set @is_octroi_applicable = 0

select @count = count(*) from @temp

select @is_octroi_applicable = Is_Octroi from ec_master_service_location
where Branch_Id = @New_Dly_Branch_Id


while @sr_no <= @count
	begin
		select @gc_id = gc_id from @temp
		where sr_no = @sr_no

		update ec_opr_vtrans_gc 
		set delivery_branch_id = @New_Dly_Branch_Id ,
			To_Location_ID = @ServiceLocation_Id ,
			Is_Octroi_Applicable = @is_octroi_applicable
		where gc_id = @gc_id	
		
	set @sr_no = @sr_no + 1
	end

EXEC sp_xml_removedocument @idoc

End  
END  
COMMIT TRAN  
END TRY  
BEGIN CATCH  
ROLLBACK TRAN  
SELECT @ERROR_CODE=ERROR_NUMBER()  
SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +  
CAST(ERROR_MESSAGE() as VARCHAR(4000))  
END CATCH  





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
      
      
-- =============================================      
-- Author:  <Author,,Name>      
-- Create date: <Create Date,,>      
-- Description: <Description,,>      
-- EXEC [dbo].[EC_RPT_Route_Load_Performance] 0,0,0,0,0,0,'2008-07-01','2008-12-31',0,'',0,0,0    
-- =============================================      
CREATE PROCEDURE [dbo].[EC_RPT_Route_Load_Performance]      
@Region_ID INT,      
@Area_ID INT,      
@Branch_ID INT,      
@Un_loading_Region_id int,      
@Un_loading_Area_id int,      
@Un_loading_Branch_id int,      
@From_Date DateTime,      
@To_Date DateTime,      
@Vehicle_Type int,      
@Vehicle_No as varchar(50) ,      
@Division_Id int,    
@PageIndex int,     
@PageSize int 
              
AS      
BEGIN      
      
 SET NOCOUNT ON;     
WITH RouteLoadPerformance AS    
(     
 Select ROW_NUMBER() OVER(ORDER BY a.[Truck No]) AS 'Sr No.',     
* from     
(    
  Select distinct      
    
  bkg_Area.Area_Name as [Trip From AO],H.Area_Name as [Trip To AO],      
  Vehicle.Vehicle_No as [Truck No],      
  Veh_type.Vehicle_Type as [Vehicle Type],      
        
  count(distinct lhpo.lhpo_no_for_print) as [No Of Trips],      
  ISNULL(cast(round(sum(lhpo.truck_hire_charge),0) as float),0) as [Total Truck Hire],      
  ISNULL(cast(round(Vehicle.Vehicle_Capacity,0) as float),0) as [Truck Capacity in KG],      
  ISNULL(cast(round(sum(lhpo.total_actual_weight),0) as float),0)  as [Actual Capacity Used],      
  ISNULL(cast(round(sum(Vehicle.Vehicle_Capacity),0) as float),0) as [Trip Capacity In Kg],      
  cast(round((sum(lhpo.Truck_Hire_Charge)/count(lhpo.lhpo_no_for_print)),0) as float) as [Truck Hire Charge For One Trip],      
        
      
  (case when Vehicle.Vehicle_Capacity =0 then 0      
  else cast(round((sum(lhpo.Truck_Hire_Charge)/sum(Vehicle.Vehicle_Capacity)),2) as float) end) [Trip Capacity rate per Kg],      
  cast(round((sum(lhpo.Truck_Hire_Charge)/sum(lhpo.total_actual_weight)),2) as float) [Actual Capacity rate per Kg],      
  cast(round((sum(Vehicle.Vehicle_Capacity) - sum(lhpo.total_actual_weight)),0) as float) Variance      
      
From Ec_Opr_VTrans_lhpo lhpo      
Inner Join EF_Master_Vehicle Vehicle      
On Vehicle.Vehicle_Id=lhpo.Vehicle_Id      
Inner join EF_Master_Vehicle_Type Veh_type      
On Veh_type.vehicle_type_id=Vehicle.vehicle_type_id      
Inner Join ec_master_branch C      
On c.branch_id=lhpo.lhpo_branch_id     
Inner Join ec_master_Area bkg_Area      
On bkg_Area.Area_Id=C.Area_Id       
Inner join dbo.EC_Master_Service_Location F      
on F.Service_Location_ID=lhpo.To_Location_ID      
inner join EC_Opr_VTrans_LHPO_GC_Details lhpod      
on lhpod.lhpo_id=lhpo.lhpo_id      
inner join ec_opr_vtrans_gc gc      
on gc.gc_id=lhpod.gc_id      
left outer join ec_master_branch G      
on G.branch_id=F.branch_id      
left outer join ec_master_area H      
on H.area_id=G.area_id      
    
where lhpo.Is_Cancelled = 0      
 and lhpo.lhpo_date>=@From_Date and lhpo.lhpo_date<=@To_Date       
 and Vehicle.Vehicle_type_id=(select case @Vehicle_type when 0 then Vehicle.Vehicle_type_id else @Vehicle_type end)      
 and Vehicle.Vehicle_No like (select case @Vehicle_No when '' then Vehicle.Vehicle_No else @Vehicle_No end)       
 and gc.Division_ID=(select case @Division_Id when 0 then gc.Division_ID else @Division_Id end)      
 AND C.Region_ID = (select case @Region_ID when 0 then C.Region_ID else @Region_ID end)      
 AND C.Area_ID = (select case @Area_ID when 0 then C.Area_ID else @Area_ID end )      
 AND C.branch_Id = (select case @Branch_ID when 0 then C.branch_Id else @Branch_ID end )      
 and  G.Region_ID = (select case @Un_loading_Region_id when 0 then G.Region_ID else @Un_loading_Region_id end)      
 AND G.Area_ID = (select case @Un_loading_Area_id when 0 then G.Area_ID else @Un_loading_Area_id end )       
 AND G.branch_Id = (select case @Branch_ID when 0 then G.branch_Id else @Branch_ID end )      
Group By Vehicle.Vehicle_no,Veh_Type.Vehicle_Type,bkg_Area.Area_Name ,H.Area_Name , Vehicle.Vehicle_Capacity      
)a    
)    
    
    
SELECT * into #Rt FROM RouteLoadPerformance    
    
select * From #Rt    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
Select     
    
 sum([No of Trips]) as [No of Trips],    
  sum([Total Truck Hire]) as [Total Truck Hire],    
        sum([Truck Capacity In Kg]) as [Truck Capacity In Kg],    
        sum([Actual Capacity Used]) as [Actual Capacity Used],    
        sum([Actual Capacity rate per kg]) as [Actual Capacity rate per kg],    
        sum([Trip Capacity In Kg]) as [Trip Capacity In Kg],    
        sum([Truck Hire Charge For One Trip]) as [Truck Hire Charge For One Trip],    
        sum([Trip Capacity rate per kg]) as [Trip Capacity rate per kg],    
        sum([Variance]) as Variance    
     
From #Rt    
    
select count(*) From #Rt    
END      
      
      
    
    
    
----707--------------------------------------------------------------------------------    
    
    
    
----1367--------------------------------------------------------------------------------    


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
      
-- =============================================      
-- Author:        
-- Create date: 23 AUG 2008      
-- Description: SHORT EXCESS SUPERVISOR NAMES      
-- =============================================      
-- EXEC [EC_RPT_SHORT_EXCESS_SUPERVISOR] 0,0,0,'24 april 2008','24 feb 2009',0,0 ,1,9     
CREATE PROCEDURE [dbo].[EC_RPT_SHORT_EXCESS_SUPERVISOR]      
(      
 @REGION_ID INT,       
 @AREA_ID INT ,      
 @BRANCH_ID INT,      
 @FROM_DATE DATETIME,      
 @TO_DATE DATETIME,      
 @FILTER_TYPE_ID INT,      
 @Division_Id INT,    
@PageIndex int,     
@PageSize int,  
@calledfrom varchar(20) = '',  
@colid int = 0,  
@datatype_id int = 0,  
@criteria_id int = 0,  
@Filtered_Text varchar(50) = '',  
@Filtered_Date datetime = '1 jan 1900',  
@Filtered_Bit bit = 1            
)      
AS      
BEGIN      
      
IF @BRANCH_ID  > 0       
  BEGIN      
   SET @REGION_ID = -1      
   SET @AREA_ID = -1      
  END       
 ELSE IF @BRANCH_ID = 0 AND @AREA_ID > 0       
  BEGIN       
   SET @REGION_ID = -1      
   SET @Branch_ID =  -1      
  END       
 ELSE IF @BRANCH_ID = 0 AND @AREA_ID = 0 AND @REGION_ID > 0       
  BEGIN      
   SET @AREA_ID = -1      
   SET @Branch_ID = -1      
  END      
      
---demaged    

IF @FILTER_TYPE_ID = 2      
Begin  
--------------------------------------Filter-----------------------------------------  
declare @Filtered_Text_int int  
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)  
  
if @calledfrom = 'form_and_pageload'    
 begin  
  declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))    
  
  insert into @Dropdown_Search values ('Delivery Branch','s,1')  
  insert into @Dropdown_Search values ('Loading Branch','s,2')  
  insert into @Dropdown_Search values ('Loading Supervisor','s,3')  
  insert into @Dropdown_Search values ('UnLoading Branch','s,4')  
  insert into @Dropdown_Search values ('UnLoading Supervisor','s,5')  
--  insert into @Dropdown_Search values ('Received Condition','s,6')  
  insert into @Dropdown_Search values ('UnLoading Date','d,7')  
  insert into @Dropdown_Search values ('Memo Date','d,8')  
--  insert into @Dropdown_Search values ('GC Date','d,9')  
  select  *From @Dropdown_Search  
  
  return  
 end;  
--------------------------------------Filter-----------------------------------------        
WITH ShtExs2 AS    
(    
 SELECT      
ROW_NUMBER() OVER(ORDER BY B.GC_NO_FOR_PRINT) AS 'Sr No.',     
    
B.GC_NO_FOR_PRINT AS 'gc_caption NO',      
 dbo.dateonlydisplay(B.gc_date) AS 'gc_caption DATE',      
 bkg_br.branch_name AS 'BKG BRANCH',      
 dly_br.branch_name   AS 'DEL BRANCH',      
 Un_Con.RECEIVED_CONDITION AS 'RECEIVED CONDITION',      
 A.DAMAGED_ARTICLES  AS 'ARTICLES',      
 memo_br.BRANCH_NAME  AS 'LOADING BRANCH',      
 emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME AS 'LOADING SUPERVISOR',      
 dbo.dateonlydisplay(memo.memo_date) as 'MEMO DATE',      
 aus.LHPO_No_For_Print as 'lhpo_caption NO',      
 Unlod_br.branch_name as 'UNLOADING BRANCH',      
 emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME AS 'UNLOADING SUPERVISOR',      
 dbo.dateonlydisplay(aus.ACTUAL_UNLOADING_SHEET_DATE) AS 'UNLOADING DATE',      
 aus.ACTUAL_UNLOADING_SHEET_NO_FOR_PRINT 'AUS NO',      
 aus.ACTUAL_UNLOADING_SHEET_ID 'AUS_ID'      
        
 FROM EC_Opr_VTrans_Actual_Unloading_Sheet_Details A      
 Inner Join EC_Opr_VTrans_Actual_Unloading_Sheet aus      
 On aus.Actual_Unloading_Sheet_ID=A.Actual_Unloading_Sheet_ID      
 Inner Join EC_Opr_VTrans_GC B      
 On B.Gc_Id=A.Gc_Id      
 INNER JOIN EC_Master_Unloading_Condition Un_Con      
 On Un_Con.Received_Condition_ID=A.Received_Condition_ID      
 Inner Join EC_Opr_VTrans_Memo Memo      
 On A.Memo_ID=Memo.Memo_ID      
 Inner Join ec_opr_vtrans_lhpo lhpo      
 On lhpo.lhpo_id=Memo.lhpo_id      
 Inner Join  EC_MASTER_EMPLOYEE emp       
 On aus.Unloaded_Supervisor_ID = emp.EMP_ID      
 Inner Join  EC_MASTER_EMPLOYEE emp1       
 On lhpo.Loading_Supervisor_ID = emp1.EMP_ID      
      
 Inner Join ec_master_branch bkg_br      
 On bkg_br.branch_id=B.from_branch_id      
 Inner Join ec_master_branch dly_br      
 On dly_br.branch_id=B.delivery_branch_id      
 Inner Join ec_master_branch memo_br      
 On memo_br.branch_id=memo.Memo_Branch_Id      
 Inner Join ec_master_branch Unlod_br      
 On Unlod_br.branch_id=aus.Un_Loading_Branch_ID      
      
WHERE A.DAMAGED_ARTICLES > 0 and aus.Is_cancelled=0      
AND (Unlod_br.BRANCH_ID = @BRANCH_ID      
OR Unlod_br.REGION_ID = (SELECT CASE @REGION_ID WHEN 0 THEN Unlod_br.REGION_ID ELSE  @REGION_ID END)      
OR Unlod_br.AREA_ID =  @AREA_ID)      
AND (AUS.ACTUAL_UNLOADING_SHEET_DATE BETWEEN @FROM_DATE AND @TO_DATE)    
and B.Division_ID=(select case @Division_Id when 0 then B.Division_ID else @Division_Id end)  
and   
(@criteria_id = 0  
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and dly_br.branch_name = @Filtered_Text)  
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and dly_br.branch_name like @Filtered_Text + '%')  
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and dly_br.branch_name like '%' + @Filtered_Text)  
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and dly_br.branch_name like '%' + @Filtered_Text + '%')  
  
  
or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and memo_br.BRANCH_NAME = @Filtered_Text)  
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and memo_br.BRANCH_NAME like @Filtered_Text + '%')  
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and memo_br.BRANCH_NAME like '%' + @Filtered_Text)  
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and memo_br.BRANCH_NAME like '%' + @Filtered_Text + '%')  
  
or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME = @Filtered_Text)  
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like @Filtered_Text + '%')  
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like '%' + @Filtered_Text)  
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like '%' + @Filtered_Text + '%')  
  
or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and Unlod_br.branch_name = @Filtered_Text)  
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and Unlod_br.branch_name like @Filtered_Text + '%')  
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and Unlod_br.branch_name like '%' + @Filtered_Text)  
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and Unlod_br.branch_name like '%' + @Filtered_Text + '%')  
  
or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME = @Filtered_Text)  
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like @Filtered_Text + '%')  
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like '%' + @Filtered_Text)  
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like '%' + @Filtered_Text + '%')  
  
--or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION = @Filtered_Text)  
--or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION like @Filtered_Text + '%')  
--or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION like '%' + @Filtered_Text)  
--or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION like '%' + @Filtered_Text + '%')  
--  
  
or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and aus.ACTUAL_UNLOADING_SHEET_DATE = @Filtered_Date)  
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and aus.ACTUAL_UNLOADING_SHEET_DATE >= @Filtered_Date)  
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and aus.ACTUAL_UNLOADING_SHEET_DATE <= @Filtered_Date)  
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and aus.ACTUAL_UNLOADING_SHEET_DATE > @Filtered_Date)  
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and aus.ACTUAL_UNLOADING_SHEET_DATE < @Filtered_Date)  
  
or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and memo.memo_date = @Filtered_Date)  
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and memo.memo_date >= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and memo.memo_date <= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and memo.memo_date > @Filtered_Date)  
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and memo.memo_date < @Filtered_Date)  
  
--or (@colid = 9 and @criteria_id = 1 and @datatype_id = 4 and B.gc_date = @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 2 and @datatype_id = 4 and B.gc_date >= @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 3 and @datatype_id = 4 and B.gc_date <= @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 4 and @datatype_id = 4 and B.gc_date > @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 5 and @datatype_id = 4 and B.gc_date < @Filtered_Date)  
)      
--order by B.GC_NO_FOR_PRINT      
)    
SELECT * into #SE2 FROM ShtExs2    
    
select * From #SE2    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
Select sum([Articles]) as [Articles]       
From #SE2    
    
select count(*) From #SE2    
end      
      
--short      

  
ELSE IF  @FILTER_TYPE_ID = 1 --Short Excess 
Begin 
--------------------------------------Filter-----------------------------------------  
  
if @calledfrom = 'form_and_pageload'    
 begin  
--  declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))    
  
  insert into @Dropdown_Search values ('Delivery Branch','s,1')  
  insert into @Dropdown_Search values ('Loading Branch','s,2')  
  insert into @Dropdown_Search values ('Loading Supervisor','s,3')  
  insert into @Dropdown_Search values ('UnLoading Branch','s,4')  
  insert into @Dropdown_Search values ('UnLoading Supervisor','s,5')   
  insert into @Dropdown_Search values ('UnLoading Date','d,7')  
  insert into @Dropdown_Search values ('Memo Date','d,8')  
--  insert into @Dropdown_Search values ('GC Date','d,9')  
  select  *From @Dropdown_Search  
  
  return  
 end;  
--------------------------------------Filter-----------------------------------------         
WITH ShtExs1 AS    
(    
 SELECT     
ROW_NUMBER() OVER(ORDER BY GC.GC_NO_FOR_PRINT) AS 'Sr No.',     
GC.GC_No_For_Print AS 'gc_caption NO',      
 dbo.dateonlydisplay(GC.GC_DATE) AS 'gc_caption DATE',      
 bkg_br.BRANCH_NAME  AS 'BKG BRANCH',      
 dly_br.BRANCH_NAME   AS 'DEL BRANCH',      
 (CASE WHEN A.FLAG_ID = 50 THEN 'SHORT'       
 WHEN A.FLAG_ID = 70 THEN 'EXCESS' END) AS 'RECEIVED CONDITION',      
 A.ARTICLES AS 'ARTICLES',      
 memo_br.BRANCH_NAME  AS 'LOADING BRANCH',      
 emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME AS 'LOADING SUPERVISOR',      
 dbo.dateonlydisplay(memo.memo_date) as 'MEMO DATE',      
 F.LHPO_No_For_Print as 'lhpo_caption NO',      
 Unlod_br.branch_name as 'UNLOADING BRANCH',      
 emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME AS 'UNLOADING SUPERVISOR',      
 dbo.dateonlydisplay(F.ACTUAL_UNLOADING_SHEET_DATE) AS 'UNLOADING DATE',      
 F.ACTUAL_UNLOADING_SHEET_NO_FOR_PRINT 'AUS NO',      
 F.ACTUAL_UNLOADING_SHEET_ID 'AUS_ID'      
 FROM EC_OPR_VTRANS_GC_ARTICLES_UNKNOWN A       
 INNER JOIN EC_OPR_VTRANS_GC GC       
 ON A.GC_ID = GC.GC_ID      
 Inner Join EC_Opr_VTrans_Memo Memo      
 On A.Memo_ID=Memo.Memo_ID      
 Inner Join ec_opr_vtrans_lhpo lhpo      
 On lhpo.lhpo_id=Memo.lhpo_id      
 LEFT OUTER JOIN EC_OPR_VTRANS_ACTUAL_UNLOADING_SHEET_DETAILS E      
 ON A.ACTUAL_UNLOADING_SHEET_ID = E.ACTUAL_UNLOADING_SHEET_ID      
 AND A.ARTICLE_ID = E.ARTICLE_ID      
 LEFT OUTER JOIN EC_OPR_VTRANS_ACTUAL_UNLOADING_SHEET F      
 ON E.ACTUAL_UNLOADING_SHEET_ID = F.ACTUAL_UNLOADING_SHEET_ID      
 Inner Join ec_master_branch bkg_br      
 On bkg_br.branch_id=GC.from_branch_id      
 Inner Join ec_master_branch dly_br      
 On dly_br.branch_id=GC.delivery_branch_id      
 Inner Join ec_master_branch memo_br      
 On memo_br.branch_id=memo.Memo_Branch_Id      
 Inner Join ec_master_branch Unlod_br      
 On Unlod_br.branch_id=F.Un_Loading_Branch_ID      
 Inner Join  EC_MASTER_EMPLOYEE emp1       
 On lhpo.Loading_Supervisor_ID = emp1.EMP_ID      
 Inner Join  EC_MASTER_EMPLOYEE emp       
 On F.Unloaded_Supervisor_ID = emp.EMP_ID      
 Inner Join ec_master_branch current_br      
 On current_br.branch_id=A.Short_Excess_Branch_Id      
 WHERE  F.IS_CANCELLED = 0 AND MEMO.IS_CANCELLED = 0 AND LHPO.IS_CANCELLED = 0      
And (current_br.BRANCH_ID = @BRANCH_ID      
OR current_br.REGION_ID = (SELECT CASE @REGION_ID WHEN 0 THEN current_br.REGION_ID ELSE  @REGION_ID END)      
OR current_br.AREA_ID =  @AREA_ID)      
AND (F.ACTUAL_UNLOADING_SHEET_DATE BETWEEN @FROM_DATE AND @TO_DATE)    
and GC.Division_ID=(select case @Division_Id when 0 then GC.Division_ID else @Division_Id end) 
and (@criteria_id = 0  
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and dly_br.BRANCH_NAME = @Filtered_Text)  
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and dly_br.BRANCH_NAME like @Filtered_Text + '%')  
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and dly_br.BRANCH_NAME like '%' + @Filtered_Text)  
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and dly_br.BRANCH_NAME like '%' + @Filtered_Text + '%')  
  
  
or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and memo_br.BRANCH_NAME = @Filtered_Text)  
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and memo_br.BRANCH_NAME like @Filtered_Text + '%')  
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and memo_br.BRANCH_NAME like '%' + @Filtered_Text)  
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and memo_br.BRANCH_NAME like '%' + @Filtered_Text + '%')  
  
or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME = @Filtered_Text)  
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like @Filtered_Text + '%')  
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like '%' + @Filtered_Text)  
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like '%' + @Filtered_Text + '%')  
  
or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and Unlod_br.branch_name = @Filtered_Text)  
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and Unlod_br.branch_name like @Filtered_Text + '%')  
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and Unlod_br.branch_name like '%' + @Filtered_Text)  
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and Unlod_br.branch_name like '%' + @Filtered_Text + '%')  
  
or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME = @Filtered_Text)  
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like @Filtered_Text + '%')  
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like '%' + @Filtered_Text)  
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like '%' + @Filtered_Text + '%')  
  
--or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION = @Filtered_Text)  
--or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION like @Filtered_Text + '%')  
--or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION like '%' + @Filtered_Text)  
--or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and Un_Con.RECEIVED_CONDITION like '%' + @Filtered_Text + '%')  
  
  
or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE = @Filtered_Date)  
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE >= @Filtered_Date)  
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE <= @Filtered_Date)  
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE > @Filtered_Date)  
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE < @Filtered_Date)  
  
or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and memo.memo_date = @Filtered_Date)  
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and memo.memo_date >= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and memo.memo_date <= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and memo.memo_date > @Filtered_Date)  
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and memo.memo_date < @Filtered_Date)  
  
--or (@colid = 9 and @criteria_id = 1 and @datatype_id = 4 and GC.gc_date = @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 2 and @datatype_id = 4 and GC.gc_date >= @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 3 and @datatype_id = 4 and GC.gc_date <= @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 4 and @datatype_id = 4 and GC.gc_date > @Filtered_Date)  
--or (@colid = 9 and @criteria_id = 5 and @datatype_id = 4 and GC.gc_date < @Filtered_Date)  
)           
)    
SELECT * into #SE1 FROM ShtExs1    
    
select * From #SE1    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
Select sum([Articles]) as [Articles]       
From #SE1    
    
select count(*) From #SE1    
end      
--order by GC.GC_No_For_Print      
--SELECT * FROM EC_OPR_VTRANS_GC_ARTICLES_UNKNOWN      
    
    
Else 
Begin     
--------------------------------------Filter-----------------------------------------  
 if @calledfrom = 'form_and_pageload'    
 begin  
--  declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))    
  
  insert into @Dropdown_Search values ('Delivery Branch','s,1')  
  insert into @Dropdown_Search values ('Loading Branch','s,2')  
  insert into @Dropdown_Search values ('Loading Supervisor','s,3')  
  insert into @Dropdown_Search values ('UnLoading Branch','s,4')  
  insert into @Dropdown_Search values ('UnLoading Supervisor','s,5')
  insert into @Dropdown_Search values ('UnLoading Date','d,7')  
  insert into @Dropdown_Search values ('Memo Date','d,8')  
  select  *From @Dropdown_Search  
  
  return  
 end;  
--------------------------------------Filter-----------------------------------------      
WITH ShtExs0 AS    
(    
Select ROW_NUMBER() OVER(ORDER BY A.[gc_caption NO]) AS 'Sr No.'     
,a.* from    
(    
 SELECT      
B.GC_NO_FOR_PRINT AS 'gc_caption NO',      
 dbo.dateonlydisplay(B.gc_date) AS 'gc_caption DATE',      
 bkg_br.branch_name AS 'BKG BRANCH',      
 dly_br.branch_name   AS 'DEL BRANCH',      
 Un_Con.RECEIVED_CONDITION AS 'RECEIVED CONDITION',      
 A.DAMAGED_ARTICLES  AS 'ARTICLES',      
 memo_br.BRANCH_NAME  AS 'LOADING BRANCH',      
 emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME AS 'LOADING SUPERVISOR',      
 dbo.dateonlydisplay(memo.memo_date) as 'MEMO DATE',      
 aus.LHPO_No_For_Print as 'lhpo_caption NO',      
 Unlod_br.branch_name as 'UNLOADING BRANCH',      
 emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME AS 'UNLOADING SUPERVISOR',      
 dbo.dateonlydisplay(aus.ACTUAL_UNLOADING_SHEET_DATE) AS 'UNLOADING DATE',      
 aus.ACTUAL_UNLOADING_SHEET_NO_FOR_PRINT 'AUS NO',      
 aus.ACTUAL_UNLOADING_SHEET_ID 'AUS_ID'      
      
 FROM EC_Opr_VTrans_Actual_Unloading_Sheet_Details A      
 Inner Join EC_Opr_VTrans_Actual_Unloading_Sheet aus      
 On aus.Actual_Unloading_Sheet_ID=A.Actual_Unloading_Sheet_ID      
 Inner Join EC_Opr_VTrans_GC B      
 On B.Gc_Id=A.Gc_Id      
 INNER JOIN EC_Master_Unloading_Condition Un_Con      
 On Un_Con.Received_Condition_ID=A.Received_Condition_ID      
 Inner Join EC_Opr_VTrans_Memo Memo      
 On A.Memo_ID=Memo.Memo_ID      
 Inner Join ec_opr_vtrans_lhpo lhpo      
 On lhpo.lhpo_id=Memo.lhpo_id      
 Inner Join  EC_MASTER_EMPLOYEE emp       
 On aus.Unloaded_Supervisor_ID = emp.EMP_ID      
 Inner Join  EC_MASTER_EMPLOYEE emp1       
 On lhpo.Loading_Supervisor_ID = emp1.EMP_ID      
      
 Inner Join ec_master_branch bkg_br      
 On bkg_br.branch_id=B.from_branch_id      
 Inner Join ec_master_branch dly_br      
 On dly_br.branch_id=B.delivery_branch_id      
 Inner Join ec_master_branch memo_br      
 On memo_br.branch_id=memo.Memo_Branch_Id      
 Inner Join ec_master_branch Unlod_br      
 On Unlod_br.branch_id=aus.Un_Loading_Branch_ID      
      
WHERE A.DAMAGED_ARTICLES > 0 and aus.Is_cancelled=0      
AND (Unlod_br.BRANCH_ID = @BRANCH_ID      
OR Unlod_br.REGION_ID = (SELECT CASE @REGION_ID WHEN 0 THEN Unlod_br.REGION_ID ELSE  @REGION_ID END)      
OR Unlod_br.AREA_ID =  @AREA_ID)      
AND (AUS.ACTUAL_UNLOADING_SHEET_DATE BETWEEN @FROM_DATE AND @TO_DATE)    
and B.Division_ID=(select case @Division_Id when 0 then B.Division_ID else @Division_Id end)      
      
 union      
      
 SELECT     
--'' AS 'Sr No.',    
--ROW_NUMBER() OVER(ORDER BY GC.GC_NO_FOR_PRINT) AS 'Sr No.',     
    
GC.GC_No_For_Print AS 'gc_caption NO',      
 dbo.dateonlydisplay(GC.gc_date) AS 'gc_caption DATE',      
 bkg_br.BRANCH_NAME  AS 'BKG BRANCH',      
 dly_br.BRANCH_NAME   AS 'DEL BRANCH',      
 (CASE WHEN A.FLAG_ID = 50 THEN 'SHORT'       
 WHEN A.FLAG_ID = 70 THEN 'EXCESS' END) AS 'RECEIVED CONDITION',      
 A.ARTICLES AS 'ARTICLES',      
 memo_br.BRANCH_NAME  AS 'LOADING BRANCH',      
 emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME AS 'LOADING SUPERVISOR',      
 dbo.dateonlydisplay(memo.memo_date) as 'MEMO DATE',      
 F.LHPO_No_For_Print as 'lhpo_caption NO',      
 Unlod_br.branch_name as 'UNLOADING BRANCH',      
 emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME AS 'UNLOADING SUPERVISOR',      
 dbo.dateonlydisplay(F.ACTUAL_UNLOADING_SHEET_DATE) AS 'UNLOADING DATE',      
 F.ACTUAL_UNLOADING_SHEET_NO_FOR_PRINT 'AUS NO',      
 F.ACTUAL_UNLOADING_SHEET_ID 'AUS_ID'      
 FROM EC_OPR_VTRANS_GC_ARTICLES_UNKNOWN A       
 INNER JOIN EC_OPR_VTRANS_GC GC       
 ON A.GC_ID = GC.GC_ID      
 Inner Join EC_Opr_VTrans_Memo Memo      
 On A.Memo_ID=Memo.Memo_ID      
 Inner Join ec_opr_vtrans_lhpo lhpo      
 On lhpo.lhpo_id=Memo.lhpo_id      
 LEFT OUTER JOIN EC_OPR_VTRANS_ACTUAL_UNLOADING_SHEET_DETAILS E      
 ON A.ACTUAL_UNLOADING_SHEET_ID = E.ACTUAL_UNLOADING_SHEET_ID      
 AND A.ARTICLE_ID = E.ARTICLE_ID      
 LEFT OUTER JOIN EC_OPR_VTRANS_ACTUAL_UNLOADING_SHEET F      
 ON E.ACTUAL_UNLOADING_SHEET_ID = F.ACTUAL_UNLOADING_SHEET_ID      
 Inner Join ec_master_branch bkg_br      
 On bkg_br.branch_id=GC.from_branch_id      
 Inner Join ec_master_branch dly_br      
 On dly_br.branch_id=GC.delivery_branch_id      
 Inner Join ec_master_branch memo_br      
 On memo_br.branch_id=memo.Memo_Branch_Id      
 Inner Join ec_master_branch Unlod_br      
 On Unlod_br.branch_id=F.Un_Loading_Branch_ID      
 Inner Join  EC_MASTER_EMPLOYEE emp1       
 On lhpo.Loading_Supervisor_ID = emp1.EMP_ID      
 Inner Join  EC_MASTER_EMPLOYEE emp       
 On F.Unloaded_Supervisor_ID = emp.EMP_ID      
 Inner Join ec_master_branch current_br      
 On current_br.branch_id=A.Short_Excess_Branch_Id      
WHERE  F.IS_CANCELLED = 0 AND MEMO.IS_CANCELLED = 0 AND LHPO.IS_CANCELLED = 0      
And (current_br.BRANCH_ID = @BRANCH_ID      
OR current_br.REGION_ID = (SELECT CASE @REGION_ID WHEN 0 THEN current_br.REGION_ID ELSE  @REGION_ID END)      
OR current_br.AREA_ID =  @AREA_ID)      
AND (F.ACTUAL_UNLOADING_SHEET_DATE BETWEEN @FROM_DATE AND @TO_DATE)    
and GC.Division_ID=(select case @Division_Id when 0 then GC.Division_ID else @Division_Id end)
and (@criteria_id = 0  
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and dly_br.branch_name = @Filtered_Text)  
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and dly_br.branch_name like @Filtered_Text + '%')  
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and dly_br.branch_name like '%' + @Filtered_Text)  
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and dly_br.branch_name like '%' + @Filtered_Text + '%')  
  
  
or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and memo_br.BRANCH_NAME = @Filtered_Text)  
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and memo_br.BRANCH_NAME like @Filtered_Text + '%')  
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and memo_br.BRANCH_NAME like '%' + @Filtered_Text)  
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and memo_br.BRANCH_NAME like '%' + @Filtered_Text + '%')  
  
or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME = @Filtered_Text)  
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like @Filtered_Text + '%')  
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like '%' + @Filtered_Text)  
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and emp1.FIRST_NAME+' '+emp1.MIDDLE_NAME+' '+emp1.LAST_NAME like '%' + @Filtered_Text + '%')  
  
or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and Unlod_br.branch_name = @Filtered_Text)  
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and Unlod_br.branch_name like @Filtered_Text + '%')  
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and Unlod_br.branch_name like '%' + @Filtered_Text)  
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and Unlod_br.branch_name like '%' + @Filtered_Text + '%')  
  
or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME = @Filtered_Text)  
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like @Filtered_Text + '%')  
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like '%' + @Filtered_Text)  
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and emp.FIRST_NAME+' '+emp.MIDDLE_NAME+' '+emp.LAST_NAME like '%' + @Filtered_Text + '%')  
 
  
or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE = @Filtered_Date)  
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE >= @Filtered_Date)  
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE <= @Filtered_Date)  
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE > @Filtered_Date)  
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and F.ACTUAL_UNLOADING_SHEET_DATE < @Filtered_Date)  
  
or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and memo.memo_date = @Filtered_Date)  
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and memo.memo_date >= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and memo.memo_date <= @Filtered_Date)  
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and memo.memo_date > @Filtered_Date)  
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and memo.memo_date < @Filtered_Date) 

)           
) as a    
)    
    
SELECT * into #SE0 FROM ShtExs0    
    
select * From #SE0    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
Select sum([Articles]) as [Articles]       
From #SE0    
    
select count(*) From #SE0    
end      
end      
    
    
----701--------------------------------------------------------------------------------    
    
    
    
----1368--------------------------------------------------------------------------------    


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================    
-- Author:  <Kanuga Vajiha>    
-- Create date: 1/07/09
-- Description: <>    
-- =============================================    
    
create Proc [dbo].[EC_FA_MRDeliveryDetails_ReadValues]    
 @MR_Id int  
As   
Begin  
select Through_Mr,Delivered_To_Id,  
   Delivery_Against_Id  
from FA_Opr_MR  
where MR_Id=@MR_Id  
  
End


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
  
   
-- =============================================      
-- Author:  <Krutarth>      
-- Create date: <Create Date,,>      
-- Description: <Description,,>      
-- EXEC [dbo].[EF_RPT_Vehicle_Utilization_Excel] 0,0,0,'2008-04-01','2009-04-27',0,0,100  
-- =============================================      
CREATE PROCEDURE [dbo].[EF_RPT_Vehicle_Utilization_Excel]      
@Region_ID INT,      
@Area_ID INT,      
@Branch_ID INT,   
@From_Date DateTime,      
@To_Date DateTime,   
@Division_Id int,  
@PageIndex int,   
@PageSize int,
@calledfrom varchar(20) = '',  
@colid int = 0,  
@datatype_id int = 0,  
@criteria_id int = 0,  
@Filtered_Text varchar(50) = '',  
@Filtered_Date datetime = '1 jan 1900',  
@Filtered_Bit bit = 1       
      
AS      
BEGIN      
      
SET NOCOUNT ON;
--------------------------------------Filter-----------------------------------------  
declare @Filtered_Text_int int  
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)  
  
if @calledfrom = 'form_and_pageload'    
 begin  
  declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))    
  
  insert into @Dropdown_Search values ('Destination','s,1')  
  insert into @Dropdown_Search values ('Vehicle Type','s,2')  
  insert into @Dropdown_Search values ('Actual Weight','n,3')  
  insert into @Dropdown_Search values ('Truck Hire Charge','n,4')  
  insert into @Dropdown_Search values ('Vehicle Capacity','n,5')  
  select  *From @Dropdown_Search  
  
  return  
 end;  
--------------------------------------Filter-----------------------------------------         
WITH Vehicle_Utiliztion AS  
(   
  
select ROW_NUMBER() OVER(ORDER BY A.lhpo_no_for_print) AS 'Sr No.',lhpo_no_for_print as [lhpo_caption No],  
convert(varchar(25),lhpo_date,106) as [lhpo_caption Date],  
D.Branch_Name as [From Location],To_br.branch_name as [Destination],  
cast(round(total_actual_weight,0) as float) as [Actual Weight],  
Vehicle_Type,  
cast(round(Total_Truck_Hire_Payable,0) as float) as [Truck Hire Charge],  
Vehicle_Capacity as [Vehicle Capacity],  
cast(round((total_actual_weight*100)/Vehicle_Capacity,2) as float) as [Utilization]  
from dbo.EC_Opr_VTrans_LHPO A  
inner join dbo.EF_Master_Vehicle B  
on A.Vehicle_ID=B.Vehicle_ID  
inner join dbo.EF_Master_Vehicle_Type C  
on C.Vehicle_Type_ID=B.Vehicle_Type_ID  
inner join ec_master_service_location  
on A.To_Location_ID=ec_master_service_location.Service_Location_ID  
  
inner join ec_master_branch D      
on D.branch_id=A.LHPO_Branch_Id      
inner join ec_master_area E      
on E.area_id=D.area_id      
inner join ec_master_region F  
on F.region_id=D.region_id  
  
inner join ec_master_branch To_br      
on To_br.branch_id=ec_master_service_location.Branch_Id    
  
  
where Vehicle_Capacity>0  
and A.Is_cancelled=0  
and (A.lhpo_date Between @From_date And @To_date)    
AND D.Region_ID = (select case @Region_ID when 0 then D.Region_ID else @Region_ID end)      
AND D.Area_ID = (select case @Area_ID when 0 then D.Area_ID else @Area_ID end )      
AND D.branch_Id = (select case @Branch_ID when 0 then D.branch_Id else @Branch_ID end )   
and A.Division_ID = (select case @Division_Id when 0 then A.Division_ID else @Division_Id end)      
 and   
(@criteria_id = 0  
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and To_br.branch_name = @Filtered_Text)  
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and To_br.branch_name like @Filtered_Text + '%')  
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and To_br.branch_name like '%' + @Filtered_Text)  
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and To_br.branch_name like '%' + @Filtered_Text + '%')  
  
  
or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Vehicle_Type = @Filtered_Text)  
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Vehicle_Type like @Filtered_Text + '%')  
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Vehicle_Type like '%' + @Filtered_Text)  
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Vehicle_Type like '%' + @Filtered_Text + '%')  
  
or (@colid = 3 and @criteria_id = 1 and @datatype_id = 2 and total_actual_weight = @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 2 and @datatype_id = 2 and total_actual_weight >= @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 3 and @datatype_id = 2 and total_actual_weight <= @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 4 and @datatype_id = 2 and total_actual_weight > @Filtered_Text_int)  
or (@colid = 3 and @criteria_id = 5 and @datatype_id = 2 and total_actual_weight < @Filtered_Text_int)  

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 2 and Total_Truck_Hire_Payable = @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 2 and @datatype_id = 2 and Total_Truck_Hire_Payable >= @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 3 and @datatype_id = 2 and Total_Truck_Hire_Payable <= @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 4 and @datatype_id = 2 and Total_Truck_Hire_Payable > @Filtered_Text_int)  
or (@colid = 4 and @criteria_id = 5 and @datatype_id = 2 and Total_Truck_Hire_Payable < @Filtered_Text_int)  
  
or (@colid = 5 and @criteria_id = 1 and @datatype_id = 2 and Vehicle_Capacity = @Filtered_Text_int)  
or (@colid = 5 and @criteria_id = 2 and @datatype_id = 2 and Vehicle_Capacity >= @Filtered_Text_int)  
or (@colid = 5 and @criteria_id = 3 and @datatype_id = 2 and Vehicle_Capacity <= @Filtered_Text_int)  
or (@colid = 5 and @criteria_id = 4 and @datatype_id = 2 and Vehicle_Capacity > @Filtered_Text_int)  
or (@colid = 5 and @criteria_id = 5 and @datatype_id = 2 and Vehicle_Capacity < @Filtered_Text_int)   
  )            
)  
  
SELECT * into #Veh_UT FROM Vehicle_Utiliztion  
  
select * From #Veh_UT  
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
  
Select   
sum([Actual Weight]) as [Actual Weight],  
sum([Truck Hire Charge]) as [Truck Hire Charge],  
sum([Vehicle Capacity]) as [Vehicle Capacity],  
cast(round((sum([Actual Weight])*100)/sum([Vehicle Capacity]),2) as float) as [Utilization]  
From #Veh_UT  
  
select count(*) From #Veh_UT  
End  
    
  
  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
  
          
              
--===========================================================================================            
-- <Created By> : Harshal Sapre            
-- <Created Date> : '2009-01-01'            
-- <Description> : Standerd V/s Charged Amount            
-- [dbo].[EC_RPT_Standard_VS_Charged_Amount] 0,0,0,'2009-04-20','2009-05-27',0,0,1,0,0,100           
--===========================================================================================            
CREATE PROCEDURE [dbo].[EC_RPT_Standard_VS_Charged_Amount]                
                
@Region_ID INT,                 
@Area_ID INT,                
@Branch_ID INT,                
@From_Date Datetime,                
@To_Date Datetime,                
@FromVar INT,                                
@ToVar INT,                
@check INT  ,          
@Division_Id int,      
@PageIndex int,       
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1             
AS                
BEGIN                 
SET NOCOUNT ON 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		      
        insert into @Dropdown_Search values ('Delivery Branch','s,1')        
		insert into @Dropdown_Search values ('Total GC Amount','n,7')		
		insert into @Dropdown_Search values ('GC Date','d,8')
		select  *From @Dropdown_Search

		return
	end  
--------------------------------------Filter-----------------------------------------
               
    
IF @check = 0 -----EXECUTE WITH GIVEN RANGE OF STANDARD VARIANCE %              
BEGIN         
WITH Standard_VS_Charged_Amount AS      
(      
select       
  ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',      
  A.Gc_no_for_print as [gc_caption No],          
  dbo.dateonlyDisplay(A.GC_date) as [gc_caption Date],             
               
  BookingRegion.Region_Name as [Booking Region],             
  BookingArea.Area_Name as [Booking Area],               
  BookingBranch.branch_name as [Booking Branch],             
  BookingBranch.branch_code  as [Booking Branch Code],             
  DeliveryBranch.Branch_Name as [Delivery Branch],             
  DeliveryBranch.Branch_code as [Delivery Branch Code],                
  cast(round(ISNULL(A.Total_GC_Amount,0),0) as float) as [gc_caption Amt Charged],            
  cast(round(ISNULL(A.Charged_Weight,0),0) as float) as [Charged Weight],             
            
  cast(round(ISNULL(A.Freight_Amt,0),0) as float) as [Basic Freight],            
  cast(round(ISNULL(A.Std_Freight_Amt,0),0) as float) [Standard Freight],            
            
  (cast(round(ISNULL(A.Std_Freight_Amt,0),0) as float) -             
  cast(round(ISNULL(A.Freight_Amt,0),0) as float)) as [Basic Variance],             
            
  cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
   + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
   + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
   + ISNULL(A.Std_FOV,0)),0) as float) As [gc_caption Amt Standard],              
            
  cast(round(((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0) +             
   ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0) +             
   ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0) +             
   ISNULL(A.Std_FOV,0))-(ISNULL(A.Total_GC_Amount,0))),0) as float) As [Variance Amount],             
            
  abs(cast(round(((cast(round(((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0) +             
   ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0) +             
   ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0) +             
   ISNULL(A.Std_FOV,0))-(ISNULL(A.Total_GC_Amount,0))),0) as float) * 100)/                 
  CASE WHEN             
   (cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
    + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
    + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
    + ISNULL(A.Std_FOV,0)),0) as float))= 0 THEN 1               
  ELSE             
   cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
    + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
    + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
    + ISNULL(A.Std_FOV,0)),0) as float)           
  END ),2) as float)) as [Variance Percent]        
         
 FROM  EC_Opr_VTrans_GC A             
  Inner Join EC_Master_Branch BookingBranch ON A.from_branch_ID = BookingBranch.Branch_id             
  Inner Join EC_Master_Area BookingArea ON BookingArea.Area_ID = BookingBranch.Area_ID            
  Inner Join EC_Master_Region BookingRegion ON BookingRegion.Region_ID = BookingBranch.Region_ID             
  inner join EC_Master_Branch DeliveryBranch ON A.Delivery_Branch_ID = DeliveryBranch.Branch_ID             
            
 Where A.Freight_Amt > 0             
  and BookingBranch.Region_ID = (Select Case @Region_ID When 0 Then BookingBranch.Region_ID Else @Region_ID End)             
  and BookingBranch.Area_ID = (Select Case @Area_ID When 0 Then BookingBranch.Area_ID Else @Area_ID End )             
  and BookingBranch.Branch_ID = (Select Case @Branch_id When 0 Then BookingBranch.branch_id Else @Branch_id End)             
  and (A.GC_Date Between @From_Date And @To_Date)            
               
  AND ((            
  (cast(round(((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0) +             
   ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0) +             
   ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0) +             
   ISNULL(A.Std_FOV,0))-(ISNULL(A.Total_GC_Amount,0))),0) as float) * 100)/                 
  CASE WHEN             
   (cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
    + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
    + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
    + ISNULL(A.Std_FOV,0)),0) as float))= 0 THEN 1               
  ELSE             
   cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
    + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
    + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
    + ISNULL(A.Std_FOV,0)),0) as float)             
  END) between @FromVar and @ToVar)          
             
  and A.Booking_Type_id=(select case @Division_Id when 0 then A.Booking_Type_id else @Division_Id end)
and 
(@criteria_id = 0

or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and DeliveryBranch.Branch_name = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and DeliveryBranch.Branch_name like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and DeliveryBranch.Branch_name like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and DeliveryBranch.Branch_name like '%' + @Filtered_Text + '%')


or (@colid = 7 and @criteria_id = 1 and @datatype_id = 2 and A.Total_GC_Amount = @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 2 and A.Total_GC_Amount >= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 2 and A.Total_GC_Amount <= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 2 and A.Total_GC_Amount > @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 2 and A.Total_GC_Amount < @Filtered_Text_int)

or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and A.GC_date = @Filtered_Date)
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and A.GC_date >= @Filtered_Date)
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and A.GC_date <= @Filtered_Date)
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and A.GC_date > @Filtered_Date)
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and A.GC_date < @Filtered_Date)
)          
)      
      
-------------------------------STEP 2--------------------------------------------------------------      
SELECT * into #StdVSChgAmt FROM Standard_VS_Charged_Amount      
-------------------------------STEP 3--------------------------------------------------------------      
      
select * From #StdVSChgAmt      
 WHERE       
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)      
or      
(@PageSize = 0)      
      
--------------------------------STEP 4-------------------------------------------------------------      
      
select      
sum([Charged Weight]) as [Charged Weight],      
sum([Actual Weight]) as [Actual Weight],      
sum([Articles]) as [Articles],      
sum([Basic Freight]) as [Basic Freight],      
sum([FOV Charges]) as [FOV Charges],      
sum([ODA Charges]) as [ODA Charges],      
sum([Other Charges]) as [Other Charges],      
sum([Sub Freight]) as [Sub Freight],      
sum([STax Amt]) as [STax Amt],      
sum([Total Freight]) as [Total Freight],      
sum([Invoice Value]) as [Invoice Value],      
sum([Hamali Charge]) as [Hamali Charge],      
sum([DD Charge]) as [DD Charge],      
sum([Bilti Charges]) as [Bilti Charges]      
from #StdVSChgAmt      
      
--------------------------------STEP 5-------------------------------------------------------------      
select count(*) From #StdVSChgAmt      
---------------------------------------------------------------------------------------------      
END               
ELSE---------EXECUTE WITHOUT GIVEN RANGE OF STANDARD VARIANCE %              
BEGIN                
    
WITH Standard_VS_Charged_Amount1 AS      
(      
select       
  ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',      
  A.Gc_no_for_print as [gc_caption No],             
  dbo.dateonlyDisplay(A.GC_date) as [gc_caption Date],             
  BookingRegion.Region_Name as [Booking Region],             
  BookingArea.Area_Name as [Booking Area],               
  BookingBranch.branch_name as [Booking Branch],             
  BookingBranch.branch_code  as [Booking Branch Code],             
  DeliveryBranch.Branch_Name as [Delivery Branch],             
  DeliveryBranch.Branch_code as [Delivery Branch Code],                
  cast(round(ISNULL(A.Total_GC_Amount,0),0) as float) as [gc_caption Amt Charged],            
  cast(round(ISNULL(A.Charged_Weight,0),0) as float) as [Charged Weight],             
            
  cast(round(ISNULL(A.Freight_Amt,0),0) as float) as [Basic Freight],            
  cast(round(ISNULL(A.Std_Freight_Amt,0),0) as float) [Standard Freight],            
            
  (cast(round(ISNULL(A.Std_Freight_Amt,0),0) as float) -             
  cast(round(ISNULL(A.Freight_Amt,0),0) as float)) as [Basic Variance],             
            
  cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
   + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
   + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
   + ISNULL(A.Std_FOV,0)),0) as float) As [gc_caption Amt Standard],              
            
  cast(round(((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0) +             
   ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0) +             
   ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0) +             
   ISNULL(A.Std_FOV,0))-(ISNULL(A.Total_GC_Amount,0))),0) as float) As [Variance Amount],             
            
  abs(cast(round(((cast(round(((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0) +             
   ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0) +             
   ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0) +             
   ISNULL(A.Std_FOV,0))-(ISNULL(A.Total_GC_Amount,0))),0) as float) * 100)/                 
  CASE WHEN             
   (cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
    + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
    + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
    + ISNULL(A.Std_FOV,0)),0) as float))= 0 THEN 1               
  ELSE             
   cast(round((ISNULL(A.Std_Freight_Amt,0) + ISNULL(A.Std_Local_Charge,0)             
    + ISNULL(A.Std_Hamali_Charge,0) + ISNULL(A.Std_DD_Charge,0)             
    + ISNULL(A.Std_Bilti_Charges,0) + ISNULL(A.Std_Service_Tax_Amount,0)             
    + ISNULL(A.Std_FOV,0)),0) as float)           
 END ),2) as float)) as [Variance Percent]        
                
 FROM  EC_Opr_VTrans_GC A             
  Inner Join EC_Master_Branch BookingBranch ON A.from_branch_ID = BookingBranch.Branch_id             
  Inner Join EC_Master_Area BookingArea ON BookingArea.Area_ID = BookingBranch.Area_ID            
  Inner Join EC_Master_Region BookingRegion ON BookingRegion.Region_ID = BookingBranch.Region_ID             
  inner join EC_Master_Branch DeliveryBranch ON A.Delivery_Branch_ID = DeliveryBranch.Branch_ID             
            
 Where A.Freight_Amt > 0             
  and BookingBranch.Region_ID = (Select Case @Region_ID When 0 Then BookingBranch.Region_ID Else @Region_ID End)             
  and BookingBranch.Area_ID = (Select Case @Area_ID When 0 Then BookingBranch.Area_ID Else @Area_ID End )             
  and BookingBranch.Branch_ID = (Select Case @Branch_id When 0 Then BookingBranch.branch_id Else @Branch_id End)             
  and (A.GC_Date Between @From_Date And @To_Date)           
  and A.Booking_Type_id=(select case @Division_Id when 0 then A.Booking_Type_id else @Division_Id end)           
               
)      
      
-------------------------------STEP 2--------------------------------------------------------------      
SELECT * into #StdVSChgAmt1 FROM Standard_VS_Charged_Amount1      
-------------------------------STEP 3--------------------------------------------------------------      
      
select * From #StdVSChgAmt1      
 WHERE       
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)      
or      
(@PageSize = 0)      
      
--------------------------------STEP 4-------------------------------------------------------------      
      
select      
sum([Charged Weight]) as [Charged Weight],      
sum([gc_caption Amt Charged]) as [gc_caption Amt Charged],      
sum([Basic Freight]) as [Basic Freight],      
sum([Standard Freight]) as [Standard Freight],      
sum([Basic Variance]) as [Basic Variance],      
sum([gc_caption Amt Standard]) as [gc_caption Amt Standard],      
sum([Variance Amount]) as [Variance Amount],      
sum([Variance Percent]) as [Variance Percent]  
from #StdVSChgAmt1     
      
--------------------------------STEP 5-------------------------------------------------------------      
select count(*) From #StdVSChgAmt1     
---------------------------------------------------------------------------------------------           
END     
END  
  
  
  
----703--------------------------------------------------------------------------------  
  
  
  
----1370--------------------------------------------------------------------------------  
  
  



GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



                
                
-- =============================================                      
-- Author:  <>                      
-- Create date: <1-Feb-2007>                      
-- Description: <EC_RPT_VTrans_Cr_Details_Docket_Wise Report>                  
-- EXEC [dbo].[EC_RPT_Booking_MR_Register] 1,0,0,'2008-07-01','2009-02-01' ,0                   
-- =============================================                      
CREATE PROCEDURE [dbo].[EC_RPT_Booking_MR_Register]                      
                    
 @Region_ID as int = 0 ,                    
 @Area_ID as int = 0 ,                    
 @Branch_ID as int = 0,                    
 @From_Date as datetime,                    
 @To_Date as datetime,                
 @Division_Id int,      
@PageIndex int,       
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1                       
                    
AS                      
BEGIN                      
                       
 SET NOCOUNT ON; 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		
		insert into @Dropdown_Search values ('Delivery Branch','s,2')
		insert into @Dropdown_Search values ('Consignee Name','s,3')       
		insert into @Dropdown_Search values ('Pay Mode','s,4')
       	insert into @Dropdown_Search values ('MR Branch','s,5')
        insert into @Dropdown_Search values ('Total Articles','n,6')
		insert into @Dropdown_Search values ('Total Freight','n,7')           
		insert into @Dropdown_Search values ('GC Date','d,8')
       	insert into @Dropdown_Search values ('MR Date','d,9')

		select  *From @Dropdown_Search

		return
	end ; 
--------------------------------------Filter-----------------------------------------                  
               
-------------------------------STEP 1--------------------------------------------------------------      
WITH BookingMRRegister AS      
(      
SELECT Distinct  ROW_NUMBER() OVER(ORDER BY EC_Opr_VTrans_GC.GC_date) AS 'Sr No.',      
   dbo.EC_Opr_VTrans_GC.GC_No_For_Print AS [gc_caption No],                   
   dbo.dateonlydisplay(dbo.EC_Opr_VTrans_GC.GC_Date) as [gc_caption Date],               
   Booking_branch.Branch_Name AS [BKG Branch],                 
   Delivery_branch.Branch_Name AS [DEL Branch],                  
   dbo.EC_Master_Payment_Type.Payment_Type AS [Payment Type],                    
   dbo.EC_Opr_VTrans_GC.Consignee_Name AS Consignee,                 
   dbo.EC_Opr_VTrans_GC.Consignor_Add1 AS Address1,                   
   dbo.EC_Opr_VTrans_GC.Consignor_Add2 AS Address2,              
   dbo.EC_Opr_VTrans_GC.Consignor_City AS City,                 
   dbo.EC_Opr_VTrans_GC.Consignor_Pin_Code AS Pincode,                   
   dbo.EC_Opr_VTrans_GC.Consignor_EMail AS Email,                 
   dbo.EC_Opr_VTrans_GC.Consignor_Mobile_No AS Mobile,                   
   dbo.EC_Opr_VTrans_GC.Consignor_Tel_No AS Phone,              
                 
   ISNULL(Cast(round(dbo.EC_Opr_VTrans_GC.Total_Articles, 0) as float),0) as [Total Articles],               
   ISNULL(Cast(round(dbo.EC_Opr_VTrans_GC.Charged_Weight, 0) as float),0) AS [Charged Wt],                   
   ISNULL(Cast(round(dbo.EC_Opr_VTrans_GC.Total_GC_Amount, 0) as float),0) AS [gc_caption Amount],                 
   ISNULL(Cast(round(dbo.EC_Opr_VTrans_GC.Oct_Amount, 0) as float),0) AS [Octroi Amount],                   
   ISNULL(Cast(round(dbo.EC_Opr_VTrans_GC.Service_Tax_Amount, 0) as float),0) AS [Service Tax],                 
              
   (SELECT TOP (1) dbo.dateonlydisplay(dbo.EC_Opr_VTrans_Actual_Unloading_Sheet.Actual_Unloading_Sheet_Date)                  
    FROM dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details               
    INNER JOIN dbo.EC_Opr_VTrans_Actual_Unloading_Sheet               
    ON dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details.Actual_Unloading_Sheet_Id = dbo.EC_Opr_VTrans_Actual_Unloading_Sheet.Actual_Unloading_Sheet_Id                  
    WHERE (dbo.EC_Opr_VTrans_Actual_Unloading_Sheet_Details.GC_Id = dbo.EC_Opr_VTrans_GC.GC_Id) AND                   
    (dbo.EC_Opr_VTrans_Actual_Unloading_Sheet.Un_Loading_Branch_Id = dbo.EC_Opr_VTrans_GC.Delivery_Branch_Id))                   
   AS [Arrival Date],                
              
   dbo.FA_Opr_MR.MR_No_For_Print AS [MR No],                   
   dbo.dateonlydisplay(dbo.FA_Opr_MR.MR_Date) AS [MR Date] ,                
   MR_Branch.Branch_Name AS [MR Branch] ,                
   ISNULL(Cast(round(dbo.FA_Opr_MR.Demurage_Days, 0) as float),0) AS [Demurrage Days],                   
   ISNULL(Cast(round(dbo.FA_Opr_MR.Demurage_Charges, 0) as float),0) AS [Demurrage Charges],                   
   ISNULL(Cast(round(dbo.FA_Opr_MR.Octroi_Form_Charges, 0) as float),0) AS [Octroi Form Charge],                   
   ISNULL(Cast(round(dbo.FA_Opr_MR.Octroi_Service_Charges, 0) as float),0) AS [Octroi Service Charge],                   
   ISNULL(Cast(round(dbo.FA_Opr_MR.Detention_Charges, 0) as float),0) AS [Detention Charges],              
              
   dbo.EC_Opr_VTrans_GC.GC_Id as GC_Id               
                 
              
FROM dbo.EC_Opr_VTrans_Door_Delivery_Confirmation_Details                 
INNER JOIN  EC_Opr_VTrans_Door_Delivery_Confirmation                 
ON dbo.EC_Opr_VTrans_Door_Delivery_Confirmation_Details.DDC_ID = dbo.EC_Opr_VTrans_Door_Delivery_Confirmation.DDC_ID                 
INNER JOIN  dbo.EC_Master_Branch AS DDC_Branch                 
ON dbo.EC_Opr_VTrans_Door_Delivery_Confirmation.DDC_Branch_ID = DDC_Branch.Branch_Id                 
INNER JOIN dbo.EC_Opr_VTrans_GC                 
ON dbo.EC_Opr_VTrans_Door_Delivery_Confirmation_Details.GC_Id = dbo.EC_Opr_VTrans_GC.GC_Id                  
INNER JOIN dbo.EC_Master_Branch Delivery_Branch                
ON dbo.EC_Opr_VTrans_GC.Delivery_Branch_Id = Delivery_Branch.Branch_Id                 
INNER JOIN dbo.EC_Master_Branch AS Booking_branch                
ON dbo.EC_Opr_VTrans_GC.From_Branch_ID = Booking_branch.Branch_Id                 
INNER JOIN dbo.EC_Master_Area booking_area                
ON Booking_branch.Area_Id = booking_area.Area_Id                 
INNER JOIN EC_Master_Payment_Type                
ON EC_Master_Payment_Type.Payment_Type_Id=EC_Opr_VTrans_GC.Payment_Type_Id                
INNER JOIN dbo.EC_Master_Status                
ON EC_Opr_VTrans_Door_Delivery_Confirmation_Details.Delivery_Status_ID=dbo.EC_Master_Status.Status_id                
LEFT OUTER JOIN FA_Opr_MR                
ON FA_Opr_MR.MR_ID=EC_Opr_VTrans_GC.Booking_MR_ID                
LEFT OUTER join EC_Master_Branch MR_Branch                
on FA_Opr_MR.MR_Branch_ID=MR_Branch.Branch_ID                
                
Where dbo.EC_Opr_VTrans_GC.Status_ID <> 80 and (EC_Master_Status.Status_Id <> 300)                     
AND  EC_Opr_VTrans_GC.IS_Cancelled = 0 and  dbo.EC_Opr_VTrans_Door_Delivery_Confirmation.Is_Cancelled=0                 
AND DDC_Branch.Region_ID = (select case @Region_ID when 0  then DDC_Branch.Region_ID else @Region_ID end)                
AND DDC_Branch.Area_ID = (select case @Area_ID when 0 then DDC_Branch.Area_ID else @Area_ID end )                
AND DDC_Branch.branch_Id = (select case @Branch_ID when 0 then DDC_Branch.branch_Id else @Branch_ID end )                
and (dbo.EC_Opr_VTrans_Door_Delivery_Confirmation.DDC_Date between @From_Date And @To_Date)              
and EC_Opr_VTrans_GC.Division_Id = (select case @Division_Id when 0 then EC_Opr_VTrans_GC.Division_Id else @Division_Id end) 
 and 
(@criteria_id = 0

or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Delivery_branch.Branch_Name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Delivery_branch.Branch_Name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Delivery_branch.Branch_Name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Delivery_branch.Branch_Name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and dbo.EC_Opr_VTrans_GC.Consignee_Name  = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and EC_Opr_VTrans_GC.Consignee_Name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and EC_Opr_VTrans_GC.Consignee_Name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and EC_Opr_VTrans_GC.Consignee_Name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and dbo.EC_Master_Payment_Type.Payment_Type = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and dbo.EC_Master_Payment_Type.Payment_Type like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and dbo.EC_Master_Payment_Type.Payment_Type like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and dbo.EC_Master_Payment_Type.Payment_Type like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and MR_Branch.Branch_Name = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and MR_Branch.Branch_Name like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and MR_Branch.Branch_Name like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and MR_Branch.Branch_Name like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_Articles = @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_Articles >= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_Articles <= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_Articles > @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_Articles < @Filtered_Text_int)

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_GC_Amount = @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_GC_Amount >= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_GC_Amount <= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 2 and dbo.EC_Opr_VTrans_GC.Total_GC_Amount > @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 2and dbo.EC_Opr_VTrans_GC.Total_GC_Amount < @Filtered_Text_int)

or (@colid = 8 and @criteria_id = 1 and @datatype_id = 4 and dbo.EC_Opr_VTrans_GC.GC_date = @Filtered_Date)
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 4 and dbo.EC_Opr_VTrans_GC.GC_date >= @Filtered_Date)
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 4 and dbo.EC_Opr_VTrans_GC.GC_date <= @Filtered_Date)
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 4 and dbo.EC_Opr_VTrans_GC.GC_date > @Filtered_Date)
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 4 and dbo.EC_Opr_VTrans_GC.GC_date < @Filtered_Date)

or (@colid = 9 and @criteria_id = 1 and @datatype_id = 4 and dbo.FA_Opr_MR.MR_Date = @Filtered_Date)
or (@colid = 9 and @criteria_id = 2 and @datatype_id = 4 and dbo.FA_Opr_MR.MR_Date >= @Filtered_Date)
or (@colid = 9 and @criteria_id = 3 and @datatype_id = 4 and dbo.FA_Opr_MR.MR_Date <= @Filtered_Date)
or (@colid = 9 and @criteria_id = 4 and @datatype_id = 4 and dbo.FA_Opr_MR.MR_Date > @Filtered_Date)
or (@colid = 9 and @criteria_id = 5 and @datatype_id = 4 and dbo.FA_Opr_MR.MR_Date < @Filtered_Date)
)                
)    
         
-------------------------------STEP 2--------------------------------------------------------------      
SELECT * into #BkgMRregis FROM BookingMRRegister      
-------------------------------STEP 3--------------------------------------------------------------      
      
select * From #BkgMRregis      
 WHERE       
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)      
or      
(@PageSize = 0)      
      
--------------------------------STEP 4-------------------------------------------------------------      
      
select      
sum([Total Articles]) as Total_Articles,      
sum([Charged Wt]) as Total_Charged_Wt,      
sum([Demurrage Days]) as Total_Demurrage_Days,      
sum([Detention Charges]) as Total_Detention_Charges,      
sum([Demurrage Charges]) as Total_Demurrage_Charges,      
sum([gc_caption Amount]) as Total_Gc_Amount,      
sum([Octroi Amount]) as Total_Octroi_Amount,      
sum([Octroi Form Charge]) as Total_Octroi_Form_Charge,      
sum([Octroi Service Charge]) as Total_Octroi_Service_Charge,      
sum([Service Tax]) as Total_Service_Tax    
    
from #BkgMRregis      
      
--------------------------------STEP 5-------------------------------------------------------------      
select count(*) From #BkgMRregis      
---------------------------------------------------------------------------------------------             
END   
  
----664--------------------------------------------------------------------------------  
  
  
  
----1374--------------------------------------------------------------------------------  
  




GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




  
       
-- =============================================      
-- Author:  <Piyush Kumar>      
-- Create date: <03-Jan-2009>      
-- Description: <Description>      
-- EXEC [dbo].[EC_RPT_Booking_Stock_List_GRD]  0,0,0,'2009-04-17',0 ,0,0   
  -- =============================================      
CREATE proc [dbo].[EC_RPT_Booking_Stock_List_GRD]       
       
@Region_id as int,  
@Area_id as int,  
@Branch_id as int,  
@As_on_Date as datetime,    
@Division_ID as int,  
@PageIndex int,     
@PageSize int,

@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1       
     
As  
begin   
  
set nocount on 
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		
		insert into @Dropdown_Search values ('Delivery Branch','s,2')
		insert into @Dropdown_Search values ('Consignee Name','s,3')
		insert into @Dropdown_Search values ('Consignor Name','s,4')
        insert into @Dropdown_Search values ('Pay Mode','s,5')
		insert into @Dropdown_Search values ('Total GC Amount','n,6')
		insert into @Dropdown_Search values ('GC Date','d,7')
		select  *From @Dropdown_Search

		return
	end  
--------------------------------------Filter----------------------------------------- 
if @Branch_ID  > 0  
  BEGIN  
  Set @Region_ID = -1  
  set @Area_ID = -1  
  END  
else if  @Area_ID > 0  
  BEGIN  
  Set @Region_ID = -1  
  set @Branch_ID =  -1  
  END  
else if @Region_ID > 0  
  BEGIN  
  set @Area_ID = -1  
  set @Branch_ID = -1  
  END;     
  
-------------------------------STEP 1--------------------------------------------------------------    
WITH Booking_Stock_List AS    
(    
select  
 ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',  
dbo.DateOnlyDisplay(A.GC_date) As [gc_caption Date],        
 A.GC_no_for_print as [gc_caption No],      
       
 branch.branch_name as [Bkg Branch],   
 Delivery.Branch_name as [Dly Branch],  
 A.Consignee_Name as [Cnee Name] ,  
 A.Consignor_Name as [Cnr Name],   
 Payment.Payment_Type as [Pay Mode],  
   
 ISNULL(Cast(round(A.Charged_Weight, 0) as float),0) as [Charged Weight],   
 ISNULL(Cast(round(A.Total_Actual_Weight, 0) as float),0) as [Actual Weight],  
-- dbo.GC_Articles_For_Booking_Stock(dbo.GC_Status_For_Booking_Stock (A.GC_ID,A.From_branch_ID,@As_on_Date), b.Document_Id) as [Articles],    
Total_Articles as [Articles],    
 ISNULL(Cast(round(A.Freight_Amt, 0) as float),0) as [Basic Freight] ,    
 ISNULL(Cast(round(A.Total_GC_Amount, 0) as float),0) as [Total Freight],  
 ISNULL(Cast(round(A.Total_Invoice_Value, 0) as float),0) as [Invoice Value]     
  
  
  
From EC_Opr_VTrans_GC a  
      
--inner join dbo.EC_Opr_Vtrans_GC_Articles b  
--ON b.GC_ID = a.GC_ID  
  
inner join ec_master_payment_type Payment  
on Payment.payment_type_id = A.payment_type_id  
--INNER JOIN dbo.Ec_Master_Status c   
--ON c.Status_ID = b.Status_Id  
--inner join ec_master_branch d  
--on d.branch_id = b.current_branch_id  
inner join EC_Master_Service_Location frm_loc  
on frm_loc.Service_Location_ID=a.From_Location_ID   
inner join ec_master_branch branch      
on branch.branch_id = frm_loc.branch_id      
inner join ec_master_area Area      
on Area.area_id = branch.area_id      
inner join ec_master_region Region      
on Region.region_id = Area.region_id    
   
inner join ec_master_branch Delivery      
on Delivery.branch_id = a.Delivery_branch_id  
   
where a.is_cancelled=0    
and a.status_id <> 80     
and Is_Agency_Booking=0  
--and  (dbo.GC_Status_For_Booking_Stock(A.GC_ID,a.from_branch_id,@As_on_Date) in (0,5,20,30))  
-- AND A.Gc_no_for_print='00102104'  
and dbo.Is_GC_in_Booking_Stock(a.gc_id,a.from_branch_id,@As_on_Date)=1  
and(Branch.Branch_ID = @Branch_ID    
    OR Branch.Region_ID = (Select case @Region_ID when 0 then Branch.Region_ID else  @Region_ID end)      
 OR Branch.Area_ID =  @Area_ID)   
  
--and (b.document_Date <= @As_on_Date)    
and A.Division_ID=(select case @Division_ID when 0 then A.Division_ID else @Division_ID end)
and 
(@criteria_id = 0


or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Delivery.Branch_name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Delivery.Branch_name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and A.Consignee_Name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and A.Consignee_Name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and A.Consignor_Name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and A.Consignor_Name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and Payment.Payment_Type  = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and Payment.Payment_Type  like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and Payment.Payment_Type  like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and Payment.Payment_Type  like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 4 and A.Total_GC_Amount = @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 4 and A.Total_GC_Amount >= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 4 and A.Total_GC_Amount <= @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 4 and A.Total_GC_Amount > @Filtered_Text_int)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 4 and A.Total_GC_Amount < @Filtered_Text_int)

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 4 and A.GC_date = @Filtered_Date)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 4 and A.GC_date >= @Filtered_Date)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 4 and A.GC_date <= @Filtered_Date)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 4 and A.GC_date > @Filtered_Date)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 4 and A.GC_date < @Filtered_Date)
)       
)  
  
-----------------------------STEP 2--------------------------------------------------------------    
SELECT * into #BookingStock FROM Booking_Stock_List    
-----------------------------STEP 3--------------------------------------------------------------    
    
select * From #BookingStock    
 WHERE     
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)    
or    
(@PageSize = 0)    
    
--------------------------------STEP 4-------------------------------------------------------------    
select    
count([gc_caption No]) as [Total_GC],  
sum([Charged Weight]) as Total_Charged_Wt,    
sum([Actual Weight]) as Total_Actual_Wt,    
sum([Articles]) as Total_Articles,    
sum([Basic Freight]) as Total_Basic_Freight,    
sum([Total Freight]) as Total_Freight,    
sum([Invoice Value]) as Total_Invoice_Value  
from #BookingStock    
    
--------------------------------STEP 5-------------------------------------------------------  
select count(*) From #BookingStock    
---------------------------------------------------------------------------------------------  
End  
  
  
  
  
  
  
  
  
  
  





GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- Author: <Shiv kumar mishra>  
-- Create date: Oct  22 2008  5:13PM  
-- Description: <Menifest Readvalues>  
-- =============================================  
  
CREATE proc [dbo].[EC_Opr_Menifest_ReadValues]  
(  
 @Branch_Id int,
 @MenifestType_Id int, 
 @Division_Id  int,
 @Menifest_Id int,  
 @IsAccTransferReq bit,  
 @GetGCXML xml,  
 @Menifest_Date datetime,  
 @IsFrom_Edit bit  
)  
as  
BEGIN  
  
declare @Status_ID int; set @Status_ID = 0;  
  
IF @IsAccTransferReq = 0   
begin  
 set @Status_ID = 0;  
end  
else  
begin  
 set @Status_ID = 5;  
end      
  
DECLARE @idoc int  
EXEC sp_xml_preparedocument @idoc OUTPUT, @GetGCXML  

declare @gc_maxlength int
select @gc_maxlength = GC_No_Length from ec_master_Company_gc_parameter

declare @temp table(gc_no varchar(20))
insert into @temp 
select 
case charindex('-',item) when 0 then dbo.Get_No_To_Print(item,@gc_maxlength) else item end
from OPENXML(@idoc,'/parentroot/root',2)
WITH (item varchar(20))


IF(@Menifest_Id <= 0)  ---For ADD  
 begin  
  
  select 'false' as Att,Article.GC_ID,  
    Article.Article_Id,GC_No_For_Print,GC_Date,  
    From_Branch_ID as Booking_Branch_ID,gc.Payment_Type_Id,  
    Branch_Name as Booking_Branch_Name,  
    Service_Location_Name as Delivery_Location_Name,  
    Payment_Type,Booking_Type,Delivery_Type,'' as Packing_Type,
	 dbo.EC_Opr_Get_To_Pay_Amt(30,GC.GC_ID,0,@Branch_Id) as Sub_Total,  
    GC.Total_Articles as Booking_Articles,  
    GC.Total_Actual_Weight as Booking_Actual_Wt,  
    Articles as Balance_Articles,  
    Article_Actual_Weight as Balance_Actual_Wt,  
    Articles as Loaded_Articles,  
    Article_Actual_Weight as Loaded_Weight,  
    Article.Article_ID as Previous_Article_ID,  
    Article.Status_ID as Previous_Status_ID,  
    Article.Document_ID as Previous_Document_ID,  
    Article.Document_No_For_Print as Previous_Document_No_For_Print,  
    Article.Document_Date as Previous_Document_Date,  
    GC_No_For_Print as Item_No  
  
  From EC_Opr_Vtrans_GC_Articles Article  
    inner join EC_Opr_Vtrans_GC GC   
    on Article.GC_ID=GC.GC_ID  
    inner join EC_Master_Branch Branch   
    on GC.From_Branch_ID = Branch.Branch_Id  
    inner join EC_Master_Payment_Type Pay   
    on GC.Payment_Type_Id = Pay.Payment_Type_Id  
    inner join EC_Master_Booking_Type Booktype   
    on GC.Booking_Type_Id = Booktype.Booking_Type_Id  
    inner join EC_Master_Delivery_Type Deltype   
    on GC.Delivery_Type_Id = Deltype.Delivery_Type_Id  
    inner join EC_Master_Service_Location SerLoc   
    on GC.To_Location_ID = SerLoc.Service_Location_ID  
  
  where cast(dbo.DateOnly(Document_Date)as Datetime) <= cast(dbo.DateOnly(@Menifest_Date)as Datetime)  
    and Article.Current_Branch_Id=@Branch_Id  
    and GC.Is_Cancelled=0 
--	and GC.Division_Id = @Division_Id
	and Article.Is_Cancelled=0
    and GC.Delivery_Type_Id = (case @MenifestType_Id when 2 then  2 else GC.Delivery_Type_Id end)  
    and (Article.Status_ID = @Status_ID or Article.Status_ID = 60)
  
    and 
	(GC.Delivery_Branch_Id <> (case when @MenifestType_Id = 1 then  @Branch_Id end)
	or @MenifestType_Id = 2)

	and GC.Is_Agency_Booking = case Article.Status_ID when 60 then GC.Is_Agency_Booking else 0 end
    and Article.Articles >0  
	AND GC_No_For_print in (select gc_no from @temp)
 end  
  
ELSE      ---For EDIT  
 begin  
  
  select (case @IsFrom_Edit when 1 then 'true' else 'false'end) as Att,  
    MemoDet.GC_ID,MemoDet.Article_Id,  
    GC_No_For_Print,GC_Date,  
    From_Branch_ID as Booking_Branch_ID,GC.Payment_Type_Id,  
    Branch_Name as Booking_Branch_Name,  
    Service_Location_Name as Delivery_Location_Name,  
    Payment_Type,Booking_Type,Delivery_Type,  
    '' as Packing_Type,dbo.EC_Opr_Get_To_Pay_Amt(30,GC.GC_ID,Memo.Memo_ID,@Branch_Id) as Sub_Total,  
    GC.Total_Articles as Booking_Articles,  
    GC.Total_Actual_Weight as Booking_Actual_Wt,  
    dbo.Ec_Opr_GetBalanceArticles(@Branch_Id,MemoDet.GC_ID,MemoDet.Loaded_Articles,article.status_id) as Balance_Articles,  
    dbo.Ec_Opr_GetBalanceActualWeight(@Branch_Id,MemoDet.GC_ID,MemoDet.Loaded_Actual_Wt,article.status_id) as Balance_Actual_Wt,  
    MemoDet.Loaded_Articles as Loaded_Articles,  
    MemoDet.Loaded_Actual_Wt as Loaded_Weight,  
    MemoDet.Previous_Article_ID as Previous_Article_ID,  
    MemoDet.Previous_Status_ID as Previous_Status_ID,  
    MemoDet.Previous_Document_ID as Previous_Document_ID,  
    MemoDet.Previous_Document_No_For_Print as Previous_Document_No_For_Print,  
    MemoDet.Previous_Document_Date as Previous_Document_Date,  
    GC_No_For_Print as Item_No  
  
  From EC_Opr_VTrans_Memo Memo  
    inner join EC_Opr_VTrans_Memo_Details MemoDet   
    on Memo.Memo_ID=MemoDet.Memo_ID  
    inner join EC_Opr_Vtrans_GC GC  
    on MemoDet.GC_ID=GC.GC_ID  
    inner join EC_Opr_Vtrans_GC_Articles Article  
    on Article.article_ID=MemoDet.article_ID  
    inner join EC_Master_Branch Branch   
    on GC.From_Branch_ID = Branch.Branch_Id  
    inner join EC_Master_Payment_Type Pay   
    on GC.Payment_Type_Id = Pay.Payment_Type_Id  
    inner join EC_Master_Booking_Type Booktype   
    on GC.Booking_Type_Id = Booktype.Booking_Type_Id  
    inner join EC_Master_Delivery_Type Deltype   
    on GC.Delivery_Type_Id = Deltype.Delivery_Type_Id  
    inner join EC_Master_Service_Location SerLoc   
    on GC.To_Location_ID = SerLoc.Service_Location_ID  
  
  where Memo.Memo_ID = @Menifest_Id  
--    and Memo_Branch_Id = @Branch_Id  
    and GC.Delivery_Type_Id = (case @MenifestType_Id when 2 then  @MenifestType_Id else GC.Delivery_Type_Id end)  
    and cast(dbo.DateOnly(MemoDet.Previous_Document_Date)as Datetime) <= cast(dbo.DateOnly(@Menifest_Date)as Datetime)  
  
  -------------Master Details --------------------  
  
  select Memo_No_For_Print,Memo_Date,Memo_Type_Id,To_Branch_Id,To_Name,  
    Vehicle_Category_ID,Vehicle_ID,Total_Loaded_Articles,Total_Loaded_Weight,  
    Total_Actual_Weight,Total_To_Pay_Collection,Total_No_Of_GC,  
    Booking_Actual_Wt,Booking_To_Pay_Collection,  
    Crossing_Actual_Wt,Crossing_To_Pay_Collection,  
    Schedule_Arrival_Delivery_Date,Schedule_Arrival_Delivery_Time,
	Memo.Remarks ,Memo_Loaded_By as 'Emp_Id',
	upper((First_Name + ' '+Middle_Name +' '+Last_Name))as 'Emp_Name'
  From	EC_Opr_VTrans_Memo Memo  
		left outer join ec_master_employee emp
	on Memo.Memo_Loaded_By = emp.Emp_ID

  where Memo_Id = @Menifest_Id  
--    and Memo_Branch_Id = @Branch_Id  
    and Is_Cancelled = 0  
 End  
  
  EXEC sp_xml_removedocument @idoc  

END  









GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
-- ===============================================================    
-- Author:  <Krutarth>    
-- Create date: <12-Sep-08>    
-- Description: <Bill Submission For VTrans>    
-- exec [dbo].[EC_RPT_LHC_Loaded_To_Other_Than_Branches_Excel] 0,0,0,'2008-04-01','2009-07-30',0,1000,0    
-- ================================================================    
    
 CREATE PROCEDURE [dbo].[EC_RPT_LHC_Loaded_To_Other_Than_Branches_Excel]    
 (    
  @Region_Id int,    
  @Area_id int,        
  @Branch_id int,    
  @From_Date datetime,    
  @To_Date datetime,   
@PageIndex int,   
@PageSize int,  
@Division_Id int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1      
 )    
 AS    
  Begin  
--------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('LHC To','s,1')		
		insert into @Dropdown_Search values ('Vehicle No','s,2')
        insert into @Dropdown_Search values ('Loaded Wt','n,3')
		insert into @Dropdown_Search values ('Total Hire Amount','n,4')
        insert into @Dropdown_Search values ('BTH Amount','n,5')		
		insert into @Dropdown_Search values ('LHC Date','d,6')
		select  *From @Dropdown_Search

		return
	end ;
--------------------------------------Filter-----------------------------------------  
With LHC_Loaded As  
(  
  
SELECT ROW_NUMBER() OVER(ORDER BY EC_OPR_VTRANS_LHPO.LHPO_No_For_Print) AS 'Sr No.',  
convert(varchar(25),LHPO_Date,106) as [lhpo_caption Date],LHPO_No_For_Print AS [lhpo_caption No],  
EC_MASTER_BRANCH.branch_Name as [LHC From],LHPO_To_Br.branch_name as [LHC To],   
Total_Actual_Weight as [Loaded Wt],EF_Master_Vehicle.Vehicle_No as [Vehicle No],  
Truck_Hire_Charge as [Total Hire Amount],To_Pay_Collection as [To Pay collection Amount],  
case when Is_LHC_Terminated_By_Debit_To_Ledger_ID=1 then Ledger_Name  
else '' end [Debited/Credited To],cast(round(Balance_Payble_Amount,0) as float) as [BTH Amount]  
FROM EC_OPR_VTRANS_LHPO  
inner join EF_Master_Vehicle  
on EF_Master_Vehicle.Vehicle_ID=EC_OPR_VTRANS_LHPO.Vehicle_ID  
inner join ec_master_service_location frm_loc_lhpo    
on frm_loc_lhpo.Service_Location_ID=EC_Opr_VTrans_LHPO.From_Location_ID    
        
inner join ec_master_service_location to_loc_lhpo    
on to_loc_lhpo.Service_Location_ID=EC_Opr_VTrans_LHPO.To_Location_ID  
  
INNER JOIN EC_MASTER_BRANCH  
ON EC_MASTER_BRANCH.BRANCH_ID=frm_loc_lhpo.Branch_ID  
INNER JOIN EC_MASTER_BRANCH LHPO_To_Br  
ON LHPO_To_Br.BRANCH_ID=to_loc_lhpo.Branch_ID  
INNER JOIN EC_MASTER_AREA  
ON EC_MASTER_AREA.AREA_ID=EC_MASTER_BRANCH.AREA_ID  
INNER JOIN EC_MASTER_REGION  
ON EC_MASTER_REGION.REGION_ID=EC_MASTER_BRANCH.REGION_ID  
LEFT OUTER JOIN FA_Master_Ledger  
ON EC_OPR_VTRANS_LHPO.Debited_To_Leder_ID_For_Terminated_LHC=FA_Master_Ledger.Ledger_Id  
Where EC_OPR_VTRANS_LHPO.Is_Cancelled=0  
and  EC_MASTER_BRANCH.branch_Id = (select case @Branch_ID when 0 then EC_MASTER_BRANCH.branch_Id else @Branch_ID end)    
  AND EC_MASTER_BRANCH.area_id = (select case @Area_ID when 0 then EC_MASTER_BRANCH.area_id else @Area_ID end )     
  AND EC_MASTER_BRANCH.Region_id = (select case @Region_ID when 0 then EC_MASTER_BRANCH.Region_id else @Region_ID end)     
and EC_OPR_VTRANS_LHPO.Division_ID = (select case @Division_Id when 0 then EC_OPR_VTRANS_LHPO.Division_ID else @Division_Id end)      
 AND (EC_OPR_VTRANS_LHPO.LHPO_Date between @From_Date AND @To_Date)
and 
(@criteria_id = 0
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and LHPO_To_Br.branch_name = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and LHPO_To_Br.branch_name like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and LHPO_To_Br.branch_name like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and LHPO_To_Br.branch_name like '%' + @Filtered_Text + '%')


or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and EF_Master_Vehicle.Vehicle_No = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and EF_Master_Vehicle.Vehicle_No like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and EF_Master_Vehicle.Vehicle_No like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and EF_Master_Vehicle.Vehicle_No like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 2 and Total_Actual_Weight = @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 2 and @datatype_id = 2 and Total_Actual_Weight >= @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 3 and @datatype_id = 2 and Total_Actual_Weight <= @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 4 and @datatype_id = 2 and Total_Actual_Weight > @Filtered_Text_int)
or (@colid = 3 and @criteria_id = 5 and @datatype_id = 2 and Total_Actual_Weight < @Filtered_Text_int)

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 2 and Truck_Hire_Charge = @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 2 and @datatype_id = 2 and Truck_Hire_Charge >= @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 3 and @datatype_id = 2 and Truck_Hire_Charge <= @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 4 and @datatype_id = 2 and Truck_Hire_Charge > @Filtered_Text_int)
or (@colid = 4 and @criteria_id = 5 and @datatype_id = 2 and Truck_Hire_Charge < @Filtered_Text_int)

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 2 and Balance_Payble_Amount = @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 2 and @datatype_id = 2 and Balance_Payble_Amount >= @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 3 and @datatype_id = 2 and Balance_Payble_Amount <= @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 4 and @datatype_id = 2 and Balance_Payble_Amount > @Filtered_Text_int)
or (@colid = 5 and @criteria_id = 5 and @datatype_id = 2 and Balance_Payble_Amount < @Filtered_Text_int)

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 4 and LHPO_Date = @Filtered_Date)
or (@colid = 6 and @criteria_id = 2 and @datatype_id = 4 and LHPO_Date >= @Filtered_Date)
or (@colid = 6 and @criteria_id = 3 and @datatype_id = 4 and LHPO_Date <= @Filtered_Date)
or (@colid = 6 and @criteria_id = 4 and @datatype_id = 4 and LHPO_Date > @Filtered_Date)
or (@colid = 6 and @criteria_id = 5 and @datatype_id = 4 and LHPO_Date < @Filtered_Date)
)  
  
)  
  
SELECT * into #LHC FROM LHC_Loaded  
  
select * From #LHC  
 WHERE   
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)  
or  
(@PageSize = 0)  
  
Select   
sum([Loaded Wt]) as [Loaded Wt],  
sum([Total Hire Amount]) as [Total Hire Amount],  
sum([To Pay collection Amount]) as [To Pay Collection Amount],  
sum([BTH Amount]) as [BTH Amount]  
From #LHC  
  
select count(*) From #LHC  
eND  


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
          
-- =============================================              
-- Author:  <Piyush Kumar>              
-- Create date: <02-Jan-2009>              
-- Description: <Description>              
-- EXEC [dbo].[EC_RPT_Branchwise_Booking_Register_GRD]  0,0,0,'1 apr 08','21 feb 09',0,0,0,0,0,9           
  -- =============================================              
CREATE proc [dbo].[EC_RPT_Branchwise_Booking_Register_GRD]              
               
@Region_id as int,              
@Area_id as int,              
@Branch_id as int,              
@From_Date as datetime,                
@To_date as datetime,              
@Booking_Type_Id as int,              
@Delivery_Type_Id as int,              
@Payment_Type_Id as int,              
@Division_ID as int,          
@PageIndex int,           
@PageSize int,
@calledfrom varchar(20) = '',
@colid int = 0,
@datatype_id int = 0,
@criteria_id int = 0,
@Filtered_Text varchar(50) = '',
@Filtered_Date datetime = '1 jan 1900',
@Filtered_Bit bit = 1                
As          
          
set nocount on              
   --------------------------------------Filter-----------------------------------------
declare @Filtered_Text_int int
if @criteria_id in (1,2,3,4,5) and @datatype_id = 2 set @Filtered_Text_int = cast(@Filtered_Text as int)

if @calledfrom = 'form_and_pageload'  
	begin
		declare @Dropdown_Search table (Datatext_Field varchar(100),Datavalue_Field varchar(100))  

		insert into @Dropdown_Search values ('From Location Name','s,1')		
		insert into @Dropdown_Search values ('Delivery Branch','s,2')
        insert into @Dropdown_Search values ('Consignee Name','s,3')
        insert into @Dropdown_Search values ('Consignor Name','s,4')
        insert into @Dropdown_Search values ('Booking Mode','s,4')
        insert into @Dropdown_Search values ('Pay Mode','s,6')
        insert into @Dropdown_Search values ('Charged Wt','n,7')
		insert into @Dropdown_Search values ('Actual Weight','n,8')
        insert into @Dropdown_Search values ('Articles','n,9')		
		insert into @Dropdown_Search values ('GC Date','d,10')
		select  *From @Dropdown_Search

		return
	end 
--------------------------------------Filter-----------------------------------------         
if @Branch_ID  > 0              
  BEGIN              
  Set @Region_ID = -1              
  set @Area_ID = -1              
  END              
else if  @Area_ID > 0              
  BEGIN              
  Set @Region_ID = -1              
  set @Branch_ID =  -1              
  END              
else if @Region_ID > 0              
  BEGIN              
  set @Area_ID = -1              
  set @Branch_ID = -1              
  END;          
          
-------------------------------STEP 1--------------------------------------------------------------          
WITH BranchWiseBookingRegister AS          
(          
select distinct          
ROW_NUMBER() OVER(ORDER BY A.GC_date) AS 'Sr No.',          
   Region.Region_Name as [Region Name],              
  Area.Area_Name as [Area Name],              
 A.GC_no_for_print as [gc_caption No],              
  dbo.DateOnlyDisplay(A.GC_date)As [gc_caption Date],              
  branch.branch_name as [Bkg Branch],               
  location.Service_location_name As [From Location Name],              
  Delivery .Branch_name as [Dly Branch],               
  A.Consignee_Name as [Cnee Name] ,              
  A.Consignee_Tel_No as [Cnee Tel No],              
  A.Consignor_Name as [Cnr Name],              
  A.Consignor_Tel_No as [Cnr Tel No],              
  BkgMode.Booking_Mode as [Booking Mode],               
  Payment.Payment_Type as [Pay Mode],              
  ISNULL(Cast(round(A.Charged_Weight, 0) as float),0) as [Charged Weight],                  
  ISNULL(Cast(round(A.Total_Actual_Weight, 0) as float),0) as [Actual Weight],                  
  A.Total_Articles as [Articles],              
  ISNULL(Cast(round(A.Freight_Amt, 0) as float),0) as [Basic Freight] ,      
ISNULL(Cast(round(A.Local_Charges, 0) as float),0) as [Local Charges] ,                  
  ISNULL(Cast(round(A.FOV, 0) as float),0) as [FOV Charges],              
  ISNULL(Cast(round(A.ODA_Charges, 0) as float),0) As [ODA Charges],              
  ISNULL(Cast(round(A.Other_Charges, 0) as float),0) AS [Other Charges],              
  ISNULL(Cast(round(A.Sub_Total, 0) as float),0) AS [Sub Freight],              
  ISNULL(Cast(round(A.Service_Tax_Amount, 0) as float),0) as [STax Amt],              
  ISNULL(Cast(round(A.Total_GC_Amount, 0) as float),0) as [Total Freight],              
  ISNULL(Cast(round(A.Total_Invoice_Value, 0) as float),0) as [Invoice Value],              
  ISNULL(Cast(round(A.hamali_charges, 0) as float),0) as [Hamali Charge],              
  ISNULL(Cast(round(A.DD_charges, 0) as float),0) as [DD Charge],              
  ISNULL(Cast(round(A.Bilti_Charges, 0) as float),0) as [Bilti Charges]              
From EC_Opr_VTrans_GC A              
inner join ec_master_branch branch              
on branch.branch_id=A.from_branch_id              
inner join ec_master_area Area              
on Area.area_id=branch.area_id              
inner join ec_master_region Region              
on Region.region_id=Area.region_id              
inner join  EC_Master_Service_Location Location              
on A.from_location_id=Location.service_location_id              
inner join ec_master_branch Delivery      
on Delivery.branch_id=A.Delivery_branch_id               
inner join ec_master_booking_mode BkgMode              
on A.booking_mode_id=BkgMode.booking_mode_id              
inner join ec_master_payment_type Payment              
on Payment.payment_type_id=A.payment_type_id              
          
where A.is_cancelled=0               
and A.status_id = 0              
and A.status_id <>80              
and Is_Agency_Booking=0              
and(Branch.Branch_ID = @Branch_ID                
OR Branch.Region_ID = (Select case @Region_ID when 0 then Branch.Region_ID else  @Region_ID end)              
OR Branch.Area_ID =  @Area_ID)           
and (A.GC_Date BETWEEN @From_Date and @To_Date)              
and A.Booking_Type_Id=(select case @Booking_Type_Id when 0 then A.Booking_Type_Id else @Booking_Type_Id end)               
and A.Delivery_Type_Id=(select case @Delivery_Type_Id when 0 then A.Delivery_Type_Id else @Delivery_Type_Id end)               
and A.payment_type_id=(select case @Payment_Type_Id when 0 then A.payment_type_id else @Payment_Type_Id end)               
and A.Division_ID=(select case @Division_ID when 0 then A.Division_ID else @Division_ID end)
and 
(@criteria_id = 0
or (@colid = 1 and @criteria_id = 1 and @datatype_id = 1 and location.Service_location_name = @Filtered_Text)
or (@colid = 1 and @criteria_id = 6 and @datatype_id = 1 and location.Service_location_name like @Filtered_Text + '%')
or (@colid = 1 and @criteria_id = 7 and @datatype_id = 1 and location.Service_location_name like '%' + @Filtered_Text)
or (@colid = 1 and @criteria_id = 8 and @datatype_id = 1 and location.Service_location_name like '%' + @Filtered_Text + '%')


or (@colid = 2 and @criteria_id = 1 and @datatype_id = 1 and Delivery.Branch_name = @Filtered_Text)
or (@colid = 2 and @criteria_id = 6 and @datatype_id = 1 and Delivery.Branch_name like @Filtered_Text + '%')
or (@colid = 2 and @criteria_id = 7 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text)
or (@colid = 2 and @criteria_id = 8 and @datatype_id = 1 and Delivery.Branch_name like '%' + @Filtered_Text + '%')

or (@colid = 3 and @criteria_id = 1 and @datatype_id = 1 and A.Consignee_Name = @Filtered_Text)
or (@colid = 3 and @criteria_id = 6 and @datatype_id = 1 and A.Consignee_Name like @Filtered_Text + '%')
or (@colid = 3 and @criteria_id = 7 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text)
or (@colid = 3 and @criteria_id = 8 and @datatype_id = 1 and A.Consignee_Name like '%' + @Filtered_Text + '%')

or (@colid = 4 and @criteria_id = 1 and @datatype_id = 1 and A.Consignor_Name = @Filtered_Text)
or (@colid = 4 and @criteria_id = 6 and @datatype_id = 1 and A.Consignor_Name like @Filtered_Text + '%')
or (@colid = 4 and @criteria_id = 7 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text)
or (@colid = 4 and @criteria_id = 8 and @datatype_id = 1 and A.Consignor_Name like '%' + @Filtered_Text + '%')

or (@colid = 5 and @criteria_id = 1 and @datatype_id = 1 and BkgMode.Booking_Mode = @Filtered_Text)
or (@colid = 5 and @criteria_id = 6 and @datatype_id = 1 and BkgMode.Booking_Mode like @Filtered_Text + '%')
or (@colid = 5 and @criteria_id = 7 and @datatype_id = 1 and BkgMode.Booking_Mode like '%' + @Filtered_Text)
or (@colid = 5 and @criteria_id = 8 and @datatype_id = 1 and BkgMode.Booking_Mode like '%' + @Filtered_Text + '%')

or (@colid = 6 and @criteria_id = 1 and @datatype_id = 1 and Payment.Payment_Type = @Filtered_Text)
or (@colid = 6 and @criteria_id = 6 and @datatype_id = 1 and Payment.Payment_Type like @Filtered_Text + '%')
or (@colid = 6 and @criteria_id = 7 and @datatype_id = 1 and Payment.Payment_Type like '%' + @Filtered_Text)
or (@colid = 6 and @criteria_id = 8 and @datatype_id = 1 and Payment.Payment_Type like '%' + @Filtered_Text + '%')

or (@colid = 7 and @criteria_id = 1 and @datatype_id = 2 and A.Charged_Weight = @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 2 and @datatype_id = 2 and A.Charged_Weight >= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 3 and @datatype_id = 2 and A.Charged_Weight <= @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 4 and @datatype_id = 2 and A.Charged_Weight > @Filtered_Text_int)
or (@colid = 7 and @criteria_id = 5 and @datatype_id = 2 and A.Charged_Weight < @Filtered_Text_int)

or (@colid = 8 and @criteria_id = 1 and @datatype_id = 2 and A.Total_Actual_Weight = @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 2 and @datatype_id = 2 and A.Total_Actual_Weight >= @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 3 and @datatype_id = 2 and A.Total_Actual_Weight <= @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 4 and @datatype_id = 2 and A.Total_Actual_Weight > @Filtered_Text_int)
or (@colid = 8 and @criteria_id = 5 and @datatype_id = 2 and A.Total_Actual_Weight < @Filtered_Text_int)

or (@colid = 9 and @criteria_id = 1 and @datatype_id = 2 and A.Total_Articles = @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 2 and @datatype_id = 2 and A.Total_Articles >= @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 3 and @datatype_id = 2 and A.Total_Articles <= @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 4 and @datatype_id = 2 and A.Total_Articles > @Filtered_Text_int)
or (@colid = 9 and @criteria_id = 5 and @datatype_id = 2 and A.Total_Articles < @Filtered_Text_int)

or (@colid = 10 and @criteria_id = 1 and @datatype_id = 4 and A.GC_date = @Filtered_Date)
or (@colid = 10 and @criteria_id = 2 and @datatype_id = 4 and A.GC_date >= @Filtered_Date)
or (@colid = 10 and @criteria_id = 3 and @datatype_id = 4 and A.GC_date <= @Filtered_Date)
or (@colid = 10 and @criteria_id = 4 and @datatype_id = 4 and A.GC_date > @Filtered_Date)
or (@colid = 10 and @criteria_id = 5 and @datatype_id = 4 and A.GC_date < @Filtered_Date)
)                 
)          
          
-------------------------------STEP 2--------------------------------------------------------------          
SELECT * into #bkgregis FROM BranchWiseBookingRegister          
-------------------------------STEP 3--------------------------------------------------------------          
          
select * From #bkgregis          
 WHERE           
([SR No.] BETWEEN (@PageIndex * @PageSize + 1) AND (@PageIndex * @PageSize + @PageSize) and @PageSize <> 0)          
or          
(@PageSize = 0)          
          
--------------------------------STEP 4-------------------------------------------------------------          
          
select   
sum([Charged Weight]) as Total_Charged_Wt,          
sum([Actual Weight]) as Total_Actual_Wt,          
sum([Articles]) as Total_Articles,          
sum([Basic Freight]) as Total_Basic_Freight,          
sum([FOV Charges]) as Total_Fov_Charge,          
sum([ODA Charges]) as Total_ODA_Charge,          
sum([Other Charges]) as Total_Other_Charge,          
sum([Sub Freight]) as Total_Sub_Freight,          
sum([STax Amt]) as Total_Service_Tax,          
sum([Total Freight]) as Total_Freight,          
sum([Invoice Value]) as Total_Invoice_Value,          
sum([Hamali Charge]) as Total_Hamali_Charge,          
sum([DD Charge]) as Total_DD_Charge,          
sum([Bilti Charges]) as Total_Bilti_Charges,  
sum([Local Charges]) as Local_Charges  
from #bkgregis          
          
--------------------------------STEP 5-------------------------------------------------------        
select count(*) From #bkgregis          
---------------------------------------------------------------------------------------------

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
-- =============================================              
-- Author:  <Kanuga Vajiha>              
-- Create date: <29/12/2008>              
-- Description: <To Read Values of Company Details Booking Parameters>              
-- Exec Ec_Mst_CompanyBookingParameters_ReadValues
-- =============================================              
CREATE PROCEDURE [dbo].[Ec_Mst_CompanyBookingParameters_ReadValues]      
      
AS              
      
Begin      
select *,    
    (SELECT isnull(Short_Term_Bill_Ledger_Id,0) FROM ec_MAster_Company) as Ledger_Id,    
    (SELECT isnull(Ledger_Name,'') FROM FA_Master_Ledger    
  INNER JOIN ec_MAster_Company    
  ON FA_Master_Ledger.Ledger_Id = ec_MAster_Company.Short_Term_Bill_Ledger_Id) as Ledger_Name    
from FA_Master_GC_Accounting_Parameters    
  
Select IsNull(Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking,0) as 'IsDebitTodelivery',  
To_Pay_Recovery_Ledger_For_Booking_Branch_Id as 'PayforBookigBranchID',a.Ledger_Name as 'PayforBookig_LedgerName',  
To_Pay_Recovery_Ledger_For_Delivery_Branch_Id as 'PayforDeliveryBranchID',b.Ledger_Name as 'PayforDelivery_LedgerName',  
To_Pay_Recovery_Ledger_For_Crossing_Branch_Id as 'PayforCrossingBranchID',c.Ledger_Name as 'PayforCrossing_LedgerName',  
Delivery_Commision_Income_Id,d.Ledger_Name as 'Delivery_Commision_Income_LedgerName',  
Delivery_Commision_Expense_Ledger_Id,e.Ledger_Name as 'Delivery_Commision_Expense_Ledger_Name',  
LHPO_Other_Charges_Expense_Ledger_Id,f.Ledger_Name as 'LHPO_Other_Charges_Expense_Ledger_Name',  
LHPO_Other_Charges_Payble_Ledger_Id,g.Ledger_Name as 'LHPO_Other_Charges_Payble_Ledger_Name',  
Lorry_Payble_ATH_BTH_Ledger_Id,h.Ledger_Name as 'Lorry_Payble_ATH_BTH_Ledger_Name',
Upcountry_Cost_Ledger_Id,i.Ledger_Name as 'Upcountry_Cost_Ledger_Name'
from EC_Master_Company_Parameters  
Left Join FA_Master_Ledger as a  
On EC_Master_Company_Parameters.To_Pay_Recovery_Ledger_For_Booking_Branch_Id=a.Ledger_Id  
Left Join FA_Master_Ledger as b  
On EC_Master_Company_Parameters.To_Pay_Recovery_Ledger_For_Delivery_Branch_Id=b.Ledger_Id  
Left Join FA_Master_Ledger as c  
On EC_Master_Company_Parameters.To_Pay_Recovery_Ledger_For_Crossing_Branch_Id=c.Ledger_Id  
Left Join FA_Master_Ledger as d  
On EC_Master_Company_Parameters.Delivery_Commision_Income_Id=d.Ledger_Id  
Left Join FA_Master_Ledger as e  
On EC_Master_Company_Parameters.Delivery_Commision_Expense_Ledger_Id=e.Ledger_Id  
Left Join FA_Master_Ledger as f  
On EC_Master_Company_Parameters.LHPO_Other_Charges_Expense_Ledger_Id=f.Ledger_Id  
Left Join FA_Master_Ledger as g  
On EC_Master_Company_Parameters.LHPO_Other_Charges_Payble_Ledger_Id=g.Ledger_Id  
Left Join FA_Master_Ledger as h  
On EC_Master_Company_Parameters.Lorry_Payble_ATH_BTH_Ledger_Id=h.Ledger_Id   
Left Join FA_Master_Ledger as i
On EC_Master_Company_Parameters.Upcountry_Cost_Ledger_Id=i.Ledger_Id   

  
End    
    


GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  
  
      
      
-- =============================================      
-- Author:<Kanuga Vajiha>      
-- Create date: <10/10/2008>      
-- Description: <Company Details Save>      
-- =============================================      
CREATE Procedure [dbo].[EC_Mst_CompanyDetails_Save]      
(      
@CompanyId as int,      
@CompanyName as varchar(100),      
@MailingName as varchar(100),      
@AddressLine1 as varchar(100),      
@AddressLine2 as varchar(100),      
@CityId as int,      
@PinCode as nvarchar(10),      
@StdCode as nvarchar(10),      
@Phone1 as nvarchar(20),      
@Phone2 as nvarchar(20),      
@Fax as nvarchar(20),      
@EmailId as nvarchar(100),      
@UserId as int,      
@Designation as varchar(50),      
@Tax_Assessment_No as nvarchar(50),      
@Income_Tax_Circle as varchar(50),      
@Deductor_Type as varchar(50),      
@Employee_Id as int,      
@Allow_FBT_Category_Selection as bit,      
@Pan_No as nvarchar(50),      
@Assessee_Type_Id as int,      
@Is_Surcharge_Applicable as bit,      
@Assessee_Category_Id as bit,      
@IsActivateDivision as bit,      
@IsAccTansferRequired as bit,      
@IsColoaderBusiness as bit,      
@StdBasicFreightUnit as int,      
@StdBasicFreightRate as numeric(18,2),      
@IsBookOwnTruckHire as bit,      
@IsMarketTruckLedgerAccTruckWise as bit,      
@IsAttachedTruckLedgerAccTruckWise as bit,      
@IsManagedTruckLedgerAccTruckWise as bit,      
@IsTreatBookingIncomeAsAdvance as bit,      
@IsToBeBilledAccGCWise as bit,      
@IsBookingMoneyReceiptRequired as bit,      
@BookingDivision as int,      
@BookingParametersXml as xml,      
@TripHireParametersXml as xml,      
@ATHParametersXml as xml,      
@DeliveryParametersXml as xml,      
@LocalCollectionParametersXml as xml,      
@DoorDeliveryParametersXml as xml,      
@LHPONatureOfPayment as int,      
@IsMemoSeriesRequired as bit,      
@IsLHPOSeriesRequired as bit,      
@GCCaption as varchar(50),      
@LHPOCaption as Varchar(50),       
@IsAlsRequired as bit,      
@IsTasRequired as bit,      
@MinDiff as int,      
@HOLedgerId as int,      
@PFALedgerId as int,      
@MinDiffMemo as int,      
@IsPartLoadingRequired as bit,       
@IsGCNumberEditable as bit,      
@ClientCode as varchar(50),      
@IsContractRequiredForTBBGC as bit,      
@ShortTermBillLedgerID as int,     
@IsTreatAdvanceForOwnTruckAsExpense as bit,    
@TripExpenseLedgerId as int,    
@IsDebitTodelivery as bit,  
@PayforBookigBranchID as int,  
@PayforCrossingBranchID as int,  
@PayforDeliveryBranchID as int,  
@DeliveryCommisionIncomeID as int,  
@DeliveryCommisionExpenseID as int,  
@LHPOOtherChargesExpenseID as int,  
@LHPOOtherChargesPaybleID as int,  
@LorryPayble_ATH_BTH_ID as int,  
@UpcountryCostAC_ID as int,
@HOCashLedgerId as int,
@HOBankLedgerId as int, 
@Error_Code int output,       
@Error_Desc AS VARCHAR(4000) OUTPUT)      
      
as      
      
BEGIN TRAN      
BEGIN TRY      
      
BEGIN      
      
SET NOCOUNT ON;      
      
set @Error_Code = 0;      
set @Error_Desc = '';      
      
if @StdBasicFreightRate= -1      
set @StdBasicFreightRate=0.0      
    
if @IsTreatAdvanceForOwnTruckAsExpense=0    
set @TripExpenseLedgerId=0    
      
declare @StateId as int      
SELECT @StateId=EC_Master_State.State_Id       
FROM EC_Master_City INNER JOIN      
EC_Master_State ON      
EC_Master_City.State_Id = EC_Master_State.State_Id      
Where EC_Master_City.City_Id=@CityId      
      
      
declare @CountryId as int      
SELECT @CountryId=EC_Master_Country.Country_Id      
FROM EC_Master_City INNER JOIN      
EC_Master_Country ON      
EC_Master_City.Country_Id = EC_Master_Country.Country_Id      
Where EC_Master_City.City_Id=@CityId      
--------------------------------------------------------------------------------------------------      
      
Delete from EC_Master_Company      
Insert into EC_Master_Company      
(Company_Name,Mailing_Name,Address_Line_1,Address_Line_2,State_Id,      
Country_ID,City_ID,Pin_Code,Std_Code,Phone_1,Phone_2,Fax,email,      
TAN_No,Income_tax_Circle,Deductor_Type,Employee_ID,Designation,      
Allow_FBT_Category_Selection,PAN_No,Assessee_Type_Id,Is_Surcharge_Applicable,      
Assessee_Category_Id,HO_Ledger_Id ,PFA_Ledger_Id,Client_Code,Short_Term_Bill_Ledger_Id,
HO_Bank_Ledger_Id,HO_Cash_Ledger_Id)      
values      
(@CompanyName,@MailingName,@AddressLine1,@AddressLine2,      
@StateId,@CountryId,@CityId ,@PinCode,@StdCode ,@Phone1,      
@Phone2,@Fax ,@EmailId ,@Tax_Assessment_No,@Income_Tax_Circle,      
@Deductor_Type,@Employee_Id ,@Designation,@Allow_FBT_Category_Selection,      
@Pan_No ,@Assessee_Type_Id,@Is_Surcharge_Applicable ,@Assessee_Category_Id,      
@HOLedgerId,@PFALedgerId,@ClientCode,@ShortTermBillLedgerID,@HOBankLedgerId,@HOCashLedgerId)      
      
--------------------------------------------------------------------------------------------------      
--Delete from EC_Master_Company_Parameters      
--Insert Into EC_Master_Company_Parameters      
--(Is_Activate_Divisions,Is_Account_Transfer_Required,Is_Co_Loader_Business,      
--Standard_Basic_Freight_Unit_ID,Standard_Freight_Rate_Per,Is_Book_own_Truck_Hire,      
--Is_Market_Truck_Ledger_Account_Truck_Wise,Is_Attached_Truck_Ledger_Account_Truck_Wise,      
--Is_Managed_Truck_Ledger_Account_Truck_Wise,LHPO_Nature_Of_Payemnt_ID_For_TDS_Deduction,      
--Is_Memo_Series_Required,Is_LHPO_Series_Required,GC_Caption,LHPO_Caption,      
--Is_ALS_Required,Is_TAS_Required,Minutes_Diff_Between_TAS_And_AUS,      
--Minutes_Diff_Between_MEMO_And_TAS,Is_Part_Loading_Required,Is_GC_Number_Editable,      
--Is_Contract_Required_For_TBB_GC)      
--values      
--(@IsActivateDivision,@IsAccTansferRequired,@IsColoaderBusiness      
--,@StdBasicFreightUnit, @StdBasicFreightRate,@IsBookOwnTruckHire      
--,@IsMarketTruckLedgerAccTruckWise,@IsAttachedTruckLedgerAccTruckWise,      
--@IsManagedTruckLedgerAccTruckWise,@LHPONatureOfPayment,      
--@IsMemoSeriesRequired,@IsLHPOSeriesRequired,@GCCaption,@LHPOCaption       
--,@IsAlsRequired,@IsTasRequired,@MinDiff,      
--@MinDiffMemo,@IsPartLoadingRequired,@IsGCNumberEditable,      
--@IsContractRequiredForTBBGC)      
      
Update EC_Master_Company_Parameters set      
Is_Activate_Divisions = @IsActivateDivision,      
Is_Account_Transfer_Required = @IsAccTansferRequired,      
Is_Co_Loader_Business = @IsColoaderBusiness,      
Standard_Basic_Freight_Unit_ID = @StdBasicFreightUnit,      
Standard_Freight_Rate_Per = @StdBasicFreightRate,      
Is_Memo_Series_Required = @IsMemoSeriesRequired,      
Is_LHPO_Series_Required = @IsLHPOSeriesRequired,      
GC_Caption = @GCCaption,      
LHPO_Caption = @LHPOCaption,      
Is_Book_Own_Truck_Hire = @IsBookOwnTruckHire,      
Is_Market_Truck_Ledger_Account_Truck_Wise = @IsMarketTruckLedgerAccTruckWise,      
Is_Attached_Truck_Ledger_Account_Truck_Wise = @IsAttachedTruckLedgerAccTruckWise,      
Is_Managed_Truck_Ledger_Account_Truck_Wise = @IsManagedTruckLedgerAccTruckWise,      
LHPO_Nature_Of_Payemnt_ID_For_TDS_Deduction = @LHPONatureOfPayment,      
Is_ALS_Required = @IsAlsRequired,      
Is_TAS_Required = @IsTasRequired,      
Minutes_Diff_Between_TAS_And_AUS = @MinDiff,      
Minutes_Diff_Between_MEMO_And_TAS = @MinDiffMemo,      
Is_Part_Loading_Required = @IsPartLoadingRequired,      
Is_GC_Number_Editable = @IsGCNumberEditable,      
Is_Contract_Required_For_TBB_GC = @IsContractRequiredForTBBGC,    
Is_Treat_Advance_For_Own_Truck_As_Expense=@IsTreatAdvanceForOwnTruckAsExpense,    
Trip_Expense_Ledger_Id =@TripExpenseLedgerId,  
Is_Debit_To_Delivery_Branch_For_To_Pay_GC_Booking=@IsDebitTodelivery,     
To_Pay_Recovery_Ledger_For_Booking_Branch_Id=@PayforBookigBranchID,  
To_Pay_Recovery_Ledger_For_Delivery_Branch_Id=@PayforDeliveryBranchID,  
To_Pay_Recovery_Ledger_For_Crossing_Branch_Id=@PayforCrossingBranchID,  
Delivery_Commision_Income_Id = @DeliveryCommisionIncomeID,  
Delivery_Commision_Expense_Ledger_Id = @DeliveryCommisionExpenseID,  
LHPO_Other_Charges_Expense_Ledger_Id = @LHPOOtherChargesExpenseID,  
LHPO_Other_Charges_Payble_Ledger_Id = @LHPOOtherChargesPaybleID,  
Lorry_Payble_ATH_BTH_Ledger_Id = @LorryPayble_ATH_BTH_ID,  
Upcountry_Cost_Ledger_Id= @UpcountryCostAC_ID
  
  
  
--------------------------------------------------------------------------------------------------      
      
Delete from FA_Master_GC_Accounting_Parameters       
insert into FA_Master_GC_Accounting_Parameters      
(Division_ID,Is_Treat_Booking_Income_As_Advance_Income,Is_To_Be_Billed_Accounting_GC_Wise      
,Is_Bookking_Money_Receipt_Required)      
values      
(@BookingDivision,@IsTreatBookingIncomeAsAdvance,@IsToBeBilledAccGCWise      
,@IsBookingMoneyReceiptRequired )      
      
--------------------------------------------------------------------------------------------------      
--Execution of XML Irrespective of Add and Edit.      
--------------------------------------------------------------------------------------------------      
declare @idocBookingParameters int       
      
EXEC sp_xml_preparedocument @idocBookingParameters OUTPUT, @BookingParametersXml       
      
Delete from FA_Master_GC_Accounting_Parameters_Details      
      
insert into FA_Master_GC_Accounting_Parameters_Details      
(GC_Accounting_Parameters_ID,Division_ID,Booking_Type_ID,      
Payment_Type_ID,Advance_Booking_Income_Ledger_ID      
,Booking_Income_Ledger_ID,Service_Tax_Ledger_ID,Other_Charge_Ledger_Id)      
select      
1,division_id,booking_type_id,      
payment_type_id,advance_booking_income_ledger_id,      
booking_income_ledger_id,service_tax_ledger_id,otherchargeledger_id      
from       
OPENXML (@idocBookingParameters, '/newdataset/bookingparametersgrid',2)      
WITH      
(srno int,division_id int,booking_type_id int,      
payment_type_id int,advance_booking_income_ledger_id int,      
booking_income_ledger_id int,service_tax_ledger_id int,otherchargeledger_id int)       
      
EXEC sp_xml_removedocument @idocBookingParameters      
--------------------------------------------------------------------------------------------------      
      
declare @idocTripHire int      
EXEC sp_xml_preparedocument @idocTripHire OUTPUT, @TripHireParametersXml       
      
Delete From FA_Master_LHPO_Accounting_Parameters      
      
insert into FA_Master_LHPO_Accounting_Parameters      
(Division_ID,Booking_Type_ID      
,Truck_Hire_Expense_Ledger_ID      
,TDS_Ledger_ID,Loading_Charges_Ledger_ID)      
select      
division_id,booking_type_id,      
truck_hire_expense_ledger_id,      
tds_ledger_id,loading_charges_ledger_id      
from       
OPENXML (@idocTripHire, '/NewDataSet/TripHireParametersGrid',2)      
WITH      
(Division_ID int,Booking_Type_ID int,      
Truck_Hire_Expense_Ledger_ID int,TDS_Ledger_ID int,      
Loading_Charges_Ledger_ID int)      
      
      
EXEC sp_xml_removedocument @idocTripHire      
--------------------------------------------------------------------------------------------------      
      
declare @idocATH int      
EXEC sp_xml_preparedocument @idocATH OUTPUT, @ATHParametersXml       
      
Delete From FA_Master_ATH_Accounting_Parameters      
      
insert into FA_Master_ATH_Accounting_Parameters      
(Division_ID,Booking_Type_ID,Fuel_Expense_Ledger_ID)      
select      
division_id,booking_type_id,ledger_id      
from       
OPENXML (@idocATH, '/NewDataSet/ATHParametersGrid',2)      
WITH      
(Division_ID int,Booking_Type_ID int,Ledger_ID int)      
      
EXEC sp_xml_removedocument @idocATH      
--------------------------------------------------------------------------------------------------      
      
declare @idocDelivery int      
EXEC sp_xml_preparedocument @idocDelivery OUTPUT, @DeliveryParametersXml       
      
Delete From FA_Master_Delivery_Accounting_Parameters      
      
insert into FA_Master_Delivery_Accounting_Parameters      
(Division_ID,Booking_Type_ID,Delivery_Income_Ledger_ID      
,Service_Tax_Ledger_ID,Octroi_Receivable_Ledger_ID)      
select      
division_id,booking_type_id,delivery_income_ledger_id,      
service_tax_ledger_id,octroi_receivable_ledger_id      
from       
OPENXML (@idocDelivery, '/NewDataSet/CompanyDeliveryGrid',2)      
WITH      
(Division_ID int,Booking_Type_Id int,Delivery_Income_Ledger_ID int,      
Service_Tax_Ledger_ID int,Octroi_Receivable_Ledger_ID int)      
      
EXEC sp_xml_removedocument @idocDelivery      
--------------------------------------------------------------------------------------------------   
      
declare @idocLocalCollectionVoucher int      
EXEC sp_xml_preparedocument @idocLocalCollectionVoucher OUTPUT, @LocalCollectionParametersXml       
      
Delete From FA_Master_Local_Collection_Expense_Accounting_Parameters      
      
insert into FA_Master_Local_Collection_Expense_Accounting_Parameters      
(Division_ID,Booking_Type_ID,Local_Collection_Expense_Ledger_ID)      
select      
division_id,booking_type_id,ledger_id      
from       
OPENXML (@idocLocalCollectionVoucher, '/newdataset/localcollectionvouchergrid',2)      
WITH      
(division_id int,booking_type_id int,ledger_id int)       
      
EXEC sp_xml_removedocument @idocLocalCollectionVoucher      
--------------------------------------------------------------------------------------------------      
      
declare @idocDoorDelivery int      
EXEC sp_xml_preparedocument @idocDoorDelivery OUTPUT, @DoorDeliveryParametersXml       
      
Delete From FA_Master_Door_Delivery_Expense_Accounting_Parameters      
      
insert into FA_Master_Door_Delivery_Expense_Accounting_Parameters      
(Division_ID,Booking_Type_ID,Door_Delivery_Expense_Ledger_ID)      
select      
Division_ID,Booking_Type_ID,Ledger_ID      
from       
OPENXML (@idocDoorDelivery, '/NewDataSet/LocalCollectionVoucherDoorExpGrid',2)      
WITH      
(Division_ID int,Booking_Type_ID int,Ledger_ID int)      
      
EXEC sp_xml_removedocument @idocDoorDelivery      
--------------------------------------------------------------------------------------------------      
      
End      
    
COMMIT TRAN      
      
END TRY      
      
BEGIN CATCH      
ROLLBACK TRAN      
SELECT @ERROR_CODE=ERROR_NUMBER()      
SELECT @ERROR_DESC=CAST(ERROR_LINE() AS VARCHAR(4000)) + 'Ö' +      
CAST(ERROR_MESSAGE() as VARCHAR(4000))       
END CATCH      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      




exec raj_soft_updating
